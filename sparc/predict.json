[
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM AIRLINES",
                "question": "What are all the airlines?",
                "result": "Airline FROM airlines",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airlines? \n SELECT"
            },
            {
                "query": "SELECT * FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "question": "Of these, which is Jetblue Airways?",
                "result": "Airline FROM airlines WHERE Airline = 'Jetblue Airways'",
                "prompt": "### Of these, which is Jetblue Airways? \n SELECT"
            },
            {
                "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "question": "What is the country corresponding it?",
                "result": "Country FROM airlines WHERE Airline = 'Jetblue Airways'",
                "prompt": "### What is the country corresponding it? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT Abbreviation FROM AIRLINES",
                "question": "What are all the abbreviations?",
                "result": "Abbreviation FROM airlines",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the abbreviations? \n SELECT"
            },
            {
                "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "question": "What is the abbreviation for Jetblue Airways?",
                "result": "Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
                "prompt": "### What is the abbreviation for Jetblue Airways? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT Airline ,  Abbreviation FROM AIRLINES",
                "question": "List all airline names and their abbreviations.",
                "result": "Airline, Abbreviation FROM airlines;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations. \n SELECT"
            },
            {
                "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
                "question": "Of these, list only those in the USA.",
                "result": "Airline, Abbreviation FROM airlines WHERE Country = 'USA';",
                "prompt": "### Of these, list only those in the USA. \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM AIRPORTS WHERE city  =  \"Anthony\"",
                "question": "Find all information about the airport in the city Anthony.",
                "result": "* FROM airports WHERE City = 'Anthony'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all information about the airport in the city Anthony. \n SELECT"
            },
            {
                "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
                "question": "What is the airport code and airport name?",
                "result": "AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
                "prompt": "### What is the airport code and airport name? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM AIRLINES",
                "question": "What are all the airlines?",
                "result": "Airline FROM airlines",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airlines? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AIRLINES",
                "question": "How many are there?",
                "result": "COUNT(*) FROM airlines",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM AIRPORTS",
                "question": "What are all the airports?",
                "result": "AirportName, AirportCode\nFROM airports;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airports? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AIRPORTS",
                "question": "How many are there?",
                "result": "COUNT(*) \nFROM airports;",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS",
                "question": "What are all the flights?",
                "result": "Airline, FlightNo, SourceAirport, DestAirport\nFROM flights",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flights? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS",
                "question": "How many are there?",
                "result": "COUNT(*)\nFROM flights",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT Airline FROM AIRLINES",
                "question": "What are all the airline names?",
                "result": "Airline FROM airlines",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airline names? \n SELECT"
            },
            {
                "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
                "question": "Of this, which has the abbreviation 'UAL'?",
                "result": "Airline FROM airlines WHERE Abbreviation = 'UAL'",
                "prompt": "### Of this, which has the abbreviation 'UAL'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT airline FROM AIRLINES WHERE Country  =  \"USA\"",
                "question": "What are the names of the airlines in the USA?",
                "result": "Airline FROM airlines WHERE Country = 'USA';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the names of the airlines in the USA? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
                "question": "How many are there?",
                "result": "COUNT(*) FROM airlines WHERE Country = 'USA';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT City ,  Country FROM AIRPORTS",
                "question": "What are the city and country for all airports?",
                "result": "City, Country FROM airports;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the city and country for all airports? \n SELECT"
            },
            {
                "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
                "question": "Of these, what are the city and country for Alton airport?",
                "result": "City, Country FROM airports WHERE AirportCode='Alton';",
                "prompt": "### Of these, what are the city and country for Alton airport? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT AirportName FROM AIRPORTS",
                "question": "What are all the airport names?",
                "result": "AirportName\nFROM airports",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airport names? \n SELECT"
            },
            {
                "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
                "question": "Of these, which has code 'AKO'?",
                "result": "AirportName\nFROM airports\nWHERE AirportCode = 'AKO'",
                "prompt": "### Of these, which has code 'AKO'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT AirportName FROM AIRPORTS",
                "question": "What are all the airport names?",
                "result": "AirportName FROM airports",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airport names? \n SELECT"
            },
            {
                "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
                "question": "Which is in Aberdeen?",
                "result": "* FROM airports WHERE City='Aberdeen'",
                "prompt": "### Which is in Aberdeen? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
                "question": "What are all the flights departing from 'APG'?",
                "result": "Airline, FlightNo \nFROM flights \nWHERE SourceAirport = 'APG';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flights departing from 'APG'? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
                "question": "How many are there?",
                "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
                "question": "What flights land in ATO?",
                "result": "Airline, FlightNo \nFROM flights \nWHERE DestAirport = 'ATO'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What flights land in ATO? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
                "question": "How many are there?",
                "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "What are all the flights derparting from Aberdeen?",
                "result": "Airline, FlightNo, SourceAirport, DestAirport\nFROM flights\nWHERE SourceAirport = 'Aberdeen';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flights derparting from Aberdeen? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "How many are there?",
                "result": "COUNT(*) as DepartureCount\nFROM flights\nWHERE SourceAirport = 'Aberdeen';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "What are all the flights arriving in Aberdeen.",
                "result": "flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport\nFROM flights\nINNER JOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flights arriving in Aberdeen. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "How many are there?",
                "result": "COUNT(*)\nFROM flights\nINNER JOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "What are all the flights that leave from Aberdeen?",
                "result": "Airline, FlightNo\nFROM flights\nWHERE SourceAirport = 'Aberdeen'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flights that leave from Aberdeen? \n SELECT"
            },
            {
                "query": "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
                "question": "Of those, which land in Ashley?",
                "result": "Airline, FlightNo\nFROM flights\nWHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
                "prompt": "### Of those, which land in Ashley? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
                "question": "How many are there?",
                "result": "COUNT(*)\nFROM flights\nWHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
                "question": "What are all the flights on Jetblue Airways?",
                "result": "Airline, FlightNo, SourceAirport, DestAirport\nFROM flights\nWHERE Airline = 'Jetblue Airways';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flights on Jetblue Airways? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
                "question": "How many are there?",
                "result": "COUNT(*)\nFROM flights\nWHERE Airline = 'Jetblue Airways';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM AIRLINES WHERE Airline  =  \"United Airlines\"",
                "question": "What are the United Airlines flights?",
                "result": "Airline, FlightNo, SourceAirport, DestAirport \n FROM flights \n WHERE Airline = 'United Airlines';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the United Airlines flights? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AIRLINES WHERE Airline  =  \"United Airlines\"",
                "question": "How many are there?",
                "result": "COUNT(*) \n FROM flights \n WHERE Airline = 'United Airlines';",
                "prompt": "### How many are there? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
                "question": "How many land in ASY Airport?",
                "result": "COUNT(*) \n FROM flights \n WHERE DestAirport = 'ASY';",
                "prompt": "### How many land in ASY Airport? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM AIRLINES WHERE Airline  =  \"United Airlines\"",
                "question": "What are the United Airlines flights?",
                "result": "Airline, FlightNo, SourceAirport, DestAirport\nFROM flights\nWHERE Airline = 'United Airlines'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the United Airlines flights? \n SELECT"
            },
            {
                "query": "SELECT * FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
                "question": "Which ones leave from AHD?",
                "result": "Airline, FlightNo, DestAirport\nFROM flights\nWHERE SourceAirport = 'AHD'",
                "prompt": "### Which ones leave from AHD? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
                "question": "How many are there?",
                "result": "COUNT(*)\nFROM flights\nWHERE SourceAirport = 'AHD'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
                "question": "Which United Airlines flights fly into Aberdeen?",
                "result": "flights.Airline, flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.City = 'Aberdeen'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which United Airlines flights fly into Aberdeen? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
                "question": "How many are there?",
                "result": "COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.City = 'Aberdeen'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport",
                "question": "Name all cities that have destination airports.",
                "result": "DISTINCT City FROM airports INNER JOIN flights ON airports.AirportCode = flights.DestAirport;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Name all cities that have destination airports. \n SELECT"
            },
            {
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC",
                "question": "Order them by number of arriving flights.",
                "result": "City, COUNT(*) AS num_flights \n FROM airports \n INNER JOIN flights ON airports.AirportCode = flights.DestAirport \n GROUP BY City \n ORDER BY num_flights DESC;",
                "prompt": "### Order them by number of arriving flights. \n SELECT"
            },
            {
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one has the most?",
                "result": "City, COUNT(*) AS num_flights \n FROM airports \n INNER JOIN flights ON airports.AirportCode = flights.DestAirport \n GROUP BY City \n ORDER BY num_flights DESC \n LIMIT 1;",
                "prompt": "### Which one has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport",
                "question": "Name all cities that have source airports.",
                "result": "airports.City\nFROM airports\nINNER JOIN flights ON airports.AirportCode = flights.SourceAirport",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Name all cities that have source airports. \n SELECT"
            },
            {
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC",
                "question": "Order them by number of departing flights.",
                "result": "airports.City\nFROM airports\nINNER JOIN flights ON airports.AirportCode = flights.SourceAirport\nGROUP BY airports.City\nORDER BY COUNT(flights.SourceAirport) DESC;",
                "prompt": "### Order them by number of departing flights. \n SELECT"
            },
            {
                "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one has the most?",
                "result": "airports.City\nFROM airports\nINNER JOIN flights ON airports.AirportCode = flights.SourceAirport\nGROUP BY airports.City\nORDER BY COUNT(flights.SourceAirport) DESC\nLIMIT 1;",
                "prompt": "### Which one has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport",
                "question": "What are airport codes of any airport with a arriving flight?",
                "result": "airports.AirportCode \nFROM airports \nINNER JOIN flights \nON airports.AirportCode = flights.DestAirport;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airport codes of any airport with a arriving flight? \n SELECT"
            },
            {
                "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport",
                "question": "Also include codes of airports with departure flights.",
                "result": "AirportCode \nFROM (\n    SELECT airports.AirportCode \n    FROM airports \n    INNER JOIN flights \n    ON airports.AirportCode = flights.DestAirport\n    UNION \n    SELECT airports.AirportCode \n    FROM airports \n    INNER JOIN flights \n    ON airports.AirportCode = flights.SourceAirport\n) AS all_airports;",
                "prompt": "### Also include codes of airports with departure flights. \n SELECT"
            },
            {
                "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one has the highest number of flights?",
                "result": "AirportCode, COUNT(*) as NumFlights \nFROM (\n    SELECT airports.AirportCode \n    FROM airports \n    INNER JOIN flights \n    ON airports.AirportCode = flights.DestAirport\n    UNION \n    SELECT airports.AirportCode \n    FROM airports \n    INNER JOIN flights \n    ON airports.AirportCode = flights.SourceAirport\n) AS all_airports\nGROUP BY AirportCode\nORDER BY NumFlights DESC\nLIMIT 1;",
                "prompt": "### Which one has the highest number of flights? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport",
                "question": "What are airport codes of any airport with a arriving flight?",
                "result": "airports.AirportCode FROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airport codes of any airport with a arriving flight? \n SELECT"
            },
            {
                "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport",
                "question": "Also include codes of airports with departure flights.",
                "result": "airports.AirportCode FROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport\nUNION \nSELECT airports.AirportCode FROM airports\nJOIN flights ON airports.AirportCode = flights.SourceAirport;",
                "prompt": "### Also include codes of airports with departure flights. \n SELECT"
            },
            {
                "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
                "question": "Which one has the least number of flights?",
                "result": "airports.AirportCode, COUNT(*) as num_flights FROM airports\nLEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport\nGROUP BY airports.AirportCode\nORDER BY num_flights ASC\nLIMIT 1;",
                "prompt": "### Which one has the least number of flights? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT count(*) ,  T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline",
                "question": "Count the number of flights by airline.",
                "result": "airlines.Airline, COUNT(*) AS FlightCount\nFROM flights\nJOIN airlines ON flights.Airline = airlines.Abbreviation\nGROUP BY airlines.Airline;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights by airline. \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
                "question": "Which airline has the most?",
                "result": "airlines.Airline, COUNT(*) AS FlightCount\nFROM flights\nJOIN airlines ON flights.Airline = airlines.Abbreviation\nGROUP BY airlines.Airline\nORDER BY FlightCount DESC\nLIMIT 1;",
                "prompt": "### Which airline has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT Abbreviation ,  Country FROM AIRLINES",
                "question": "What are all the airline abbreviations and what countries are they in?",
                "result": "Abbreviation, Country\nFROM airlines",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airline abbreviations and what countries are they in? \n SELECT"
            },
            {
                "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*)",
                "question": "Order them by the number of flights that they have.",
                "result": "Abbreviation, Country\nFROM airlines\nORDER BY (SELECT COUNT(*) FROM flights WHERE airlines.Abbreviation = flights.Airline) DESC",
                "prompt": "### Order them by the number of flights that they have. \n SELECT"
            },
            {
                "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
                "question": "Which one has the fewest?",
                "result": "Abbreviation, Country\nFROM airlines\nORDER BY (SELECT COUNT(*) FROM flights WHERE airlines.Abbreviation = flights.Airline) ASC\nLIMIT 1",
                "prompt": "### Which one has the fewest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS WHERE SourceAirport  =  \"AHD\"",
                "question": "Which flights leave from AHD?",
                "result": "Airline, FlightNo \nFROM flights \nWHERE SourceAirport = 'AHD'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flights leave from AHD? \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
                "question": "What are their airlines?",
                "result": "Airline \nFROM flights \nWHERE SourceAirport = 'AHD'",
                "prompt": "### What are their airlines? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM FLIGHTS WHERE DestAirport  =  \"AHD\"",
                "question": "Which flights arrive in AHD?",
                "result": "Airline, FlightNo\nFROM flights\nWHERE DestAirport = 'AHD';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flights arrive in AHD? \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
                "question": "What are their airlines?",
                "result": "Airline\nFROM flights\nWHERE DestAirport = 'AHD';",
                "prompt": "### What are their airlines? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
                "question": "Which airlines have flights departing from APG?",
                "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airports.AirportCode = \"APG\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have flights departing from APG? \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
                "question": "Of those, which also have flights from CVO?",
                "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airports.AirportCode = \"APG\" \nAND airlines.Airline IN \n(SELECT airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airports.AirportCode = \"CVO\");",
                "prompt": "### Of those, which also have flights from CVO? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
                "question": "Which airlines have flights from CVO?",
                "result": "Airline \nFROM \nairlines \nWHERE \nuid IN \n(SELECT \nAirline \nFROM \nflights \nWHERE \nSourceAirport = 'CVO');",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have flights from CVO? \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
                "question": "Of these, which do not have flights from APG?",
                "result": "Airline \nFROM \nairlines \nWHERE \nuid IN \n(SELECT \nAirline \nFROM \nflights \nWHERE \nSourceAirport = 'CVO')\nAND \nuid NOT IN \n(SELECT \nAirline \nFROM \nflights \nWHERE \nSourceAirport = 'APG');",
                "prompt": "### Of these, which do not have flights from APG? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT DISTINCT Airline FROM AIRLINES",
                "question": "What are all the airlines?",
                "result": "Airline \nFROM airlines",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airlines? \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
                "question": "Which ones have more than 10 flights?",
                "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT Airline \n    FROM flights \n    GROUP BY Airline \n    HAVING COUNT(*) > 10 \n)",
                "prompt": "### Which ones have more than 10 flights? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT DISTINCT Airline FROM AIRLINES",
                "question": "What are all the airlines?",
                "result": "Airline FROM airlines;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the airlines? \n SELECT"
            },
            {
                "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
                "question": "Which ones have less than 200 flights?",
                "result": "Airline FROM airlines\nWHERE uid NOT IN (\n  SELECT airlines.uid FROM airlines\n  JOIN flights ON airlines.Abbreviation = flights.Airline\n  GROUP BY airlines.uid\n  HAVING COUNT(*) >= 200\n);",
                "prompt": "### Which ones have less than 200 flights? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT FlightNo FROM FLIGHTS",
                "question": "What are all the flight numbers?",
                "result": "FlightNo \nFROM flights",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flight numbers? \n SELECT"
            },
            {
                "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
                "question": "Which belong to United Airlines?",
                "result": "FlightNo \nFROM flights \nWHERE Airline = 'United Airlines'",
                "prompt": "### Which belong to United Airlines? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT FlightNo FROM FLIGHTS",
                "question": "What are all the flight numbers?",
                "result": "FlightNo FROM flights;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flight numbers? \n SELECT"
            },
            {
                "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
                "question": "Of these, which correspond to flights leaving from APG?",
                "result": "FlightNo FROM flights WHERE SourceAirport = 'APG';",
                "prompt": "### Of these, which correspond to flights leaving from APG? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT FlightNo FROM FLIGHTS",
                "question": "What are all the flight numbers?",
                "result": "FlightNo FROM flights;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flight numbers? \n SELECT"
            },
            {
                "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
                "question": "Also, which numbers are for flights that land in APG?",
                "result": "FlightNo FROM flights WHERE DestAirport = 'APG';",
                "prompt": "### Also, which numbers are for flights that land in APG? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT FlightNo FROM FLIGHTS",
                "question": "What are all the flight numbers?",
                "result": "FlightNo FROM flights",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flight numbers? \n SELECT"
            },
            {
                "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode",
                "question": "Of these, which are departure flights?",
                "result": "FlightNo FROM flights WHERE SourceAirport IS NOT NULL",
                "prompt": "### Of these, which are departure flights? \n SELECT"
            },
            {
                "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "Which leave from Aberdeen?",
                "result": "FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
                "prompt": "### Which leave from Aberdeen? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT FlightNo FROM FLIGHTS",
                "question": "What are all the flight numbers?",
                "result": "FlightNo FROM flights;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are all the flight numbers? \n SELECT"
            },
            {
                "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode",
                "question": "Of these, which are arrival flights?",
                "result": "FlightNo FROM flights WHERE DestAirport = [arrival airport code];",
                "prompt": "### Of these, which are arrival flights? \n SELECT"
            },
            {
                "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
                "question": "Which land in Aberdeen?",
                "result": "FlightNo FROM flights WHERE DestAirport = 'ABZ';",
                "prompt": "### Which land in Aberdeen? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\"",
                "question": "What flights land in Aberdeen?",
                "result": "Airline, FlightNo \nFROM flights \nWHERE DestAirport = 'Aberdeen';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What flights land in Aberdeen? \n SELECT"
            },
            {
                "query": "SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
                "question": "Also include flights that land in Abilene.",
                "result": "Airline, FlightNo \nFROM flights \nWHERE DestAirport IN ('Aberdeen', 'Abilene');",
                "prompt": "### Also include flights that land in Abilene. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
                "question": "How many are there?",
                "result": "COUNT(*) \nFROM flights \nWHERE DestAirport IN ('Aberdeen', 'Abilene');",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "flight_2",
        "interaction": [
            {
                "query": "SELECT SourceAirport FROM Flights",
                "question": "What are the source airports?",
                "result": "SourceAirport FROM flights;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the source airports? \n SELECT"
            },
            {
                "query": "SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights",
                "question": "Also include the destination airports.",
                "result": "SourceAirport, DestAirport FROM flights;",
                "prompt": "### Also include the destination airports. \n SELECT"
            },
            {
                "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
                "question": "Which airports are not included?",
                "result": "AirportCode, AirportName FROM airports \nWHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND \nAirportCode NOT IN (SELECT DestAirport FROM flights);",
                "prompt": "### Which airports are not included? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM pets",
                "question": "What information is there on pets?",
                "result": "*\nFROM Pets;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What information is there on pets? \n SELECT"
            },
            {
                "query": "SELECT * FROM pets WHERE weight  >  10",
                "question": "Which pets weigh more than 10?",
                "result": "*\nFROM Pets\nWHERE weight > 10;",
                "prompt": "### Which pets weigh more than 10? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM pets WHERE weight  >  10",
                "question": "How many are there?",
                "result": "COUNT(*)\nFROM Pets\nWHERE weight > 10;",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM pets ORDER BY pet_age",
                "question": "Order the pets by age",
                "result": "* FROM Pets ORDER BY pet_age ASC",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Order the pets by age \n SELECT"
            },
            {
                "query": "SELECT weight FROM pets ORDER BY pet_age",
                "question": "How much does each one weigh?",
                "result": "PetType, weight FROM Pets",
                "prompt": "### How much does each one weigh? \n SELECT"
            },
            {
                "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
                "question": "What about the first one?",
                "result": "weight FROM Pets LIMIT 1",
                "prompt": "### What about the first one? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT petType FROM pets",
                "question": "What are the different types of pets?",
                "result": "PetType \nFROM Pets",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the different types of pets? \n SELECT"
            },
            {
                "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
                "question": "For each of those types, what is the maximum weight?",
                "result": "PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType",
                "prompt": "### For each of those types, what is the maximum weight? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
                "question": "Which pets are owned by students older than 20?",
                "result": "Pets.PetType, Pets.pet_age, Pets.weight \nFROM Pets \nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which pets are owned by students older than 20? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
                "question": "How many are there?",
                "result": "Please provide the SQL query or specify the table(s) and columns you want to count.",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student WHERE sex  =  'F'",
                "question": "Who are the female students?",
                "result": "LName, Fname \nFROM Student \nWHERE Sex='Female'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Who are the female students? \n SELECT"
            },
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.sex  =  'F'",
                "question": "Of those, who has a pet?",
                "result": "Student.LName, Student.Fname \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nWHERE Student.Sex='Female'",
                "prompt": "### Of those, who has a pet? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
                "question": "How many of those have dogs?",
                "result": "COUNT(*) \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex='Female' AND Pets.PetType='Dog'",
                "prompt": "### How many of those have dogs? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT pettype FROM pets",
                "question": "What are the different pet types?",
                "result": "PetType \nFROM Pets",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the different pet types? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT pettype) FROM pets",
                "question": "How many exist?",
                "result": "COUNT(DISTINCT PetType) \nFROM Pets",
                "prompt": "### How many exist? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT T1.Fname FROM student AS T1",
                "question": "what is the first name of every student?",
                "result": "Fname FROM Student",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### what is the first name of every student? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "question": "Of those names, which ones correspond to somebody who has a cat?",
                "result": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat'",
                "prompt": "### Of those names, which ones correspond to somebody who has a cat? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
                "question": "Also, combine those names with those who have a dog.",
                "result": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog'",
                "prompt": "### Also, combine those names with those who have a dog. \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
                "question": "Which students have a dog as their type of pet?",
                "result": "Student.StuID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which students have a dog as their type of pet? \n SELECT"
            },
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
                "question": "Who also has a cat?",
                "result": "Student.StuID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' AND Student.StuID IN (\n  SELECT Student.StuID \n  FROM Student \n  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n  JOIN Pets ON Has_Pet.PetID = Pets.PetID \n  WHERE Pets.PetType = 'cat'\n)",
                "prompt": "### Who also has a cat? \n SELECT"
            },
            {
                "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
                "question": "What are their first names?",
                "result": "Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' AND Student.StuID IN (\n  SELECT Student.StuID \n  FROM Student \n  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n  JOIN Pets ON Has_Pet.PetID = Pets.PetID \n  WHERE Pets.PetType = 'cat'\n)",
                "prompt": "### What are their first names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "question": "Which students have a cat as their pets?",
                "result": "Student.LName, Student.Fname\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which students have a cat as their pets? \n SELECT"
            },
            {
                "query": "SELECT major FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "question": "What are they majoring in?",
                "result": "Student.Major\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat';",
                "prompt": "### What are they majoring in? \n SELECT"
            },
            {
                "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "question": "Also, how old are they?",
                "result": "Student.LName, Student.Fname, Student.Age\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat';",
                "prompt": "### Also, how old are they? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT stuid FROM student",
                "question": "What is every student's id?",
                "result": "StuID FROM Student;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is every student's id? \n SELECT"
            },
            {
                "query": "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "question": "Of those ids, which correspond to those who own cats as pets?",
                "result": "StuID FROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat';",
                "prompt": "### Of those ids, which correspond to those who own cats as pets? \n SELECT"
            },
            {
                "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "question": "List all the other ids.",
                "result": "StuID FROM Student \nWHERE StuID NOT IN (\n    SELECT StuID FROM Student \n    INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n    INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat'\n);",
                "prompt": "### List all the other ids. \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
                "question": "Which students have dogs?",
                "result": "Student.StuID, Student.LName, Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which students have dogs? \n SELECT"
            },
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "question": "Of those, who does not own a cat?",
                "result": "Student.StuID, Student.LName, Student.Fname \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' AND Student.StuID NOT IN \n    (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID \n     WHERE Pets.PetType = 'cat')",
                "prompt": "### Of those, who does not own a cat? \n SELECT"
            },
            {
                "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "question": "What are their first names and ages?",
                "result": "Student.Fname, Student.Age \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' AND Student.StuID NOT IN \n    (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID \n     WHERE Pets.PetType = 'cat')",
                "prompt": "### What are their first names and ages? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM pets ORDER BY pet_age LIMIT 1",
                "question": "Who is the youngest pet?",
                "result": "Pets.PetType, MIN(Pets.pet_age) \nFROM Pets",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Who is the youngest pet? \n SELECT"
            },
            {
                "query": "SELECT pettype FROM pets ORDER BY pet_age LIMIT 1",
                "question": "What type are they?",
                "result": "Pets.PetType \nFROM Pets \nWHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)",
                "prompt": "### What type are they? \n SELECT"
            },
            {
                "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
                "question": "Also, how much do they weigh?",
                "result": "Pets.PetType, Pets.weight \nFROM Pets \nWHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)",
                "prompt": "### Also, how much do they weigh? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT petid FROM pets",
                "question": "What are ids of every pet?",
                "result": "PetID FROM Pets;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are ids of every pet? \n SELECT"
            },
            {
                "query": "SELECT petid FROM pets WHERE pet_age  >  1",
                "question": "For those, which refer to pets older than 1?",
                "result": "PetID FROM Pets WHERE pet_age > 1;",
                "prompt": "### For those, which refer to pets older than 1? \n SELECT"
            },
            {
                "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
                "question": "Also, how much do they weigh?",
                "result": "PetID, weight FROM Pets WHERE pet_age > 1;",
                "prompt": "### Also, how much do they weigh? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT pettype FROM pets",
                "question": "What are the different pet types?",
                "result": "PetType \nFROM Pets",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the different pet types? \n SELECT"
            },
            {
                "query": "SELECT max(pet_age) ,  pettype FROM pets GROUP BY pettype",
                "question": "For each of those, what is the maximum age?",
                "result": "PetType, MAX(pet_age) \nFROM Pets \nGROUP BY PetType",
                "prompt": "### For each of those, what is the maximum age? \n SELECT"
            },
            {
                "query": "SELECT avg(pet_age) ,  pettype FROM pets GROUP BY pettype",
                "question": "What about the average age?",
                "result": "PetType, AVG(pet_age) \nFROM Pets \nGROUP BY PetType",
                "prompt": "### What about the average age? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM pets",
                "question": "What information is there on pets?",
                "result": "PetID, PetType, pet_age, weight FROM Pets;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What information is there on pets? \n SELECT"
            },
            {
                "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
                "question": "For each pet type, what is the average weight?",
                "result": "PetType, AVG(weight) FROM Pets GROUP BY PetType;",
                "prompt": "### For each pet type, what is the average weight? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "question": "Which students have pets?",
                "result": "Student.StuID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which students have pets? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "question": "What are the different first names?",
                "result": "DISTINCT Fname \nFROM Student",
                "prompt": "### What are the different first names? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "question": "Also, what are their ages?",
                "result": "Fname, Age \nFROM Student",
                "prompt": "### Also, what are their ages? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "question": "Which students have pets?",
                "result": "Student.StuID, Student.LName, Student.FName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which students have pets? \n SELECT"
            },
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
                "question": "Of those, whose last name is smith?",
                "result": "Student.StuID, Student.LName, Student.FName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nWHERE Student.LName = 'smith'",
                "prompt": "### Of those, whose last name is smith? \n SELECT"
            },
            {
                "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
                "question": "What is their pet's id?",
                "result": "Has_Pet.PetID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nWHERE Student.LName = 'smith'",
                "prompt": "### What is their pet's id? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "question": "Which of the students have pets?",
                "result": "Student.StuID \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which of the students have pets? \n SELECT"
            },
            {
                "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
                "question": "How many pets does each of them have?",
                "result": "Student.StuID, COUNT(Has_Pet.PetID) AS num_pets \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID",
                "prompt": "### How many pets does each of them have? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT T1.fname ,  T1.sex FROM student AS T1",
                "question": "What is the first name and sex of each student?",
                "result": "Fname, Sex \nFROM Student;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and sex of each student? \n SELECT"
            },
            {
                "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
                "question": "Which of those belong to somebody who has more than one pet?",
                "result": "StuID \nFROM Has_Pet \nGROUP BY StuID \nHAVING COUNT(PetID) > 1;",
                "prompt": "### Which of those belong to somebody who has more than one pet? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT petid FROM pets WHERE pet_age  =  3 AND pettype  =  'cat'",
                "question": "What is the id of the three-year old cat?",
                "result": "Has_Pet.StuID \nFROM Has_Pet \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id of the three-year old cat? \n SELECT"
            },
            {
                "query": "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
                "question": "Who is the owner of that cat?",
                "result": "Student.FName, Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;",
                "prompt": "### Who is the owner of that cat? \n SELECT"
            },
            {
                "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
                "question": "What is their last name?",
                "result": "Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;",
                "prompt": "### What is their last name? \n SELECT"
            }
        ]
    },
    {
        "database_id": "pets_1",
        "interaction": [
            {
                "query": "SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
                "question": "Which students do not own any pets?",
                "result": "Student.StuID, Student.LName, Student.Fname\nFROM Student\nWHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Which students do not own any pets? \n SELECT"
            },
            {
                "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
                "question": "What is their average age?",
                "result": "AVG(Student.Age)\nFROM Student\nWHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet)",
                "prompt": "### What is their average age? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Name FROM country",
                "question": "What are the names of all the countries?",
                "result": "Name FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
                "question": "Give the names of the ones that became independent after 1950.",
                "result": "Name FROM country WHERE IndepYear > 1950;",
                "prompt": "### Give the names of the ones that became independent after 1950. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM country",
                "question": "How many countries are there?",
                "result": "COUNT(*) FROM country",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries are there? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
                "question": "Out of those, how many have a republic as their form of government?",
                "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'",
                "prompt": "### Out of those, how many have a republic as their form of government? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE Region  =  \"Caribbean\"",
                "question": "What are the countries in the Carribean region?",
                "result": "Name FROM country WHERE Region='Caribbean'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the countries in the Carribean region? \n SELECT"
            },
            {
                "query": "SELECT SurfaceArea FROM country WHERE Region  =  \"Caribbean\"",
                "question": "What is the surface area of each of those countries?",
                "result": "Name, SurfaceArea FROM country WHERE Region='Caribbean'",
                "prompt": "### What is the surface area of each of those countries? \n SELECT"
            },
            {
                "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
                "question": "Find the total surface area of the above.",
                "result": "SUM(SurfaceArea) FROM country WHERE Region='Caribbean'",
                "prompt": "### Find the total surface area of the above. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Continent FROM country",
                "question": "What continent does each country belong to?",
                "result": "country.Continent, country.Name \nFROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What continent does each country belong to? \n SELECT"
            },
            {
                "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
                "question": "Which one does Anguila belong to?",
                "result": "country.Continent \nFROM country \nWHERE country.Name = 'Anguila';",
                "prompt": "### Which one does Anguila belong to? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Region FROM country",
                "question": "What are the names of all the regions?",
                "result": "DISTINCT Region FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the regions? \n SELECT"
            },
            {
                "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
                "question": "Which of those is the city Kabul located in?",
                "result": "District FROM city WHERE Name='Kabul';",
                "prompt": "### Which of those is the city Kabul located in? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT LANGUAGE FROM countrylanguage",
                "question": "What are all the languages?",
                "result": "Language FROM countrylanguage;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are all the languages? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
                "question": "What are the languages spoken in Aruba?",
                "result": "Language FROM countrylanguage WHERE CountryCode = 'ABW';",
                "prompt": "### What are the languages spoken in Aruba? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
                "question": "Which one is the most popular?",
                "result": "Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;",
                "prompt": "### Which one is the most popular? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Population ,  LifeExpectancy FROM country",
                "question": "What are the population and life expectancies for all countries?",
                "result": "Population, LifeExpectancy FROM country",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies for all countries? \n SELECT"
            },
            {
                "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
                "question": "Of those, which ones are for the country Brazil?",
                "result": "Population, LifeExpectancy FROM country\nWHERE Name = 'Brazil'",
                "prompt": "### Of those, which ones are for the country Brazil? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Region FROM country WHERE Name  =  \"Angola\"",
                "question": "Which region is Angola in?",
                "result": "Region \nFROM country \nWHERE Name = 'Angola';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which region is Angola in? \n SELECT"
            },
            {
                "query": "SELECT Population FROM country WHERE Name  =  \"Angola\"",
                "question": "For that country, what is its population?",
                "result": "Population \nFROM country \nWHERE Name = 'Angola';",
                "prompt": "### For that country, what is its population? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT LifeExpectancy FROM country",
                "question": "What are the life expectancies for all the countries?",
                "result": "LifeExpectancy FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the life expectancies for all the countries? \n SELECT"
            },
            {
                "query": "SELECT LifeExpectancy FROM country WHERE Region  =  \"Central Africa\"",
                "question": "What are the life expectancies for the countries in the region of Central Africa?",
                "result": "LifeExpectancy FROM country WHERE Region = 'Central Africa';",
                "prompt": "### What are the life expectancies for the countries in the region of Central Africa? \n SELECT"
            },
            {
                "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
                "question": "What is the average of those?",
                "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';",
                "prompt": "### What is the average of those? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"",
                "question": "What are the names of the countries in Asia?",
                "result": "Name FROM country WHERE Continent = 'Asia';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the countries in Asia? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
                "question": "Which one has the shortest life expectancy?",
                "result": "Name FROM country WHERE LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country);",
                "prompt": "### Which one has the shortest life expectancy? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT sum(Population) FROM country WHERE Continent  =  \"Asia\"",
                "question": "How many people live in Asia?",
                "result": "SUM(Population) FROM city\nWHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Asia? \n SELECT"
            },
            {
                "query": "SELECT max(GNP) FROM country WHERE Continent  =  \"Asia\"",
                "question": "What about the largest GNP among them?",
                "result": "MAX(GNP) FROM country\nWHERE Continent = 'Asia'",
                "prompt": "### What about the largest GNP among them? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE Continent  =  \"Africa\"",
                "question": "Which countries are in Africa?",
                "result": "Name FROM country WHERE Continent = 'Africa';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which countries are in Africa? \n SELECT"
            },
            {
                "query": "SELECT * FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
                "question": "Which countries are also republics?",
                "result": "Name FROM country WHERE GovernmentForm LIKE '%Republic';",
                "prompt": "### Which countries are also republics? \n SELECT"
            },
            {
                "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
                "question": "What is the average of their life expectancies?",
                "result": "AVG(LifeExpectancy) FROM country WHERE GovernmentForm LIKE '%Republic';",
                "prompt": "### What is the average of their life expectancies? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
                "question": "What are the countries in the continents of Asia or Europe?",
                "result": "Code, Name, Continent \nFROM country \nWHERE Continent IN ('Asia', 'Europe')",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the countries in the continents of Asia or Europe? \n SELECT"
            },
            {
                "query": "SELECT SurfaceArea FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
                "question": "What is the surface area of each country?",
                "result": "Name, SurfaceArea \nFROM country",
                "prompt": "### What is the surface area of each country? \n SELECT"
            },
            {
                "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
                "question": "What is the total surface area summed up?",
                "result": "SUM(SurfaceArea) \nFROM country",
                "prompt": "### What is the total surface area summed up? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Population FROM city WHERE District  =  \"Gelderland\"",
                "question": "What are the populations of each city in the district of Gelderland?",
                "result": "Population FROM city WHERE District = 'Gelderland'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the populations of each city in the district of Gelderland? \n SELECT"
            },
            {
                "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
                "question": "What is the total population in that district?",
                "result": "SUM(Population) FROM city WHERE District = 'Gelderland'",
                "prompt": "### What is the total population in that district? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country",
                "question": "What are all the nations?",
                "result": "Name FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are all the nations? \n SELECT"
            },
            {
                "query": "SELECT * FROM country WHERE GovernmentForm  =  \"US Territory\"",
                "question": "Which of those have a government that is a US territory?",
                "result": "Name FROM country WHERE GovernmentForm LIKE '%US territory%';",
                "prompt": "### Which of those have a government that is a US territory? \n SELECT"
            },
            {
                "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
                "question": "For those, what is the average GNP and total population?",
                "result": "AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm LIKE '%US territory%';",
                "prompt": "### For those, what is the average GNP and total population? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT LANGUAGE FROM countrylanguage",
                "question": "What are all the distinct languages used around the world?",
                "result": "DISTINCT Language\nFROM countrylanguage",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are all the distinct languages used around the world? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
                "question": "How many are there?",
                "result": "COUNT(DISTINCT Language)\nFROM countrylanguage",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT GovernmentForm FROM country WHERE Continent  =  \"Africa\"",
                "question": "What are the distinct forms of government in the continent of Africa?",
                "result": "DISTINCT GovernmentForm\nFROM country\nWHERE Continent = 'Africa'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the distinct forms of government in the continent of Africa? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
                "question": "How many are there?",
                "result": "COUNT(DISTINCT GovernmentForm)\nFROM country\nWHERE Continent = 'Africa'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE Name  =  \"Aruba\"",
                "question": "What is the information about the country Aruba?",
                "result": "* FROM country WHERE Name='Aruba';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the information about the country Aruba? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
                "question": "What are the languages used in Aruba?",
                "result": "Language FROM countrylanguage WHERE CountryCode='ABW';",
                "prompt": "### What are the languages used in Aruba? \n SELECT"
            },
            {
                "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
                "question": "How many are there?",
                "result": "COUNT(Language) FROM countrylanguage WHERE CountryCode='ABW';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\"",
                "question": "What are the languages used in Afghanistan?",
                "result": "Language FROM countrylanguage WHERE CountryCode='AFG';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the languages used in Afghanistan? \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
                "question": "Of those, how many are the official languages?",
                "result": "COUNT(*) FROM countrylanguage WHERE CountryCode='AFG' AND IsOfficial='T';",
                "prompt": "### Of those, how many are the official languages? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT count(*) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name",
                "question": "How many languages are spoken in each country?",
                "result": "CountryCode, COUNT(Language) \nFROM countrylanguage \nGROUP BY CountryCode",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in each country? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "Which country speaks the most?",
                "result": "CountryCode, COUNT(Language) as LanguageCount \nFROM countrylanguage \nGROUP BY CountryCode \nORDER BY LanguageCount DESC \nLIMIT 1",
                "prompt": "### Which country speaks the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT COUNT(*) ,  T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent",
                "question": "How many languages are spoken on each continent?",
                "result": "country.Continent, COUNT(DISTINCT countrylanguage.Language) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nGROUP BY country.Continent",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken on each continent? \n SELECT"
            },
            {
                "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "Which one speaks the most languages?",
                "result": "country.Continent, COUNT(DISTINCT countrylanguage.Language) AS num_languages \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nGROUP BY country.Continent \nORDER BY num_languages DESC \nLIMIT 1",
                "prompt": "### Which one speaks the most languages? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\"",
                "question": "What are the countries that speak English?",
                "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the countries that speak English? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\"",
                "question": "Which of those also speak Dutch?",
                "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' \nAND country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')",
                "prompt": "### Which of those also speak Dutch? \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
                "question": "How many of them are there?",
                "result": "COUNT(*) \nFROM (\nSELECT country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' \nAND country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')\n) AS sub_query;",
                "prompt": "### How many of them are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\"",
                "question": "What are the names of countries which speak English?",
                "result": "Country.Name \nFROM \nCountry \nJOIN \nCountryLanguage \nON \nCountry.Code = CountryLanguage.CountryCode \nWHERE \nCountryLanguage.Language = 'English' \nAND \nCountryLanguage.IsOfficial = 'T'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of countries which speak English? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
                "question": "Of those countries, what are the names of the nations that speak French as well?",
                "result": "Country.Name \nFROM \nCountry \nJOIN \nCountryLanguage \nON \nCountry.Code = CountryLanguage.CountryCode \nWHERE \nCountryLanguage.Language = 'English' \nAND \nCountryLanguage.IsOfficial = 'T' \nAND \nCountry.Code IN \n(\n    SELECT \n    CountryCode \n    FROM \n    CountryLanguage \n    WHERE \n    Language = 'French' \n    AND \n    IsOfficial = 'T'\n)",
                "prompt": "### Of those countries, what are the names of the nations that speak French as well? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\"",
                "question": "What are the official languages of each country?",
                "result": "CountryCode, Language \nFROM \ncountrylanguage \nWHERE \nIsOfficial = 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the official languages of each country? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\"",
                "question": "Of those countries, give the names of the ones that have English as one of the official languages.",
                "result": "c.Name \nFROM \ncountrylanguage cl \nJOIN \ncountry c \nON cl.CountryCode = c.Code \nWHERE \ncl.IsOfficial = 1 \nAND \ncl.Language = 'English';",
                "prompt": "### Of those countries, give the names of the ones that have English as one of the official languages. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
                "question": "Of those, which also have French as another official language?",
                "result": "c.Name \nFROM \ncountrylanguage cl \nJOIN \ncountry c \nON cl.CountryCode = c.Code \nWHERE \ncl.IsOfficial = 1 \nAND \ncl.Language = 'English' \nAND \nc.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 1);",
                "prompt": "### Of those, which also have French as another official language? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
                "question": "In which countries is Chinese spoken?",
                "result": "Code, Name\nFROM country\nWHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### In which countries is Chinese spoken? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
                "question": "Which distinct continents are they in?",
                "result": "DISTINCT Continent\nFROM country\nWHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');",
                "prompt": "### Which distinct continents are they in? \n SELECT"
            },
            {
                "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
                "question": "How many of them are there?",
                "result": "COUNT(DISTINCT Continent)\nFROM country\nWHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');",
                "prompt": "### How many of them are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT Region FROM country",
                "question": "What are all the different regions?",
                "result": "DISTINCT Region FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are all the different regions? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
                "question": "Which of those speak Dutch or English?",
                "result": "CountryCode FROM countrylanguage WHERE Language='Dutch' OR Language='English';",
                "prompt": "### Which of those speak Dutch or English? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE IsOfficial  =  \"T\"",
                "question": "What are the official languages for each country?",
                "result": "CountryCode, Language \nFROM countrylanguage \nWHERE IsOfficial = 'T'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the official languages for each country? \n SELECT"
            },
            {
                "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
                "question": "Which of these countries have English or Dutch?",
                "result": "DISTINCT Name \nFROM country \nWHERE Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' OR Language = 'Dutch'\n)",
                "prompt": "### Which of these countries have English or Dutch? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\"",
                "question": "What are all the different languages used in the continent of Asia?",
                "result": "Language\nFROM\ncountrylanguage\nWHERE\nCountryCode IN (\nSELECT\nCode\nFROM\ncountry\nWHERE\nContinent = 'Asia'\n)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are all the different languages used in the continent of Asia? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
                "question": "Which one is used by the largest number of Asian countries?",
                "result": "Language, COUNT(*) AS NumCountries\nFROM\ncountrylanguage\nWHERE\nCountryCode IN (\nSELECT\nCode\nFROM\ncountry\nWHERE\nContinent = 'Asia'\n)\nGROUP BY\nLanguage\nORDER BY\nNumCountries DESC\nLIMIT 1",
                "prompt": "### Which one is used by the largest number of Asian countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE GovernmentForm  =  \"Republic\"",
                "question": "Which countries have republics as their form of government?",
                "result": "Code, Name\nFROM country\nWHERE GovernmentForm LIKE '%Republic%'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which countries have republics as their form of government? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
                "question": "Which language is spoken by only one of those countries?",
                "result": "Language\nFROM countrylanguage\nGROUP BY Language\nHAVING COUNT(*) = 1",
                "prompt": "### Which language is spoken by only one of those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\"",
                "question": "What are the names of all the cities that use English?",
                "result": "city.Name FROM city\nINNER JOIN countrylanguage ON city.CountryCode=countrylanguage.CountryCode\nWHERE countrylanguage.Language='English' AND countrylanguage.IsOfficial=1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the cities that use English? \n SELECT"
            },
            {
                "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
                "question": "Which of those has the largest population?",
                "result": "city.Name FROM city\nINNER JOIN countrylanguage ON city.CountryCode=countrylanguage.CountryCode\nWHERE countrylanguage.Language='English' AND countrylanguage.IsOfficial=1\nORDER BY city.Population DESC\nLIMIT 1;",
                "prompt": "### Which of those has the largest population? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\"",
                "question": "What are the names, population, and life expectancy for all the countries in Asia?",
                "result": "Name, Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names, population, and life expectancy for all the countries in Asia? \n SELECT"
            },
            {
                "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
                "question": "Of those, which belong to the country with the largest surface area?",
                "result": "Name, Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia' \nAND Code IN (SELECT Code FROM country ORDER BY SurfaceArea DESC LIMIT 1)",
                "prompt": "### Of those, which belong to the country with the largest surface area? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\"",
                "question": "What are the official languages of each country?",
                "result": "CountryCode, Language\nFROM countrylanguage\nWHERE IsOfficial = 'T'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the official languages of each country? \n SELECT"
            },
            {
                "query": "SELECT * FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
                "question": "Which countries do not have English as the official language?",
                "result": "Name\nFROM country\nWHERE Code NOT IN (\n  SELECT CountryCode\n  FROM countrylanguage\n  WHERE Language = 'English' AND IsOfficial = 'T'\n)",
                "prompt": "### Which countries do not have English as the official language? \n SELECT"
            },
            {
                "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
                "question": "In those countries, what is the average life expectancy?",
                "result": "AVG(LifeExpectancy)\nFROM country\nWHERE Code NOT IN (\n  SELECT CountryCode\n  FROM countrylanguage\n  WHERE Language = 'English' AND IsOfficial = 'T'\n)",
                "prompt": "### In those countries, what is the average life expectancy? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Name FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
                "question": "What are the names of each country that does not speak English?",
                "result": "DISTINCT Name FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English')",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of each country that does not speak English? \n SELECT"
            },
            {
                "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
                "question": "How many people live in those countries?",
                "result": "SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English')",
                "prompt": "### How many people live in those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\"",
                "question": "Which country has a head of state named Beatrix?",
                "result": "Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, GNPOld, LocalName, GovernmentForm, HeadOfState, Capital, Code2 \n FROM country \n WHERE HeadOfState = 'Beatrix'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which country has a head of state named Beatrix? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\"",
                "question": "What languages are spoken in that country?",
                "result": "Language, IsOfficial, Percentage \nFROM countrylanguage \nWHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')",
                "prompt": "### What languages are spoken in that country? \n SELECT"
            },
            {
                "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
                "question": "Which of those languages is the official one?",
                "result": "Language \nFROM countrylanguage \nWHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') \nAND IsOfficial = 'T'",
                "prompt": "### Which of those languages is the official one? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T1.Name FROM country AS t1",
                "question": "What are the names of all the countries?",
                "result": "Name FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS t1 WHERE  IndepYear  <  1930",
                "question": "What are the names of those countries that were founded after 1930?",
                "result": "Name FROM country WHERE IndepYear > 1930;",
                "prompt": "### What are the names of those countries that were founded after 1930? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
                "question": "For those countries, how many unique official languages are spoken in total?",
                "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode IN \n    (SELECT Code FROM country WHERE IndepYear > 1930) \nAND IsOfficial = 'T';",
                "prompt": "### For those countries, how many unique official languages are spoken in total? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE Continent  =  \"Europe\"",
                "question": "What are all the information about European countries?",
                "result": "* FROM country WHERE continent = 'Europe'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are all the information about European countries? \n SELECT"
            },
            {
                "query": "SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\"",
                "question": "Of those countries, What is the minimum surface area?",
                "result": "MIN(SurfaceArea) FROM country WHERE continent = 'Europe'",
                "prompt": "### Of those countries, What is the minimum surface area? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
                "question": "What are the countries that have a greater surface area than that?",
                "result": "Name FROM country WHERE SurfaceArea > (SELECT MIN(SurfaceArea) FROM country WHERE continent = 'Europe') AND continent = 'Europe'",
                "prompt": "### What are the countries that have a greater surface area than that? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT min(population) FROM country WHERE Continent  =  \"Asia\"",
                "question": "What is the maximum population of a country in Asia?",
                "result": "MAX(Population) FROM country WHERE Continent='Asia'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the maximum population of a country in Asia? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
                "question": "Which countries in Africa have a population smaller than that?",
                "result": "Name FROM country WHERE Continent='Africa' AND Population < (SELECT MAX(Population) FROM country WHERE Continent='Africa')",
                "prompt": "### Which countries in Africa have a population smaller than that? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT min(population) FROM country WHERE Continent  =  \"Africa\"",
                "question": "What is the smallest population of a country in Africa?",
                "result": "MIN(Population) FROM country WHERE Continent = 'Africa'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the smallest population of a country in Africa? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
                "question": "Which Asian countries have a greater population than that?",
                "result": "Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MIN(Population) FROM country WHERE Continent = 'Africa')",
                "prompt": "### Which Asian countries have a greater population than that? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT CountryCode FROM countrylanguage",
                "question": "What are the country codes of all the countries?",
                "result": "Code FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the country codes of all the countries? \n SELECT"
            },
            {
                "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
                "question": "Of those countries, give the country codes for those which do not speak English.",
                "result": "Code FROM country\nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
                "prompt": "### Of those countries, give the country codes for those which do not speak English. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT CountryCode FROM countrylanguage",
                "question": "What are the country codes of all the countries?",
                "result": "Code FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the country codes of all the countries? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE !=  \"English\"",
                "question": "Of those, which do not speak English?",
                "result": "Code FROM country \nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English');",
                "prompt": "### Of those, which do not speak English? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\"",
                "question": "What are the country codes for countries which are not republics?",
                "result": "Code \nFROM country \nWHERE GovernmentForm <> 'Republic'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the country codes for countries which are not republics? \n SELECT"
            },
            {
                "query": "SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
                "question": "Of those, which do not speak English?",
                "result": "Code \nFROM country \nWHERE GovernmentForm <> 'Republic' \nAND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English')",
                "prompt": "### Of those, which do not speak English? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English'",
                "question": "What are the names of the countries where English is the official language?",
                "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the countries where English is the official language? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE Continent  =  'Europe' AND Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English')",
                "question": "What are the names of the countries in Europe that are not one of those?",
                "result": "country.Name \nFROM country \nWHERE country.Continent = 'Europe' AND country.Name NOT IN ('France', 'Germany', 'Spain', 'Italy')",
                "prompt": "### What are the names of the countries in Europe that are not one of those? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
                "question": "What are the names of the cities in those countries?",
                "result": "city.Name \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Europe' AND country.Name NOT IN ('France', 'Germany', 'Spain', 'Italy')",
                "prompt": "### What are the names of the cities in those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
                "question": "What are the countries in Asia where Chinese is spoken?",
                "result": "Country.Name \nFROM Country \nINNER JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'Chinese' AND Country.Continent = 'Asia'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the countries in Asia where Chinese is spoken? \n SELECT"
            },
            {
                "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
                "question": "Of those, which have Chinese as the official language?",
                "result": "Country.Name \nFROM Country \nINNER JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'Chinese' AND CountryLanguage.IsOfficial = 'T' AND Country.Continent = 'Asia'",
                "prompt": "### Of those, which have Chinese as the official language? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
                "question": "What are the different cities in those countries?",
                "result": "City.Name \nFROM City \nINNER JOIN Country ON City.CountryCode = Country.Code \nINNER JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'Chinese' AND CountryLanguage.IsOfficial = 'T' AND Country.Continent = 'Asia'",
                "prompt": "### What are the different cities in those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country ORDER BY Population LIMIT 1",
                "question": "Which country has the smallest population?",
                "result": "Code, Name, Population \nFROM country \nORDER BY Population ASC \nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which country has the smallest population? \n SELECT"
            },
            {
                "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
                "question": "What is its name, independence year, and surface area?",
                "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Population = (SELECT MIN(Population) FROM country);",
                "prompt": "### What is its name, independence year, and surface area? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 1",
                "question": "What is the country with the largest surface area?",
                "result": "Name FROM country ORDER BY SurfaceArea DESC LIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the country with the largest surface area? \n SELECT"
            },
            {
                "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
                "question": "What is its population, name and leader?",
                "result": "population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
                "prompt": "### What is its population, name and leader? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Name FROM country",
                "question": "What are the names of the countries?",
                "result": "Name FROM country;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the countries? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
                "question": "Which of them speak at least three languages?",
                "result": "CountryCode FROM countrylanguage\nGROUP BY CountryCode\nHAVING COUNT(*) >= 3;",
                "prompt": "### Which of them speak at least three languages? \n SELECT"
            },
            {
                "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
                "question": "Also, how many languages are spoken in each of those countries?",
                "result": "CountryCode, COUNT(*) AS NumLanguages \nFROM countrylanguage\nGROUP BY CountryCode\nHAVING COUNT(*) >= 3;",
                "prompt": "### Also, how many languages are spoken in each of those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT avg(Population) FROM city",
                "question": "What is the average city population for each city?",
                "result": "AVG(Population) FROM city;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average city population for each city? \n SELECT"
            },
            {
                "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
                "question": "For each district, count how many cities have a population greater than the average.",
                "result": "District, COUNT(*) FROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;",
                "prompt": "### For each district, count how many cities have a population greater than the average. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "question": "The countries with which government form have an average life expectancy greater than age 72?",
                "result": "GovernmentForm \nFROM \n    country \nWHERE \n    LifeExpectancy > 72 \nGROUP BY \n    GovernmentForm",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### The countries with which government form have an average life expectancy greater than age 72? \n SELECT"
            },
            {
                "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
                "question": "For those, list the total population and government form name.",
                "result": "SUM(Population) AS total_population, GovernmentForm \nFROM \n    country \nWHERE \n    LifeExpectancy > 72 \nGROUP BY \n    GovernmentForm",
                "prompt": "### For those, list the total population and government form name. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
                "question": "Which continents have an average life expectancy less than age 72?",
                "result": "Continent FROM country WHERE LifeExpectancy < 72 GROUP BY Continent",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continents have an average life expectancy less than age 72? \n SELECT"
            },
            {
                "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
                "question": "Give their average life expectancy and total population.",
                "result": "Continent, AVG(LifeExpectancy), SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent",
                "prompt": "### Give their average life expectancy and total population. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 5",
                "question": "What are the countries with the top 5 largest surface areas?",
                "result": "Code, Name, SurfaceArea\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 5;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the countries with the top 5 largest surface areas? \n SELECT"
            },
            {
                "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
                "question": "What are the surface areas and names of those countries?",
                "result": "Name, SurfaceArea\nFROM country\nORDER BY SurfaceArea DESC;",
                "prompt": "### What are the surface areas and names of those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country ORDER BY Population DESC",
                "question": "Order the countries by descending population size.",
                "result": "* FROM country ORDER BY Population DESC;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Order the countries by descending population size. \n SELECT"
            },
            {
                "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
                "question": "Give the names of the 3 countries which have the most.",
                "result": "Name FROM country ORDER BY Population DESC LIMIT 3;",
                "prompt": "### Give the names of the 3 countries which have the most. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country ORDER BY Population",
                "question": "Order the countries by increasing population.",
                "result": "* FROM country ORDER BY Population ASC;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Order the countries by increasing population. \n SELECT"
            },
            {
                "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
                "question": "Give the names of the 3 countries with the lowest.",
                "result": "Name FROM country ORDER BY Population ASC LIMIT 3;",
                "prompt": "### Give the names of the 3 countries with the lowest. \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE continent  =  \"Asia\"",
                "question": "What are the countries in the continent of Asia?",
                "result": "Name FROM country WHERE Continent = 'Asia'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the countries in the continent of Asia? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
                "question": "How many are there?",
                "result": "COUNT(*) FROM country WHERE Continent = 'Asia'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE continent  =  \"Europe\"",
                "question": "Which countries are in the continent of Europe?",
                "result": "Name FROM country WHERE Continent = 'Europe'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which countries are in the continent of Europe? \n SELECT"
            },
            {
                "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
                "question": "Of those, what are the names of those that have a population of 80000?",
                "result": "Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
                "prompt": "### Of those, what are the names of those that have a population of 80000? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT * FROM country WHERE Continent  =  \"North America\"",
                "question": "What countries are in North America?",
                "result": "Code, Name \nFROM \n  country \nWHERE \n  Continent = 'North America'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What countries are in North America? \n SELECT"
            },
            {
                "query": "SELECT * FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
                "question": "Of those, which have surface area greater than 3000?",
                "result": "Code, Name \nFROM \n  country \nWHERE \n  Continent = 'North America' \n  AND SurfaceArea > 3000",
                "prompt": "### Of those, which have surface area greater than 3000? \n SELECT"
            },
            {
                "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
                "question": "What is the total population and average surface area of those countries?",
                "result": "SUM(Population) AS \"Total Population\", AVG(SurfaceArea) AS \"Average Surface Area\"\nFROM \n  country \nWHERE \n  Continent = 'North America' \n  AND SurfaceArea > 3000",
                "prompt": "### What is the total population and average surface area of those countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT name FROM city",
                "question": "What are the names of all the cities?",
                "result": "Name FROM city;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the cities? \n SELECT"
            },
            {
                "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000",
                "question": "Which of those have a population between 160000 and 900000?",
                "result": "Name FROM city \nWHERE Population BETWEEN 160000 AND 900000;",
                "prompt": "### Which of those have a population between 160000 and 900000? \n SELECT"
            }
        ]
    },
    {
        "database_id": "world_1",
        "interaction": [
            {
                "query": "SELECT LANGUAGE FROM countrylanguage",
                "question": "What are the different languages?",
                "result": "DISTINCT Language\nFROM countrylanguage",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different languages? \n SELECT"
            },
            {
                "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one is spoken in the most countries?",
                "result": "Language, COUNT(DISTINCT CountryCode) AS CountryCount\nFROM countrylanguage\nGROUP BY Language\nORDER BY CountryCount DESC\nLIMIT 1;",
                "prompt": "### Which one is spoken in the most countries? \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Directed_by FROM Cartoon WHERE Title = \"Day of the Dark Knight!\"",
                "question": "Tell me﻿ the director of the cartoon named \"Day of the Dark Knight!\".",
                "result": "Cartoon.Directed_by\nFROM Cartoon\nWHERE Cartoon.Title = \"Day of the Dark Knight!\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me﻿ the director of the cartoon named \"Day of the Dark Knight!\". \n SELECT"
            },
            {
                "query": "SELECT Channel FROM Cartoon WHERE Title = \"Day of the Dark Knight!\"",
                "question": "What is the channel of this cartoon?",
                "result": "Cartoon.Channel\nFROM Cartoon\nWHERE Cartoon.Title = \"Day of the Dark Knight!\";",
                "prompt": "### What is the channel of this cartoon? \n SELECT"
            },
            {
                "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\"",
                "question": "Give me the titles of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"?",
                "result": "Cartoon.Title\nFROM Cartoon\nWHERE Cartoon.Directed_by = \"Ben Jones\" OR Cartoon.Directed_by = \"Brandon Vietti\";",
                "prompt": "### Give me the titles of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT * FROM TV_Channel WHERE Country = \"Italy\"",
                "question": "Show me all the information about the Italian TV Channels.",
                "result": "* FROM TV_Channel WHERE Country = 'Italy'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Show me all the information about the Italian TV Channels. \n SELECT"
            },
            {
                "query": "SELECT * FROM TV_Channel WHERE Country = \"Poland\"",
                "question": "How about the Polish TV Channels?",
                "result": "* FROM TV_Channel WHERE Country = 'Poland'",
                "prompt": "### How about the Polish TV Channels? \n SELECT"
            },
            {
                "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1",
                "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
                "result": "Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_Channels DESC LIMIT 1",
                "prompt": "### Which country has the most of TV Channels? List the country and number of TV Channels it has. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Channel FROM Cartoon WHERE Title = \"The Eyes of Despero!\"",
                "question": "Tell me the TV Channel of the cartoon titled \"The Eyes of Despero!\".",
                "result": "TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Title = \"The Eyes of Despero!\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the TV Channel of the cartoon titled \"The Eyes of Despero!\". \n SELECT"
            },
            {
                "query": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = \"The Eyes of Despero!\")",
                "question": "How about this channel's series name?",
                "result": "TV_Channel.series_name \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Title = \"The Eyes of Despero!\";",
                "prompt": "### How about this channel's series name? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel",
                "question": "Tell me the number of different series names and contents in the TV Channel table.",
                "result": "COUNT(DISTINCT series_name), COUNT(DISTINCT Content) \nFROM TV_Channel;",
                "prompt": "### Tell me the number of different series names and contents in the TV Channel table. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Rock TV\"",
                "question": "Tell me the package option for the series named \"Rock TV\".",
                "result": "Package_Option FROM TV_Channel WHERE series_name = 'Rock TV'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the package option for the series named \"Rock TV\". \n SELECT"
            },
            {
                "query": "SELECT Language FROM TV_Channel WHERE series_name = \"Rock TV\"",
                "question": "tell me the language of this series.",
                "result": "Language FROM TV_Channel WHERE series_name = 'Rock TV'",
                "prompt": "### tell me the language of this series. \n SELECT"
            },
            {
                "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1",
                "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
                "result": "Language, COUNT(*) as count FROM TV_Channel GROUP BY Language ORDER BY count ASC LIMIT 1;",
                "prompt": "### List the language used least number of TV Channel. List language and number of TV Channel. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Written_by FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle!\"",
                "question": "Tell me the author of the cartoon \"The Rise of the Blue Beetle!\"",
                "result": "Cartoon.Written_by \nFROM Cartoon \nWHERE Cartoon.Title = \"The Rise of the Blue Beetle!\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the author of the cartoon \"The Rise of the Blue Beetle!\" \n SELECT"
            },
            {
                "query": "SELECT Directed_by FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle!\"",
                "question": "How about its director?",
                "result": "Cartoon.Directed_by \nFROM Cartoon \nWHERE Cartoon.Title = \"The Rise of the Blue Beetle!\";",
                "prompt": "### How about its director? \n SELECT"
            },
            {
                "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\"",
                "question": "What is its TV Channel?",
                "result": "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Title = \"The Rise of the Blue Beetle!\";",
                "prompt": "### What is its TV Channel? \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Country FROM TV_Channel WHERE series_name = \"Sky Radio\"",
                "question": "tell me the country of the TV Channel for the series named \"Sky Radio\".",
                "result": "TV_Channel.Country \nFROM TV_Channel \nWHERE TV_Channel.series_name = \"Sky Radio\"",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### tell me the country of the TV Channel for the series named \"Sky Radio\". \n SELECT"
            },
            {
                "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
                "question": "How about its content?",
                "result": "TV_Channel.Content \nFROM TV_Channel \nWHERE TV_Channel.series_name = \"Sky Radio\"",
                "prompt": "### How about its content? \n SELECT"
            },
            {
                "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
                "question": "I want to know the title of all Cartoons showed on TV Channel with series name \"Sky Radio\".",
                "result": "Cartoon.Title \nFROM Cartoon \nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = \"Sky Radio\"",
                "prompt": "### I want to know the title of all Cartoons showed on TV Channel with series name \"Sky Radio\". \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Rating FROM TV_series WHERE Episode = \"Double Down\"",
                "question": "Tell me the rating of the episode named \"Double Down\".",
                "result": "TV_series.Rating \nFROM \nTV_series \nWHERE \nTV_series.Episode = 'Double Down'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the rating of the episode named \"Double Down\". \n SELECT"
            },
            {
                "query": "SELECT Rating FROM TV_series WHERE Episode = \"Keepers\"",
                "question": "How about the rating of the episode named \"Keepers\".",
                "result": "TV_series.Rating \nFROM \nTV_series \nWHERE \nTV_series.Episode = 'Keepers'",
                "prompt": "### How about the rating of the episode named \"Keepers\". \n SELECT"
            },
            {
                "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
                "question": "Okay, I want to know the top 3 highest Rating TV series. List the TV series's Episode and Rating.",
                "result": "TV_series.Episode, TV_series.Rating \nFROM \nTV_series \nORDER BY \nTV_series.Rating DESC \nLIMIT 3;",
                "prompt": "### Okay, I want to know the top 3 highest Rating TV series. List the TV series's Episode and Rating. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"Emily\"",
                "question": "tell me the weekly rank of the episode named \"Emily\".",
                "result": "TV_series.Weekly_Rank\nFROM TV_series\nWHERE TV_series.Episode = \"Emily\"",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### tell me the weekly rank of the episode named \"Emily\". \n SELECT"
            },
            {
                "query": "SELECT Share FROM TV_series WHERE Episode = \"Emily\"",
                "question": "How about its share?",
                "result": "TV_series.Share\nFROM TV_series\nWHERE TV_series.Episode = \"Emily\"",
                "prompt": "### How about its share? \n SELECT"
            },
            {
                "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series",
                "question": "tell me the minimum and maximum share of TV series.",
                "result": "MIN(TV_series.Share), MAX(TV_series.Share)\nFROM TV_series;",
                "prompt": "### tell me the minimum and maximum share of TV series. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Rating FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
                "question": "Tell me the rating of the episode titled \"A Love of a Lifetime\".",
                "result": "Rating FROM TV_series WHERE Episode=\"A Love of a Lifetime\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the rating of the episode titled \"A Love of a Lifetime\". \n SELECT"
            },
            {
                "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
                "question": "How about its weekly rank?",
                "result": "Weekly_Rank FROM TV_series WHERE Episode=\"A Love of a Lifetime\";",
                "prompt": "### How about its weekly rank? \n SELECT"
            },
            {
                "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\"",
                "question": "And What is its TV Channel?",
                "result": "Channel FROM TV_series WHERE Episode=\"A Love of a Lifetime\";",
                "prompt": "### And What is its TV Channel? \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
                "question": "tell me the content of TV Channel with the series named \"Sky Radio\".",
                "result": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### tell me the content of TV Channel with the series named \"Sky Radio\". \n SELECT"
            },
            {
                "query": "SELECT Language FROM TV_Channel WHERE series_name = \"Sky Radio\"",
                "question": "How about its language?",
                "result": "Language FROM TV_Channel WHERE series_name = \"Sky Radio\";",
                "prompt": "### How about its language? \n SELECT"
            },
            {
                "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\"",
                "question": "Okay, now I want to know the Episode of all TV series showed on TV Channel with series name \"Sky Radio\".",
                "result": "TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\";",
                "prompt": "### Okay, now I want to know the Episode of all TV series showed on TV Channel with series name \"Sky Radio\". \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Original_air_date FROM Cartoon WHERE Title = \"Fall of the Blue Beetle!\"",
                "question": "Tell me the air date of the cartoon titled \"Fall of the Blue Beetle!\".",
                "result": "Air_Date FROM Cartoon WHERE Title='Fall of the Blue Beetle!';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the air date of the cartoon titled \"Fall of the Blue Beetle!\". \n SELECT"
            },
            {
                "query": "SELECT Production_code FROM Cartoon WHERE Title = \"Fall of the Blue Beetle!\"",
                "question": "What is its production code?",
                "result": "Production_code FROM Cartoon WHERE Title='Fall of the Blue Beetle!';",
                "prompt": "### What is its production code? \n SELECT"
            },
            {
                "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
                "question": "tell me the production code and channel of the most recently aired cartoon.",
                "result": "Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",
                "prompt": "### tell me the production code and channel of the most recently aired cartoon. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
                "question": "Tell me the cartoons directed by Ben Jone.",
                "result": "Title FROM Cartoon WHERE Directed_by='Ben Jone'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the cartoons directed by Ben Jone. \n SELECT"
            },
            {
                "query": "SELECT Title FROM Cartoon WHERE Written_by = \"Todd Casey\"",
                "question": "Tell me the cartoons written by Todd Casey.",
                "result": "Title FROM Cartoon WHERE Written_by='Todd Casey'",
                "prompt": "### Tell me the cartoons written by Todd Casey. \n SELECT"
            },
            {
                "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Todd Casey'",
                "question": "Which countries' tv channels are playing some cartoon written by Todd Casey?",
                "result": "DISTINCT Country FROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey'",
                "prompt": "### Which countries' tv channels are playing some cartoon written by Todd Casey? \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Steven Melching'",
                "question": "which countries' tv channels are playing some cartoon written by Steven Melching?",
                "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Steven Melching';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries' tv channels are playing some cartoon written by Steven Melching? \n SELECT"
            },
            {
                "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
                "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
                "result": "TV_Channel.Country \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL;",
                "prompt": "### which countries' tv channels are not playing any cartoon written by Todd Casey? \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Directed_by FROM Cartoon WHERE Title = \"Deep Cover for Batman!\"",
                "question": "Tell me the director of the cartoon titled \"Deep Cover for Batman!\".",
                "result": "Cartoon.Directed_by \nFROM Cartoon \nWHERE Cartoon.Title = 'Deep Cover for Batman!'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Tell me the director of the cartoon titled \"Deep Cover for Batman!\". \n SELECT"
            },
            {
                "query": "SELECT Production_code FROM Cartoon WHERE Title = \"Deep Cover for Batman!\"",
                "question": "I want to know this cartoon's production code.",
                "result": "Cartoon.Production_code \nFROM Cartoon \nWHERE Cartoon.Title = 'Deep Cover for Batman!'",
                "prompt": "### I want to know this cartoon's production code. \n SELECT"
            },
            {
                "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
                "question": "Tell me the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang.",
                "result": "TV_Channel.series_name, TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')",
                "prompt": "### Tell me the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Country FROM TV_Channel WHERE series_name = \"MTV Music\"",
                "question": "tell me the country of the TV channel with series named \"MTV Music\"",
                "result": "Country FROM TV_Channel WHERE series_name = 'MTV Music'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### tell me the country of the TV channel with series named \"MTV Music\" \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM TV_Channel WHERE Country = \"Italy\"",
                "question": "Tell me the number of Italian channels.",
                "result": "COUNT(*) FROM TV_Channel WHERE Language = 'Italian'",
                "prompt": "### Tell me the number of Italian channels. \n SELECT"
            },
            {
                "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
                "question": "find id of the tv channels that from the countries where have more than two tv channels.",
                "result": "TV_Channel.id FROM TV_Channel \nWHERE Country IN (\n    SELECT Country FROM TV_Channel \n    GROUP BY Country \n    HAVING COUNT(*) > 2\n)",
                "prompt": "### find id of the tv channels that from the countries where have more than two tv channels. \n SELECT"
            }
        ]
    },
    {
        "database_id": "tvshow",
        "interaction": [
            {
                "query": "SELECT Directed_by FROM Cartoon WHERE Title = \"Return of the Fearsome Fangs!\"",
                "question": "Who is the director of the cartoon titled \"Return of the Fearsome Fangs!\"?",
                "result": "Cartoon.Directed_by \nFROM Cartoon \nWHERE Cartoon.Title = \"Return of the Fearsome Fangs!\";",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Who is the director of the cartoon titled \"Return of the Fearsome Fangs!\"? \n SELECT"
            },
            {
                "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
                "question": "Tell me the cartoons directed by Ben Jones.",
                "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = \"Ben Jones\";",
                "prompt": "### Tell me the cartoons directed by Ben Jones. \n SELECT"
            },
            {
                "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
                "question": "Find the id of tv channels that do not play any cartoon directed by Ben Jones.",
                "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\");",
                "prompt": "### Find the id of tv channels that do not play any cartoon directed by Ben Jones. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player",
                "question": "Show all the poker players.",
                "result": "* FROM poker_player;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show all the poker players. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM poker_player",
                "question": "How many are there?",
                "result": "COUNT(*) FROM poker_player;",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Earnings FROM poker_player",
                "question": "What is the earnings of each poker player?",
                "result": "Earnings \nFROM \npoker_player",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the earnings of each poker player? \n SELECT"
            },
            {
                "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
                "question": "Sort them in descending order.",
                "result": "Earnings \nFROM \npoker_player \nORDER BY Earnings DESC",
                "prompt": "### Sort them in descending order. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player",
                "question": "Show all the information about each poker player.",
                "result": "* FROM poker_player;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show all the information about each poker player. \n SELECT"
            },
            {
                "query": "SELECT Final_Table_Made FROM poker_player",
                "question": "What are their final table mades?",
                "result": "Final_Table_Made FROM poker_player;",
                "prompt": "### What are their final table mades? \n SELECT"
            },
            {
                "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
                "question": "What are their final table mades and best finishes?",
                "result": "Final_Table_Made, Best_Finish FROM poker_player;",
                "prompt": "### What are their final table mades and best finishes? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Earnings FROM poker_player",
                "question": "What is the earnings of each poker player?",
                "result": "Earnings FROM poker_player",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the earnings of each poker player? \n SELECT"
            },
            {
                "query": "SELECT avg(Earnings) FROM poker_player",
                "question": "Give me the average.",
                "result": "AVG(Earnings) FROM poker_player",
                "prompt": "### Give me the average. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Money_Rank FROM poker_player",
                "question": "What is the money rank of each poker player?",
                "result": "poker_player.Poker_Player_ID, poker_player.Money_Rank\nFROM poker_player",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the money rank of each poker player? \n SELECT"
            },
            {
                "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC",
                "question": "Sort them in the decreasing order.",
                "result": "poker_player.Poker_Player_ID, poker_player.Money_Rank\nFROM poker_player\nORDER BY poker_player.Money_Rank DESC",
                "prompt": "### Sort them in the decreasing order. \n SELECT"
            },
            {
                "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
                "question": "Return the top one.",
                "result": "poker_player.Poker_Player_ID, poker_player.Money_Rank\nFROM poker_player\nORDER BY poker_player.Money_Rank DESC\nLIMIT 1",
                "prompt": "### Return the top one. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player WHERE Earnings  <  200000",
                "question": "Which poker player has earnings less than 200000?",
                "result": "Poker_Player_ID \nFROM \npoker_player \nWHERE \nEarnings < 200000",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Which poker player has earnings less than 200000? \n SELECT"
            },
            {
                "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
                "question": "Among them, what is the maximum number of final tables made?",
                "result": "MAX(Final_Table_Made) \nFROM \npoker_player \nWHERE \nEarnings < 200000",
                "prompt": "### Among them, what is the maximum number of final tables made? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player",
                "question": "Show all the poker players.",
                "result": "* FROM poker_player",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show all the poker players. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "question": "What are their names?",
                "result": "people.Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID",
                "prompt": "### What are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player WHERE Earnings  >  300000",
                "question": "Which poker players have earnings higher than 300000?",
                "result": "Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings \nFROM \npoker_player \nWHERE \nEarnings > 300000;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Which poker players have earnings higher than 300000? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
                "question": "What are their names?",
                "result": "people.Name \nFROM \npeople \nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nWHERE \npoker_player.Earnings > 300000;",
                "prompt": "### What are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "question": "What are the names of all poker players?",
                "result": "poker_player.Poker_Player_ID, people.Name\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of all poker players? \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
                "question": "Sort them in the ascending order of the final tables made.",
                "result": "poker_player.Poker_Player_ID, people.Name, poker_player.Final_Table_Made\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY poker_player.Final_Table_Made ASC;",
                "prompt": "### Sort them in the ascending order of the final tables made. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "question": "What is the birth date of each poker player?",
                "result": "p.Birth_Date \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the birth date of each poker player? \n SELECT"
            },
            {
                "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings",
                "question": "Sort the list by the poker player's earnings.",
                "result": "p.Name, pp.Earnings \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nORDER BY pp.Earnings DESC",
                "prompt": "### Sort the list by the poker player's earnings. \n SELECT"
            },
            {
                "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
                "question": "Give me the result for the player with the lowest earnings.",
                "result": "p.Name, pp.Earnings \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nWHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)",
                "prompt": "### Give me the result for the player with the lowest earnings. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "question": "What is the height of each poker player?",
                "result": "p.height\nFROM poker_player AS pp\nINNER JOIN people AS p ON pp.People_ID = p.People_ID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the height of each poker player? \n SELECT"
            },
            {
                "query": "SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
                "question": "Who has the largest height?",
                "result": "p.Name\nFROM people AS p\nWHERE p.Height = (\n  SELECT MAX(Height) \n  FROM people\n)",
                "prompt": "### Who has the largest height? \n SELECT"
            },
            {
                "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
                "question": "What is his or her money rank?",
                "result": "pp.Money_Rank\nFROM poker_player AS pp\nINNER JOIN people AS p ON pp.People_ID = p.People_ID\nWHERE p.Height = (\n  SELECT MAX(Height) \n  FROM people\n)",
                "prompt": "### What is his or her money rank? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "question": "What is the height of each poker player?",
                "result": "p.Height\nFROM poker_player AS pp\nJOIN people AS p ON pp.People_ID = p.People_ID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the height of each poker player? \n SELECT"
            },
            {
                "query": "SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
                "question": "Who all have heights greater than 200?",
                "result": "p.Name\nFROM people AS p\nWHERE p.Height > 200;",
                "prompt": "### Who all have heights greater than 200? \n SELECT"
            },
            {
                "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
                "question": "What is the average earnings among them?",
                "result": "AVG(pp.Earnings)\nFROM poker_player AS pp\nJOIN people AS p ON pp.People_ID = p.People_ID\nWHERE p.Height > 200;",
                "prompt": "### What is the average earnings among them? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player ORDER BY Earnings DESC",
                "question": "Sort all the poker players in descending order of earnings.",
                "result": "* \nFROM \npoker_player \nORDER BY \nEarnings DESC",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Sort all the poker players in descending order of earnings. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
                "question": "What are the names of poker players in descending order of earnings?",
                "result": "people.Name \nFROM \npeople \nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nORDER BY \npoker_player.Earnings DESC",
                "prompt": "### What are the names of poker players in descending order of earnings? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Nationality FROM people",
                "question": "Show the nationality of each person.",
                "result": "people.Nationality FROM people",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show the nationality of each person. \n SELECT"
            },
            {
                "query": "SELECT * FROM people GROUP BY Nationality",
                "question": "Group people by their nationality.",
                "result": "people.Nationality, COUNT(*) FROM people GROUP BY people.Nationality",
                "prompt": "### Group people by their nationality. \n SELECT"
            },
            {
                "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
                "question": "For each of the result, show the corresponding number of people of that nationality?",
                "result": "people.Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY people.Nationality",
                "prompt": "### For each of the result, show the corresponding number of people of that nationality? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Nationality FROM people",
                "question": "Show the nationality of each person.",
                "result": "people.Nationality FROM people",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show the nationality of each person. \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM people GROUP BY Nationality",
                "question": "Count the number of people for each nationality.",
                "result": "Nationality, COUNT(*) FROM people GROUP BY Nationality",
                "prompt": "### Count the number of people for each nationality. \n SELECT"
            },
            {
                "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "What is the most common nationality of people?",
                "result": "Nationality, COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                "prompt": "### What is the most common nationality of people? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT COUNT(*) FROM people GROUP BY Nationality",
                "question": "Count the number of people for each nationality.",
                "result": "Nationality, COUNT(*) AS Number_of_People\nFROM people\nGROUP BY Nationality;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of people for each nationality. \n SELECT"
            },
            {
                "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
                "question": "Which nationalities are held by at least two people?",
                "result": "Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;",
                "prompt": "### Which nationalities are held by at least two people? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Name ,  Birth_Date FROM people",
                "question": "What are the names and birth dates of people?",
                "result": "Name, Birth_Date FROM people",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names and birth dates of people? \n SELECT"
            },
            {
                "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
                "question": "Sort the results in ascending alphabetical order of name.",
                "result": "Name, Birth_Date FROM people ORDER BY Name ASC",
                "prompt": "### Sort the results in ascending alphabetical order of name. \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT Name FROM people",
                "question": "What are the names of all people?",
                "result": "Name FROM people",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of all people? \n SELECT"
            },
            {
                "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
                "question": "What about people whose nationality is not \"Russia\"?",
                "result": "Name FROM people WHERE Nationality <> 'Russia'",
                "prompt": "### What about people whose nationality is not \"Russia\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "poker_player",
        "interaction": [
            {
                "query": "SELECT * FROM poker_player",
                "question": "Show all the poker players.",
                "result": "* FROM poker_player;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show all the poker players. \n SELECT"
            },
            {
                "query": "SELECT * FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
                "question": "Show all people who are not poker players.",
                "result": "* FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
                "prompt": "### Show all people who are not poker players. \n SELECT"
            },
            {
                "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
                "question": "Give me their names.",
                "result": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
                "prompt": "### Give me their names. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT killed FROM death",
                "question": "What are the death tolls each time?",
                "result": "battle.name, SUM(death.killed) AS death_toll \nFROM battle \nJOIN ship ON ship.lost_in_battle = battle.id \nJOIN death ON death.caused_by_ship_id = ship.id \nGROUP BY battle.name",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the death tolls each time? \n SELECT"
            },
            {
                "query": "SELECT max(killed) FROM death",
                "question": "What is the maximum number of deaths in any one time?",
                "result": "MAX(death_toll) AS max_death_toll \nFROM \n(SELECT SUM(death.killed) AS death_toll \nFROM battle \nJOIN ship ON ship.lost_in_battle = battle.id \nJOIN death ON death.caused_by_ship_id = ship.id \nGROUP BY battle.id) sub_query",
                "prompt": "### What is the maximum number of deaths in any one time? \n SELECT"
            },
            {
                "query": "SELECT min(killed) FROM death",
                "question": "What about the minimum?",
                "result": "MIN(death_toll) AS min_death_toll \nFROM \n(SELECT SUM(death.killed) AS death_toll \nFROM battle \nJOIN ship ON ship.lost_in_battle = battle.id \nJOIN death ON death.caused_by_ship_id = ship.id \nGROUP BY battle.id) sub_query",
                "prompt": "### What about the minimum? \n SELECT"
            },
            {
                "query": "SELECT max(killed) ,  min(killed) FROM death",
                "question": "Give me the maximum and also the minimum.",
                "result": "(SELECT MAX(death_toll) \nFROM \n(SELECT SUM(death.killed) AS death_toll \nFROM battle \nJOIN ship ON ship.lost_in_battle = battle.id \nJOIN death ON death.caused_by_ship_id = ship.id \nGROUP BY battle.id) sub_query) AS max_death_toll, \n\n(SELECT MIN(death_toll) \nFROM \n(SELECT SUM(death.killed) AS death_toll \nFROM battle \nJOIN ship ON ship.lost_in_battle = battle.id \nJOIN death ON death.caused_by_ship_id = ship.id \nGROUP BY battle.id) sub_query) AS min_death_toll",
                "prompt": "### Give me the maximum and also the minimum. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT * FROM death as T1 JOIN ship as T2 ON T1.caused_by_ship_id  =  T2.id",
                "question": "Show me information about deaths caused by ships.",
                "result": "*\nFROM death",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### Show me information about deaths caused by ships. \n SELECT"
            },
            {
                "query": "SELECT * FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
                "question": "Only ships with tonnage 't'.",
                "result": "*\nFROM ship\nWHERE tonnage = 't'",
                "prompt": "### Only ships with tonnage 't'. \n SELECT"
            },
            {
                "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
                "question": "Only return the death and injury information for those ships.",
                "result": "killed, injured\nFROM death\nWHERE caused_by_ship_id IN (\n  SELECT id \n  FROM ship\n  WHERE tonnage = 't'\n)",
                "prompt": "### Only return the death and injury information for those ships. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT id, name FROM battle",
                "question": "What are the ids and names of the battles?",
                "result": "id, name\nFROM battle;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the ids and names of the battles? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle",
                "question": "Only show those that ships were lost in.",
                "result": "b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle;",
                "prompt": "### Only show those that ships were lost in. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
                "question": "Please, just the ones with 'Brig' ship type.",
                "result": "b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.ship_type = 'Brig';",
                "prompt": "### Please, just the ones with 'Brig' ship type. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT T1.id ,  T1.name, sum(T3.killed), sum(T3.injured) FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id",
                "question": "How many people were killed or injured in each battle?",
                "result": "battle.name, SUM(death.killed) as killed_count, SUM(death.injured) as injured_count\nFROM battle \nJOIN death ON battle.id = death.caused_by_ship_id\nGROUP BY battle.name",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many people were killed or injured in each battle? \n SELECT"
            },
            {
                "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
                "question": "Only show the deaths for those battles that produced at least ten deaths.",
                "result": "battle.name, death.note, death.killed, death.injured\nFROM battle \nJOIN death ON battle.id = death.caused_by_ship_id\nGROUP BY battle.name, death.note, death.killed, death.injured\nHAVING SUM(death.killed) + SUM(death.injured) >= 10",
                "prompt": "### Only show the deaths for those battles that produced at least ten deaths. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id",
                "question": "List the injuries caused by each ship (give ship id and name please).",
                "result": "ship.id, ship.name, death.injured \nFROM ship \nJOIN death ON ship.id = death.caused_by_ship_id",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the injuries caused by each ship (give ship id and name please). \n SELECT"
            },
            {
                "query": "SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured)",
                "question": "Sort it by decreasing number of injuries.",
                "result": "ship.id, ship.name, death.injured \nFROM ship \nJOIN death ON ship.id = death.caused_by_ship_id \nORDER BY death.injured DESC",
                "prompt": "### Sort it by decreasing number of injuries. \n SELECT"
            },
            {
                "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) DESC LIMIT 1",
                "question": "Only show the ship id and name that caused the most total injuries.",
                "result": "ship.id, ship.name \nFROM ship \nJOIN death ON ship.id = death.caused_by_ship_id \nGROUP BY ship.id \nORDER BY SUM(death.injured) DESC \nLIMIT 1",
                "prompt": "### Only show the ship id and name that caused the most total injuries. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan'",
                "question": "Which battles did the bulgarian commander 'Kaloyan' fight in?",
                "result": "id, name, date, bulgarian_commander, latin_commander, result \nFROM \nbattle \nWHERE \nbulgarian_commander = 'Kaloyan';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### Which battles did the bulgarian commander 'Kaloyan' fight in? \n SELECT"
            },
            {
                "query": "SELECT name FROM battle WHERE latin_commander  =  'Baldwin I'",
                "question": "How about the latin commander 'Baldwin I'?",
                "result": "id, name, date, bulgarian_commander, latin_commander, result \nFROM \nbattle \nWHERE \nlatin_commander = 'Baldwin I';",
                "prompt": "### How about the latin commander 'Baldwin I'? \n SELECT"
            },
            {
                "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
                "question": "Just the ones where they were fighting one another, please.",
                "result": "id, name, date, bulgarian_commander, latin_commander, result \nFROM \nbattle \nWHERE \nbulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
                "prompt": "### Just the ones where they were fighting one another, please. \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT lost_in_battle FROM ship WHERE tonnage  =  '225'",
                "question": "Which battle ids lost ships with tonnage '225'?",
                "result": "battle.id FROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.tonnage = '225'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### Which battle ids lost ships with tonnage '225'? \n SELECT"
            },
            {
                "query": "SELECT T2.id, T2.name from ship AS T1 join battle AS T2 ON T1.lost_in_battle = T2.id WHERE tonnage  =  '225'",
                "question": "Give the names of these battles, too.",
                "result": "battle.name FROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.tonnage = '225'",
                "prompt": "### Give the names of these battles, too. \n SELECT"
            },
            {
                "query": "SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
                "question": "Which battle ids and names did not lose any ship with tonnage '225'?",
                "result": "battle.id, battle.name FROM battle \nLEFT JOIN ship ON battle.id = ship.lost_in_battle AND ship.tonnage = '225' \nWHERE ship.id IS NULL",
                "prompt": "### Which battle ids and names did not lose any ship with tonnage '225'? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
                "question": "How many is that?",
                "result": "COUNT(*) FROM (\n    SELECT battle.id FROM battle \n    LEFT JOIN ship ON battle.id = ship.lost_in_battle AND ship.tonnage = '225' \n    WHERE ship.id IS NULL\n) AS battles_without_tonnage_225_ships",
                "prompt": "### How many is that? \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice'",
                "question": "List the name and date of the battle that has lost the ship named 'Lettice'",
                "result": "battle.name, battle.date \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.name = 'Lettice'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name and date of the battle that has lost the ship named 'Lettice' \n SELECT"
            },
            {
                "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atlanta'",
                "question": "Same for 'HMS Atlanta', please.",
                "result": "battle.name, battle.date \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.name = 'HMS Atlanta'",
                "prompt": "### Same for 'HMS Atlanta', please. \n SELECT"
            },
            {
                "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
                "question": "Can you intersect those?",
                "result": "SELECT battle.name, battle.date \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.name = 'Lettice'\n\nINTERSECT \n\nSELECT battle.name, battle.date \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.name = 'HMS Atlanta'",
                "prompt": "### Can you intersect those? \n SELECT"
            }
        ]
    },
    {
        "database_id": "battle_death",
        "interaction": [
            {
                "query": "SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
                "question": "Which battle ids and names lost ships in the 'English Channel'?",
                "result": "battle.id, battle.name\nFROM battle \nJOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.location = 'English Channel'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### Which battle ids and names lost ships in the 'English Channel'? \n SELECT"
            },
            {
                "query": "SELECT T1.id, T1.name FROM battle EXCEPT SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
                "question": "Which did not?",
                "result": "battle.id, battle.name\nFROM battle \nWHERE battle.id NOT IN \n(SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel')",
                "prompt": "### Which did not? \n SELECT"
            },
            {
                "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
                "question": "For these ones, show their names, results, and bulgarian commanders.",
                "result": "battle.name, battle.result, battle.bulgarian_commander\nFROM battle \nWHERE battle.id NOT IN \n(SELECT ship.lost_in_battle FROM ship WHERE ship.location = 'English Channel')",
                "prompt": "### For these ones, show their names, results, and bulgarian commanders. \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM CONTINENTS;",
                "question": "How many continents are there?",
                "result": "COUNT(*) FROM continents;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many continents are there? \n SELECT"
            },
            {
                "query": "SELECT ContId ,  Continent FROM CONTINENTS;",
                "question": "Show all their ids and names!",
                "result": "ContId, Continent FROM continents;",
                "prompt": "### Show all their ids and names! \n SELECT"
            },
            {
                "query": "SELECT T1.ContId ,  T1.Continent , * FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent;",
                "question": "What countries do they each have?",
                "result": "Continent, CountryName FROM countries JOIN continents ON countries.Continent = continents.Continent;",
                "prompt": "### What countries do they each have? \n SELECT"
            },
            {
                "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
                "question": "Count how many there are for each continent name and id!",
                "result": "continents.ContId, continents.Continent, COUNT(countries.CountryId) as CountryCount FROM continents LEFT JOIN countries ON continents.Continent = countries.Continent GROUP BY continents.ContId;",
                "prompt": "### Count how many there are for each continent name and id! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "Select FullName, ID From CAR_MAKERS;",
                "question": "What are the names and ids of the different car makers?",
                "result": "Id, Maker FROM car_makers",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of the different car makers? \n SELECT"
            },
            {
                "query": "Select Country, FullName, ID From CAR_MAKERS;",
                "question": "What countries are they each from?",
                "result": "Id, Country FROM car_makers",
                "prompt": "### What countries are they each from? \n SELECT"
            },
            {
                "query": "SELECT count(*), T1.Country, T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
                "question": "For each, how many models do they each produce?",
                "result": "Maker, COUNT(*) AS NumOfModels FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers) \nGROUP BY Maker",
                "prompt": "### For each, how many models do they each produce? \n SELECT"
            },
            {
                "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
                "question": "Can actually just show the name, id and the number of models?",
                "result": "car_makers.Id, car_makers.Maker, COUNT(model_list.ModelId) AS NumOfModels \nFROM car_makers \nLEFT JOIN model_list ON car_makers.Maker = model_list.Maker \nGROUP BY car_makers.Id, car_makers.Maker",
                "prompt": "### Can actually just show the name, id and the number of models? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "Select avg(horsepower) FROM CARS_DATA;",
                "question": "What is the average horsepower of all cars?",
                "result": "AVG(Horsepower) FROM cars_data;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of all cars? \n SELECT"
            },
            {
                "query": "SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower DESC LIMIT 1;",
                "question": "How about the maximum?",
                "result": "MAX(Horsepower) FROM cars_data;",
                "prompt": "### How about the maximum? \n SELECT"
            },
            {
                "query": "SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
                "question": "What about the minimum?",
                "result": "MIN(Horsepower) FROM cars_data;",
                "prompt": "### What about the minimum? \n SELECT"
            },
            {
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
                "question": "What is the model of the car with this horsepower?",
                "result": "Model FROM cars_data \nWHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data);",
                "prompt": "### What is the model of the car with this horsepower? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT avg(Weight) FROM CARS_DATA",
                "question": "What is the average weight of all the cars?",
                "result": "AVG(Weight) FROM cars_data",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average weight of all the cars? \n SELECT"
            },
            {
                "query": "SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  >  (SELECT avg(Weight) FROM CARS_DATA)",
                "question": "List all the car information with weights above this?",
                "result": "* FROM cars_data WHERE Weight > (SELECT AVG(Weight) FROM cars_data)",
                "prompt": "### List all the car information with weights above this? \n SELECT"
            },
            {
                "query": "SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
                "question": "How about below this?",
                "result": "* FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
                "prompt": "### How about below this? \n SELECT"
            },
            {
                "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
                "question": "Please, show just their model names!",
                "result": "Make FROM car_names WHERE MakeId IN \n (SELECT Id FROM cars_data WHERE Weight > (SELECT AVG(Weight) FROM cars_data))",
                "prompt": "### Please, show just their model names! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "Select T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';",
                "question": "What are the ids, and models of the cars were made in 1970?",
                "result": "cars_data.Id, model_list.Model \nFROM cars_data \nINNER JOIN model_list ON cars_data.Id = model_list.ModelId \nWHERE cars_data.Year = 1970",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the ids, and models of the cars were made in 1970? \n SELECT"
            },
            {
                "query": "Select T1.horsepower, T1.mpg, T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';",
                "question": "Show their horsepower and MPG as well?",
                "result": "cars_data.Id, model_list.Model, cars_data.Horsepower, cars_data.MPG \nFROM cars_data \nINNER JOIN model_list ON cars_data.Id = model_list.ModelId \nWHERE cars_data.Year = 1970",
                "prompt": "### Show their horsepower and MPG as well? \n SELECT"
            },
            {
                "query": "SELECT T1.Maker, T4.horsepower, T4.mpg, T4.id, T2.model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
                "question": "Also provide the names of their makers!",
                "result": "car_makers.FullName, model_list.Model, cars_data.Horsepower, cars_data.MPG \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN car_names ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year = 1970",
                "prompt": "### Also provide the names of their makers! \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
                "question": "Just show a unique list of all these different makers.",
                "result": "DISTINCT car_makers.FullName \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN car_names ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year = 1970",
                "prompt": "### Just show a unique list of all these different makers. \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT Make , Model from Car_Names;",
                "question": "Show me the makes and models of each car!",
                "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show me the makes and models of each car! \n SELECT"
            },
            {
                "query": "SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId;",
                "question": "Also provide which the year they were produced?",
                "result": "car_makers.Maker, model_list.Model, cars_data.Year \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN car_names ON car_names.Model = model_list.Model \nINNER JOIN cars_data ON cars_data.Id = car_names.MakeId",
                "prompt": "### Also provide which the year they were produced? \n SELECT"
            },
            {
                "query": "SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
                "question": "Which ones been produce in the earliest year?",
                "result": "car_makers.Maker, model_list.Model, MIN(cars_data.Year) AS EarliestYear \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN car_names ON car_names.Model = model_list.Model \nINNER JOIN cars_data ON cars_data.Id = car_names.MakeId \nGROUP BY car_makers.Maker, model_list.Model \nORDER BY EarliestYear ASC",
                "prompt": "### Which ones been produce in the earliest year? \n SELECT"
            },
            {
                "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
                "question": "Show just the make and year!",
                "result": "car_makers.Maker, MIN(cars_data.Year) AS EarliestYear \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN car_names ON car_names.Model = model_list.Model \nINNER JOIN cars_data ON cars_data.Id = car_names.MakeId \nGROUP BY car_makers.Maker \nORDER BY EarliestYear ASC",
                "prompt": "### Show just the make and year! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT model FROM MODEL_LIST;",
                "question": "What are all the different car models?",
                "result": "Model\nFROM model_list",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the different car models? \n SELECT"
            },
            {
                "query": "SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id;",
                "question": "Show also all the car makes and the years that they were produced!",
                "result": "car_makers.Maker, model_list.Model, cars_data.Year\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN car_names ON car_names.Model = model_list.ModelId\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id;",
                "prompt": "### Show also all the car makes and the years that they were produced! \n SELECT"
            },
            {
                "query": "SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
                "question": "Show only those that were made after 1980!",
                "result": "car_makers.Maker, model_list.Model, cars_data.Year\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN car_names ON car_names.Model = model_list.ModelId\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980;",
                "prompt": "### Show only those that were made after 1980! \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
                "question": "What are the distinct car models for these?",
                "result": "DISTINCT model_list.Model\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN car_names ON car_names.Model = model_list.ModelId\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980;",
                "prompt": "### What are the distinct car models for these? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "Select T1.Maker, T2.CountryName from Car_Makers as T1 JOIN Countries as T2 on T1.Country = T2.CountryId;",
                "question": "What are the names and country name of each car maker?",
                "result": "car_makers.Maker, countries.CountryName \n FROM car_makers \n JOIN countries ON car_makers.Country=countries.CountryId;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and country name of each car maker? \n SELECT"
            },
            {
                "query": "SELECT T1.Continent,  T3.Maker, T2.CountryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country;",
                "question": "Also provide the continent name for each!",
                "result": "car_makers.Maker, countries.CountryName, continents.Continent \n FROM car_makers \n JOIN countries ON car_makers.Country=countries.CountryId \n JOIN continents ON countries.Continent=continents.ContId;",
                "prompt": "### Also provide the continent name for each! \n SELECT"
            },
            {
                "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
                "question": "How many car makers are there per continent?",
                "result": "continents.Continent, COUNT(DISTINCT car_makers.Maker) \n FROM continents \n JOIN countries ON continents.ContId=countries.Continent \n JOIN car_makers ON countries.CountryId=car_makers.Country \n GROUP BY continents.Continent;",
                "prompt": "### How many car makers are there per continent? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT count(*) from Countries;",
                "question": "How many countries are there?",
                "result": "COUNT(*) FROM countries;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries are there? \n SELECT"
            },
            {
                "query": "SELECT *, count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country;",
                "question": "How many car makers belong to each one?",
                "result": "Country, COUNT(*) FROM car_makers GROUP BY Country;",
                "prompt": "### How many car makers belong to each one? \n SELECT"
            },
            {
                "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) ASC LIMIT 1;",
                "question": "What is the name of the country that has the least number?",
                "result": "Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) ASC LIMIT 1;",
                "prompt": "### What is the name of the country that has the least number? \n SELECT"
            },
            {
                "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
                "question": "How about the most?",
                "result": "Country FROM car_makers GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;",
                "prompt": "### How about the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "Select Count(*) FROM CAR_MAKERS;",
                "question": "How many makers are there?",
                "result": "COUNT(DISTINCT Maker) FROM car_makers",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many makers are there? \n SELECT"
            },
            {
                "query": "SELECT FullName, id FROM CAR_MAKERS;",
                "question": "What are their full names and ids?",
                "result": "Id, FullName FROM car_makers",
                "prompt": "### What are their full names and ids? \n SELECT"
            },
            {
                "query": "SELECT T1.Model ,  T2.FullName, T2.id  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id;",
                "question": "What models have they each produced?",
                "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Id",
                "prompt": "### What models have they each produced? \n SELECT"
            },
            {
                "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
                "question": "Count how many modes there are per maker.",
                "result": "car_makers.Maker, COUNT(model_list.Model) AS num_models \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Id \nGROUP BY car_makers.Maker",
                "prompt": "### Count how many modes there are per maker. \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
                "question": "Show all the car ids with the make amc hornet sporabout (sw)?",
                "result": "Id \nFROM car_names \nWHERE Make = 'AMC Hornet Sportabout (sw)'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all the car ids with the make amc hornet sporabout (sw)? \n SELECT"
            },
            {
                "query": "SELECT T1.Horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
                "question": "What is its horsepower?",
                "result": "cars_data.Horsepower \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Make = 'AMC Hornet Sportabout (sw)'",
                "prompt": "### What is its horsepower? \n SELECT"
            },
            {
                "query": "SELECT T1.MPG FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
                "question": "How about its MPG?",
                "result": "cars_data.MPG \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Make = 'AMC Hornet Sportabout (sw)'",
                "prompt": "### How about its MPG? \n SELECT"
            },
            {
                "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
                "question": "How about its accelerate?",
                "result": "cars_data.Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Make = 'AMC Hornet Sportabout (sw)'",
                "prompt": "### How about its accelerate? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT distinct Maker FROM CAR_MAKERS;",
                "question": "Show all the different car makers?",
                "result": "DISTINCT Maker FROM car_makers;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all the different car makers? \n SELECT"
            },
            {
                "query": "SELECT T1.Maker, T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId;",
                "question": "What are the names of the countries they belong to?",
                "result": "CountryName, Continent \n FROM countries \n JOIN car_makers \n ON countries.CountryId = car_makers.Country \n GROUP BY car_makers.Maker;",
                "prompt": "### What are the names of the countries they belong to? \n SELECT"
            },
            {
                "query": "SELECT T1.Maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
                "question": "Show just the car makers from France!",
                "result": "Maker \n FROM car_makers \n WHERE Country = \"France\";",
                "prompt": "### Show just the car makers from France! \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
                "question": "How many are there?",
                "result": "COUNT(*) \n FROM car_makers \n WHERE Country = \"France\";",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM MODEL_LIST;",
                "question": "How many car models are produced in total?",
                "result": "COUNT(*) FROM model_list",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in total? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'Germany';",
                "question": "How many in Germany?",
                "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'Germany')",
                "prompt": "### How many in Germany? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'japan';",
                "question": "How about in Japan?",
                "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'Japan')",
                "prompt": "### How about in Japan? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
                "question": "How about the USA?",
                "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA')",
                "prompt": "### How about the USA? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT * FROM CARS_DATA WHERE YEAR  =  1974;",
                "question": "What is all the car information for cars produced in 1974?",
                "result": "* FROM cars_data\nWHERE Year = 1974;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is all the car information for cars produced in 1974? \n SELECT"
            },
            {
                "query": "SELECT Weight, Cylinders FROM CARS_DATA WHERE YEAR  =  1974;",
                "question": "Now, show me just the weight and cylinders of these cars.",
                "result": "Weight, Cylinders FROM cars_data\nWHERE Year = 1974;",
                "prompt": "### Now, show me just the weight and cylinders of these cars. \n SELECT"
            },
            {
                "query": "SELECT Weight, Cylinders FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974;",
                "question": "List just those with 8 cylinders!",
                "result": "Weight, Cylinders FROM cars_data\nWHERE Year = 1974 AND Cylinders = 8;",
                "prompt": "### List just those with 8 cylinders! \n SELECT"
            },
            {
                "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
                "question": "What is the smallest weight?",
                "result": "MIN(Weight) FROM cars_data\nWHERE Year = 1974;",
                "prompt": "### What is the smallest weight? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "Select CountryName FROM COUNTRIES;",
                "question": "What are all the different country names?",
                "result": "CountryName FROM countries;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the different country names? \n SELECT"
            },
            {
                "query": "Select CountryName FROM COUNTRIES where CountryID not in (Select Country from CAR_MAKERS);",
                "question": "Which ones have no car makers?",
                "result": "CountryName FROM countries\nWHERE CountryId NOT IN (\n    SELECT DISTINCT Country \n    FROM car_makers\n);",
                "prompt": "### Which ones have no car makers? \n SELECT"
            },
            {
                "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
                "question": "Which ones have at least one?",
                "result": "CountryName FROM countries\nWHERE CountryId IN (\n    SELECT DISTINCT Country \n    FROM car_makers\n);",
                "prompt": "### Which ones have at least one? \n SELECT"
            },
            {
                "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
                "question": "Also provide the country id!",
                "result": "CountryId, CountryName FROM countries\nWHERE CountryId IN (\n    SELECT DISTINCT Country \n    FROM car_makers\n);",
                "prompt": "### Also provide the country id! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT T3.Maker, T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country;",
                "question": "Show all the car makers and their country name?",
                "result": "car_makers.Maker, car_makers.Country \nFROM car_makers",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all the car makers and their country name? \n SELECT"
            },
            {
                "query": "SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.CountryName;",
                "question": "Count how many there are per country name?",
                "result": "countries.CountryName, COUNT(*) \nFROM countries \nGROUP BY countries.CountryName",
                "prompt": "### Count how many there are per country name? \n SELECT"
            },
            {
                "query": "SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName;",
                "question": "Show just those from countries in the continent Europe.",
                "result": "countries.CountryName \nFROM countries \nWHERE countries.Continent = 'Europe'",
                "prompt": "### Show just those from countries in the continent Europe. \n SELECT"
            },
            {
                "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
                "question": "List the country names of those with at least 3 manufacturers!",
                "result": "countries.CountryName \nFROM countries \nINNER JOIN car_makers ON countries.CountryId = car_makers.Country \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) >= 3",
                "prompt": "### List the country names of those with at least 3 manufacturers! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id;",
                "question": "What is the horsepower, make for each car!",
                "result": "cars_data.Horsepower, car_names.Make\n FROM cars_data \n JOIN car_names ON cars_data.Id = car_names.MakeId",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower, make for each car! \n SELECT"
            },
            {
                "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  8;",
                "question": "Show those with 8 cylinders!",
                "result": "*\nFROM cars_data\nWHERE Cylinders = 8",
                "prompt": "### Show those with 8 cylinders! \n SELECT"
            },
            {
                "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3;",
                "question": "How about 3?",
                "result": "*\nFROM cars_data\nWHERE Cylinders = 3",
                "prompt": "### How about 3? \n SELECT"
            },
            {
                "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
                "question": "Show the one with the maximum horsepower.",
                "result": "*\nFROM cars_data\nWHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data)",
                "prompt": "### Show the one with the maximum horsepower. \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT id FROM CARS_DATA ORDER BY horsepower DESC LIMIT 1;",
                "question": "What is id of the car with the max horsepower?",
                "result": "Id FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data);",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is id of the car with the max horsepower? \n SELECT"
            },
            {
                "query": "SELECT id FROM CARS_DATA ORDER BY mpg DESC LIMIT 1;",
                "question": "How about with the max MPG?",
                "result": "Id FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data);",
                "prompt": "### How about with the max MPG? \n SELECT"
            },
            {
                "query": "SELECT T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
                "question": "Show its make!",
                "result": "Maker, Model FROM car_makers\n JOIN model_list ON car_makers.Id = model_list.Maker\n JOIN car_names ON model_list.ModelId = car_names.ModelId\n JOIN cars_data ON car_names.MakeId = cars_data.Id\n WHERE cars_data.Id = (SELECT Id FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data));",
                "prompt": "### Show its make! \n SELECT"
            },
            {
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
                "question": "Now show its model!",
                "result": "Model FROM model_list\n JOIN car_makers ON model_list.Maker = car_makers.Id\n JOIN car_names ON model_list.ModelId = car_names.ModelId\n JOIN cars_data ON car_names.MakeId = cars_data.Id\n WHERE cars_data.Id = (SELECT Id FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data));",
                "prompt": "### Now show its model! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT avg(edispl) FROM CARS_DATA;",
                "question": "What is the average edispl of all cars?",
                "result": "AVG(Edispl) FROM cars_data;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average edispl of all cars? \n SELECT"
            },
            {
                "query": "SELECT T1.Make, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Make;",
                "question": "Can you show the average per car make?",
                "result": "car_makers.Maker, AVG(cars_data.Edispl) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nGROUP BY car_makers.Maker;",
                "prompt": "### Can you show the average per car make? \n SELECT"
            },
            {
                "query": "SELECT T1.Model, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Model;",
                "question": "How about per car model?",
                "result": "model_list.Model, AVG(cars_data.Edispl) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nGROUP BY model_list.Model;",
                "prompt": "### How about per car model? \n SELECT"
            },
            {
                "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
                "question": "Show the average for the model volvo!",
                "result": "AVG(cars_data.Edispl) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName LIKE '%Volvo%' ;",
                "prompt": "### Show the average for the model volvo! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT distinct Model from CAR_NAMES;",
                "question": "What are all the different models for each car?",
                "result": "car_names.MakeId, model_list.Model\nFROM car_names\nJOIN model_list ON car_names.Model = model_list.ModelId",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the different models for each car? \n SELECT"
            },
            {
                "query": "SELECT Model, Make FROM CAR_NAMES;",
                "question": "What are the makes for each?",
                "result": "car_names.MakeId, car_makers.Maker\nFROM car_names\nJOIN car_makers ON car_names.MakeId = car_makers.Id",
                "prompt": "### What are the makes for each? \n SELECT"
            },
            {
                "query": "SELECT Model, count(*) FROM CAR_NAMES GROUP BY Model;",
                "question": "How many makes are there for each?",
                "result": "COUNT(car_makers.Id) AS num_makes, car_makers.Country\nFROM car_makers\nGROUP BY car_makers.Country",
                "prompt": "### How many makes are there for each? \n SELECT"
            },
            {
                "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
                "question": "What is the model name with the most makes?",
                "result": "model_list.Model, COUNT(DISTINCT car_makers.Maker) AS num_makers\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY model_list.Model\nORDER BY num_makers DESC\nLIMIT 1",
                "prompt": "### What is the model name with the most makes? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT FullName FROM CAR_MAKERS;",
                "question": "Show the full names of all the different car makers?",
                "result": "FullName FROM car_makers",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show the full names of all the different car makers? \n SELECT"
            },
            {
                "query": "SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;",
                "question": "Also include the car models produced by each!",
                "result": "car_makers.FullName, model_list.Model \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.Maker",
                "prompt": "### Also include the car models produced by each! \n SELECT"
            },
            {
                "query": "SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
                "question": "Show me just those produced by the maker with full name American Motor Company!",
                "result": "model_list.Model \n FROM model_list \n INNER JOIN car_makers ON model_list.Maker = car_makers.Id \n WHERE car_makers.FullName = 'American Motor Company'",
                "prompt": "### Show me just those produced by the maker with full name American Motor Company! \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
                "question": "How many are there?",
                "result": "COUNT(model_list.Model) \n FROM model_list \n INNER JOIN car_makers ON model_list.Maker = car_makers.Id \n WHERE car_makers.FullName = 'American Motor Company'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;",
                "question": "What is all the information for the makers that have designed at least 1 car model!",
                "result": "car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country\nFROM car_makers\nWHERE car_makers.Id IN (\n  SELECT model_list.Maker\n  FROM model_list\n)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is all the information for the makers that have designed at least 1 car model! \n SELECT"
            },
            {
                "query": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  1;",
                "question": "Which ones have designed more than 1?",
                "result": "car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country\nFROM car_makers\nWHERE car_makers.Id IN (\n  SELECT model_list.Maker\n  FROM model_list\n  GROUP BY model_list.Maker\n  HAVING COUNT(*) > 1\n)",
                "prompt": "### Which ones have designed more than 1? \n SELECT"
            },
            {
                "query": "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "question": "How about more than 3?",
                "result": "car_makers.Id, car_makers.Maker, car_makers.FullName, car_makers.Country\nFROM car_makers\nWHERE car_makers.Id IN (\n  SELECT model_list.Maker\n  FROM model_list\n  GROUP BY model_list.Maker\n  HAVING COUNT(*) > 3\n)",
                "prompt": "### How about more than 3? \n SELECT"
            },
            {
                "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "question": "List just the full name and id!",
                "result": "car_makers.Id, car_makers.FullName\nFROM car_makers\nWHERE car_makers.Id IN (\n  SELECT model_list.Maker\n  FROM model_list\n  GROUP BY model_list.Maker\n  HAVING COUNT(*) > 1\n)",
                "prompt": "### List just the full name and id! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id WHERE T3.FullName  =  'General Motors';",
                "question": "How many different models has maker with full name General Motors produced?",
                "result": "COUNT(DISTINCT ModelId) FROM model_list WHERE Maker LIKE 'General Motors%'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many different models has maker with full name General Motors produced? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T1.MakeId  =  T3.Id WHERE T3.weight > 3500;",
                "question": "How many different models weigh over 3500 pounds?",
                "result": "COUNT(DISTINCT Id) FROM cars_data WHERE Weight > 3500",
                "prompt": "### How many different models weigh over 3500 pounds? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
                "question": "How many models have either of these features?",
                "result": "COUNT(DISTINCT Id) FROM cars_data WHERE Cylinders = 6 OR Accelerate < 10",
                "prompt": "### How many models have either of these features? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
                "question": "Show me the distinct list of their model names!",
                "result": "DISTINCT Model FROM model_list",
                "prompt": "### Show me the distinct list of their model names! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT Year, weight FROM CARS_DATA;",
                "question": "Show the years and weight of all the cars!",
                "result": "Year, Weight\nFROM cars_data;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show the years and weight of all the cars! \n SELECT"
            },
            {
                "query": "SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight  >  3000;",
                "question": "Show distinct years that the cars that weigh more than 3000 were produced!",
                "result": "DISTINCT Year\nFROM cars_data\nWHERE Weight > 3000;",
                "prompt": "### Show distinct years that the cars that weigh more than 3000 were produced! \n SELECT"
            },
            {
                "query": "SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight  <  4000;",
                "question": "How about the different years for those that weight less than 4000.",
                "result": "DISTINCT Year\nFROM cars_data\nWHERE Weight < 4000;",
                "prompt": "### How about the different years for those that weight less than 4000. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT Year FROM CARS_DATA WHERE Weight  >  3000 AND Weight  <  4000;",
                "question": "What are the distinct years, for the cars that are both?",
                "result": "DISTINCT Year\nFROM cars_data\nWHERE Weight > 3000 AND Weight < 4000;",
                "prompt": "### What are the distinct years, for the cars that are both? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT accelerate FROM CARS_DATA ORDER BY accelerate ASC LIMIT 1;",
                "question": "What is the lowest accelerate for any car?",
                "result": "MIN(Accelerate) FROM cars_data",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the lowest accelerate for any car? \n SELECT"
            },
            {
                "query": "SELECT accelerate FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;",
                "question": "How about the highest?",
                "result": "MAX(Accelerate) FROM cars_data",
                "prompt": "### How about the highest? \n SELECT"
            },
            {
                "query": "SELECT T1.ID, T2.Make, T2.Model FROM CARS_DATA as T1 JOIN CAR_NAMES as T2 ON T1.ID = T2.MakeID ORDER BY T1.accelerate DESC LIMIT 1;",
                "question": "What is the ID, Make and Model of this car?",
                "result": "Id, Make, Model FROM car_names \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data)",
                "prompt": "### What is the ID, Make and Model of this car? \n SELECT"
            },
            {
                "query": "SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;",
                "question": "Show just its horsepower.",
                "result": "Horsepower FROM cars_data \nWHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data)",
                "prompt": "### Show just its horsepower. \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo';",
                "question": "Show all the car information for any car of the model volvo!",
                "result": "cars_data.*, car_makers.FullName, car_makers.Country \n FROM cars_data \n JOIN car_names ON cars_data.Id = car_names.MakeId \n JOIN model_list ON car_names.Model = model_list.Model \n JOIN car_makers ON model_list.Maker = car_makers.Maker \n WHERE car_makers.Maker = 'volvo'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all the car information for any car of the model volvo! \n SELECT"
            },
            {
                "query": "SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
                "question": "What is the car with the least accelerate?",
                "result": "* \n FROM cars_data \n WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data)",
                "prompt": "### What is the car with the least accelerate? \n SELECT"
            },
            {
                "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
                "question": "What is its horsepower?",
                "result": "Horsepower \n FROM cars_data \n WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data)",
                "prompt": "### What is its horsepower? \n SELECT"
            },
            {
                "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
                "question": "What about its number of cylinders?",
                "result": "Cylinders \n FROM cars_data \n WHERE Accelerate = (SELECT MIN(Accelerate) FROM cars_data)",
                "prompt": "### What about its number of cylinders? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
                "question": "What is largest horsepower of all cars?",
                "result": "MAX(Horsepower) FROM cars_data",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is largest horsepower of all cars? \n SELECT"
            },
            {
                "query": "SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
                "question": "What is the accelerate of the car with this horsepower?",
                "result": "Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data)",
                "prompt": "### What is the accelerate of the car with this horsepower? \n SELECT"
            },
            {
                "query": "SELECT id FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
                "question": "What are the car ids of the cars with a greater accelerate than this?",
                "result": "Id FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
                "prompt": "### What are the car ids of the cars with a greater accelerate than this? \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
                "question": "How many are there?",
                "result": "COUNT(Id) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data))",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT CountryName FROM COUNTRIES where CountryId not in (SELECT T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country);",
                "question": "What are the names of the countries that have no car makers?",
                "result": "CountryName \nFROM countries \nWHERE CountryId NOT IN \n    (SELECT DISTINCT Country FROM car_makers)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names of the countries that have no car makers? \n SELECT"
            },
            {
                "query": "SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country;",
                "question": "Show me all the names of all the different countries outside of those!",
                "result": "DISTINCT CountryName \nFROM countries",
                "prompt": "### Show me all the names of all the different countries outside of those! \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  1 );",
                "question": "How many of these have more than 1 car maker?",
                "result": "COUNT(DISTINCT Country) \nFROM car_makers \nGROUP BY Country \nHAVING COUNT(DISTINCT Maker) > 1",
                "prompt": "### How many of these have more than 1 car maker? \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
                "question": "How about more than 2?",
                "result": "COUNT(DISTINCT Country) \nFROM car_makers \nGROUP BY Country \nHAVING COUNT(DISTINCT Maker) > 2",
                "prompt": "### How about more than 2? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id;",
                "question": "Show all models and horsepowers of all cars!",
                "result": "model_list.Model, cars_data.Horsepower\n FROM model_list\n INNER JOIN car_names ON model_list.ModelId = car_names.Model\n INNER JOIN car_makers ON car_names.MakeId = car_makers.Id\n INNER JOIN cars_data ON car_makers.Maker = cars_data.Id;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all models and horsepowers of all cars! \n SELECT"
            },
            {
                "query": "SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4;",
                "question": "Now show just the ones with 4 cylinders.",
                "result": "model_list.Model, cars_data.Horsepower\n FROM model_list\n INNER JOIN car_names ON model_list.ModelId = car_names.Model\n INNER JOIN car_makers ON car_names.MakeId = car_makers.Id\n INNER JOIN cars_data ON car_makers.Maker = cars_data.Id\n WHERE cars_data.Cylinders = 4;",
                "prompt": "### Now show just the ones with 4 cylinders. \n SELECT"
            },
            {
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower ASC LIMIT 1;",
                "question": "What is the model of that with the lowest horsepower?",
                "result": "model_list.Model\n FROM model_list\n INNER JOIN car_names ON model_list.ModelId = car_names.Model\n INNER JOIN car_makers ON car_names.MakeId = car_makers.Id\n INNER JOIN cars_data ON car_makers.Maker = cars_data.Id\n WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);",
                "prompt": "### What is the model of that with the lowest horsepower? \n SELECT"
            },
            {
                "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
                "question": "How about the greatest horsepower?",
                "result": "model_list.Model\n FROM model_list\n INNER JOIN car_names ON model_list.ModelId = car_names.Model\n INNER JOIN car_makers ON car_names.MakeId = car_makers.Id\n INNER JOIN cars_data ON car_makers.Maker = cars_data.Id\n WHERE cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data);",
                "prompt": "### How about the greatest horsepower? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT min(Horsepower) FROM CARS_DATA;",
                "question": "What is the lowest horsepower of all cars?",
                "result": "MIN(Horsepower) FROM cars_data",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the lowest horsepower of all cars? \n SELECT"
            },
            {
                "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA);",
                "question": "Show all the ids and makes of those with a horsepower greater than this!",
                "result": "Id, Maker FROM car_makers WHERE Id IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data))",
                "prompt": "### Show all the ids and makes of those with a horsepower greater than this! \n SELECT"
            },
            {
                "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 5;",
                "question": "Which ones have 5 cylinders or less?",
                "result": "Id, Maker FROM car_makers WHERE Id IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 5)",
                "prompt": "### Which ones have 5 cylinders or less? \n SELECT"
            },
            {
                "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 3;",
                "question": "How about 3 or less?",
                "result": "Id, Maker FROM car_makers WHERE Id IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3)",
                "prompt": "### How about 3 or less? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE YEAR  <  1980;",
                "question": "Show me the mpg, horsepower and accelerate for all the cars that were produced before 1980!",
                "result": "MPG, Horsepower, Accelerate\nFROM cars_data\nWHERE Year < 1980",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show me the mpg, horsepower and accelerate for all the cars that were produced before 1980! \n SELECT"
            },
            {
                "query": "SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980;",
                "question": "Also include the cars that have 8 cylinders!",
                "result": "MPG, Horsepower, Accelerate\nFROM cars_data\nWHERE Year < 1980 AND Cylinders = 8",
                "prompt": "### Also include the cars that have 8 cylinders! \n SELECT"
            },
            {
                "query": "SELECT accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY accelerate DESC LIMIT 1;",
                "question": "What is the max horsepower for this group?",
                "result": "MAX(Horsepower)\nFROM cars_data\nWHERE Year < 1980 AND Cylinders = 8",
                "prompt": "### What is the max horsepower for this group? \n SELECT"
            },
            {
                "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
                "question": "how about the max mpg?",
                "result": "MAX(MPG)\nFROM cars_data\nWHERE Year < 1980 AND Cylinders = 8",
                "prompt": "### how about the max mpg? \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName = 'Ford Motor Company';",
                "question": "Show all the models that were built by the Ford Motor Company.",
                "result": "model_list.Model\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.Maker = \"Ford Motor Company\"",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all the models that were built by the Ford Motor Company. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName != 'Ford Motor Company';",
                "question": "What are all the models except those!",
                "result": "model_list.Model\nFROM model_list\nWHERE model_list.Model NOT IN (\n    SELECT model_list.Model\n    FROM model_list\n    INNER JOIN car_makers ON model_list.Maker = car_makers.Maker\n    WHERE car_makers.Maker = \"Ford Motor Company\"\n)",
                "prompt": "### What are all the models except those! \n SELECT"
            },
            {
                "query": "SELECT T1.model, T2.Make, T3.weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
                "question": "Also provide the weights for all different makes for each of these models.",
                "result": "model_list.Model, car_names.Make, cars_data.Weight\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE model_list.Model NOT IN (\n    SELECT model_list.Model\n    FROM model_list\n    INNER JOIN car_makers ON model_list.Maker = car_makers.Maker\n    WHERE car_makers.Maker = \"Ford Motor Company\"\n)",
                "prompt": "### Also provide the weights for all different makes for each of these models. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
                "question": "List all the different models from these that have makes that are lighter than 3500!",
                "result": "model_list.Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE model_list.Model NOT IN (\n    SELECT model_list.Model\n    FROM model_list\n    INNER JOIN car_makers ON model_list.Maker = car_makers.Maker\n    WHERE car_makers.Maker = \"Ford Motor Company\"\n) AND cars_data.Weight < 3500\nGROUP BY model_list.Model",
                "prompt": "### List all the different models from these that have makes that are lighter than 3500! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT CountryName FROM countries;",
                "question": "What are all the names of countries?",
                "result": "CountryName\nFROM countries",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the names of countries? \n SELECT"
            },
            {
                "query": "SELECT distinct T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
                "question": "Which ones have at least one car maker?",
                "result": "DISTINCT CountryName\nFROM countries\nINNER JOIN car_makers ON countries.CountryId = car_makers.Country",
                "prompt": "### Which ones have at least one car maker? \n SELECT"
            },
            {
                "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
                "question": "Show me all of car names other than these!",
                "result": "Make\nFROM car_names\nWHERE Make NOT IN ('Ford', 'Chevrolet', 'Honda', 'Toyota', 'Volkswagen')",
                "prompt": "### Show me all of car names other than these! \n SELECT"
            }
        ]
    },
    {
        "database_id": "car_1",
        "interaction": [
            {
                "query": "SELECT T1.Id ,  T1.Maker, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;",
                "question": "Show all the car maker id, names, the models and makes they produce!",
                "result": "car_makers.Id, car_makers.Maker, model_list.Model, car_names.Make\nFROM car_makers\nJOIN model_list ON car_makers.Maker = model_list.Maker\nJOIN car_names ON model_list.ModelId = car_names.ModelId",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Show all the car maker id, names, the models and makes they produce! \n SELECT"
            },
            {
                "query": "SELECT T1.Id ,  T1.Maker, count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
                "question": "How many model does each car maker produce? List the id and maker!",
                "result": "car_makers.Id, car_makers.Maker, COUNT(model_list.Model) AS NumModels\nFROM car_makers\nJOIN model_list ON car_makers.Maker = model_list.Maker\nGROUP BY car_makers.Id, car_makers.Maker",
                "prompt": "### How many model does each car maker produce? List the id and maker! \n SELECT"
            },
            {
                "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2;",
                "question": "Show me those that produce at least 2!",
                "result": "car_makers.Id, car_makers.Maker, COUNT(model_list.Model) AS NumModels\nFROM car_makers\nJOIN model_list ON car_makers.Maker = model_list.Maker\nGROUP BY car_makers.Id, car_makers.Maker\nHAVING COUNT(model_list.Model) >= 2",
                "prompt": "### Show me those that produce at least 2! \n SELECT"
            },
            {
                "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
                "question": "For each of these, only show those that have more than 3 car makes!",
                "result": "car_makers.Id, car_makers.Maker, COUNT(DISTINCT car_names.Make) AS NumMakes\nFROM car_makers\nJOIN model_list ON car_makers.Maker = model_list.Maker\nJOIN car_names ON model_list.ModelId = car_names.ModelId\nGROUP BY car_makers.Id, car_makers.Maker\nHAVING COUNT(DISTINCT car_names.Make) > 3",
                "prompt": "### For each of these, only show those that have more than 3 car makes! \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM matches",
                "question": "How many matches are there?",
                "result": "COUNT(*) FROM matches;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many matches are there? \n SELECT"
            },
            {
                "query": "SELECT max(minutes) FROM matches",
                "question": "What was the maximum length in minutes for the matches?",
                "result": "MAX(minutes) FROM matches;",
                "prompt": "### What was the maximum length in minutes for the matches? \n SELECT"
            },
            {
                "query": "SELECT avg(minutes) FROM matches",
                "question": "Average?",
                "result": "AVG(minutes) FROM matches;",
                "prompt": "### Average? \n SELECT"
            },
            {
                "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
                "question": "How about for the age of losers and winners?",
                "result": "AVG(loser_age), AVG(winner_age) FROM matches;",
                "prompt": "### How about for the age of losers and winners? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(DISTINCT tourney_name) FROM matches",
                "question": "How many distinct tourney names are there?",
                "result": "COUNT(DISTINCT tourney_name) \nFROM matches;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many distinct tourney names are there? \n SELECT"
            },
            {
                "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  20",
                "question": "Which ones have more than 20 matches?",
                "result": "tourney_name, COUNT(*) as num_matches\nFROM matches \nGROUP BY tourney_name \nHAVING num_matches > 20;",
                "prompt": "### Which ones have more than 20 matches? \n SELECT"
            },
            {
                "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
                "question": "More than 10?",
                "result": "tourney_name, COUNT(*) as num_matches\nFROM matches \nGROUP BY tourney_name \nHAVING num_matches > 10;",
                "prompt": "### More than 10? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE year = 2013",
                "question": "How many distinct winners played in 2013?",
                "result": "COUNT(DISTINCT winner_id) FROM matches WHERE year = 2013",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many distinct winners played in 2013? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM (SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016)",
                "question": "Of those, how many also played in 2016.",
                "result": "COUNT(DISTINCT winner_id) FROM matches WHERE year = 2013 AND winner_id IN (SELECT DISTINCT winner_id FROM matches WHERE year = 2016)",
                "prompt": "### Of those, how many also played in 2016. \n SELECT"
            },
            {
                "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
                "question": "What are their names?",
                "result": "DISTINCT players.first_name, players.last_name FROM players \nINNER JOIN matches ON players.player_id = matches.winner_id \nWHERE matches.year = 2013 AND players.player_id IN \n(SELECT DISTINCT winner_id FROM matches WHERE year = 2016)",
                "prompt": "### What are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM matches",
                "question": "How many matches were played?",
                "result": "COUNT(*) FROM matches;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many matches were played? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM matches WHERE loser_hand = \"L\"",
                "question": "How many where the loser hand is L?",
                "result": "COUNT(*) FROM matches WHERE loser_hand = 'L';",
                "prompt": "### How many where the loser hand is L? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
                "question": "How many played in year 2013 or 2016?",
                "result": "COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
                "prompt": "### How many played in year 2013 or 2016? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM players",
                "question": "How many players are there?",
                "result": "COUNT(player_id) FROM players",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players are there? \n SELECT"
            },
            {
                "query": "SELECT T1.last_name, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships'",
                "question": "Which ones won in the tourney WTA Championships? Give their last name and birth date.",
                "result": "players.last_name, players.birth_date \nFROM players \nINNER JOIN matches \nON players.player_id = matches.winner_id \nWHERE matches.tourney_name = 'WTA Championships'",
                "prompt": "### Which ones won in the tourney WTA Championships? Give their last name and birth date. \n SELECT"
            },
            {
                "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships'",
                "question": "Give first name and country code instead.",
                "result": "players.first_name, players.country_code \nFROM players \nINNER JOIN matches \nON players.player_id = matches.winner_id \nWHERE matches.tourney_name = 'WTA Championships'",
                "prompt": "### Give first name and country code instead. \n SELECT"
            },
            {
                "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
                "question": "Which ones also won in the Australian Open?",
                "result": "players.first_name, players.last_name \nFROM players \nINNER JOIN matches \nON players.player_id = matches.winner_id \nWHERE matches.tourney_name = 'WTA Championships' \nAND EXISTS (SELECT 1 FROM matches \n            WHERE matches.tourney_name = 'Australian Open' \n            AND players.player_id = matches.winner_id)",
                "prompt": "### Which ones also won in the Australian Open? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT birth_date FROM players ORDER BY birth_date DESC LIMIT 1",
                "question": "What is the birth date of the oldest player?",
                "result": "MIN(birth_date) FROM players",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the birth date of the oldest player? \n SELECT"
            },
            {
                "query": "SELECT player_id ,  last_name FROM players ORDER BY birth_date LIMIT 1",
                "question": "Give the player id and last name instead.",
                "result": "player_id, last_name FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
                "prompt": "### Give the player id and last name instead. \n SELECT"
            },
            {
                "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
                "question": "Give the first name and country code instead.",
                "result": "first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
                "prompt": "### Give the first name and country code instead. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM players WHERE hand = 'R'",
                "question": "How many players have right / R hand?",
                "result": "COUNT(*) \nFROM players \nWHERE hand = 'R'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players have right / R hand? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM players WHERE hand = 'L'",
                "question": "Left / L hand?",
                "result": "COUNT(*) \nFROM players \nWHERE hand = 'L'",
                "prompt": "### Left / L hand? \n SELECT"
            },
            {
                "query": "SELECT country_code ,  birth_date FROM players WHERE hand  =  'L'",
                "question": "Give their country code and birth date.",
                "result": "country_code, birth_date \nFROM players \nWHERE hand = 'L'",
                "prompt": "### Give their country code and birth date. \n SELECT"
            },
            {
                "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
                "question": "Order by their birth date, and give the first and last name instead.",
                "result": "first_name, last_name, birth_date, country_code \nFROM players \nWHERE hand = 'L' \nORDER BY birth_date",
                "prompt": "### Order by their birth date, and give the first and last name instead. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM players",
                "question": "How many players are there?",
                "result": "COUNT(*) FROM players;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players are there? \n SELECT"
            },
            {
                "query": "SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours ASC LIMIT 1",
                "question": "How many tours did the player who did the least number of tours do?",
                "result": "MIN(tours) FROM rankings;",
                "prompt": "### How many tours did the player who did the least number of tours do? \n SELECT"
            },
            {
                "query": "SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
                "question": "Most number of tours?",
                "result": "MAX(tours) FROM rankings;",
                "prompt": "### Most number of tours? \n SELECT"
            },
            {
                "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
                "question": "Give the first name and country code instead.",
                "result": "first_name, country_code FROM players;",
                "prompt": "### Give the first name and country code instead. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM matches",
                "question": "How many matches are there?",
                "result": "COUNT(*) FROM matches;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many matches are there? \n SELECT"
            },
            {
                "query": "SELECT surface FROM matches GROUP BY surface ORDER  BY count(*) DESC LIMIT 1",
                "question": "Find the surface that has the most number.",
                "result": "surface, COUNT(*) as num_matches\nFROM matches\nGROUP BY surface\nORDER BY num_matches DESC\nLIMIT 1;",
                "prompt": "### Find the surface that has the most number. \n SELECT"
            },
            {
                "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                "question": "What about the year?",
                "result": "year, COUNT(*) as num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches DESC\nLIMIT 1;",
                "prompt": "### What about the year? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT loser_name FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1",
                "question": "Find the name of the loser who lost the most times.",
                "result": "loser_name \nFROM \nmatches \nWHERE \nloser_name NOT NULL \nGROUP BY \nloser_name \nORDER BY \nCOUNT(*) DESC \nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name of the loser who lost the most times. \n SELECT"
            },
            {
                "query": "SELECT loser_name, loser_rank_points FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1",
                "question": "Give the rank points as well.",
                "result": "loser_name, loser_rank_points \nFROM \nmatches \nWHERE \nloser_name NOT NULL \nGROUP BY \nloser_name \nORDER BY \nCOUNT(*) DESC \nLIMIT 1;",
                "prompt": "### Give the rank points as well. \n SELECT"
            },
            {
                "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
                "question": "Give the same, but for the winner who won the most times.",
                "result": "winner_name, winner_rank_points \nFROM \nmatches \nWHERE \nwinner_name NOT NULL \nGROUP BY \nwinner_name \nORDER BY \nCOUNT(*) DESC \nLIMIT 1;",
                "prompt": "### Give the same, but for the winner who won the most times. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT loser_name FROM matches ORDER BY loser_rank_points DESC LIMIT 1",
                "question": "Give the name of the loser who has the highest rank points.",
                "result": "loser_name \nFROM matches \nWHERE loser_rank_points = (SELECT MAX(loser_rank_points) FROM matches)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Give the name of the loser who has the highest rank points. \n SELECT"
            },
            {
                "query": "SELECT loser_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY loser_rank_points DESC LIMIT 1",
                "question": "Do the same but for the Australian Open tourney.",
                "result": "loser_name \nFROM matches \nWHERE loser_rank_points = (\n    SELECT MAX(loser_rank_points) \n    FROM matches \n    WHERE tourney_name = 'Australian Open'\n)",
                "prompt": "### Do the same but for the Australian Open tourney. \n SELECT"
            },
            {
                "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
                "question": "Give the winner name instead.",
                "result": "winner_name \nFROM matches \nWHERE winner_rank_points = (\n    SELECT MAX(winner_rank_points) \n    FROM matches \n    WHERE tourney_name = 'Australian Open'\n)",
                "prompt": "### Give the winner name instead. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT minutes FROM matches ORDER BY minutes ASC LIMIT 1",
                "question": "Give the length of the match in minutes of the shortest match.",
                "result": "MIN(minutes) FROM matches;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Give the length of the match in minutes of the shortest match. \n SELECT"
            },
            {
                "query": "SELECT minutes FROM matches ORDER BY minutes DESC LIMIT 1",
                "question": "Longest match?",
                "result": "MAX(minutes) FROM matches;",
                "prompt": "### Longest match? \n SELECT"
            },
            {
                "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
                "question": "Give the winner and loser name instead.",
                "result": "winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);",
                "prompt": "### Give the winner and loser name instead. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT birth_date FROM players",
                "question": "Find the birth dates of each of the players.",
                "result": "birth_date\nFROM players;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the birth dates of each of the players. \n SELECT"
            },
            {
                "query": "SELECT T2.tours, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
                "question": "Find tours and first name instead.",
                "result": "tours, first_name\nFROM rankings\nJOIN players ON rankings.player_id = players.player_id;",
                "prompt": "### Find tours and first name instead. \n SELECT"
            },
            {
                "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
                "question": "Give the average ranking instead of the tours.",
                "result": "AVG(ranking) as avg_ranking, first_name\nFROM rankings\nJOIN players ON rankings.player_id = players.player_id\nGROUP BY first_name;",
                "prompt": "### Give the average ranking instead of the tours. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
                "question": "Give the number of tours for each player.",
                "result": "players.player_id, COUNT(rankings.tours) AS num_tours \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.player_id",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Give the number of tours for each player. \n SELECT"
            },
            {
                "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
                "question": "Give the average rank points and first name.",
                "result": "AVG(rankings.ranking_points) AS avg_rank_points, players.first_name \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.first_name",
                "prompt": "### Give the average rank points and first name. \n SELECT"
            },
            {
                "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
                "question": "Find the total ranking points instead.",
                "result": "SUM(rankings.ranking_points) AS total_rank_points, players.first_name \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.first_name",
                "prompt": "### Find the total ranking points instead. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM players GROUP BY country_code",
                "question": "Find the number of players for each country.",
                "result": "country_code, COUNT(player_id) AS player_count \n FROM players \n GROUP BY country_code;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of players for each country. \n SELECT"
            },
            {
                "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) ASC LIMIT 1",
                "question": "Which country has the least number of players? Give the country code.",
                "result": "country_code, COUNT(player_id) AS player_count \n FROM players \n GROUP BY country_code \n ORDER BY player_count ASC \n LIMIT 1;",
                "prompt": "### Which country has the least number of players? Give the country code. \n SELECT"
            },
            {
                "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
                "question": "Greatest number?",
                "result": "country_code, COUNT(player_id) AS player_count \n FROM players \n GROUP BY country_code \n ORDER BY player_count DESC \n LIMIT 1;",
                "prompt": "### Greatest number? \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(*), hand FROM players GROUP BY hand",
                "question": "What is the number of players for each hand type? Give the hand type as well.",
                "result": "hand, COUNT(*) as num_players\n FROM players\n GROUP BY hand;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the number of players for each hand type? Give the hand type as well. \n SELECT"
            },
            {
                "query": "SELECT count(*), country_code FROM players GROUP BY country_code",
                "question": "For each country?",
                "result": "country_code, COUNT(*) as num_players\n FROM players\n GROUP BY country_code;",
                "prompt": "### For each country? \n SELECT"
            },
            {
                "query": "SELECT count(*), country_code FROM players GROUP BY country_code HAVING count(*) > 50",
                "question": "Give the ones that have more than 50 players.",
                "result": "country_code, COUNT(*) as num_players\n FROM players\n GROUP BY country_code\n HAVING num_players > 50;",
                "prompt": "### Give the ones that have more than 50 players. \n SELECT"
            },
            {
                "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
                "question": "Give the country code only.",
                "result": "country_code\n FROM players\n GROUP BY country_code\n HAVING COUNT(*) > 50;",
                "prompt": "### Give the country code only. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT DISTINCT loser_name FROM matches ORDER BY loser_age DESC LIMIT 3",
                "question": "Give the name of the 3 oldest losers across all matches.",
                "result": "loser_name\nFROM matches\nORDER BY loser_age DESC\nLIMIT 3;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Give the name of the 3 oldest losers across all matches. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT winner_name FROM matches ORDER BY winner_age DESC LIMIT 3",
                "question": "How about the 3 oldest winners.",
                "result": "winner_name\nFROM matches\nORDER BY winner_age DESC\nLIMIT 3;",
                "prompt": "### How about the 3 oldest winners. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
                "question": "Youngest? Give the rank as well.",
                "result": "loser_name, loser_age, loser_rank\nFROM matches\nORDER BY loser_age ASC\nLIMIT 3; \n\nSELECT winner_name, winner_age, winner_rank\nFROM matches\nORDER BY winner_age ASC\nLIMIT 3;",
                "prompt": "### Youngest? Give the rank as well. \n SELECT"
            }
        ]
    },
    {
        "database_id": "wta_1",
        "interaction": [
            {
                "query": "SELECT count(DISTINCT loser_name) FROM matches WHERE tourney_name  =  'Australian Open'",
                "question": "How  many different losers participated in the Australian Open?",
                "result": "COUNT(DISTINCT loser_id) FROM matches WHERE tourney_name = 'Australian Open'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How  many different losers participated in the Australian Open? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'Australian Open'",
                "question": "Winners?",
                "result": "COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'Australian Open'",
                "prompt": "### Winners? \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
                "question": "How about in the WTA Championships, and were also left handed?",
                "result": "COUNT(DISTINCT loser_id) FROM matches WHERE tourney_name = 'WTA Championships' AND loser_hand = 'L'",
                "prompt": "### How about in the WTA Championships, and were also left handed? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT * FROM conductor",
                "question": "List all conductor information.",
                "result": "* FROM conductor;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List all conductor information. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM conductor",
                "question": "How many conductors are there?",
                "result": "COUNT(*) FROM conductor;",
                "prompt": "### How many conductors are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "What are the names of the conductors?",
                "result": "Name FROM conductor;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of the conductors? \n SELECT"
            },
            {
                "query": "SELECT Age FROM conductor",
                "question": "What are the ages of the conductors?",
                "result": "Age FROM conductor;",
                "prompt": "### What are the ages of the conductors? \n SELECT"
            },
            {
                "query": "SELECT Name FROM conductor ORDER BY Age ASC",
                "question": "List the names of conductors in ascending order of age.",
                "result": "Name FROM conductor ORDER BY Age ASC;",
                "prompt": "### List the names of conductors in ascending order of age. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "List the names of conductors",
                "result": "Name FROM conductor",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of conductors \n SELECT"
            },
            {
                "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
                "question": "Among these conductors, which of them are not from the USA?",
                "result": "Name FROM conductor WHERE Nationality != 'USA'",
                "prompt": "### Among these conductors, which of them are not from the USA? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Record_Company FROM orchestra",
                "question": "List the information of record companies.",
                "result": "* FROM orchestra WHERE Record_Company IS NOT NULL;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the information of record companies. \n SELECT"
            },
            {
                "query": "SELECT Record_Company, Year_of_Founded FROM orchestra",
                "question": "When were they founded?",
                "result": "Record_Company, Year_of_Founded FROM orchestra WHERE Record_Company IS NOT NULL;",
                "prompt": "### When were they founded? \n SELECT"
            },
            {
                "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
                "question": "Please list the record companies of orchestras in descending order of years in which they were founded.",
                "result": "Record_Company FROM orchestra WHERE Record_Company IS NOT NULL ORDER BY Year_of_Founded DESC;",
                "prompt": "### Please list the record companies of orchestras in descending order of years in which they were founded. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Attendance FROM SHOW",
                "question": "What is the attendance of each show?",
                "result": "show.Attendance\nFROM show",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the attendance of each show? \n SELECT"
            },
            {
                "query": "SELECT avg(Attendance) FROM SHOW",
                "question": "What is the average attendance?",
                "result": "AVG(show.Attendance) \nFROM show",
                "prompt": "### What is the average attendance? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT SHARE FROM performance",
                "question": "What are the shares of performances?",
                "result": "Performance_ID, Share FROM performance",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the shares of performances? \n SELECT"
            },
            {
                "query": "SELECT SHARE FROM performance WHERE TYPE != \"Live final\"",
                "question": "What are the shares of performances whose type is not \"Live final\"?",
                "result": "Performance_ID, Share FROM performance WHERE Type != \"Live final\"",
                "prompt": "### What are the shares of performances whose type is not \"Live final\"? \n SELECT"
            },
            {
                "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
                "question": "What are the maximum and the minimum of these values?",
                "result": "MAX(Share), MIN(Share) FROM performance",
                "prompt": "### What are the maximum and the minimum of these values? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Nationality FROM conductor",
                "question": "List the nationalities of conductors.",
                "result": "Nationality FROM conductor",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the nationalities of conductors. \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT Nationality) FROM conductor",
                "question": "How many are there?",
                "result": "COUNT(DISTINCT Nationality) FROM conductor",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "List the names of conductors.",
                "result": "Name FROM conductor;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of conductors. \n SELECT"
            },
            {
                "query": "SELECT Year_of_Work FROM conductor",
                "question": "List years of work of conductors.",
                "result": "Year_of_Work FROM conductor;",
                "prompt": "### List years of work of conductors. \n SELECT"
            },
            {
                "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
                "question": "List names of conductors in descending order of years of work.",
                "result": "Name FROM conductor ORDER BY Year_of_Work DESC;",
                "prompt": "### List names of conductors in descending order of years of work. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "List the names of the conductors.",
                "result": "Name FROM conductor;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of the conductors. \n SELECT"
            },
            {
                "query": "SELECT Year_of_Work FROM conductor",
                "question": "List years of work of conductors.",
                "result": "Year_of_Work FROM conductor;",
                "prompt": "### List years of work of conductors. \n SELECT"
            },
            {
                "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
                "question": "List the name of the conductor with the most years of work.",
                "result": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;",
                "prompt": "### List the name of the conductor with the most years of work. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "Show the names of conductors.",
                "result": "Name FROM conductor",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of conductors. \n SELECT"
            },
            {
                "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
                "question": "Please list these names with the orchestras they have conducted.",
                "result": "conductor.Name, orchestra.Orchestra \n FROM conductor \n JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
                "prompt": "### Please list these names with the orchestras they have conducted. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "Please show the names of the conductors.",
                "result": "Name FROM conductor;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the names of the conductors. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
                "question": "Which of them have conducted more than one orchestras?",
                "result": "conductor.Name FROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Conductor_ID\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
                "prompt": "### Which of them have conducted more than one orchestras? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "Please show the names of the conductors.",
                "result": "Name FROM conductor",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the names of the conductors. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "Who has conducted the most orchestras?",
                "result": "Conductor_ID, COUNT(Orchestra_ID) as num_orchestras \n FROM orchestra \n GROUP BY Conductor_ID \n ORDER BY num_orchestras DESC \n LIMIT 1",
                "prompt": "### Who has conducted the most orchestras? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Name FROM conductor",
                "question": "Please show the names of the conductors.",
                "result": "Name FROM conductor",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the names of the conductors. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
                "question": "Who has conducted orchestras founded after 2008?",
                "result": "conductor.Name FROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008;",
                "prompt": "### Who has conducted orchestras founded after 2008? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company",
                "question": "Please show the record companies without duplicates.",
                "result": "DISTINCT Record_Company FROM orchestra;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the record companies without duplicates. \n SELECT"
            },
            {
                "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
                "question": "Please also show their corresponding number of orchestras.",
                "result": "Record_Company, COUNT(DISTINCT Orchestra_ID) AS Number_of_Orchestras \n FROM orchestra\n GROUP BY Record_Company;",
                "prompt": "### Please also show their corresponding number of orchestras. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Major_Record_Format FROM orchestra",
                "question": "Please show the record formats of orchestras.",
                "result": "Major_Record_Format \nFROM \norchestra",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the record formats of orchestras. \n SELECT"
            },
            {
                "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
                "question": "Please list them in ascending order of count.",
                "result": "Major_Record_Format, COUNT(*) AS Count \nFROM \norchestra \nGROUP BY \nMajor_Record_Format \nORDER BY \nCount ASC",
                "prompt": "### Please list them in ascending order of count. \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Record_Company FROM orchestra",
                "question": "List the information of all record companies.",
                "result": "* FROM orchestra\nWHERE Record_Company IS NOT NULL",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the information of all record companies. \n SELECT"
            },
            {
                "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "Which one is shared by the most orchestras?",
                "result": "Orchestra, COUNT(*) AS num_orchestras\nFROM orchestra\nGROUP BY Orchestra\nORDER BY num_orchestras DESC\nLIMIT 1;",
                "prompt": "### Which one is shared by the most orchestras? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Orchestra FROM orchestra",
                "question": "List the names of orchestras.",
                "result": "Orchestra\nFROM orchestra",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of orchestras. \n SELECT"
            },
            {
                "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
                "question": "Which of them have had no performances?",
                "result": "Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
                "prompt": "### Which of them have had no performances? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT Record_Company FROM orchestra",
                "question": "Please list the record companies.",
                "result": "DISTINCT Record_Company FROM orchestra",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please list the record companies. \n SELECT"
            },
            {
                "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003",
                "question": "Which of them are shared by orchestras founded before 2003?",
                "result": "DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003",
                "prompt": "### Which of them are shared by orchestras founded before 2003? \n SELECT"
            },
            {
                "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
                "question": "Which of them are shared by orchestras founded after 2003?",
                "result": "DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
                "prompt": "### Which of them are shared by orchestras founded after 2003? \n SELECT"
            },
            {
                "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
                "question": "Which of them are shared by orchestras founded before 2003 and after 2003?",
                "result": "DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 \nINTERSECT \nSELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
                "prompt": "### Which of them are shared by orchestras founded before 2003 and after 2003? \n SELECT"
            }
        ]
    },
    {
        "database_id": "orchestra",
        "interaction": [
            {
                "query": "SELECT * FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
                "question": "List the orchestras whose record format is \"CD\" or \"DVD\".",
                "result": "Orchestra\nFROM orchestra\nWHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the orchestras whose record format is \"CD\" or \"DVD\". \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
                "question": "How many of these orchestras are there?",
                "result": "COUNT(DISTINCT Orchestra)\nFROM orchestra\nWHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
                "prompt": "### How many of these orchestras are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT * FROM Documents",
                "question": "Show information for all documents.",
                "result": "Documents.* FROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show information for all documents. \n SELECT"
            },
            {
                "query": "SELECT document_id FROM Documents",
                "question": "Show their ids.",
                "result": "Documents.Document_ID FROM Documents",
                "prompt": "### Show their ids. \n SELECT"
            },
            {
                "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
                "question": "Also show their document names and document descriptions.",
                "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents",
                "prompt": "### Also show their document names and document descriptions. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_name FROM Documents",
                "question": "Show the document name for all documents.",
                "result": "Document_Name FROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document name for all documents. \n SELECT"
            },
            {
                "query": "SELECT document_name, Document_Description FROM Documents",
                "question": "Also show their description.",
                "result": "Document_Name, Document_Description FROM Documents",
                "prompt": "### Also show their description. \n SELECT"
            },
            {
                "query": "SELECT document_name FROM Documents WHERE Document_Description LIKE \"%w%\"",
                "question": "Which one has description with the letter 'w' in it?",
                "result": "Document_Name FROM Documents WHERE Document_Description LIKE '%w%'",
                "prompt": "### Which one has description with the letter 'w' in it? \n SELECT"
            },
            {
                "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
                "question": "Show its name and template id.",
                "result": "Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
                "prompt": "### Show its name and template id. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_name from Documents",
                "question": "Show the the document name for all documents.",
                "result": "Document_Name\nFROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the the document name for all documents. \n SELECT"
            },
            {
                "query": "SELECT document_id FROM Documents WHERE document_name  =  \"Robbin CV\"",
                "question": "Show the document id for the one named \"Robbin CV\"?",
                "result": "Document_ID\nFROM Documents\nWHERE Document_Name = 'Robbin CV'",
                "prompt": "### Show the document id for the one named \"Robbin CV\"? \n SELECT"
            },
            {
                "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
                "question": "Also show its template id and description.",
                "result": "Documents.Document_ID, Templates.Template_ID, Ref_Template_Types.Template_Type_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Documents.Document_Name = 'Robbin CV'",
                "prompt": "### Also show its template id and description. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Documents",
                "question": "Show the template id for all documents.",
                "result": "Documents.Template_ID FROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template id for all documents. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT template_id FROM Documents",
                "question": "Show all distinct results.",
                "result": "DISTINCT * FROM table_name; # replace table_name with the actual table name you want to select distinct values from.",
                "prompt": "### Show all distinct results. \n SELECT"
            },
            {
                "query": "SELECT count(DISTINCT template_id) FROM Documents",
                "question": "How many are there?",
                "result": "COUNT(*) FROM table_name; # replace table_name with the actual table name you want to count the number of rows in.",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id FROM Documents",
                "question": "Show the document ids.",
                "result": "Document_ID\nFROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document ids. \n SELECT"
            },
            {
                "query": "SELECT T1.document_id, T2.Template_ID, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID",
                "question": "Also show their template id and template type code.",
                "result": "Documents.Document_ID, Templates.Template_ID, Templates.Template_Type_Code\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID",
                "prompt": "### Also show their template id and template type code. \n SELECT"
            },
            {
                "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID where T2.Template_Type_Code  =  'PPT'",
                "question": "Which documents are using the template with type code 'PPT'?",
                "result": "Documents.Document_ID\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT'",
                "prompt": "### Which documents are using the template with type code 'PPT'? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
                "question": "How many are there?",
                "result": "COUNT(DISTINCT Documents.Document_ID) as num_documents\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT'",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Documents",
                "question": "Show the template id for all documents.",
                "result": "Documents.Template_ID FROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template id for all documents. \n SELECT"
            },
            {
                "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
                "question": "For each of them, show the number of documents using it.",
                "result": "Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_of_Documents\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID",
                "prompt": "### For each of them, show the number of documents using it. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Documents",
                "question": "Show the template id for all Documents.",
                "result": "Templates.Template_ID \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template id for all Documents. \n SELECT"
            },
            {
                "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id",
                "question": "Also show its template type code.",
                "result": "Templates.Template_ID, Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
                "prompt": "### Also show its template type code. \n SELECT"
            },
            {
                "query": "SELECT count(*), T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id",
                "question": "For each of them, show the number of documents using it.",
                "result": "Templates.Template_ID, Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS Num_Documents\nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code;",
                "prompt": "### For each of them, show the number of documents using it. \n SELECT"
            },
            {
                "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one has the most?",
                "result": "Templates.Template_ID, Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS Num_Documents\nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID, Templates.Template_Type_Code\nORDER BY Num_Documents DESC \nLIMIT 1;",
                "prompt": "### Which one has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Documents",
                "question": "Show the template id for all documents.",
                "result": "Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template id for all documents. \n SELECT"
            },
            {
                "query": "SELECT template_id, count(*) FROM Documents GROUP BY template_id",
                "question": "For each of them, show the number of documents.",
                "result": "Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_Documents\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;",
                "prompt": "### For each of them, show the number of documents. \n SELECT"
            },
            {
                "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
                "question": "Which of them are used by more than one document?",
                "result": "Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
                "prompt": "### Which of them are used by more than one document? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Documents",
                "question": "Show template ids used by some document.",
                "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID = [some_document_id];",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids used by some document. \n SELECT"
            },
            {
                "query": "SELECT template_id FROM Templates",
                "question": "Show all template ids.",
                "result": "Template_ID \nFROM Templates;",
                "prompt": "### Show all template ids. \n SELECT"
            },
            {
                "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
                "question": "Which of them are not used by any document?",
                "result": "Templates.Template_ID \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;",
                "prompt": "### Which of them are not used by any document? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT * FROM Templates",
                "question": "Show info for all templates.",
                "result": "Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details\nFROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show info for all templates. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Templates",
                "question": "How many are there?",
                "result": "COUNT(*) AS Total_Templates\nFROM Templates",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Templates",
                "question": "Show template ids for all templates.",
                "result": "Template_ID \nFROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids for all templates. \n SELECT"
            },
            {
                "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
                "question": "Also show their version numbers and template type codes.",
                "result": "Template_ID, Version_Number, Template_Type_Code \nFROM Templates",
                "prompt": "### Also show their version numbers and template type codes. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show all template type codes for all templates.",
                "result": "Templates.Template_Type_Code\nFROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes for all templates. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT template_type_code FROM Templates",
                "question": "Filter out duplicates.",
                "result": "DISTINCT Templates.Template_Type_Code\nFROM Templates",
                "prompt": "### Filter out duplicates. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id FROM Templates",
                "question": "Show the template ids for all templates.",
                "result": "Template_ID \nFROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template ids for all templates. \n SELECT"
            },
            {
                "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
                "question": "How about the ids with template type code PP or PPT?",
                "result": "Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT')",
                "prompt": "### How about the ids with template type code PP or PPT? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show the template type codes for all templates.",
                "result": "Templates.Template_Type_Code FROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template type codes for all templates. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
                "question": "How many of them have template type code CV?",
                "result": "COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
                "prompt": "### How many of them have template type code CV? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT version_number FROM Templates",
                "question": "What is the version number for all template?",
                "result": "Version_Number FROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number for all template? \n SELECT"
            },
            {
                "query": "SELECT version_number FROM Templates WHERE version_number  >  5",
                "question": "Only show those with version number later than 5.",
                "result": "Version_Number FROM Templates\nWHERE Version_Number > 5;",
                "prompt": "### Only show those with version number later than 5. \n SELECT"
            },
            {
                "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
                "question": "Also show their template type code.",
                "result": "Templates.Template_Type_Code, Templates.Version_Number\nFROM Templates\nWHERE Templates.Version_Number > 5;",
                "prompt": "### Also show their template type code. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show the template type code for all templates.",
                "result": "Templates.Template_Type_Code FROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template type code for all templates. \n SELECT"
            },
            {
                "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
                "question": "For each of them, count the number of templates",
                "result": "Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code;",
                "prompt": "### For each of them, count the number of templates \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show all type codes for templates.",
                "result": "Template_Type_Code FROM Templates;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all type codes for templates. \n SELECT"
            },
            {
                "query": "SELECT template_type_code, count(*) FROM Templates GROUP BY template_type_code",
                "question": "For each of them, how many templates do they contain?",
                "result": "Template_Type_Code, COUNT(Template_ID) \nFROM Templates \nGROUP BY Template_Type_Code;",
                "prompt": "### For each of them, how many templates do they contain? \n SELECT"
            },
            {
                "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
                "question": "Which of them contains the most templates?",
                "result": "Template_Type_Code, COUNT(Template_ID) AS Total_Templates\nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY Total_Templates DESC \nLIMIT 1;",
                "prompt": "### Which of them contains the most templates? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show all template type codes.",
                "result": "Template_Type_Code \nFROM Ref_Template_Types",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes. \n SELECT"
            },
            {
                "query": "SELECT template_type_code, count(*) FROM Templates GROUP BY template_type_code",
                "question": "For each of them, show the count of templates.",
                "result": "Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nGROUP BY Ref_Template_Types.Template_Type_Code",
                "prompt": "### For each of them, show the count of templates. \n SELECT"
            },
            {
                "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
                "question": "Which of them have fewer than three templates?",
                "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(Templates.Template_ID) < 3",
                "prompt": "### Which of them have fewer than three templates? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT Version_Number FROM Templates",
                "question": "Show the version number for all templates.",
                "result": "Version_Number FROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the version number for all templates. \n SELECT"
            },
            {
                "query": "SELECT min(Version_Number) FROM Templates",
                "question": "What is the smallest value?",
                "result": "This question cannot be answered without additional information about the table or column being queried. Please provide more context.",
                "prompt": "### What is the smallest value? \n SELECT"
            },
            {
                "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
                "question": "Also show its template type code.",
                "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nORDER BY Templates.Version_Number ASC \nLIMIT 1",
                "prompt": "### Also show its template type code. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "What is the template type code of the template.",
                "result": "Templates.Template_Type_Code\nFROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code, T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "question": "Also show the names of all documents using each template.",
                "result": "Templates.Template_Type_Code, Documents.Document_Name\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID",
                "prompt": "### Also show the names of all documents using each template. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
                "question": "Which of the template type codes is used by document with the name \"Data base\"?",
                "result": "Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = \"Data base\"",
                "prompt": "### Which of the template type codes is used by document with the name \"Data base\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_name FROM Documents",
                "question": "Show all document names.",
                "result": "Document_Name \nFROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all document names. \n SELECT"
            },
            {
                "query": "SELECT T2.document_name, T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "question": "Also show their template type codes.",
                "result": "Documents.Document_Name, Templates.Template_Type_Code \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID",
                "prompt": "### Also show their template type codes. \n SELECT"
            },
            {
                "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
                "question": "Which of the documents are using templates with template type code BK?",
                "result": "Documents.Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'BK'",
                "prompt": "### Which of the documents are using templates with template type code BK? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show all template type codes.",
                "result": "Template_Type_Code \nFROM Ref_Template_Types",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code , T2.document_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "question": "Also show the document ids using each template.",
                "result": "Ref_Template_Types.Template_Type_Code, Documents.Document_ID \nFROM Ref_Template_Types \nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
                "prompt": "### Also show the document ids using each template. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
                "question": "For each type code, how many documents are using that template?",
                "result": "Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Document_Count \nFROM Ref_Template_Types \nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Ref_Template_Types.Template_Type_Code;",
                "prompt": "### For each type code, how many documents are using that template? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show the type codes for all templates.",
                "result": "Template_Type_Code\nFROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the type codes for all templates. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code, count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
                "question": "For each, how many documents are using this template?",
                "result": "Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS num_docs\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_Type_Code",
                "prompt": "### For each, how many documents are using this template? \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
                "question": "Order the template type codes in descending order by this number.",
                "result": "Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS num_docs\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_Type_Code\nORDER BY num_docs DESC",
                "prompt": "### Order the template type codes in descending order by this number. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
                "question": "Which of them has the most?",
                "result": "Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS num_docs\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_Type_Code\nORDER BY num_docs DESC\nLIMIT 1",
                "prompt": "### Which of them has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Templates",
                "question": "Show all template type codes.",
                "result": "Template_Type_Code FROM Ref_Template_Types",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes. \n SELECT"
            },
            {
                "query": "SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "question": "Show all template type codes that are used by some document.",
                "result": "DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)",
                "prompt": "### Show all template type codes that are used by some document. \n SELECT"
            },
            {
                "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "question": "How about those that are not used by any document?",
                "result": "DISTINCT Template_Type_Code FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
                "prompt": "### How about those that are not used by any document? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Ref_template_types",
                "question": "Show all template type codes.",
                "result": "Template_Type_Code\nFROM Ref_Template_Types",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes. \n SELECT"
            },
            {
                "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
                "question": "Also show their descriptions.",
                "result": "Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types",
                "prompt": "### Also show their descriptions. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
                "question": "Show all template type codes and descriptions.",
                "result": "Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes and descriptions. \n SELECT"
            },
            {
                "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
                "question": "What is the description for template type code \"AD\"?",
                "result": "Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD'",
                "prompt": "### What is the description for template type code \"AD\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_type_code FROM Ref_template_types",
                "question": "Show all template type codes.",
                "result": "Template_Type_Code \nFROM Ref_Template_Types;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes. \n SELECT"
            },
            {
                "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
                "question": "Also show descriptions.",
                "result": "Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types;",
                "prompt": "### Also show descriptions. \n SELECT"
            },
            {
                "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
                "question": "Which code has template type description \"Book\"?",
                "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = \"Book\";",
                "prompt": "### Which code has template type description \"Book\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "select Template_ID from Documents",
                "question": "Show the template ids used by any document.",
                "result": "Templates.Template_ID\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template ids used by any document. \n SELECT"
            },
            {
                "query": "select T2.Template_ID, T1.template_type_code from Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.template_ID",
                "question": "Also show the template type code for those ids.",
                "result": "Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
                "prompt": "### Also show the template type code for those ids. \n SELECT"
            },
            {
                "query": "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
                "question": "How about their template type descriptions?",
                "result": "Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;",
                "prompt": "### How about their template type descriptions? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
                "question": "Show the distinct values among them.",
                "result": "DISTINCT Templates.Template_ID, Templates.Template_Type_Code, Ref_Template_Types.Template_Type_Description\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;",
                "prompt": "### Show the distinct values among them. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT template_id from Templates",
                "question": "Show the template id for all templates.",
                "result": "Template_ID FROM Templates",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the template id for all templates. \n SELECT"
            },
            {
                "query": "SELECT T2.template_id, T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code",
                "question": "Also show their template type description.",
                "result": "Templates.Template_ID, Ref_Template_Types.Template_Type_Description \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;",
                "prompt": "### Also show their template type description. \n SELECT"
            },
            {
                "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
                "question": "What are the template ids with description \"Presentation\"?",
                "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = \"Presentation\";",
                "prompt": "### What are the template ids with description \"Presentation\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT * FROM Paragraphs",
                "question": "Show the info for all paragraphs.",
                "result": "* FROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the info for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Paragraphs",
                "question": "How many are there?",
                "result": "COUNT(*) FROM Paragraphs",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT paragraph_id FROM Paragraphs",
                "question": "Show the id for all paragraphs.",
                "result": "Paragraph_ID FROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the id for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT T1.paragraph_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID",
                "question": "Also show their document names.",
                "result": "Paragraph_ID, Documents.Document_Name\n FROM Paragraphs \n INNER JOIN Documents \n ON Paragraphs.Document_ID = Documents.Document_ID",
                "prompt": "### Also show their document names. \n SELECT"
            },
            {
                "query": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
                "question": "Only show the id for all paragraphs in the document named 'Summer Show'.",
                "result": "Paragraph_ID \nFROM Paragraphs \nINNER JOIN Documents \nON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show'",
                "prompt": "### Only show the id for all paragraphs in the document named 'Summer Show'. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
                "question": "How many such paragraphs are there?",
                "result": "COUNT(Paragraph_ID) \nFROM Paragraphs \nINNER JOIN Documents \nON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show'",
                "prompt": "### How many such paragraphs are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT paragraph_text FROM Paragraphs",
                "question": "Show the parapraph text for all paragraphs.",
                "result": "Paragraph_Text FROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the parapraph text for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT Other_Details, paragraph_text FROM Paragraphs",
                "question": "Also show their paragraph details.",
                "result": "Paragraph_Text, Other_Details FROM Paragraphs",
                "prompt": "### Also show their paragraph details. \n SELECT"
            },
            {
                "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
                "question": "What are the details for the paragraph containing 'Korea'?",
                "result": "Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
                "prompt": "### What are the details for the paragraph containing 'Korea'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT paragraph_id ,  paragraph_text FROM Paragraphs",
                "question": "Show all paragraph ids and texts.",
                "result": "Paragraph_ID, Paragraph_Text \n FROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and texts. \n SELECT"
            },
            {
                "query": "SELECT T1.paragraph_id ,   T1.paragraph_text, T2.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id",
                "question": "For each of them, also show their document name.",
                "result": "Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text, Documents.Document_Name\n FROM Paragraphs \n INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID",
                "prompt": "### For each of them, also show their document name. \n SELECT"
            },
            {
                "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
                "question": "What are the ids and texts for the paragraph in the document with name 'Welcome to NY'?",
                "result": "Paragraph_ID, Paragraph_Text \n FROM Paragraphs \n INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \n WHERE Documents.Document_Name = 'Welcome to NY'",
                "prompt": "### What are the ids and texts for the paragraph in the document with name 'Welcome to NY'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT paragraph_text FROM Paragraphs",
                "question": "Show all paragraph text.",
                "result": "Paragraph_Text FROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph text. \n SELECT"
            },
            {
                "query": "SELECT T1.paragraph_text, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id",
                "question": "For each of them, also show the document name.",
                "result": "Paragraph_Text, Document_Name FROM Paragraphs \n INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID",
                "prompt": "### For each of them, also show the document name. \n SELECT"
            },
            {
                "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
                "question": "What is the text for the document \"Customer reviews\"?",
                "result": "Paragraph_Text FROM Paragraphs \n INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \n WHERE Document_Name = 'Customer reviews'",
                "prompt": "### What is the text for the document \"Customer reviews\"? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id FROM Paragraphs",
                "question": "Show the document id for all paragraphs.",
                "result": "Paragraphs.Document_ID \nFROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document id for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id",
                "question": "For each id, show the number of paragraphs.",
                "result": "Document_ID, COUNT(*) AS Paragraph_Count \nFROM Paragraphs \nGROUP BY Document_ID",
                "prompt": "### For each id, show the number of paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
                "question": "Order by document id.",
                "result": "Document_ID, COUNT(*) AS Paragraph_Count \nFROM Paragraphs \nGROUP BY Document_ID \nORDER BY Document_ID",
                "prompt": "### Order by document id. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id ,  document_name FROM Documents",
                "question": "Show all document ids and names.",
                "result": "Document_ID, Document_Name FROM Documents",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all document ids and names. \n SELECT"
            },
            {
                "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
                "question": "For each of them, count the number of paragraphs in each document.",
                "result": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name;",
                "prompt": "### For each of them, count the number of paragraphs in each document. \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id FROM Paragraphs",
                "question": "Show the document id for all paragraphs.",
                "result": "Paragraphs.Document_ID\nFROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document id for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id",
                "question": "For each of these document ids, count the number of paragraphs.",
                "result": "Document_ID, COUNT(*) AS Paragraph_Count\nFROM Paragraphs\nGROUP BY Document_ID",
                "prompt": "### For each of these document ids, count the number of paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
                "question": "Which of them have at least two paragraphs?",
                "result": "Document_ID\nFROM Paragraphs\nGROUP BY Document_ID\nHAVING COUNT(*) >= 2",
                "prompt": "### Which of them have at least two paragraphs? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id ,  document_name FROM Documents",
                "question": "Show the id number and name for all documents.",
                "result": "Document_ID, Document_Name FROM Documents;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the id number and name for all documents. \n SELECT"
            },
            {
                "query": "SELECT T1.document_id ,  T2.document_name , T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id",
                "question": "Also show the paragraph id for those documents.",
                "result": "Documents.Document_ID, Documents.Document_Name, Paragraphs.Paragraph_ID \n FROM Documents \n INNER JOIN Paragraphs \n ON Documents.Document_ID = Paragraphs.Document_ID;",
                "prompt": "### Also show the paragraph id for those documents. \n SELECT"
            },
            {
                "query": "SELECT T1.document_id ,  T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
                "question": "For each of these results, count the number of paragraphs.",
                "result": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count \n FROM Documents \n INNER JOIN Paragraphs \n ON Documents.Document_ID = Paragraphs.Document_ID \n GROUP BY Documents.Document_ID;",
                "prompt": "### For each of these results, count the number of paragraphs. \n SELECT"
            },
            {
                "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Which of them is the longest?",
                "result": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count \n FROM Documents \n INNER JOIN Paragraphs \n ON Documents.Document_ID = Paragraphs.Document_ID \n GROUP BY Documents.Document_ID \n ORDER BY Paragraph_Count DESC \n LIMIT 1;",
                "prompt": "### Which of them is the longest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id FROM Paragraphs",
                "question": "Show the document id for all paragraphs.",
                "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs\nON Documents.Document_ID = Paragraphs.Document_ID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document id for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id",
                "question": "For each of them, count the number of paragraphs.",
                "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count\nFROM Documents\nJOIN Paragraphs\nON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID",
                "prompt": "### For each of them, count the number of paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*)",
                "question": "Sort them by these counts.",
                "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count\nFROM Documents\nJOIN Paragraphs\nON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY paragraph_count DESC",
                "prompt": "### Sort them by these counts. \n SELECT"
            },
            {
                "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
                "question": "Which has the fewest?",
                "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS paragraph_count\nFROM Documents\nLEFT JOIN Paragraphs\nON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY paragraph_count ASC\nLIMIT 1",
                "prompt": "### Which has the fewest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "cre_Doc_Template_Mgt",
        "interaction": [
            {
                "query": "SELECT document_id FROM Paragraphs",
                "question": "Show the document id for all paragraphs.",
                "result": "Paragraphs.Document_ID FROM Paragraphs",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document id for all paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id",
                "question": "For each of these ids, show the number of paragraphs.",
                "result": "Paragraphs.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count \n FROM Paragraphs \n GROUP BY Paragraphs.Document_ID",
                "prompt": "### For each of these ids, show the number of paragraphs. \n SELECT"
            },
            {
                "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
                "question": "Which of them have between 1 and 2 paragraphs?",
                "result": "Paragraphs.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count \n FROM Paragraphs \n GROUP BY Paragraphs.Document_ID \n HAVING Paragraph_Count >= 1 AND Paragraph_Count <= 2",
                "prompt": "### Which of them have between 1 and 2 paragraphs? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT * FROM singer",
                "question": "Show information for all singers.",
                "result": "* FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show information for all singers. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM singer",
                "question": "How many are there?",
                "result": "COUNT(*) FROM singer",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name FROM singer",
                "question": "Show names of all singers.",
                "result": "Name FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show names of all singers. \n SELECT"
            },
            {
                "query": "SELECT name ,  country ,  age FROM singer",
                "question": "For each of them, also show country and age.",
                "result": "Name, Country, Age FROM singer",
                "prompt": "### For each of them, also show country and age. \n SELECT"
            },
            {
                "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
                "question": "List the results in descending order of their age.",
                "result": "Name, Country, Age FROM singer ORDER BY Age DESC",
                "prompt": "### List the results in descending order of their age. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "select age from singer",
                "question": "Show age for all singers.",
                "result": "Age FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show age for all singers. \n SELECT"
            },
            {
                "query": "select age from singer WHERE country  =  'France'",
                "question": "What about age for those from France?",
                "result": "Age FROM singer WHERE Country = 'France'",
                "prompt": "### What about age for those from France? \n SELECT"
            },
            {
                "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
                "question": "What is the average, minimum, and maximum age for those?",
                "result": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'",
                "prompt": "### What is the average, minimum, and maximum age for those? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "select song_name from singer",
                "question": "Show the names of all songs.",
                "result": "Name FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the names of all songs. \n SELECT"
            },
            {
                "query": "SELECT song_name ,  song_release_year FROM singer",
                "question": "Also show the release year for each of them.",
                "result": "Name, Song_release_year FROM singer",
                "prompt": "### Also show the release year for each of them. \n SELECT"
            },
            {
                "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age",
                "question": "Order the result by the age of their singers.",
                "result": "Name, Song_release_year FROM singer ORDER BY Age",
                "prompt": "### Order the result by the age of their singers. \n SELECT"
            },
            {
                "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
                "question": "What is the result for the song by the yongest?",
                "result": "Name FROM singer ORDER BY Age ASC LIMIT 1",
                "prompt": "### What is the result for the song by the yongest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT country FROM singer",
                "question": "Show country for all singers.",
                "result": "Country FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show country for all singers. \n SELECT"
            },
            {
                "query": "SELECT country FROM singer WHERE age  >  20",
                "question": "Only show the results for those above 20.",
                "result": "Country FROM singer WHERE Age > 20;",
                "prompt": "### Only show the results for those above 20. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
                "question": "What are all distinct countries for them?",
                "result": "DISTINCT Country FROM singer;",
                "prompt": "### What are all distinct countries for them? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT country FROM singer",
                "question": "Show the country for all singers.",
                "result": "Country \nFROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the country for all singers. \n SELECT"
            },
            {
                "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
                "question": "For each of them, what is the number of singers?",
                "result": "COUNT(Singer_ID) \nFROM singer \nGROUP BY Country",
                "prompt": "### For each of them, what is the number of singers? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT avg(age) FROM singer",
                "question": "What is the average age for all singers?",
                "result": "AVG(Age) FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average age for all singers? \n SELECT"
            },
            {
                "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
                "question": "Show the name for songs by singers older than that.",
                "result": "Name FROM singer \nWHERE Age > {insert age here}",
                "prompt": "### Show the name for songs by singers older than that. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name FROM stadium",
                "question": "Show the name for all stadiums.",
                "result": "Name FROM stadium;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name for all stadiums. \n SELECT"
            },
            {
                "query": "SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
                "question": "What about those with a capacity between 5000 and 10000?",
                "result": "Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
                "prompt": "### What about those with a capacity between 5000 and 10000? \n SELECT"
            },
            {
                "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
                "question": "Also list the location for them.",
                "result": "Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
                "prompt": "### Also list the location for them. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "select capacity FROM stadium",
                "question": "Show the capacity for all stadiums.",
                "result": "Capacity FROM stadium;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the capacity for all stadiums. \n SELECT"
            },
            {
                "query": "SELECT avg(capacity) FROM stadium",
                "question": "What is the average of them?",
                "result": "AVG(Capacity) FROM stadium;",
                "prompt": "### What is the average of them? \n SELECT"
            },
            {
                "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
                "question": "Also show the maximum.",
                "result": "MAX(Capacity) FROM stadium;",
                "prompt": "### Also show the maximum. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name ,  capacity FROM stadium",
                "question": "Show the name and capacity for all stadiums.",
                "result": "Name, Capacity FROM stadium;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and capacity for all stadiums. \n SELECT"
            },
            {
                "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC",
                "question": "Show the result in descending order of their average attendance.",
                "result": "* FROM stadium ORDER BY Average DESC;",
                "prompt": "### Show the result in descending order of their average attendance. \n SELECT"
            },
            {
                "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
                "question": "Which one has the highest?",
                "result": "Name FROM stadium ORDER BY Average DESC LIMIT 1;",
                "prompt": "### Which one has the highest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT * FROM concert WHERE YEAR  =  2014",
                "question": "Show the concert information in year 2014.",
                "result": "concert_ID, concert_Name, Theme, Stadium_ID \nFROM concert \nWHERE Year = 2014;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the concert information in year 2014. \n SELECT"
            },
            {
                "query": "SELECT * FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
                "question": "Also show those in year 2015.",
                "result": "concert_ID, concert_Name, Theme, Stadium_ID \nFROM concert \nWHERE Year = 2014 OR Year = 2015;",
                "prompt": "### Also show those in year 2015. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
                "question": "How many are there in total?",
                "result": "COUNT(*) \nFROM concert \nWHERE Year = 2014 OR Year = 2015;",
                "prompt": "### How many are there in total? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name from stadium",
                "question": "Show the names of stadiums.",
                "result": "Name \nFROM stadium;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the names of stadiums. \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
                "question": "For each of them, also show the number of concerts.",
                "result": "stadium.Name, COUNT(concert_ID) \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nGROUP BY stadium.Name;",
                "prompt": "### For each of them, also show the number of concerts. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name ,  capacity FROM stadium",
                "question": "Show all stadium names and their capacities.",
                "result": "Name, Capacity FROM stadium",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all stadium names and their capacities. \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC",
                "question": "Order the results in descending order of the number of concerts in year 2014 or after.",
                "result": "Name, Capacity FROM stadium\nORDER BY (SELECT COUNT(*) FROM concert WHERE concert.Stadium_ID = stadium.Stadium_ID AND concert.Year >= 2014) DESC",
                "prompt": "### Order the results in descending order of the number of concerts in year 2014 or after. \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one has the most?",
                "result": "The most what? Please provide more context or information.",
                "prompt": "### Which one has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT YEAR FROM concert",
                "question": "Show the year for all concerts.",
                "result": "Year \nFROM concert",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the year for all concerts. \n SELECT"
            },
            {
                "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC",
                "question": "Order them in descending order of the number of concerts",
                "result": "Year \nFROM concert \nORDER BY COUNT(concert_ID) DESC",
                "prompt": "### Order them in descending order of the number of concerts \n SELECT"
            },
            {
                "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                "question": "Which year has the most?",
                "result": "Year \nFROM concert \nGROUP BY Year \nORDER BY COUNT(concert_ID) DESC \nLIMIT 1",
                "prompt": "### Which year has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT stadium_id FROM concert",
                "question": "Show all stadium ids of concerts.",
                "result": "Stadium_ID\nFROM concert",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all stadium ids of concerts. \n SELECT"
            },
            {
                "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
                "question": "Show the stadium names without any concert.",
                "result": "Name\nFROM stadium\nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
                "prompt": "### Show the stadium names without any concert. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT country FROM singer",
                "question": "Show the country for all singers.",
                "result": "Country FROM singer;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the country for all singers. \n SELECT"
            },
            {
                "query": "SELECT country FROM singer WHERE age  >  40",
                "question": "How about those for singers above age 40?",
                "result": "Country FROM singer WHERE Age > 40;",
                "prompt": "### How about those for singers above age 40? \n SELECT"
            },
            {
                "query": "SELECT country FROM singer WHERE age  <  30",
                "question": "How about those for singers below 30?",
                "result": "Country FROM singer WHERE Age < 30;",
                "prompt": "### How about those for singers below 30? \n SELECT"
            },
            {
                "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
                "question": "How about countries with both?",
                "result": "Country FROM singer WHERE Age > 40 AND Age < 30;",
                "prompt": "### How about countries with both? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
                "question": "Show name for stadiums that had a concert in year 2014.",
                "result": "stadium.Name \nFROM \nstadium \nINNER JOIN \nconcert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE \nconcert.Year = 2014;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show name for stadiums that had a concert in year 2014. \n SELECT"
            },
            {
                "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
                "question": "Show names for all stadiums except for those.",
                "result": "Name \nFROM \nstadium \nWHERE \nLocation NOT IN ('Chicago', 'New York', 'Los Angeles');",
                "prompt": "### Show names for all stadiums except for those. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT concert_name ,  theme from concert",
                "question": "Show the name and theme for all concerts.",
                "result": "concert_Name, Theme\nFROM concert",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and theme for all concerts. \n SELECT"
            },
            {
                "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
                "question": "For each of those, also show the number of singers.",
                "result": "concert_Name, Theme, COUNT(Singer_ID) AS num_singers\nFROM concert \nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert.concert_ID",
                "prompt": "### For each of those, also show the number of singers. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name FROM singer",
                "question": "Show the name for all singers.",
                "result": "Name FROM singer;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name for all singers. \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
                "question": "For each of them, also show the number of concerts",
                "result": "singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts\nFROM singer\nLEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name;",
                "prompt": "### For each of them, also show the number of concerts \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "select name from singer",
                "question": "List all singer names.",
                "result": "Name FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names. \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
                "question": "How about those performing concerts in year 2014?",
                "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014",
                "prompt": "### How about those performing concerts in year 2014? \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name FROM singer",
                "question": "What are the names of all singers?",
                "result": "Name FROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of all singers? \n SELECT"
            },
            {
                "query": "SELECT name FROM singer WHERE song_name LIKE '%Hey%'",
                "question": "Show the names for those having a song having 'Hey' in its name.",
                "result": "Name FROM singer WHERE Song_Name LIKE '%Hey%'",
                "prompt": "### Show the names for those having a song having 'Hey' in its name. \n SELECT"
            },
            {
                "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
                "question": "Also show the nation for those singers.",
                "result": "Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
                "prompt": "### Also show the nation for those singers. \n SELECT"
            }
        ]
    },
    {
        "database_id": "concert_singer",
        "interaction": [
            {
                "query": "SELECT name ,  location FROM stadium",
                "question": "Show the name and location for the stadiums.",
                "result": "Name, Location FROM stadium;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and location for the stadiums. \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014",
                "question": "How about those with some concerts happened in the year 2014?",
                "result": "Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year=2014);",
                "prompt": "### How about those with some concerts happened in the year 2014? \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
                "question": "Among those, what are stadiums also holding some concerts in the year 2015?",
                "result": "Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year=2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year=2015);",
                "prompt": "### Among those, what are stadiums also holding some concerts in the year 2015? \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT Name, Birth_Year from singer",
                "question": "Show the names and birth years of singers",
                "result": "Name, Birth_Year\nFROM singer",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names and birth years of singers \n SELECT"
            },
            {
                "query": "SELECT Name, Birth_Year from singer WHERE Birth_Year = 1948",
                "question": "Only for the ones born in 1948.",
                "result": "Name, Birth_Year\nFROM singer\nWHERE Birth_Year = 1948;",
                "prompt": "### Only for the ones born in 1948. \n SELECT"
            },
            {
                "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
                "question": "Show the name of singers whose birth year is either 1948 or 1949?",
                "result": "Name\nFROM singer\nWHERE Birth_Year = 1948 OR Birth_Year = 1949;",
                "prompt": "### Show the name of singers whose birth year is either 1948 or 1949? \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT Name, Net_Worth_Millions FROM singer",
                "question": "Show the name and net worth of the singers.",
                "result": "Name, Net_Worth_Millions FROM singer;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the name and net worth of the singers. \n SELECT"
            },
            {
                "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC",
                "question": "Order by richest first.",
                "result": "Name, Net_Worth_Millions FROM singer ORDER BY Net_Worth_Millions DESC;",
                "prompt": "### Order by richest first. \n SELECT"
            },
            {
                "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
                "question": "What is the name of the singer with the largest net worth?",
                "result": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;",
                "prompt": "### What is the name of the singer with the largest net worth? \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT Name, Citizenship FROM singer",
                "question": "Show the names and citizenships of singers.",
                "result": "Name, Citizenship FROM singer;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names and citizenships of singers. \n SELECT"
            },
            {
                "query": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
                "question": "Show citizenship counts.",
                "result": "Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;",
                "prompt": "### Show citizenship counts. \n SELECT"
            },
            {
                "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
                "question": "Sort that by most common first.",
                "result": "Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC;",
                "prompt": "### Sort that by most common first. \n SELECT"
            },
            {
                "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "Limit it to one.",
                "result": "Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;",
                "prompt": "### Limit it to one. \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID",
                "question": "Join singer names with their song titles.",
                "result": "singer.Name, song.Title\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Join singer names with their song titles. \n SELECT"
            },
            {
                "query": "SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID WHERE t2.Sales > 300000",
                "question": "Limit the entries to where song sales exceed 300000.",
                "result": "singer.Name, song.Title\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;",
                "prompt": "### Limit the entries to where song sales exceed 300000. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
                "question": "Which are the distinct names in that list?",
                "result": "DISTINCT singer.Name\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;",
                "prompt": "### Which are the distinct names in that list? \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
                "question": "Show the names and song counts of singers.",
                "result": "singer.Name, COUNT(song.Song_ID) AS song_count\nFROM singer\nLEFT JOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names and song counts of singers. \n SELECT"
            },
            {
                "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                "question": "Show the names of singers that have more than one song.",
                "result": "singer.Name\nFROM singer\nLEFT JOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name\nHAVING COUNT(song.Song_ID) > 1;",
                "prompt": "### Show the names of singers that have more than one song. \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT title, Sales from song",
                "question": "Show the songs and sale amounts.",
                "result": "Title, Sales FROM song;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the songs and sale amounts. \n SELECT"
            },
            {
                "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
                "question": "Show the names of singers and the total sales of their songs.",
                "result": "singer.Name, SUM(song.Sales) as Total_Sales FROM singer \n JOIN song ON singer.Singer_ID = song.Singer_ID \n GROUP BY singer.Name;",
                "prompt": "### Show the names of singers and the total sales of their songs. \n SELECT"
            }
        ]
    },
    {
        "database_id": "singer",
        "interaction": [
            {
                "query": "SELECT DISTINCT Singer_ID from song",
                "question": "Which singer ids have at least one song?",
                "result": "DISTINCT Singer_ID FROM song;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Which singer ids have at least one song? \n SELECT"
            },
            {
                "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
                "question": "Which singer names do not?",
                "result": "singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Singer_ID IS NULL;",
                "prompt": "### Which singer names do not? \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT * FROM employee WHERE age  <  30",
                "question": "find all employees who are under age 30.",
                "result": "* FROM employee\nWHERE Age < 30;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find all employees who are under age 30. \n SELECT"
            },
            {
                "query": "SELECT city FROM employee WHERE age  <  30",
                "question": "Which cities did they come from?",
                "result": "City FROM employee\nWHERE Age < 30;",
                "prompt": "### Which cities did they come from? \n SELECT"
            },
            {
                "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
                "question": "show the cities from which more than one employee originated.",
                "result": "City FROM employee\nGROUP BY City\nHAVING COUNT(*) > 1;",
                "prompt": "### show the cities from which more than one employee originated. \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT * FROM shop",
                "question": "show all shops.",
                "result": "* FROM shop;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### show all shops. \n SELECT"
            },
            {
                "query": "SELECT sum(number_products) FROM shop",
                "question": "what is the total number of products they are selling?",
                "result": "SUM(Number_products) FROM shop;",
                "prompt": "### what is the total number of products they are selling? \n SELECT"
            },
            {
                "query": "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1",
                "question": "find the name of the shop with the greatest number of products.",
                "result": "Name FROM shop\nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);",
                "prompt": "### find the name of the shop with the greatest number of products. \n SELECT"
            },
            {
                "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
                "question": "what are its manager name and district?",
                "result": "Manager_name, District FROM shop\nWHERE Number_products = (SELECT MAX(Number_products) FROM shop);",
                "prompt": "### what are its manager name and district? \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT avg(Number_products) FROM shop",
                "question": "find the average number of products of all stores.",
                "result": "AVG(Number_products) FROM shop;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the average number of products of all stores. \n SELECT"
            },
            {
                "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
                "question": "how about the minimum and maximum?",
                "result": "MIN(Number_products), MAX(Number_products) FROM shop;",
                "prompt": "### how about the minimum and maximum? \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT name, number_products FROM shop",
                "question": "show the name and number of product for all shops.",
                "result": "shop.Name, shop.Number_products\nFROM shop",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### show the name and number of product for all shops. \n SELECT"
            },
            {
                "query": "SELECT avg(number_products) FROM shop",
                "question": "what is the average number of products?",
                "result": "AVG(Number_products)\nFROM shop",
                "prompt": "### what is the average number of products? \n SELECT"
            },
            {
                "query": "SELECT name FROM shop WHERE number_products  <  (SELECT avg(number_products) FROM shop)",
                "question": "Find the names of stores whose number products is less than the average.",
                "result": "shop.Name\nFROM shop\nWHERE shop.Number_products < (SELECT AVG(Number_products) FROM shop)",
                "prompt": "### Find the names of stores whose number products is less than the average. \n SELECT"
            },
            {
                "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
                "question": "how about more than?",
                "result": "shop.Name\nFROM shop\nWHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop)",
                "prompt": "### how about more than? \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT count(*) FROM evaluation",
                "question": "how many evaluations are there?",
                "result": "COUNT(*) FROM evaluation;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### how many evaluations are there? \n SELECT"
            },
            {
                "query": "SELECT Year_awarded FROM evaluation",
                "question": "what years were they given?",
                "result": "Year_awarded FROM evaluation;",
                "prompt": "### what years were they given? \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
                "question": "find the name of the employee who received the most evaluation awards.",
                "result": "e.Name \nFROM employee e \nINNER JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID \nGROUP BY e.Employee_ID \nORDER BY COUNT(ev.Year_awarded) DESC \nLIMIT 1;",
                "prompt": "### find the name of the employee who received the most evaluation awards. \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID",
                "question": "find the name of the employees who received past evaluation awards.",
                "result": "employee.Name \nFROM \nemployee \nINNER JOIN \nevaluation \nON \nemployee.Employee_ID = evaluation.Employee_ID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the name of the employees who received past evaluation awards. \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "who won the most times?",
                "result": "evaluation.Employee_ID, COUNT(*) AS award_count \nFROM \nevaluation \nGROUP BY \nevaluation.Employee_ID \nORDER BY \naward_count DESC \nLIMIT 1",
                "prompt": "### who won the most times? \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
                "question": "ok, which one received the award with the highest bonus?",
                "result": "evaluation.Employee_ID \nFROM \nevaluation \nWHERE \nevaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
                "prompt": "### ok, which one received the award with the highest bonus? \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT count(distinct Employee_ID) FROM evaluation",
                "question": "find the number of different employees who were awarded in the past evaluations.",
                "result": "COUNT(DISTINCT Employee_ID) \nFROM evaluation",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the number of different employees who were awarded in the past evaluations. \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID",
                "question": "what are their names?",
                "result": "Name\nFROM employee\nWHERE Employee_ID IN (\n  SELECT Employee_ID\n  FROM evaluation\n)",
                "prompt": "### what are their names? \n SELECT"
            },
            {
                "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
                "question": "show the names of the employees who never won.",
                "result": "Name\nFROM employee\nWHERE Employee_ID NOT IN (\n  SELECT Employee_ID\n  FROM evaluation\n)",
                "prompt": "### show the names of the employees who never won. \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT count(distinct Shop_ID) FROM hiring",
                "question": "how many shops are hiring?",
                "result": "COUNT(DISTINCT Shop_ID) \nFROM hiring",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### how many shops are hiring? \n SELECT"
            },
            {
                "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id",
                "question": "what are the shops' names?'",
                "result": "Name \nFROM shop",
                "prompt": "### what are the shops' names?' \n SELECT"
            },
            {
                "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
                "question": "which one is hiring the largest number of employees?",
                "result": "Shop_ID, COUNT(Employee_ID) as num_hires \nFROM hiring \nGROUP BY Shop_ID \nORDER BY num_hires DESC \nLIMIT 1",
                "prompt": "### which one is hiring the largest number of employees? \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT * FROM hiring",
                "question": "show all hiring info.",
                "result": "* FROM hiring",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### show all hiring info. \n SELECT"
            },
            {
                "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
                "question": "Find the names of any shops not hiring.",
                "result": "Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
                "prompt": "### Find the names of any shops not hiring. \n SELECT"
            }
        ]
    },
    {
        "database_id": "employee_hire_evaluation",
        "interaction": [
            {
                "query": "SELECT count(*) FROM hiring",
                "question": "how many employees are being hired in all shops?",
                "result": "COUNT(Employee_ID) FROM hiring;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### how many employees are being hired in all shops? \n SELECT"
            },
            {
                "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
                "question": "show the number for each shop. show the shop name as well.",
                "result": "shop.Name, COUNT(hiring.Employee_ID)\nFROM shop \nINNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY shop.Name;",
                "prompt": "### show the number for each shop. show the shop name as well. \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT * FROM visitor",
                "question": "show all visitors.",
                "result": "* FROM visitor",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### show all visitors. \n SELECT"
            },
            {
                "query": "SELECT * FROM visitor ORDER BY Level_of_membership DESC",
                "question": "order them by their membership level from high to low.",
                "result": "* FROM visitor\nORDER BY Level_of_membership DESC",
                "prompt": "### order them by their membership level from high to low. \n SELECT"
            },
            {
                "query": "SELECT name FROM visitor ORDER BY Level_of_membership DESC",
                "question": "just show their names.",
                "result": "Name FROM visitor\nORDER BY Level_of_membership DESC",
                "prompt": "### just show their names. \n SELECT"
            },
            {
                "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
                "question": "do not list those whose membership level is lower than or equal to 4.",
                "result": "Name FROM visitor\nWHERE Level_of_membership > 4\nORDER BY Level_of_membership DESC",
                "prompt": "### do not list those whose membership level is lower than or equal to 4. \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT count(*) FROM visitor WHERE Level_of_membership  >  4",
                "question": "find the number of visitors with a membership level higher than 4.",
                "result": "COUNT(*) FROM visitor WHERE Level_of_membership > 4;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the number of visitors with a membership level higher than 4. \n SELECT"
            },
            {
                "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4",
                "question": "what are their names and membership levels?",
                "result": "visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4;",
                "prompt": "### what are their names and membership levels? \n SELECT"
            },
            {
                "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
                "question": "sort by their age from old to young.",
                "result": "visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;",
                "prompt": "### sort by their age from old to young. \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT count(*) FROM museum",
                "question": "how many museums are in the table?",
                "result": "COUNT(*) FROM museum",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### how many museums are in the table? \n SELECT"
            },
            {
                "query": "SELECT avg(num_of_staff) FROM museum",
                "question": "what is the average number of staff working in these museums?",
                "result": "AVG(Num_of_Staff) FROM museum",
                "prompt": "### what is the average number of staff working in these museums? \n SELECT"
            },
            {
                "query": "SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
                "question": "Find the name of the museum that has the most staff members.",
                "result": "Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
                "prompt": "### Find the name of the museum that has the most staff members. \n SELECT"
            },
            {
                "query": "SELECT museum_id FROM museum ORDER BY num_of_staff DESC LIMIT 1",
                "question": "what is its id?",
                "result": "Museum_ID FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
                "prompt": "### what is its id? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT name FROM museum WHERE open_year  <  2010",
                "question": "find the names of museums opened before 2010.",
                "result": "Name FROM museum\nWHERE Open_Year < 2010",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the names of museums opened before 2010. \n SELECT"
            },
            {
                "query": "SELECT name FROM museum WHERE open_year  >  2010",
                "question": "how about after?",
                "result": "Name FROM museum\nWHERE Open_Year >= 2010",
                "prompt": "### how about after? \n SELECT"
            },
            {
                "query": "SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010",
                "question": "find the minimum number of staff of those museums.",
                "result": "MIN(Num_of_Staff) FROM museum",
                "prompt": "### find the minimum number of staff of those museums. \n SELECT"
            },
            {
                "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
                "question": "find the names of museums which have more staff than that.",
                "result": "Name FROM museum\nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum)",
                "prompt": "### find the names of museums which have more staff than that. \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id",
                "question": "find the names of visitors who visited and who have some museum visit records.",
                "result": "visitor.Name\nFROM visitor\nINNER JOIN visit ON visitor.ID = visit.visitor_ID",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the names of visitors who visited and who have some museum visit records. \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
                "question": "which of them visited some museums more than once?",
                "result": "visitor.Name\nFROM visitor\nINNER JOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visit.Num_of_Ticket > 1;",
                "prompt": "### which of them visited some museums more than once? \n SELECT"
            },
            {
                "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
                "question": "also show their ids and ages.",
                "result": "visitor.ID, visitor.Name, visitor.Age\nFROM visitor\nINNER JOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visit.Num_of_Ticket > 1;",
                "prompt": "### also show their ids and ages. \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT sum(Total_spent) FROM visit",
                "question": "what is the total spent on all visits?",
                "result": "SUM(Total_spent) FROM visit",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### what is the total spent on all visits? \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
                "question": "find the name of the visitor who has spent the most money for his or her visits.",
                "result": "visitor.Name FROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visit.Total_spent = (SELECT MAX(Total_spent) FROM visit)",
                "prompt": "### find the name of the visitor who has spent the most money for his or her visits. \n SELECT"
            },
            {
                "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
                "question": "what are his id and membership level?",
                "result": "visitor.ID, visitor.Level_of_membership FROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visit.Total_spent = (SELECT MAX(Total_spent) FROM visit)",
                "prompt": "### what are his id and membership level? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT Museum_ID, name FROM museum",
                "question": "show the id and name of all museums.",
                "result": "Museum_ID, Name \nFROM museum",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### show the id and name of all museums. \n SELECT"
            },
            {
                "query": "SELECT t2.Museum_ID ,  t1.name, count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID",
                "question": "show the number of tickets sold for each of them.",
                "result": "Museum_ID, SUM(Num_of_Ticket) \nFROM visit \nGROUP BY Museum_ID",
                "prompt": "### show the number of tickets sold for each of them. \n SELECT"
            },
            {
                "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
                "question": "which one was visited the most times?",
                "result": "Museum_ID, SUM(Num_of_Ticket) AS total_visits \nFROM visit \nGROUP BY Museum_ID \nORDER BY total_visits DESC \nLIMIT 1",
                "prompt": "### which one was visited the most times? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT count(*) FROM museum",
                "question": "how many museums are there?",
                "result": "COUNT(*) FROM museum",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### how many museums are there? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
                "question": "how many of them have not had any visitors yet?",
                "result": "COUNT(*) FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Museum_ID IS NULL;",
                "prompt": "### how many of them have not had any visitors yet? \n SELECT"
            },
            {
                "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
                "question": "what are their names?",
                "result": "museum.Name FROM museum LEFT JOIN visit ON museum.Museum_ID = visit.Museum_ID WHERE visit.Museum_ID IS NULL;",
                "prompt": "### what are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT sum(num_of_ticket) FROM visit",
                "question": "how many tickets were sold from all of the museums?",
                "result": "SUM(Num_of_Ticket) FROM visit",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### how many tickets were sold from all of the museums? \n SELECT"
            },
            {
                "query": "SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1",
                "question": "find the id of the visitor who bought the most tickets at once.",
                "result": "visitor_ID FROM visit ORDER BY Num_of_Ticket DESC LIMIT 1",
                "prompt": "### find the id of the visitor who bought the most tickets at once. \n SELECT"
            },
            {
                "query": "SELECT t1.name,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
                "question": "Find the name and age of this visitor.",
                "result": "Name, Age FROM visitor WHERE ID = (SELECT visitor_ID FROM visit ORDER BY Num_of_Ticket DESC LIMIT 1)",
                "prompt": "### Find the name and age of this visitor. \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT sum(Total_spent) FROM visit",
                "question": "find the total cost of all visits.",
                "result": "SUM(Total_spent) FROM visit;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the total cost of all visits. \n SELECT"
            },
            {
                "query": "SELECT max(Total_spent) FROM visit",
                "question": "what was the amount of the largest one time purchase of tickets out of all visits?",
                "result": "MAX(Total_spent) FROM visit;",
                "prompt": "### what was the amount of the largest one time purchase of tickets out of all visits? \n SELECT"
            },
            {
                "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
                "question": "how about the average and maximum number of tickets purchased?",
                "result": "AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;",
                "prompt": "### how about the average and maximum number of tickets purchased? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT min(Level_of_membership) FROM visitor",
                "question": "what is the lowest level of membership?",
                "result": "MIN(Level_of_membership) FROM visitor;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### what is the lowest level of membership? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM visitor WHERE Level_of_membership  =  1",
                "question": "find the number of visitors whose membership level is 1.",
                "result": "COUNT(*) FROM visitor WHERE Level_of_membership = 1;",
                "prompt": "### find the number of visitors whose membership level is 1. \n SELECT"
            },
            {
                "query": "SELECT t2.Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
                "question": "show the ticket expenses of all of their museum visits.",
                "result": "visit.Total_spent FROM visit;",
                "prompt": "### show the ticket expenses of all of their museum visits. \n SELECT"
            },
            {
                "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
                "question": "what is the total amount of money spent?",
                "result": "SUM(Total_spent) FROM visit;",
                "prompt": "### what is the total amount of money spent? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT name FROM museum WHERE open_year  <  2009",
                "question": "find the names of museums opened before 2009.",
                "result": "Name \nFROM museum \nWHERE Open_Year < 2009",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the names of museums opened before 2009. \n SELECT"
            },
            {
                "query": "SELECT name FROM museum WHERE open_year > 2011",
                "question": "what about those opened after 2011?",
                "result": "Name \nFROM museum \nWHERE Open_Year > 2011",
                "prompt": "### what about those opened after 2011? \n SELECT"
            },
            {
                "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
                "question": "What is the name of the visitor who visited both groups of museums?",
                "result": "visitor.Name \nFROM visitor \nJOIN visit AS v1 ON visitor.ID = v1.visitor_ID \nJOIN visit AS v2 ON visitor.ID = v2.visitor_ID \nWHERE v1.Museum_ID < v2.Museum_ID",
                "prompt": "### What is the name of the visitor who visited both groups of museums? \n SELECT"
            }
        ]
    },
    {
        "database_id": "museum_visit",
        "interaction": [
            {
                "query": "SELECT name FROM museum WHERE open_year  >  2010",
                "question": "find the names of museums opened after 2010",
                "result": "Name \nFROM museum \nWHERE Open_Year > 2010;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the names of museums opened after 2010 \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010",
                "question": "find the number of visits to these museums?",
                "result": "SUM(Num_of_Ticket) \nFROM visit \nWHERE Museum_ID IN (\n    SELECT Museum_ID \n    FROM museum \n    WHERE Open_Year > 2010\n);",
                "prompt": "### find the number of visits to these museums? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
                "question": "Find the number of visitors who did not visit these museums.",
                "result": "COUNT(*) \nFROM visitor \nWHERE ID NOT IN (\n    SELECT visitor_ID \n    FROM visit \n    WHERE Museum_ID IN (\n        SELECT Museum_ID \n        FROM museum \n        WHERE Open_Year > 2010\n    )\n);",
                "prompt": "### Find the number of visitors who did not visit these museums. \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM Highschooler",
                "question": "How many high schoolers are there?",
                "result": "COUNT(*) FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are there? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Highschooler WHERE grade  =  11 OR grade  =  12",
                "question": "How many in each grade 11 or 12?",
                "result": "grade, COUNT(*) FROM Highschooler\nWHERE grade IN (11,12)\nGROUP BY grade;",
                "prompt": "### How many in each grade 11 or 12? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
                "question": "How many in grade 9 or 10?",
                "result": "grade, COUNT(*) FROM Highschooler\nWHERE grade IN (9,10)\nGROUP BY grade;",
                "prompt": "### How many in grade 9 or 10? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT count(distinct grade) FROM Highschooler",
                "question": "How many distinct grades are there?",
                "result": "DISTINCT grade FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many distinct grades are there? \n SELECT"
            },
            {
                "query": "SELECT distinct grade FROM Highschooler",
                "question": "What are they?",
                "result": "grade FROM Highschooler GROUP BY grade;",
                "prompt": "### What are they? \n SELECT"
            },
            {
                "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) ASC LIMIT 1",
                "question": "Which one has the least number of highschoolers?",
                "result": "grade, COUNT(*) as num_highschoolers\n FROM Highschooler\n GROUP BY grade\n ORDER BY num_highschoolers ASC\n LIMIT 1;",
                "prompt": "### Which one has the least number of highschoolers? \n SELECT"
            },
            {
                "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
                "question": "Which one has the most?",
                "result": "grade, COUNT(*) as num_highschoolers\n FROM Highschooler\n GROUP BY grade\n ORDER BY num_highschoolers DESC\n LIMIT 1;",
                "prompt": "### Which one has the most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM Highschooler",
                "question": "How many highschoolers are there in total?",
                "result": "COUNT(*) FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many highschoolers are there in total? \n SELECT"
            },
            {
                "query": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
                "question": "How many per grade?",
                "result": "grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade;",
                "prompt": "### How many per grade? \n SELECT"
            },
            {
                "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  10",
                "question": "What grades have at least 10 students?",
                "result": "grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 10;",
                "prompt": "### What grades have at least 10 students? \n SELECT"
            },
            {
                "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
                "question": "How about at least 4?",
                "result": "grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4;",
                "prompt": "### How about at least 4? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT name FROM highschooler",
                "question": "What are the names of all the high school students?",
                "result": "name FROM Highschooler",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all the high school students? \n SELECT"
            },
            {
                "query": "SELECT T2.name, T3.name FROM friend as T1 join highschooler as T2  on friend_id = T2.ID join highschooler as T3 on student_id = T3.ID",
                "question": "Show the names of the friends for each one.",
                "result": "Friend.student_id, Highschooler.name \nFROM Friend \nJOIN Highschooler ON Friend.friend_id = Highschooler.ID",
                "prompt": "### Show the names of the friends for each one. \n SELECT"
            },
            {
                "query": "SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "question": "How many friends does each student each have?",
                "result": "Friend.student_id, COUNT(Friend.friend_id) \nFROM Friend \nGROUP BY Friend.student_id",
                "prompt": "### How many friends does each student each have? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT name FROM highschooler",
                "question": "What are the names of all the high schoolers?",
                "result": "name FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all the high schoolers? \n SELECT"
            },
            {
                "query": "SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "question": "Show me the number of friends for each one.",
                "result": "ID, COUNT(friend_id) AS num_friends FROM Friend GROUP BY ID;",
                "prompt": "### Show me the number of friends for each one. \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) ASC LIMIT 1",
                "question": "Which one has the least number of friends?",
                "result": "ID, COUNT(friend_id) AS num_friends FROM Friend GROUP BY ID ORDER BY num_friends ASC LIMIT 1;",
                "prompt": "### Which one has the least number of friends? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "question": "How about the greatest?",
                "result": "ID, COUNT(friend_id) AS num_friends FROM Friend GROUP BY ID ORDER BY num_friends DESC LIMIT 1;",
                "prompt": "### How about the greatest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  > 5)",
                "question": "How many highschoolers have more than 5?",
                "result": "COUNT(*) FROM Highschooler WHERE grade > 5;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many highschoolers have more than 5? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 3)",
                "question": "at least 3?",
                "result": "COUNT(*) FROM Highschooler WHERE grade >= 3;",
                "prompt": "### at least 3? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
                "question": "What are their names?",
                "result": "name FROM Highschooler WHERE grade > 5;",
                "prompt": "### What are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT * FROM highschooler where name = \"Kyle\"",
                "question": "Show me information on the high schooler named \"Kyle.\"",
                "result": "*\nFROM Highschooler\nWHERE name = \"Kyle\"",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me information on the high schooler named \"Kyle.\" \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "question": "How many friends does he have?",
                "result": "COUNT(*)\nFROM Friend\nWHERE student_id IN (\n  SELECT ID\n  FROM Highschooler\n  WHERE name = \"Kyle\"\n)",
                "prompt": "### How many friends does he have? \n SELECT"
            },
            {
                "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "question": "What are their names?",
                "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.friend_id\nWHERE Friend.student_id IN (\n  SELECT ID\n  FROM Highschooler\n  WHERE name = \"Kyle\"\n)",
                "prompt": "### What are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT * FROM highschooler where name = \"Kyle\"",
                "question": "Is there a highschooler named Kyle?",
                "result": "* FROM Highschooler WHERE name = 'Kyle';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Is there a highschooler named Kyle? \n SELECT"
            },
            {
                "query": "SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.liked_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "question": "Who does he like?",
                "result": "* FROM Highschooler h, Likes l WHERE h.ID = l.student_id AND h.name = 'Kyle';",
                "prompt": "### Who does he like? \n SELECT"
            },
            {
                "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "question": "What are the names of his friends?",
                "result": "f2.name \nFROM Highschooler h, Friend f1, Friend f2 \nWHERE h.name = 'Kyle' AND h.ID = f1.student_id AND f1.friend_id = f2.ID;",
                "prompt": "### What are the names of his friends? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "question": "How many are there?",
                "result": "COUNT(f2.name) \nFROM Highschooler h, Friend f1, Friend f2 \nWHERE h.name = 'Kyle' AND h.ID = f1.student_id AND f1.friend_id = f2.ID;",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT ID FROM highschooler",
                "question": "Show me all the high school student ids.",
                "result": "ID FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me all the high school student ids. \n SELECT"
            },
            {
                "query": "SELECT student_id, count(*) FROM friend group by student_id",
                "question": "How many friends do each of them have?",
                "result": "Highschooler.ID, COUNT(Friend.friend_id) \nFROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID;",
                "prompt": "### How many friends do each of them have? \n SELECT"
            },
            {
                "query": "SELECT student_id FROM Friend",
                "question": "Which ones have at least 1?",
                "result": "Highschooler.ID, COUNT(Friend.friend_id) \nFROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(Friend.friend_id) >= 1;",
                "prompt": "### Which ones have at least 1? \n SELECT"
            },
            {
                "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
                "question": "Which ones have none?",
                "result": "Highschooler.ID \nFROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Friend.friend_id IS NULL;",
                "prompt": "### Which ones have none? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT name FROM highschooler",
                "question": "What are the names of all the highshcool students?",
                "result": "name FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all the highshcool students? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 5)",
                "question": "Which ones have at least 5 friends?",
                "result": "H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nGROUP BY H.ID \nHAVING COUNT(F.friend_id) >= 5;",
                "prompt": "### Which ones have at least 5 friends? \n SELECT"
            },
            {
                "query": "SELECT distinct T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "question": "how about at least 1?",
                "result": "H.name \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nGROUP BY H.ID \nHAVING COUNT(F.friend_id) >= 1;",
                "prompt": "### how about at least 1? \n SELECT"
            },
            {
                "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "question": "how about 0?",
                "result": "H.name \nFROM Highschooler H \nLEFT JOIN Friend F ON H.ID = F.student_id \nWHERE F.friend_id IS NULL;",
                "prompt": "### how about 0? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT student_id FROM Friend",
                "question": "Show me the ids of all highschoolers who have friends?",
                "result": "Friend.student_id \nFROM Friend",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me the ids of all highschoolers who have friends? \n SELECT"
            },
            {
                "query": "SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id",
                "question": "Also show, for each, the ids of the people they like?",
                "result": "Friend.student_id, Likes.liked_id \nFROM Friend \nINNER JOIN Likes ON Friend.student_id = Likes.student_id",
                "prompt": "### Also show, for each, the ids of the people they like? \n SELECT"
            },
            {
                "query": "SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id where T1.student_id in (SELECT liked_id FROM Likes)",
                "question": "Now only show those who are liked by someone else!",
                "result": "Friend.student_id, Likes.liked_id \nFROM Friend \nINNER JOIN Likes ON Friend.student_id = Likes.student_id \nWHERE Likes.liked_id NOT IN (SELECT ID FROM Highschooler)",
                "prompt": "### Now only show those who are liked by someone else! \n SELECT"
            },
            {
                "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
                "question": "Show me just their ids!",
                "result": "DISTINCT Likes.liked_id \nFROM Friend \nINNER JOIN Likes ON Friend.student_id = Likes.student_id \nWHERE Likes.liked_id NOT IN (SELECT ID FROM Highschooler)",
                "prompt": "### Show me just their ids! \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
                "question": "How many high schoolers are liked by someone else?",
                "result": "COUNT(DISTINCT Likes.liked_id) \nFROM Likes",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are liked by someone else? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
                "question": "What are their names?",
                "result": "Highschooler.name \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.liked_id",
                "prompt": "### What are their names? \n SELECT"
            },
            {
                "query": "SELECT count (*) FROM (SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id)",
                "question": "How many of them have friends?",
                "result": "COUNT(DISTINCT Highschooler.ID) \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.liked_id \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id",
                "prompt": "### How many of them have friends? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
                "question": "Who are they?",
                "result": "DISTINCT Highschooler.name \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.liked_id \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id",
                "prompt": "### Who are they? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT name FROM Highschooler where ID not in (SELECT student_id FROM Likes)",
                "question": "What are the names of the highschoolers who don't like anyone?",
                "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID NOT IN \n(SELECT Likes.student_id FROM Likes)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of the highschoolers who don't like anyone? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "question": "How about those who like others?",
                "result": "Highschooler.name \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id",
                "prompt": "### How about those who like others? \n SELECT"
            },
            {
                "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "question": "How many people do they each like?",
                "result": "Likes.student_id, COUNT(Likes.liked_id) AS num_likes \nFROM Likes \nGROUP BY Likes.student_id",
                "prompt": "### How many people do they each like? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT count(distinct student_id) FROM likes",
                "question": "How many high schoolers like somebody else?",
                "result": "COUNT(DISTINCT student_id) FROM Likes",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers like somebody else? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "question": "What are their names?",
                "result": "Highschooler.name FROM Highschooler WHERE Highschooler.ID IN (SELECT DISTINCT student_id FROM Likes)",
                "prompt": "### What are their names? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "question": "what is the greatest number of likes anyone has?",
                "result": "MAX(cnt) FROM (SELECT COUNT(*) as cnt FROM Likes GROUP BY student_id) as like_counts;",
                "prompt": "### what is the greatest number of likes anyone has? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "question": "who has the greatest number of likes?",
                "result": "Highschooler.name FROM Highschooler WHERE Highschooler.ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)",
                "prompt": "### who has the greatest number of likes? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT name FROM highschooler",
                "question": "Show me the names of all students?",
                "result": "name FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me the names of all students? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  1",
                "question": "How about those who like at least one other person!",
                "result": "DISTINCT Highschooler.name \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id;",
                "prompt": "### How about those who like at least one other person! \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
                "question": "How about those who like at least two other students!",
                "result": "DISTINCT Highschooler.name \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Likes.student_id \nHAVING COUNT(Likes.liked_id) >= 2;",
                "prompt": "### How about those who like at least two other students! \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "question": "What are the names of the students who have some friends?",
                "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID IN (\n    SELECT Friend.student_id\n    FROM Friend\n)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of the students who have some friends? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
                "question": "How about those have at least 2 friends?",
                "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID IN (\n    SELECT Friend.student_id\n    FROM Friend\n    GROUP BY Friend.student_id\n    HAVING COUNT(*) >= 2\n)",
                "prompt": "### How about those have at least 2 friends? \n SELECT"
            },
            {
                "query": "SELECT T2.name, T2.grade FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
                "question": "What grades are they each in?",
                "result": "Highschooler.name, Highschooler.grade\nFROM Highschooler\nWHERE Highschooler.ID IN (\n    SELECT Friend.student_id\n    FROM Friend\n)\nORDER BY Highschooler.name",
                "prompt": "### What grades are they each in? \n SELECT"
            },
            {
                "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
                "question": "Show me the names of only those who are in a grade higher than 5!",
                "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.grade > 5",
                "prompt": "### Show me the names of only those who are in a grade higher than 5! \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT grade FROM highschooler where name = \"Kyle\"",
                "question": "What grade is the student named Kyle in?",
                "result": "grade \nFROM Highschooler \nWHERE name = 'Kyle';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What grade is the student named Kyle in? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
                "question": "How many other students like him?",
                "result": "COUNT(*) \nFROM Likes \nWHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
                "prompt": "### How many other students like him? \n SELECT"
            },
            {
                "query": "SELECT T3.name  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id JOIN Highschooler as T3 on T3.ID = T1.student_id WHERE T2.name  =  \"Kyle\"",
                "question": "What are their names?",
                "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE Likes.liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
                "prompt": "### What are their names? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
                "question": "How many other students does he like?",
                "result": "COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
                "prompt": "### How many other students does he like? \n SELECT"
            }
        ]
    },
    {
        "database_id": "network_1",
        "interaction": [
            {
                "query": "SELECT id, grade FROM highschooler",
                "question": "Show me the student_id and the grade for all students.",
                "result": "ID, grade FROM Highschooler;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me the student_id and the grade for all students. \n SELECT"
            },
            {
                "query": "SELECT avg(grade) FROM highschooler",
                "question": "What is the average grade?",
                "result": "AVG(grade) FROM Highschooler;",
                "prompt": "### What is the average grade? \n SELECT"
            },
            {
                "query": "SELECT avg(grade) FROM Highschooler WHERE id not IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
                "question": "How about for students who have no friends?",
                "result": "AVG(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);",
                "prompt": "### How about for students who have no friends? \n SELECT"
            },
            {
                "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
                "question": "How about for those who have some friends?",
                "result": "AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);",
                "prompt": "### How about for those who have some friends? \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT * FROM teacher",
                "question": "Show all the teachers.",
                "result": "* FROM teacher;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show all the teachers. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM teacher",
                "question": "How many are there?",
                "result": "COUNT(*) FROM teacher;",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Name FROM teacher",
                "question": "What is the name of each teacher?",
                "result": "Name FROM teacher;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the name of each teacher? \n SELECT"
            },
            {
                "query": "SELECT Name FROM teacher ORDER BY Age ASC",
                "question": "Sort them in ascending order of age.",
                "result": "Name FROM teacher ORDER BY Age ASC;",
                "prompt": "### Sort them in ascending order of age. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Hometown FROM teacher",
                "question": "What is the age of each teacher?",
                "result": "Age FROM teacher",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age of each teacher? \n SELECT"
            },
            {
                "query": "SELECT Age ,  Hometown FROM teacher",
                "question": "Also show the hometown for each.",
                "result": "Age, Hometown FROM teacher",
                "prompt": "### Also show the hometown for each. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Hometown FROM teacher",
                "question": "What is the hometown of each teacher?",
                "result": "teacher.Hometown FROM teacher",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the hometown of each teacher? \n SELECT"
            },
            {
                "query": "SELECT * FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
                "question": "Which teacher's hometown is not \"Little Lever Urban District\"?",
                "result": "teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District'",
                "prompt": "### Which teacher's hometown is not \"Little Lever Urban District\"? \n SELECT"
            },
            {
                "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
                "question": "Give me their names.",
                "result": "teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District'",
                "prompt": "### Give me their names. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Age FROM teacher",
                "question": "What are the ages of all the teachers?",
                "result": "Age FROM teacher",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the ages of all the teachers? \n SELECT"
            },
            {
                "query": "SELECT * FROM teacher WHERE Age  =  32",
                "question": "Which teachers are age 32?",
                "result": "Name FROM teacher WHERE Age=32",
                "prompt": "### Which teachers are age 32? \n SELECT"
            },
            {
                "query": "SELECT * FROM teacher WHERE Age  =  32 OR Age  =  33",
                "question": "Which teachers are age 32 or 33?",
                "result": "Name FROM teacher WHERE Age=32 OR Age=33",
                "prompt": "### Which teachers are age 32 or 33? \n SELECT"
            },
            {
                "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
                "question": "What are their names?",
                "result": "Name FROM teacher WHERE Age=32 OR Age=33",
                "prompt": "### What are their names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT * FROM teacher ORDER BY Age",
                "question": "Sort all the teachers by their age.",
                "result": "* \nFROM teacher \nORDER BY Age ASC;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Sort all the teachers by their age. \n SELECT"
            },
            {
                "query": "SELECT * FROM teacher ORDER BY Age ASC LIMIT 1",
                "question": "Which teacher is the youngest?",
                "result": "*\nFROM teacher \nORDER BY Age ASC \nLIMIT 1;",
                "prompt": "### Which teacher is the youngest? \n SELECT"
            },
            {
                "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
                "question": "What is his or her hometown?",
                "result": "Hometown \nFROM teacher \nORDER BY Age ASC \nLIMIT 1;",
                "prompt": "### What is his or her hometown? \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Hometown FROM teacher",
                "question": "What is the hometown of each teacher?",
                "result": "teacher.Hometown FROM teacher",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the hometown of each teacher? \n SELECT"
            },
            {
                "query": "SELECT * FROM teacher order BY Hometown",
                "question": "Can you order teachers by their hometowns?",
                "result": "* FROM teacher ORDER BY Hometown;",
                "prompt": "### Can you order teachers by their hometowns? \n SELECT"
            },
            {
                "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
                "question": "Show the number of teachers from each hometown.",
                "result": "Hometown, COUNT(*) AS \"Number of Teachers\" FROM teacher GROUP BY Hometown;",
                "prompt": "### Show the number of teachers from each hometown. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT COUNT(*) FROM teacher",
                "question": "How many teachers are there?",
                "result": "COUNT(*) FROM teacher;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### How many teachers are there? \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM teacher GROUP BY Hometown",
                "question": "How many are there for each hometown?",
                "result": "Hometown, COUNT(*) FROM teacher GROUP BY Hometown;",
                "prompt": "### How many are there for each hometown? \n SELECT"
            },
            {
                "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                "question": "Find the most common hometown of teachers.",
                "result": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
                "prompt": "### Find the most common hometown of teachers. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT COUNT(*) FROM teacher",
                "question": "How many teachers are there?",
                "result": "COUNT(*) FROM teacher;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### How many teachers are there? \n SELECT"
            },
            {
                "query": "SELECT COUNT(*) FROM teacher GROUP BY Hometown",
                "question": "How many teachers are there for each hometown?",
                "result": "Hometown, COUNT(*) FROM teacher GROUP BY Hometown;",
                "prompt": "### How many teachers are there for each hometown? \n SELECT"
            },
            {
                "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
                "question": "Which hometowns are shared by at least two teachers?",
                "result": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;",
                "prompt": "### Which hometowns are shared by at least two teachers? \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT * FROM course_arrange",
                "question": "Find all the course arrangements.",
                "result": "* FROM course_arrange",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Find all the course arrangements. \n SELECT"
            },
            {
                "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
                "question": "For each of the courses, show the teacher who teaches it.",
                "result": "course.Course, teacher.Name \nFROM course_arrange \nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID \nINNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID",
                "prompt": "### For each of the courses, show the teacher who teaches it. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT * FROM course_arrange",
                "question": "Find all the course arrangements.",
                "result": "* FROM course_arrange;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Find all the course arrangements. \n SELECT"
            },
            {
                "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
                "question": "Show names of teachers and the courses they are arranged to teach.",
                "result": "teacher.Name, course.Course \n FROM teacher \n INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;",
                "prompt": "### Show names of teachers and the courses they are arranged to teach. \n SELECT"
            },
            {
                "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
                "question": "Sort the results by teacher's name",
                "result": "teacher.Name, course.Course \n FROM teacher \n INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n INNER JOIN course ON course_arrange.Course_ID = course.Course_ID\n ORDER BY teacher.Name;",
                "prompt": "### Sort the results by teacher's name \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT * FROM course_arrange",
                "question": "Find all the course arrangements.",
                "result": "* FROM course_arrange",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Find all the course arrangements. \n SELECT"
            },
            {
                "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
                "question": "Show names of teachers and the courses they are arranged to teach.",
                "result": "teacher.Name, course.Course \nFROM teacher \nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID",
                "prompt": "### Show names of teachers and the courses they are arranged to teach. \n SELECT"
            },
            {
                "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
                "question": "Which teachers teach the math course? Give me their names.",
                "result": "teacher.Name \nFROM teacher \nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID \nWHERE course.Course = 'math'",
                "prompt": "### Which teachers teach the math course? Give me their names. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Name FROM teacher",
                "question": "Show all the teacher names.",
                "result": "Name FROM teacher",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show all the teacher names. \n SELECT"
            },
            {
                "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
                "question": "Show names of teachers and the number of courses they teach.",
                "result": "teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Name",
                "prompt": "### Show names of teachers and the number of courses they teach. \n SELECT"
            }
        ]
    },
    {
        "database_id": "course_teach",
        "interaction": [
            {
                "query": "SELECT Name FROM teacher",
                "question": "Show all the teacher names.",
                "result": "Name \nFROM teacher",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show all the teacher names. \n SELECT"
            },
            {
                "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
                "question": "Show names of teachers and the number of courses they teach.",
                "result": "teacher.Name, COUNT(course_arrange.Course_ID) \nFROM teacher \nLEFT JOIN course_arrange \nON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Teacher_ID",
                "prompt": "### Show names of teachers and the number of courses they teach. \n SELECT"
            },
            {
                "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
                "question": "Show the names of teachers who teach at least two courses.",
                "result": "teacher.Name \nFROM teacher \nJOIN course_arrange \nON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Teacher_ID \nHAVING COUNT(course_arrange.Course_ID) >= 2",
                "prompt": "### Show the names of teachers who teach at least two courses. \n SELECT"
            }
        ]
    },
    {
        "database_id": "real_estate_properties",
        "interaction": [
            {
                "query": "SELECT * FROM Other_Available_Features",
                "question": "Show all the available features.",
                "result": "feature_id, feature_type_code, feature_name, feature_description\n FROM Other_Available_Features",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### Show all the available features. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Other_Available_Features",
                "question": "How many available features are there?",
                "result": "COUNT(*) AS total_available_features\nFROM Other_Available_Features;",
                "prompt": "### How many available features are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "real_estate_properties",
        "interaction": [
            {
                "query": "SELECT * FROM Other_Available_Features WHERE feature_name  =  \"AirCon\"",
                "question": "Find the available features with feature name \"AirCon\".",
                "result": "Other_Available_Features.feature_id, Other_Available_Features.feature_name, Other_Available_Features.feature_description \n FROM Other_Available_Features \n WHERE Other_Available_Features.feature_name = 'AirCon';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### Find the available features with feature name \"AirCon\". \n SELECT"
            },
            {
                "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
                "question": "What is the feature type name?",
                "result": "To answer this question, we need more information about the tables and their relationships, particularly the relationship between the `Other_Available_Features` table and the `Ref_Feature_Types` table. Without this information, it is not possible to determine the feature type name.",
                "prompt": "### What is the feature type name? \n SELECT"
            }
        ]
    },
    {
        "database_id": "real_estate_properties",
        "interaction": [
            {
                "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code",
                "question": "What is the property type description of each property?",
                "result": "Properties.property_name, Ref_Property_Types.property_type_description \nFROM Properties \nJOIN Ref_Property_Types \nON Properties.property_type_code = Ref_Property_Types.property_type_code;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### What is the property type description of each property? \n SELECT"
            },
            {
                "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
                "question": "Show the property type descriptions of properties for each property type code.",
                "result": "Properties.property_type_code, Ref_Property_Types.property_type_description \nFROM Properties \nJOIN Ref_Property_Types \nON Properties.property_type_code = Ref_Property_Types.property_type_code \nGROUP BY Properties.property_type_code;",
                "prompt": "### Show the property type descriptions of properties for each property type code. \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM area_code_state",
                "question": "Show all area codes and states.",
                "result": "area_code, state \nFROM AREA_CODE_STATE;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all area codes and states. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM area_code_state",
                "question": "How many are there?",
                "result": "COUNT(*) \nFROM AREA_CODE_STATE;",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM contestants",
                "question": "Show all info about contestants.",
                "result": "* FROM CONTESTANTS;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all info about contestants. \n SELECT"
            },
            {
                "query": "SELECT  contestant_name FROM contestants",
                "question": "What are their names?",
                "result": "contestant_name FROM CONTESTANTS;",
                "prompt": "### What are their names? \n SELECT"
            },
            {
                "query": "SELECT contestant_number ,  contestant_name FROM contestants",
                "question": "Can you also show contestant numbers?",
                "result": "contestant_number, contestant_name FROM CONTESTANTS;",
                "prompt": "### Can you also show contestant numbers? \n SELECT"
            },
            {
                "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
                "question": "Can you sort them ordered in descending order of contestant name?",
                "result": "contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;",
                "prompt": "### Can you sort them ordered in descending order of contestant name? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT state FROM votes",
                "question": "Show all info about votes.",
                "result": "* FROM VOTES;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all info about votes. \n SELECT"
            },
            {
                "query": "SELECT vote_id,  state FROM votes",
                "question": "Also provide vote ids.",
                "result": "vote_id, * FROM VOTES;",
                "prompt": "### Also provide vote ids. \n SELECT"
            },
            {
                "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
                "question": "Also show phone numbers.",
                "result": "vote_id, phone_number, * FROM VOTES;",
                "prompt": "### Also show phone numbers. \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT area_code FROM area_code_state",
                "question": "Show all area codes.",
                "result": "area_code FROM AREA_CODE_STATE;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all area codes. \n SELECT"
            },
            {
                "query": "SELECT max(area_code) FROM area_code_state",
                "question": "What is the largest one?",
                "result": "MAX(area_code) FROM AREA_CODE_STATE;",
                "prompt": "### What is the largest one? \n SELECT"
            },
            {
                "query": "SELECT min(area_code) FROM area_code_state",
                "question": "How about smallest one?",
                "result": "MIN(area_code) FROM AREA_CODE_STATE;",
                "prompt": "### How about smallest one? \n SELECT"
            },
            {
                "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
                "question": "Give me both.",
                "result": "MIN(area_code), MAX(area_code) FROM AREA_CODE_STATE;",
                "prompt": "### Give me both. \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM votes",
                "question": "Show all votes.",
                "result": "* FROM VOTES",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all votes. \n SELECT"
            },
            {
                "query": "SELECT * FROM votes WHERE state  =  'CA'",
                "question": "Which ones are from the state 'CA'?",
                "result": "* FROM VOTES\nWHERE state = 'CA'",
                "prompt": "### Which ones are from the state 'CA'? \n SELECT"
            },
            {
                "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
                "question": "Among those, can you give me the last date created?",
                "result": "MAX(created) FROM VOTES\nWHERE state = 'CA'",
                "prompt": "### Among those, can you give me the last date created? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM contestants",
                "question": "Show all contestants.",
                "result": "* FROM CONTESTANTS;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all contestants. \n SELECT"
            },
            {
                "query": "SELECT contestant_name FROM contestants",
                "question": "What are their names?",
                "result": "contestant_name FROM CONTESTANTS;",
                "prompt": "### What are their names? \n SELECT"
            },
            {
                "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
                "question": "Can you not include the name 'Jessie Alloway'?",
                "result": "contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';",
                "prompt": "### Can you not include the name 'Jessie Alloway'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM votes",
                "question": "Show all votes?",
                "result": "* FROM VOTES;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all votes? \n SELECT"
            },
            {
                "query": "SELECT state FROM votes",
                "question": "Among these, what is the list of states?",
                "result": "DISTINCT state FROM VOTES;",
                "prompt": "### Among these, what is the list of states? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT state ,  created FROM votes",
                "question": "What are the distinct states and create time?",
                "result": "DISTINCT state, created FROM VOTES;",
                "prompt": "### What are the distinct states and create time? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM contestants",
                "question": "Show all the contestants.",
                "result": "* FROM CONTESTANTS;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all the contestants. \n SELECT"
            },
            {
                "query": "SELECT * FROM votes",
                "question": "Show all the votes.",
                "result": "* FROM VOTES;",
                "prompt": "### Show all the votes. \n SELECT"
            },
            {
                "query": "SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
                "question": "Can you show contestants with at least two votes?",
                "result": "contestant_number, contestant_name\nFROM CONTESTANTS\nWHERE contestant_number IN (\n  SELECT contestant_number\n  FROM VOTES\n  GROUP BY contestant_number\n  HAVING COUNT(*) >= 2\n);",
                "prompt": "### Can you show contestants with at least two votes? \n SELECT"
            },
            {
                "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
                "question": "What are their contestant numbers and names?",
                "result": "contestant_number, contestant_name\nFROM CONTESTANTS;",
                "prompt": "### What are their contestant numbers and names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM contestants",
                "question": "Show all the contestants.",
                "result": "* FROM CONTESTANTS;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all the contestants. \n SELECT"
            },
            {
                "query": "SELECT * FROM votes",
                "question": "Show all the votes.",
                "result": "* FROM VOTES;",
                "prompt": "### Show all the votes. \n SELECT"
            },
            {
                "query": "SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
                "question": "Can you show the contestant with the least votes?",
                "result": "contestant_number, contestant_name \nFROM CONTESTANTS \nWHERE contestant_number = (\n    SELECT contestant_number \n    FROM VOTES \n    GROUP BY contestant_number \n    ORDER BY COUNT(*) ASC \n    LIMIT 1 \n);",
                "prompt": "### Can you show the contestant with the least votes? \n SELECT"
            },
            {
                "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
                "question": "What is his or her contestant number and contestant name?",
                "result": "contestant_number, contestant_name \nFROM CONTESTANTS \nWHERE contestant_number = (\n    SELECT contestant_number \n    FROM VOTES \n    GROUP BY contestant_number \n    ORDER BY COUNT(*) ASC \n    LIMIT 1 \n);",
                "prompt": "### What is his or her contestant number and contestant name? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM votes",
                "question": "Show all votes.",
                "result": "* FROM VOTES;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all votes. \n SELECT"
            },
            {
                "query": "SELECT * FROM votes WHERE state  =  'NY' OR state  =  'CA'",
                "question": "What about those from state 'NY' or 'CA'?",
                "result": "* FROM VOTES WHERE state = 'NY' OR state = 'CA';",
                "prompt": "### What about those from state 'NY' or 'CA'? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
                "question": "Give me the count of these votes.",
                "result": "COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';",
                "prompt": "### Give me the count of these votes. \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM contestants",
                "question": "Show all contestants",
                "result": "contestant_number, contestant_name\nFROM CONTESTANTS;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all contestants \n SELECT"
            },
            {
                "query": "SELECT * FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
                "question": "Which contestants did not get any votes?",
                "result": "contestant_number, contestant_name\nFROM CONTESTANTS\nWHERE contestant_number NOT IN (\n    SELECT contestant_number\n    FROM VOTES\n);",
                "prompt": "### Which contestants did not get any votes? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
                "question": "How many are there?",
                "result": "COUNT(*) AS number_of_contestants_without_votes\nFROM CONTESTANTS\nWHERE contestant_number NOT IN (\n    SELECT contestant_number\n    FROM VOTES\n);",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM area_code_state",
                "question": "Show all area codes and states.",
                "result": "area_code, state \nFROM AREA_CODE_STATE",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all area codes and states. \n SELECT"
            },
            {
                "query": "SELECT * FROM votes",
                "question": "Show all votes.",
                "result": "* \nFROM VOTES",
                "prompt": "### Show all votes. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code",
                "question": "Get the count of votes for each area code.",
                "result": "area_code, COUNT(*) \nFROM VOTES \nGROUP BY area_code",
                "prompt": "### Get the count of votes for each area code. \n SELECT"
            },
            {
                "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
                "question": "What is the area code in which the most voters voted?",
                "result": "area_code \nFROM VOTES \nGROUP BY area_code \nORDER BY COUNT(*) DESC \nLIMIT 1",
                "prompt": "### What is the area code in which the most voters voted? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM votes",
                "question": "Show all votes.",
                "result": "* FROM VOTES",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all votes. \n SELECT"
            },
            {
                "query": "SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
                "question": "Show those that were for the contestant named 'Tabatha Gehling'.",
                "result": "* FROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')",
                "prompt": "### Show those that were for the contestant named 'Tabatha Gehling'. \n SELECT"
            },
            {
                "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
                "question": "What are the create dates, states, and phone numbers of these votes?",
                "result": "created, state, phone_number FROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')",
                "prompt": "### What are the create dates, states, and phone numbers of these votes? \n SELECT"
            }
        ]
    },
    {
        "database_id": "voter_1",
        "interaction": [
            {
                "query": "SELECT * FROM area_code_state",
                "question": "Show all area codes.",
                "result": "area_code FROM AREA_CODE_STATE;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Show all area codes. \n SELECT"
            },
            {
                "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'",
                "question": "Can you tell me area codes in which voters voted for the contestant 'Tabatha Gehling'?",
                "result": "AREA_CODE_STATE.area_code \nFROM AREA_CODE_STATE \nINNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state \nINNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';",
                "prompt": "### Can you tell me area codes in which voters voted for the contestant 'Tabatha Gehling'? \n SELECT"
            },
            {
                "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
                "question": "How about both the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'?",
                "result": "AREA_CODE_STATE.area_code \nFROM AREA_CODE_STATE \nINNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state \nINNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \nWHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss');",
                "prompt": "### How about both the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T2.department_description ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Give me the description of the department that offers the most number of degrees.",
                "result": "Departments.department_description\nFROM Departments\nWHERE department_id = (\n   SELECT degree_programs.department_id\n   FROM Degree_Programs\n   GROUP BY degree_programs.department_id\n   ORDER BY COUNT(degree_programs.degree_program_id) DESC\n   LIMIT 1\n)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Give me the description of the department that offers the most number of degrees. \n SELECT"
            },
            {
                "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
                "question": "What's the name and id of that department?",
                "result": "Departments.department_id, Departments.department_name\nFROM Departments\nWHERE department_id = (\n   SELECT degree_programs.department_id\n   FROM Degree_Programs\n   GROUP BY degree_programs.department_id\n   ORDER BY COUNT(degree_programs.degree_program_id) DESC\n   LIMIT 1\n)",
                "prompt": "### What's the name and id of that department? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT * FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
                "question": "Show me all the degrees offered by the engineering department.",
                "result": "Degree_Programs.degree_summary_name \nFROM Degree_Programs \nINNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'engineering';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show me all the degrees offered by the engineering department. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
                "question": "How many are there?",
                "result": "COUNT(Degree_Programs.degree_summary_name) \nFROM Degree_Programs \nINNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'engineering';",
                "prompt": "### How many are there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT * FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  =  2",
                "question": "Show me courses that have exactly 2 sections.",
                "result": "Courses.course_name \nFROM Courses \nINNER JOIN Sections ON Courses.course_id = Sections.course_id \nGROUP BY Courses.course_id \nHAVING COUNT(Sections.section_id) = 2;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show me courses that have exactly 2 sections. \n SELECT"
            },
            {
                "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
                "question": "Show me names and ids for courses that have at most 2 sections.",
                "result": "Courses.course_id, Courses.course_name \nFROM Courses \nINNER JOIN Sections ON Courses.course_id = Sections.course_id \nGROUP BY Courses.course_id \nHAVING COUNT(Sections.section_id) <= 2;",
                "prompt": "### Show me names and ids for courses that have at most 2 sections. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) ASC LIMIT 1",
                "question": "Which semester did the least number of students register? Give me its name and id.",
                "result": "Semesters.semester_id, Semesters.semester_name \n FROM Semesters \n INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n GROUP BY Semesters.semester_id \n ORDER BY COUNT(Student_Enrolment.student_id) ASC \n LIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which semester did the least number of students register? Give me its name and id. \n SELECT"
            },
            {
                "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
                "question": "How about the semester that most number of students registered?",
                "result": "Semesters.semester_id, Semesters.semester_name \n FROM Semesters \n INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n GROUP BY Semesters.semester_id \n ORDER BY COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;",
                "prompt": "### How about the semester that most number of students registered? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT * FROM Departments WHERE department_name LIKE '%computer%'",
                "question": "Show me all department names that contain the word \"computer\"",
                "result": "department_name\nFROM Departments\nWHERE department_name LIKE '%computer%'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show me all department names that contain the word \"computer\" \n SELECT"
            },
            {
                "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
                "question": "Show me their descriptions.",
                "result": "department_description\nFROM Departments\nWHERE department_name LIKE '%computer%'",
                "prompt": "### Show me their descriptions. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
                "question": "How many people are enrolled in 2 degree programs in one semester?",
                "result": "\n\nCOUNT(DISTINCT se.student_id)\nFROM Student_Enrolment se\nWHERE se.degree_program_id IN (\n    SELECT se2.degree_program_id \n    FROM Student_Enrolment se2\n    WHERE se2.semester_id = <semester_id>\n    GROUP BY se2.student_id\n    HAVING COUNT(DISTINCT se2.degree_program_id) = 2\n)\nAND se.semester_id = <semester_id>;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many people are enrolled in 2 degree programs in one semester? \n SELECT"
            },
            {
                "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
                "question": "Show me their first, middle, and last names.",
                "result": "s.first_name, s.middle_name, s.last_name\nFROM Students s\nINNER JOIN Student_Enrolment se ON s.student_id = se.student_id\nWHERE se.degree_program_id IN (\n    SELECT se2.degree_program_id \n    FROM Student_Enrolment se2\n    WHERE se2.semester_id = <semester_id>\n    GROUP BY se2.student_id\n    HAVING COUNT(DISTINCT se2.degree_program_id) = 2\n)\nAND se.semester_id = <semester_id>;",
                "prompt": "### Show me their first, middle, and last names. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT DISTINCT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "question": "How many people are enrolled in the Bachelor degree program?",
                "result": "COUNT(*) \nFROM Students \nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name = 'Bachelor'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many people are enrolled in the Bachelor degree program? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "question": "What are their first, middle, and last names?",
                "result": "Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name = 'Bachelor'",
                "prompt": "### What are their first, middle, and last names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 3",
                "question": "Show me the descriptions of programs with 3 highest number of enrolled students.",
                "result": "Degree_Programs.degree_summary_description\nFROM Student_Enrolment\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nGROUP BY Degree_Programs.degree_program_id\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 3;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show me the descriptions of programs with 3 highest number of enrolled students. \n SELECT"
            },
            {
                "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
                "question": "Show me the name of program with the most enrolled students.",
                "result": "Degree_Programs.degree_summary_name\nFROM Student_Enrolment\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nGROUP BY Degree_Programs.degree_program_id\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
                "prompt": "### Show me the name of program with the most enrolled students. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) ASC LIMIT 1",
                "question": "What is the description of the program that has the least number of enrolled students?",
                "result": "Degree_Programs.degree_summary_description \nFROM Degree_Programs \nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \nGROUP BY Degree_Programs.degree_summary_description \nORDER BY COUNT(Student_Enrolment.student_id) ASC \nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the description of the program that has the least number of enrolled students? \n SELECT"
            },
            {
                "query": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
                "question": "How about the program that has the most number of enrolled students?",
                "result": "Degree_Programs.degree_summary_description \nFROM Degree_Programs \nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \nGROUP BY Degree_Programs.degree_summary_description \nORDER BY COUNT(Student_Enrolment.student_id) DESC \nLIMIT 1;",
                "prompt": "### How about the program that has the most number of enrolled students? \n SELECT"
            },
            {
                "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Show me the id and summary.",
                "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description \nFROM Degree_Programs;",
                "prompt": "### Show me the id and summary. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3",
                "question": "Show me the id, first and last names of top 3 students who have enrolled for the most times in any program.",
                "result": "Students.student_id, Students.first_name, Students.last_name\nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nGROUP BY Students.student_id \nORDER BY COUNT(Student_Enrolment.student_id) DESC \nLIMIT 3;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show me the id, first and last names of top 3 students who have enrolled for the most times in any program. \n SELECT"
            },
            {
                "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Show me just the top 1.",
                "result": "Students.student_id, Students.first_name, Students.last_name\nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nGROUP BY Students.student_id \nORDER BY COUNT(Student_Enrolment.student_id) DESC \nLIMIT 1;",
                "prompt": "### Show me just the top 1. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT semester_description FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
                "question": "Give me the description of a semester with no enrolled students.",
                "result": "Semesters.semester_name, Semesters.semester_description, Semesters.other_details \n FROM Semesters \n LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n WHERE Student_Enrolment.student_enrolment_id IS NULL;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Give me the description of a semester with no enrolled students. \n SELECT"
            },
            {
                "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
                "question": "What's the name of that semester?",
                "result": "Semesters.semester_name \n FROM Semesters \n LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n WHERE Student_Enrolment.student_enrolment_id IS NULL;",
                "prompt": "### What's the name of that semester? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) ASC LIMIT 1",
                "question": "What's the name of the course with the least number of enrollments?",
                "result": "Courses.course_name\nFROM Courses\nJOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id\nGROUP BY Courses.course_id\nORDER BY COUNT(Student_Enrolment_Courses.student_course_id)\nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What's the name of the course with the least number of enrollments? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
                "question": "How many enrollments does the course with most enrollments have?",
                "result": "COUNT(Student_Enrolment.student_enrolment_id) AS max_enrollments\nFROM Student_Enrolment\nJOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nJOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id\nGROUP BY Courses.course_id\nORDER BY max_enrollments DESC\nLIMIT 1;",
                "prompt": "### How many enrollments does the course with most enrollments have? \n SELECT"
            },
            {
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
                "question": "What's the name of that course?",
                "result": "Courses.course_name\nFROM Student_Enrolment\nJOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nJOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id\nGROUP BY Courses.course_id\nORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC\nLIMIT 1;",
                "prompt": "### What's the name of that course? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina'",
                "question": "How many students currently live in North Carolina?",
                "result": "COUNT(*) \nFROM Students \nINNER JOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Addresses.state_province_county = 'North Carolina'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many students currently live in North Carolina? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
                "question": "How many of those students have not registered in any degree program?",
                "result": "COUNT(*) \nFROM Students \nLEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nWHERE Student_Enrolment.student_enrolment_id IS NULL",
                "prompt": "### How many of those students have not registered in any degree program? \n SELECT"
            },
            {
                "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
                "question": "What are their last names?",
                "result": "last_name \nFROM Students \nLEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nWHERE Student_Enrolment.student_enrolment_id IS NULL",
                "prompt": "### What are their last names? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  = 2",
                "question": "Show me date and id of transcripts with exactly 2 course results.",
                "result": "Transcripts.transcript_id, Transcripts.transcript_date\nFROM Transcripts\nJOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id\nGROUP BY Transcripts.transcript_id\nHAVING COUNT(DISTINCT Transcript_Contents.student_course_id) = 2;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show me date and id of transcripts with exactly 2 course results. \n SELECT"
            },
            {
                "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
                "question": "How about transcripts with at least 2 course results?",
                "result": "Transcripts.transcript_id, Transcripts.transcript_date\nFROM Transcripts\nJOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id\nGROUP BY Transcripts.transcript_id\nHAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2;",
                "prompt": "### How about transcripts with at least 2 course results? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT current_address_id FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
                "question": "What is the address of the student with first name Timothy and last name Ward?",
                "result": "Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Students.first_name = 'Timothy' AND Students.last_name = 'Ward';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the address of the student with first name Timothy and last name Ward? \n SELECT"
            },
            {
                "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
                "question": "What's his phone number?",
                "result": "Students.cell_mobile_number\nFROM Students\nWHERE Students.first_name = 'Timothy' AND Students.last_name = 'Ward';",
                "prompt": "### What's his phone number? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered DESC LIMIT 1",
                "question": "Who was the last student to register? Show me the first, middle, and last names of that student.",
                "result": "Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nWHERE date_first_registered = (\n    SELECT MAX(date_first_registered) \n    FROM Students\n)",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who was the last student to register? Show me the first, middle, and last names of that student. \n SELECT"
            },
            {
                "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
                "question": "Who was the first to register?",
                "result": "Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nWHERE date_first_registered = (\n    SELECT MIN(date_first_registered) \n    FROM Students\n)",
                "prompt": "### Who was the first to register? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left DESC LIMIT 1",
                "question": "Who is the least recent graduate of the school? List the first, middle, and last names.",
                "result": "Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nINNER JOIN Student_Enrolment\nON Students.student_id = Student_Enrolment.student_id\nINNER JOIN Degree_Programs\nON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nORDER BY Students.date_left ASC\nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is the least recent graduate of the school? List the first, middle, and last names. \n SELECT"
            },
            {
                "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
                "question": "Who is the earliest graduate of the school?",
                "result": "Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nINNER JOIN Student_Enrolment\nON Students.student_id = Student_Enrolment.student_id\nINNER JOIN Degree_Programs\nON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nORDER BY Students.date_left DESC\nLIMIT 1;",
                "prompt": "### Who is the earliest graduate of the school? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Give me the id of the address that holds the most number of students?",
                "result": "current_address_id as address_id, COUNT(*) as num_students \n FROM Students\n GROUP BY current_address_id\n ORDER BY num_students DESC\n LIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Give me the id of the address that holds the most number of students? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
                "question": "How many students live there?",
                "result": "COUNT(*) \n FROM Students\n WHERE current_address_id = (SELECT current_address_id as address_id\n                             FROM Students\n                             GROUP BY current_address_id\n                             ORDER BY COUNT(*) DESC\n                             LIMIT 1);",
                "prompt": "### How many students live there? \n SELECT"
            },
            {
                "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Give me all the lines as well as the id of that address.",
                "result": "address_id, line_1, line_2, line_3 \n FROM Addresses \n WHERE address_id = (SELECT current_address_id as address_id\n                     FROM Students\n                     GROUP BY current_address_id\n                     ORDER BY COUNT(*) DESC\n                     LIMIT 1);",
                "prompt": "### Give me all the lines as well as the id of that address. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
                "question": "Give me details of the first transcript released.",
                "result": "*\nFROM Transcripts\nORDER BY transcript_date ASC\nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Give me details of the first transcript released. \n SELECT"
            },
            {
                "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
                "question": "Tell me when it was released as well, along with its details.",
                "result": "transcript_date, *\nFROM Transcripts\nORDER BY transcript_date ASC\nLIMIT 1;",
                "prompt": "### Tell me when it was released as well, along with its details. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
                "question": "What is the oldest transcript release date?",
                "result": "MIN(transcript_date) FROM Transcripts",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the oldest transcript release date? \n SELECT"
            },
            {
                "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
                "question": "How about the latest?",
                "result": "MAX(transcript_date) FROM Transcripts",
                "prompt": "### How about the latest? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) ASC LIMIT 1",
                "question": "How many times, at minimum, can a course enrollment result show in different transcript? Show me the course enrollment id.",
                "result": "Student_Enrolment_Courses.student_course_id, COUNT(*) AS num_of_transcripts\n FROM Student_Enrolment_Courses\n JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\n GROUP BY Student_Enrolment_Courses.student_course_id\n HAVING COUNT(*) >= 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many times, at minimum, can a course enrollment result show in different transcript? Show me the course enrollment id. \n SELECT"
            },
            {
                "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
                "question": "How many times at most?",
                "result": "Student_Enrolment_Courses.student_course_id, COUNT(*) AS num_of_transcripts\n FROM Student_Enrolment_Courses\n JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\n GROUP BY Student_Enrolment_Courses.student_course_id\n HAVING COUNT(*) >= (SELECT MAX(transcripts_count) FROM (SELECT COUNT(*) AS transcripts_count FROM Transcript_Contents GROUP BY student_course_id));",
                "prompt": "### How many times at most? \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
                "question": "Show other details of the transcript with least number of results.",
                "result": "Transcripts.other_details \nFROM \nTranscripts \nLEFT JOIN Transcript_Contents \nON Transcripts.transcript_id = Transcript_Contents.transcript_id \nGROUP BY Transcripts.transcript_id \nORDER BY COUNT(Transcript_Contents.student_course_id) ASC \nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show other details of the transcript with least number of results. \n SELECT"
            },
            {
                "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
                "question": "Show me the date and id of that transcript.",
                "result": "Transcripts.transcript_id, Transcripts.transcript_date \nFROM \nTranscripts \nLEFT JOIN Transcript_Contents \nON Transcripts.transcript_id = Transcript_Contents.transcript_id \nGROUP BY Transcripts.transcript_id \nORDER BY COUNT(Transcript_Contents.student_course_id) ASC \nLIMIT 1;",
                "prompt": "### Show me the date and id of that transcript. \n SELECT"
            }
        ]
    },
    {
        "database_id": "student_transcripts_tracking",
        "interaction": [
            {
                "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master'",
                "question": "Find a semester when there was a Master student enrolled.",
                "result": "Semesters.semester_name \nFROM Semesters \nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name = 'Master';",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find a semester when there was a Master student enrolled. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
                "question": "How about a semester when there was a Bachelor student enrolled?",
                "result": "Semesters.semester_name \nFROM Semesters \nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name = 'Bachelor';",
                "prompt": "### How about a semester when there was a Bachelor student enrolled? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
                "question": "Find a semester that both types of students were enrolled in.",
                "result": "Semesters.semester_name \nFROM Semesters \nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') \nGROUP BY Semesters.semester_name \nHAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;",
                "prompt": "### Find a semester that both types of students were enrolled in. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Owners",
                "question": "List all the information about the owners.",
                "result": "* FROM Owners;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List all the information about the owners. \n SELECT"
            },
            {
                "query": "SELECT * FROM Professionals",
                "question": "What about the Professionals?",
                "result": "* FROM Professionals;",
                "prompt": "### What about the Professionals? \n SELECT"
            },
            {
                "query": "SELECT state FROM Professionals",
                "question": "Now show the states of them.",
                "result": "state FROM Professionals;",
                "prompt": "### Now show the states of them. \n SELECT"
            },
            {
                "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
                "question": "Which of them have both owners and professionals living there?",
                "result": "state \nFROM Owners \nWHERE state IN (SELECT state FROM Professionals);",
                "prompt": "### Which of them have both owners and professionals living there? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT age FROM Dogs",
                "question": "Show all the dog ages.",
                "result": "age FROM Dogs;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show all the dog ages. \n SELECT"
            },
            {
                "query": "SELECT max(age), min(age) FROM Dogs",
                "question": "What is the maximum and minimum value?",
                "result": "MAX(age), MIN(age) FROM Dogs;",
                "prompt": "### What is the maximum and minimum value? \n SELECT"
            },
            {
                "query": "SELECT * FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "question": "Which of the dogs have gone through treatments?",
                "result": "DISTINCT dog_id FROM Treatments;",
                "prompt": "### Which of the dogs have gone through treatments? \n SELECT"
            },
            {
                "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "question": "What about the average age of them?",
                "result": "AVG(age) FROM Dogs WHERE dog_id IN (SELECT DISTINCT dog_id FROM Treatments);",
                "prompt": "### What about the average age of them? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Professionals WHERE role_code = 'Employee'",
                "question": "List all the professionals who are Employees.",
                "result": "professional_id, first_name, last_name\nFROM Professionals\nWHERE role_code = 'Employee'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List all the professionals who are Employees. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Professionals WHERE state  =  'Connecticut'",
                "question": "How many of them live in Connecticut?",
                "result": "COUNT(*)\nFROM Professionals\nWHERE role_code = 'Employee' AND state = 'Connecticut'",
                "prompt": "### How many of them live in Connecticut? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Professionals WHERE state  =  'Indiana'",
                "question": "What about in Indiana?",
                "result": "COUNT(*)\nFROM Professionals\nWHERE role_code = 'Employee' AND state = 'Indiana'",
                "prompt": "### What about in Indiana? \n SELECT"
            },
            {
                "query": "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  =  1",
                "question": "Among all the professionals, which have done treatment only 1 treatments?",
                "result": "professional_id, COUNT(*) as num_treatments\nFROM Treatments\nGROUP BY professional_id\nHAVING num_treatments = 1",
                "prompt": "### Among all the professionals, which have done treatment only 1 treatments? \n SELECT"
            },
            {
                "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
                "question": "List the id, last name and cell phone of the professionals who live in the state of Indiana or have done treatment on more than 2 treatments?",
                "result": "professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana'\n   OR professional_id IN (\n       SELECT professional_id\n       FROM Treatments\n       GROUP BY professional_id\n       HAVING COUNT(*) > 2\n   )",
                "prompt": "### List the id, last name and cell phone of the professionals who live in the state of Indiana or have done treatment on more than 2 treatments? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id",
                "question": "Show the dog name and total cost of each dog.",
                "result": "Dogs.name, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Dogs \n INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n GROUP BY Dogs.dog_id;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the dog name and total cost of each dog. \n SELECT"
            },
            {
                "query": "SELECT name FROM Treatments  AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 500",
                "question": "Which of them cost over 500?",
                "result": "Dogs.name, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Dogs \n INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n GROUP BY Dogs.dog_id\n HAVING total_cost > 500;",
                "prompt": "### Which of them cost over 500? \n SELECT"
            },
            {
                "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
                "question": "What about more than 1000?",
                "result": "Dogs.name, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Dogs \n INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n GROUP BY Dogs.dog_id\n HAVING total_cost > 1000;",
                "prompt": "### What about more than 1000? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners",
                "question": "List all the names of both Professionals and Owners.",
                "result": "first_name || ' ' || last_name AS full_name \n FROM Owners \n UNION \n SELECT \n first_name || ' ' || last_name AS full_name \n FROM Professionals",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List all the names of both Professionals and Owners. \n SELECT"
            },
            {
                "query": "SELECT name FROM Dogs",
                "question": "What about the dog names?",
                "result": "name \n FROM Dogs",
                "prompt": "### What about the dog names? \n SELECT"
            },
            {
                "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
                "question": "Which human names are not used as dog names.",
                "result": "DISTINCT Owners.first_name, Owners.last_name \n FROM Owners \n LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n WHERE Dogs.name IS NULL",
                "prompt": "### Which human names are not used as dog names. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT T1.first_name, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
                "question": "Show the professional first names and the corresponding treatment type codes for the treatment.",
                "result": "Professionals.first_name, Treatments.treatment_type_code \n FROM Professionals \n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the professional first names and the corresponding treatment type codes for the treatment. \n SELECT"
            },
            {
                "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.email_address, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
                "question": "What about each professional's id, role, email and the treatment type code?",
                "result": "Professionals.professional_id, Professionals.role_code, Professionals.email_address, Treatments.treatment_type_code \n FROM Professionals \n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
                "prompt": "### What about each professional's id, role, email and the treatment type code? \n SELECT"
            },
            {
                "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
                "question": "Which professional did not provide any treatment? Keep the id, role and email.",
                "result": "Professionals.professional_id, Professionals.role_code, Professionals.email_address \n FROM Professionals \n LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \n WHERE Treatments.treatment_id IS NULL",
                "prompt": "### Which professional did not provide any treatment? Keep the id, role and email. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT T1.owner_id ,count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id",
                "question": "Show the number of dogs for each owner, keep the owner id.",
                "result": "Owners.owner_id, COUNT(Dogs.dog_id) AS dog_count \n FROM Owners \n LEFT JOIN Dogs \n ON Owners.owner_id = Dogs.owner_id \n GROUP BY Owners.owner_id",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the number of dogs for each owner, keep the owner id. \n SELECT"
            },
            {
                "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name, count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id Having count(*) = 2",
                "question": "Which one has 2 dogs?",
                "result": "Owners.owner_id \nFROM Owners \nLEFT JOIN Dogs \nON Owners.owner_id = Dogs.owner_id \nGROUP BY Owners.owner_id \nHAVING COUNT(Dogs.dog_id) = 2",
                "prompt": "### Which one has 2 dogs? \n SELECT"
            },
            {
                "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
                "question": "What about the one with the most dogs?",
                "result": "Owners.owner_id \nFROM Owners \nLEFT JOIN Dogs \nON Owners.owner_id = Dogs.owner_id \nGROUP BY Owners.owner_id \nORDER BY COUNT(Dogs.dog_id) DESC \nLIMIT 1",
                "prompt": "### What about the one with the most dogs? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT T1.professional_id , count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id",
                "question": "How many treatment does each professional finished?",
                "result": "Professionals.professional_id, COUNT(Treatments.treatment_id) AS num_treatments\nFROM Professionals\nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many treatment does each professional finished? \n SELECT"
            },
            {
                "query": "SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id Having count(*) = 1",
                "question": "Show the first name of the professionals who did only 1 treatment.",
                "result": "Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) = 1;",
                "prompt": "### Show the first name of the professionals who did only 1 treatment. \n SELECT"
            },
            {
                "query": "SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id Having count(*) >= 2",
                "question": "What about at least two treatments?",
                "result": "Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) >= 2;",
                "prompt": "### What about at least two treatments? \n SELECT"
            },
            {
                "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "question": "Show the id, role, and first name of each from the above.",
                "result": "Professionals.professional_id, Professionals.role_code, Professionals.first_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nGROUP BY Professionals.professional_id\nHAVING COUNT(Treatments.treatment_id) >= 2;",
                "prompt": "### Show the id, role, and first name of each from the above. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code",
                "question": "How many dogs for each breed code?",
                "result": "B.breed_code, COUNT(D.dog_id) AS dog_count \n FROM Breeds B \n JOIN Dogs D ON B.breed_code = D.breed_code \n GROUP BY B.breed_code;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many dogs for each breed code? \n SELECT"
            },
            {
                "query": "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 2",
                "question": "Which breed codes are the most popular two?",
                "result": "B.breed_code \n FROM Breeds B \n JOIN Dogs D ON B.breed_code = D.breed_code \n GROUP BY B.breed_code \n ORDER BY COUNT(D.dog_id) DESC \n LIMIT 2;",
                "prompt": "### Which breed codes are the most popular two? \n SELECT"
            },
            {
                "query": "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 1",
                "question": "What about the most common 1?",
                "result": "B.breed_code \n FROM Breeds B \n JOIN Dogs D ON B.breed_code = D.breed_code \n GROUP BY B.breed_code \n ORDER BY COUNT(D.dog_id) DESC \n LIMIT 1;",
                "prompt": "### What about the most common 1? \n SELECT"
            },
            {
                "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
                "question": "What name is the breed?",
                "result": "B.breed_name \n FROM Breeds B \n JOIN Dogs D ON B.breed_code = D.breed_code \n GROUP BY B.breed_code \n ORDER BY COUNT(D.dog_id) DESC \n LIMIT 1;",
                "prompt": "### What name is the breed? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id",
                "question": "Show the dog name and total cost of each dog.",
                "result": "Dogs.name, SUM(Treatments.cost_of_treatment) AS total_cost \n FROM Dogs \n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n GROUP BY Dogs.dog_id;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the dog name and total cost of each dog. \n SELECT"
            },
            {
                "query": "SELECT T1.owner_id, T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id",
                "question": "What are the owner names and the cost from their dogs.",
                "result": "Owners.first_name, Owners.last_name, SUM(Treatments.cost_of_treatment) AS total_cost \n FROM Owners \n JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n GROUP BY Owners.owner_id;",
                "prompt": "### What are the owner names and the cost from their dogs. \n SELECT"
            },
            {
                "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
                "question": "Who has paid for the most treatments on the dogs? Keep owner IDs and last names.",
                "result": "Owners.owner_id, Owners.last_name, SUM(Treatments.cost_of_treatment) AS total_cost \n FROM Owners \n JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n GROUP BY Owners.owner_id \n ORDER BY total_cost DESC \n LIMIT 1;",
                "prompt": "### Who has paid for the most treatments on the dogs? Keep owner IDs and last names. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Treatment_Types",
                "question": "List the treatment type code and the description.",
                "result": "treatment_type_code, treatment_type_description \n FROM Treatment_Types",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the treatment type code and the description. \n SELECT"
            },
            {
                "query": "SELECT treatment_type_code, sum(cost_of_treatment) FROM Treatments group by treatment_type_code order by sum(cost_of_treatment) desc",
                "question": "For each treatment type, calculate the sum of costs, and order them in descending order.",
                "result": "treatment_type_code, SUM(cost_of_treatment) AS total_cost \n FROM Treatments \n GROUP BY treatment_type_code \n ORDER BY total_cost DESC",
                "prompt": "### For each treatment type, calculate the sum of costs, and order them in descending order. \n SELECT"
            },
            {
                "query": "SELECT T2.treatment_type_code, T1.treatment_type_description,  sum(cost_of_treatment) FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
                "question": "Show the treatment type description also.",
                "result": "Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description, SUM(Treatments.cost_of_treatment) AS total_cost \n FROM Treatments \n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code \n GROUP BY Treatments.treatment_type_code \n ORDER BY total_cost DESC",
                "prompt": "### Show the treatment type description also. \n SELECT"
            },
            {
                "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
                "question": "So what is the description of the treatment type that costs the least money in total?",
                "result": "Treatment_Types.treatment_type_description \n FROM Treatments \n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code \n GROUP BY Treatments.treatment_type_code \n ORDER BY SUM(Treatments.cost_of_treatment) ASC \n LIMIT 1",
                "prompt": "### So what is the description of the treatment type that costs the least money in total? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id",
                "question": "Show the dog name and total cost of each dog.",
                "result": "Dogs.name, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Dogs\n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n GROUP BY Dogs.dog_id;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the dog name and total cost of each dog. \n SELECT"
            },
            {
                "query": "SELECT count(name) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 700",
                "question": "How many of them cost over 700?",
                "result": "COUNT(*) AS num_dogs_over_700_cost\n FROM (\n SELECT Dogs.name, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Dogs\n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n GROUP BY Dogs.dog_id\n HAVING total_cost > 700\n ) AS dogs_over_700_cost;",
                "prompt": "### How many of them cost over 700? \n SELECT"
            },
            {
                "query": "SELECT T1.owner_id ,T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id Having sum(T3.cost_of_treatment) > 400",
                "question": "Which owner paid the cost larger than 400, show the owner id and the zip code?",
                "result": "Owners.owner_id, Owners.zip_code\n FROM Owners\n JOIN Dogs ON Owners.owner_id = Dogs.owner_id\n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n WHERE Treatments.cost_of_treatment > 400\n GROUP BY Owners.owner_id\n HAVING SUM(Treatments.cost_of_treatment) > 400;",
                "prompt": "### Which owner paid the cost larger than 400, show the owner id and the zip code? \n SELECT"
            },
            {
                "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
                "question": "What about the owner who spent the largest cost?",
                "result": "Owners.owner_id, SUM(Treatments.cost_of_treatment) AS total_cost\n FROM Owners\n JOIN Dogs ON Owners.owner_id = Dogs.owner_id\n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n GROUP BY Owners.owner_id\n ORDER BY total_cost DESC\n LIMIT 1;",
                "prompt": "### What about the owner who spent the largest cost? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT T1.first_name, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id",
                "question": "List the professional first names and their types of treatments.",
                "result": "Professionals.first_name, Treatment_Types.treatment_type_description\n FROM Professionals \n INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\n INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the professional first names and their types of treatments. \n SELECT"
            },
            {
                "query": "SELECT T1.first_name, T2.treatment_type_code, count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id",
                "question": "Add the counts of them also.",
                "result": "Professionals.first_name, Treatment_Types.treatment_type_description, COUNT(*) AS count_treatments\n FROM Professionals \n INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\n INNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\n GROUP BY Professionals.first_name, Treatment_Types.treatment_type_description;",
                "prompt": "### Add the counts of them also. \n SELECT"
            },
            {
                "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  = 1",
                "question": "Among the results, who did only 1 type of treatment? List the professional ids and cell phone numbers of them.",
                "result": "Professionals.professional_id, Professionals.cell_number\n FROM Professionals\n INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\n GROUP BY Professionals.professional_id\n HAVING COUNT(DISTINCT Treatments.treatment_type_code) = 1;",
                "prompt": "### Among the results, who did only 1 type of treatment? List the professional ids and cell phone numbers of them. \n SELECT"
            },
            {
                "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "question": "What about at least two types of treatments?",
                "result": "Professionals.professional_id, Professionals.cell_number\n FROM Professionals\n INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\n GROUP BY Professionals.professional_id\n HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;",
                "prompt": "### What about at least two types of treatments? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT min(cost_of_treatment), max(cost_of_treatment), avg(cost_of_treatment) FROM Treatments",
                "question": "What is the minimum, maximum and average value of the treatment costs?",
                "result": "MIN(cost_of_treatment), MAX(cost_of_treatment), AVG(cost_of_treatment) FROM Treatments;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the minimum, maximum and average value of the treatment costs? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT min(cost_of_treatment) FROM Treatments )",
                "question": "Which professionals who did the minimum value of the treatment cost? Provide the first name and last name.",
                "result": "Professionals.first_name, Professionals.last_name \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE cost_of_treatment = (SELECT MIN(cost_of_treatment) FROM Treatments);",
                "prompt": "### Which professionals who did the minimum value of the treatment cost? Provide the first name and last name. \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT max(cost_of_treatment) FROM Treatments )",
                "question": "What about the maximum cost?",
                "result": "Professionals.first_name, Professionals.last_name \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE cost_of_treatment = (SELECT MAX(cost_of_treatment) FROM Treatments);",
                "prompt": "### What about the maximum cost? \n SELECT"
            },
            {
                "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
                "question": "How about below the average of the cost?",
                "result": "Professionals.first_name, Professionals.last_name \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);",
                "prompt": "### How about below the average of the cost? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code",
                "question": "How many dogs for each breed code?",
                "result": "breed_code, COUNT(dog_id) \n FROM Dogs \n GROUP BY breed_code",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many dogs for each breed code? \n SELECT"
            },
            {
                "query": "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) DESC LIMIT 1",
                "question": "Which one is the most popular one?",
                "result": "breed_code, COUNT(dog_id) \n FROM Dogs \n GROUP BY breed_code \n ORDER BY COUNT(dog_id) DESC \n LIMIT 1",
                "prompt": "### Which one is the most popular one? \n SELECT"
            },
            {
                "query": "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) ASC LIMIT 1",
                "question": "What about the least popular one?",
                "result": "breed_code, COUNT(dog_id) \n FROM Dogs \n GROUP BY breed_code \n ORDER BY COUNT(dog_id) ASC \n LIMIT 1",
                "prompt": "### What about the least popular one? \n SELECT"
            },
            {
                "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "question": "So which dogs are having the breed code? And the treatment dates?",
                "result": "Dogs.dog_id, Dogs.breed_code, Treatments.date_of_treatment \n FROM Dogs \n JOIN Treatments \n ON Dogs.dog_id = Treatments.dog_id",
                "prompt": "### So which dogs are having the breed code? And the treatment dates? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.city  =  'Lake Tia'",
                "question": "Show the name of dogs whose owners are from the city 'Lake Tia'.",
                "result": "Dogs.name \nFROM Dogs \nINNER JOIN Owners \nON Dogs.owner_id = Owners.owner_id \nWHERE Owners.city = 'Lake Tia'",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the name of dogs whose owners are from the city 'Lake Tia'. \n SELECT"
            },
            {
                "query": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.city  =  'Lake Tia'",
                "question": "Add the owner's first names also.",
                "result": "Dogs.name, Owners.first_name \nFROM Dogs \nINNER JOIN Owners \nON Dogs.owner_id = Owners.owner_id \nWHERE Owners.city = 'Lake Tia'",
                "prompt": "### Add the owner's first names also. \n SELECT"
            },
            {
                "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
                "question": "What about when the owner is from the state of 'Virginia'?",
                "result": "Dogs.name, Owners.first_name \nFROM Dogs \nINNER JOIN Owners \nON Dogs.owner_id = Owners.owner_id \nWHERE Owners.state = 'Virginia'",
                "prompt": "### What about when the owner is from the state of 'Virginia'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Dogs order by age asc limit 1",
                "question": "Which one is the oldest dog? List the information of it.",
                "result": "Dogs.dog_id, Dogs.owner_id, Dogs.abandoned_yn, Breeds.breed_name, Dogs.name, Dogs.age, Dogs.date_of_birth, Dogs.gender, Dogs.weight, Dogs.date_arrived, Dogs.date_adopted, Dogs.date_departed \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nWHERE Dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs) \nLIMIT 1;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which one is the oldest dog? List the information of it. \n SELECT"
            },
            {
                "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
                "question": "What are the last names of the oldest dogs?",
                "result": "Owners.last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs) ;",
                "prompt": "### What are the last names of the oldest dogs? \n SELECT"
            },
            {
                "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT min(age) FROM Dogs )",
                "question": "What about the owner last name of the youngest dog?",
                "result": "Owners.last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs) ;",
                "prompt": "### What about the owner last name of the youngest dog? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT city, state FROM professionals",
                "question": "Show the cities and states of the professionals.",
                "result": "city, state \n FROM Professionals",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the cities and states of the professionals. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM professionals WHERE state = 'Hawaii'",
                "question": "How many of them are from 'Hawaii'?",
                "result": "COUNT(*) \n FROM Professionals \n WHERE state = 'Hawaii'",
                "prompt": "### How many of them are from 'Hawaii'? \n SELECT"
            },
            {
                "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
                "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
                "result": "email_address \n FROM Professionals \n WHERE state IN ('Hawaii', 'Wisconsin')",
                "prompt": "### List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT state FROM professionals",
                "question": "Show the states of the professionals.",
                "result": "state \nFROM Professionals",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the states of the professionals. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM professionals WHERE state = 'Wisconsin'",
                "question": "How many of them are from 'Wisconsin'?",
                "result": "COUNT(*) \nFROM Professionals \nWHERE state = 'Wisconsin'",
                "prompt": "### How many of them are from 'Wisconsin'? \n SELECT"
            },
            {
                "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE state = 'Wisconsin'",
                "question": "List the role code ,  street ,  city ,  state from the above results.",
                "result": "role_code, street, city, state \nFROM Professionals \nWHERE state = 'Wisconsin'",
                "prompt": "### List the role code ,  street ,  city ,  state from the above results. \n SELECT"
            },
            {
                "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
                "question": "What about those professionals who live in a city containing the substring 'West'?",
                "result": "role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%'",
                "prompt": "### What about those professionals who live in a city containing the substring 'West'? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT state FROM Owners",
                "question": "Show the states of the owners.",
                "result": "state FROM Owners",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the states of the owners. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Owners WHERE state = 'Vermont'",
                "question": "How many of them are from 'Vermont'?",
                "result": "COUNT(*) FROM Owners WHERE state = 'Vermont'",
                "prompt": "### How many of them are from 'Vermont'? \n SELECT"
            },
            {
                "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
                "question": "List the first name, last name and email of the owners who lives in the states that has the substring 'North'.",
                "result": "first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
                "prompt": "### List the first name, last name and email of the owners who lives in the states that has the substring 'North'. \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT age FROM Dogs ORDER BY age",
                "question": "Order the dog ages in descending order.",
                "result": "age FROM Dogs ORDER BY age DESC;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Order the dog ages in descending order. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Dogs WHERE age  < 4",
                "question": "How many of them are below 4?",
                "result": "COUNT(*) FROM Dogs WHERE age < 4;",
                "prompt": "### How many of them are below 4? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
                "question": "What about the ones that are below the average?",
                "result": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
                "prompt": "### What about the ones that are below the average? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Treatments",
                "question": "Show the treatment details.",
                "result": "Treatments.treatment_id, Dogs.name, Owners.first_name, Owners.last_name, Treatment_Types.treatment_type_description, Professionals.first_name, Professionals.last_name, Treatments.date_of_treatment, Treatments.cost_of_treatment\nFROM Treatments\nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id\nJOIN Owners ON Dogs.owner_id = Owners.owner_id\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show the treatment details. \n SELECT"
            },
            {
                "query": "SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment ASC",
                "question": "Order the cost in ascending order.",
                "result": "Treatments.treatment_id, Dogs.name, Owners.first_name, Owners.last_name, Treatment_Types.treatment_type_description, Professionals.first_name, Professionals.last_name, Treatments.date_of_treatment, Treatments.cost_of_treatment\nFROM Treatments\nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id\nJOIN Owners ON Dogs.owner_id = Owners.owner_id\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id\nORDER BY Treatments.cost_of_treatment ASC;",
                "prompt": "### Order the cost in ascending order. \n SELECT"
            },
            {
                "query": "SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment DESC",
                "question": "What about in descending order?",
                "result": "Treatments.treatment_id, Dogs.name, Owners.first_name, Owners.last_name, Treatment_Types.treatment_type_description, Professionals.first_name, Professionals.last_name, Treatments.date_of_treatment, Treatments.cost_of_treatment\nFROM Treatments\nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id\nJOIN Owners ON Dogs.owner_id = Owners.owner_id\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id\nORDER BY Treatments.cost_of_treatment DESC;",
                "prompt": "### What about in descending order? \n SELECT"
            },
            {
                "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
                "question": "Which one is the most recent cost?",
                "result": "Treatments.treatment_id, Dogs.name, Owners.first_name, Owners.last_name, Treatment_Types.treatment_type_description, Professionals.first_name, Professionals.last_name, Treatments.date_of_treatment, Treatments.cost_of_treatment\nFROM Treatments\nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id\nJOIN Owners ON Dogs.owner_id = Owners.owner_id\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id\nORDER BY Treatments.date_of_treatment DESC LIMIT 1;",
                "prompt": "### Which one is the most recent cost? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Owners",
                "question": "Show all the owner information.",
                "result": "* FROM Owners;",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show all the owner information. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Dogs",
                "question": "What about the dogs?",
                "result": "* FROM Dogs;",
                "prompt": "### What about the dogs? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "question": "Among those, how many of them have been sent to receive treatment?",
                "result": "COUNT(DISTINCT dog_id) FROM Treatments;",
                "prompt": "### Among those, how many of them have been sent to receive treatment? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
                "question": "What about those who did not?",
                "result": "COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments);",
                "prompt": "### What about those who did not? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT * FROM Owners",
                "question": "Show all the owner information.",
                "result": "* FROM Owners",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show all the owner information. \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Owners WHERE state = 'Arizona'",
                "question": "How many of them come from the state of 'Arizona'?",
                "result": "COUNT(*) FROM Owners WHERE state = 'Arizona'",
                "prompt": "### How many of them come from the state of 'Arizona'? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
                "question": "What about those who do not have any dogs temporarily?",
                "result": "COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL",
                "prompt": "### What about those who do not have any dogs temporarily? \n SELECT"
            }
        ]
    },
    {
        "database_id": "dog_kennels",
        "interaction": [
            {
                "query": "SELECT count(*) FROM Professionals",
                "question": "How many professionals are there?",
                "result": "COUNT(*) FROM Professionals",
                "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many professionals are there? \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Professionals WHERE city = 'West Heidi'",
                "question": "How many of them come from 'West Heidi?'",
                "result": "COUNT(*) FROM Professionals WHERE city = 'West Heidi'",
                "prompt": "### How many of them come from 'West Heidi?' \n SELECT"
            },
            {
                "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
                "question": "What about those who did not operate any treatment on dogs?",
                "result": "COUNT(*) FROM Professionals p WHERE NOT EXISTS (SELECT 1 FROM Treatments t WHERE t.professional_id = p.professional_id)",
                "prompt": "### What about those who did not operate any treatment on dogs? \n SELECT"
            }
        ]
    }
]
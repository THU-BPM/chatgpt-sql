[
    {
        "db_id": "new_concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "result": "COUNT(*) FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many singers do we have? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "result": "COUNT(*) FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC",
        "question": "Show name, country for all singers ordered by age from the oldest to the youngest.",
        "result": "Name, Country FROM singer ORDER BY Birthday ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show name, country for all singers ordered by age from the oldest to the youngest. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT name ,  country  FROM singer ORDER BY birthday ASC",
        "question": "What are the names, countries for every singer in descending order of age?",
        "result": "Name, Country FROM singer ORDER BY Birthday DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names, countries for every singer in descending order of age? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT avg(Singer_ID) ,  min(Singer_ID) ,  max(Singer_ID) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum id of all French singers?",
        "result": "AVG(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) FROM singer WHERE Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum id of all French singers? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT avg(Singer_ID) ,  min(Singer_ID) ,  max(Singer_ID) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum id for French singers?",
        "result": "AVG(Singer_ID), MIN(Singer_ID), MAX(Singer_ID) \nFROM singer \nWHERE Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum id for French singers? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "result": "s.Name, s.Song_release_year \nFROM singer AS s\nWHERE s.Birthday = (SELECT MIN(Birthday) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and the release year of the song by the youngest singer. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY birthday desc LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "result": "Name, Song_release_year\nFROM singer\nWHERE Birthday = (SELECT MIN(Birthday) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names and release years for all the songs of the youngest singer? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE birthday  like '2001%'",
        "question": "What are all distinct countries where singers born in 2001 are from?",
        "result": "DISTINCT Country FROM singer WHERE strftime('%Y', Birthday) = '2001'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all distinct countries where singers born in 2001 are from? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE birthday  like  '2001%'",
        "question": "What are  the different countries with singers born in 2001?",
        "result": "Country FROM singer WHERE strftime('%Y', Birthday) = '2001'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are  the different countries with singers born in 2001? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "result": "singer.Country, COUNT(singer.Singer_ID) \nFROM singer \nGROUP BY singer.Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all countries and the number of singers in each country. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "result": "Country, COUNT(*) \n FROM singer \n GROUP BY Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many singers are from each country? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT song_name FROM singer WHERE birthday  <  (SELECT avg(birthday) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "result": "singer.Song_Name \nFROM singer \nWHERE singer.Birthday <= (SELECT AVG(singer.Birthday) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all song names by singers above the average age. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT song_name FROM singer WHERE birthday  <  (SELECT avg(birthday) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "result": "singer.Song_Name\nFROM singer\nWHERE singer.Birthday < (SELECT AVG(Birthday) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all the song names by singers who are older than average? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "result": "Location, Name FROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and the highest capacity of all stadiums?",
        "result": "AVG(Capacity), MAX(Capacity) FROM stadium;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and the highest capacity of all stadiums? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and highest capacities for all stations?",
        "result": "AVG(Capacity), MAX(Capacity) FROM stadium;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and highest capacities for all stations? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "result": "Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "result": "Name, Capacity\nFROM stadium\nWHERE Average = (\n    SELECT MAX(Average)\n    FROM stadium\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  >=  2014",
        "question": "How many concerts are there after or in year 2014?",
        "result": "COUNT(*) FROM concert WHERE Year >= 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many concerts are there after or in year 2014? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  >=  2014",
        "question": "How many concerts occurred after or in 2014?",
        "result": "COUNT(*) FROM concert WHERE Year >= 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many concerts occurred after or in 2014? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "result": "stadium.Name, COUNT(concert.concert_ID)\nFROM stadium\nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY stadium.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and the number of concerts in each stadium. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "result": "stadium.Name, COUNT(concert.concert_ID) \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nGROUP BY stadium.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### For each stadium, how many concerts play there? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year >= 2014 \nGROUP BY stadium.Name \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and capacity with most number of concerts in year 2014 or after. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and highest attendance of the stadium  with the most concerts after 2013?",
        "result": "stadium.Name, stadium.Highest\nFROM stadium\nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nWHERE concert.Year > 2013\nGROUP BY stadium.Name\nORDER BY COUNT(concert.concert_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and highest attendance of the stadium  with the most concerts after 2013? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1",
        "question": "Which concert is the oldest?",
        "result": "concert_Name FROM concert ORDER BY Year ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Which concert is the oldest? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT concert_Name FROM concert ORDER BY YEAR asc LIMIT 1",
        "question": "Return the oldest concert name?",
        "result": "concert_Name \nFROM concert \nORDER BY Year ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Return the oldest concert name? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT highest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the highest attendance without any concert.",
        "result": "MAX(Capacity) FROM stadium",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the highest attendance without any concert. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT lowest FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are lowest attendance of the stadiums without any concerts?",
        "result": "stadium.Lowest \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are lowest attendance of the stadiums without any concerts? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT country FROM singer WHERE birthday  like  '1981%' or birthday  like  '1991%'",
        "question": "Show countries where a singer born in 1981 or 1991 are from.",
        "result": "Country \nFROM singer \nWHERE (strftime('%Y', Birthday) = '1981' OR strftime('%Y', Birthday) = '1991')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show countries where a singer born in 1981 or 1991 are from. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT average FROM stadium EXCEPT SELECT T2.average FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show average attendance for all stadiums except for stadiums having a concert in year 2014.",
        "result": "AVG(Capacity) as avg_attendance \nFROM stadium \nWHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show average attendance for all stadiums except for stadiums having a concert in year 2014. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT lowest FROM stadium EXCEPT SELECT T2.lowest FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the lowest attendance of all stadiums that did not have a concert in 2014?",
        "result": "stadium.Lowest \nFROM \nstadium \nWHERE \nstadium.Stadium_ID NOT IN \n(SELECT concert.Stadium_ID \nFROM concert \nWHERE concert.Year = 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the lowest attendance of all stadiums that did not have a concert in 2014? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "result": "concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers \nFROM concert \nINNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert.concert_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and theme for all concerts and the number of singers in each concert. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "What are the names, themes, and number of singers for each and every concert?",
        "result": "concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)\nFROM concert\nINNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names, themes, and number of singers for each and every concert? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "result": "singer.Name, COUNT(singer_in_concert.concert_ID)\nFROM singer\nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Singer_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List singer names and number of concerts for each singer. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "result": "singer.Name, COUNT(singer_in_concert.concert_ID)\nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Singer_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers and number of concerts for each person? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  >=  2014",
        "question": "List all singer names in concerts after or in year 2014.",
        "result": "singer.Name \nFROM \nsinger \nJOIN \nsinger_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN \nconcert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE \nconcert.Year >= 2014",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts after or in year 2014. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  <=  2014",
        "question": "What are the names of the singers who performed in a concert before or in 2014?",
        "result": "singer.Name FROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year <= 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert before or in 2014? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "result": "singer.Name, singer.Country\nFROM singer\nWHERE Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having 'Hey' in its name? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "result": "singer.Name, singer.Country\nFROM singer\nWHERE singer.Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.lowest ,  T2.highest FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the lowest and highest attendance of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "result": "MIN(Lowest), MAX(Highest)\nFROM stadium\nWHERE Stadium_ID IN (\n  SELECT Stadium_ID\n  FROM concert\n  WHERE Year = 2014\n  INTERSECT\n  SELECT Stadium_ID\n  FROM concert\n  WHERE Year = 2015\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Find the lowest and highest attendance of the stadiums which some concerts happened in the years of both 2014 and 2015. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT T2.lowest ,  T2.highest FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the lowest and highest attendance of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "result": "MIN(Capacity) AS Lowest_Attendance, MAX(Capacity) AS Highest_Attendance\nFROM stadium\nWHERE Stadium_ID IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = 2014\n    INTERSECT\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = 2015\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the lowest and highest attendance of the stadiums that had concerts that occurred in both 2014 and 2015? \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "Find the number of concerts happened in the stadium with the highest capacity.",
        "result": "COUNT(concert_ID) FROM concert \nWHERE Stadium_ID IN \n(SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Find the number of concerts happened in the stadium with the highest capacity. \n SELECT"
    },
    {
        "db_id": "new_concert_singer",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity?",
        "result": "COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Birthday,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the number of concerts that occurred in the stadium with the largest capacity? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "result": "COUNT(*) FROM Pets WHERE weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the number of pets whose weight is heavier than 10. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "result": "COUNT(*) FROM Pets WHERE weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### How many pets have a greater weight than 10? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "result": "MIN(weight) \nFROM Pets \nWHERE PetType = 'dog' AND birthdate = (SELECT MIN(birthdate) FROM Pets WHERE PetType = 'dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the weight of the youngest dog. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "result": "MIN(weight) FROM Pets WHERE PetType='dog' AND birthdate=(SELECT MIN(birthdate) FROM Pets WHERE PetType='dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### How much does the youngest dog weigh? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "result": "PetType, MAX(weight) \nFROM Pets \nGROUP BY PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the maximum weight for each type of pet. List the maximum weight and pet type. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "result": "Pets.PetType, MAX(Pets.weight) \nFROM Pets \nGROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### List the maximum weight and type for each type of pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "result": "COUNT(*) \nFROM Has_Pet \nWHERE StuID IN (\n  SELECT StuID \n  FROM Student \n  WHERE Age > 20\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find number of pets owned by students who are older than 20. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "result": "COUNT(DISTINCT Has_Pet.PetID)\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Student.Age > 20;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### How many pets are owned by students that have an age greater than 20? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of puppy pets that are raised by female students (with sex F).",
        "result": "COUNT(*) \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nINNER JOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Pets.PetType = 'puppy' AND Student.Sex = 'F';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the number of puppy pets that are raised by female students (with sex F). \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many puppy pets are raised by female students?",
        "result": "COUNT(*) FROM Pets \nWHERE PetType = 'puppy' AND PetID IN \n(SELECT PetID FROM Has_Pet WHERE StuID IN \n(SELECT StuID FROM Student WHERE Sex = 'female')))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### How many puppy pets are raised by female students? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "result": "COUNT(DISTINCT PetType) AS num_distinct_pets \nFROM Pets;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the number of distinct type of pets. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "result": "COUNT(DISTINCT PetType) AS \"NumOfPetTypes\" FROM Pets",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### How many different types of pet are there? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have kitten or puppy pet.",
        "result": "Student.Fname \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType IN ('kitten', 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the first name of students who have kitten or puppy pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a kitten or puppy as a pet?",
        "result": "FName \nFROM \n  Student \n  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n  JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE \n  Pets.PetType IN ('kitten', 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What are the first names of every student who has a kitten or puppy as a pet? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "Find the name of students who have both Kitten and puppy pets.",
        "result": "Student.Fname, Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'Kitten' \nINTERSECT \nSELECT Student.Fname, Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'Puppy';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the name of students who have both Kitten and puppy pets. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both kitten and puppy as pets?",
        "result": "Fname \nFROM Student \nWHERE StuID IN \n(SELECT StuID FROM Has_Pet \n WHERE PetID IN \n (SELECT PetID FROM Pets WHERE PetType='kitten') \n AND PetID IN \n (SELECT PetID FROM Pets WHERE PetType='puppy')\n GROUP BY StuID \n HAVING COUNT(DISTINCT PetID) = 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What are the students' first names who have both kitten and puppy as pets? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a kitten pet.",
        "result": "Student.Major, Student.Age\nFROM Student\nWHERE Student.StuID NOT IN (\n  SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID\n  WHERE Pets.PetType = 'kitten'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the major and age of students who do not have a kitten pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a kitten as a pet, and also how old are they?",
        "result": "Student.Major, Student.Age \nFROM Student \nWHERE Student.StuID NOT IN \n    (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'Kitten')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What major is every student who does not own a kitten as a pet, and also how old are they? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a kitten pet.",
        "result": "Student.StuID \nFROM \n  Student \n  LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n  LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE \n  Pets.PetType != 'kitten' \n  OR Pets.PetType IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the id of students who do not have a kitten pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own kittens as pets?",
        "result": "Student.StuID \nFROM Student \nWHERE Student.StuID NOT IN \n  (SELECT Has_Pet.StuID \n   FROM Has_Pet \n   JOIN Pets ON Has_Pet.PetID = Pets.PetID \n   WHERE Pets.PetType = 'kitten')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What are the ids of the students who do not own kittens as pets? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a puppy as a pet.",
        "result": "Student.Fname, Student.Age\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog' AND Pets.birthdate <= date('now', '-1 year')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the first name and age of students who have a dog but do not have a puppy as a pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a puppy but does not have a kitten?",
        "result": "Fname\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE PetType = 'puppy' AND StuID NOT IN (\n  SELECT StuID FROM Has_Pet \n  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\n  WHERE PetType = 'kitten'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the first name of every student who has a puppy but does not have a kitten? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "result": "Pets.PetType, Pets.weight \n FROM Pets \n WHERE Pets.birthdate = (SELECT MIN(Pets.birthdate) FROM Pets)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the type and weight of the youngest pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY birthdate desc LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "result": "Pets.PetType, Pets.weight\nFROM Pets\nWHERE Pets.birthdate = (SELECT MIN(Pets.birthdate) FROM Pets)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What type of pet is the youngest animal, and how much does it weigh? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-01-01'",
        "question": "Find the id and weight of all pets older than that born in 2020.",
        "result": "Pets.PetID, Pets.weight\nFROM Pets\nWHERE Pets.birthdate < '2020-01-01'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the id and weight of all pets older than that born in 2020. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE birthdate  <  '2020-05-01'",
        "question": "What is the id and weight of every pet who is older than that born in 2020?",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nWHERE Pets.birthdate < '2020-01-01'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the id and weight of every pet who is older than that born in 2020? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum id for each type of pet.",
        "result": "PetType, AVG(PetID), MAX(PetID)\n FROM Pets\n GROUP BY PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the average and maximum id for each type of pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum id for each pet type?",
        "result": "PetType, AVG(PetID), MAX(PetID) \n FROM Pets \n GROUP BY PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the average and maximum id for each pet type? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT avg(PetID) ,  max(PetID) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum id for each pet type.",
        "result": "PetType, AVG(PetID), MAX(PetID) FROM Pets GROUP BY PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the average and maximum id for each pet type. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "result": "PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the average weight for each type of pet? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT DISTINCT T1.fname , T1.LName ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the name and age of students who have a pet.",
        "result": "Student.FName, Student.Age \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the name and age of students who have a pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT DISTINCT T1.fname , T1.LName, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different names and ages of the students who do have pets?",
        "result": "Student.Fname, Student.LName, Student.Age, Pets.PetType \n FROM Student \n JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n JOIN Pets ON Has_Pet.PetID = Pets.PetID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What are the different names and ages of the students who do have pets? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is ‘Smith’.",
        "result": "Pets.PetID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.LName = 'Smith'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the id of the pet owned by student whose last name is ‘Smith’. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "result": "Pets.PetID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.LName = 'Smith'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the id of the pet owned by the student whose last name is 'Smith'? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "result": "Student.StuID, COUNT(Has_Pet.PetID) AS num_pets \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the number of pets for each student who has any pet and student id. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "For students who have pets, how many pets does each student have?",
        "result": "Student.StuID, COUNT(Has_Pet.PetID) \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### For students who have pets, how many pets does each student have? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "result": "Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID\nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the first name and gender of student who have more than one pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.birthdate  like  '2001%' AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that born in 2001.",
        "result": "Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' AND strftime('%Y',Pets.birthdate) = '2001'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the last name of the student who has a cat that born in 2001. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.birthdate  like '2001%' AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that born in 2001?",
        "result": "Student.LName\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat' AND strftime('%Y', Pets.birthdate) = '2001'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the last name of the student who has a cat that born in 2001? \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "Find the average age of students who do not have any pet.",
        "result": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### Find the average age of students who do not have any pet. \n SELECT"
    },
    {
        "db_id": "new_pets_1",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "What is the average age for all students who do not own any pets?",
        "result": "AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,birthdate,weight)\n.# \n ### What is the average age for all students who do not own any pets? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "result": "COUNT(DISTINCT Continent) FROM continents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many continents are there? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "result": "COUNT(*) FROM continents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of continents? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "result": "Continents.ContId, Continents.Continent, COUNT(countries.CountryId)\n FROM Continents\n LEFT JOIN countries ON Continents.ContId = countries.Continent\n GROUP BY Continents.ContId, Continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries does each continent have? List the continent id, continent name and the number of countries. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "result": "Continents.ContId, Continents.Continent, COUNT(countries.CountryId)\n FROM Continents\n LEFT JOIN countries ON Continents.ContId = countries.Continent\n GROUP BY Continents.ContId",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For each continent, list its id, name, and how many countries it has? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "result": "COUNT(*) FROM countries",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries are listed? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "result": "COUNT(*) FROM countries;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries exist? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "result": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS num_models\nFROM car_makers\nLEFT JOIN model_list ON car_makers.Maker = model_list.Maker\nGROUP BY car_makers.Id, car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many models does each car maker produce? List maker full name, id and the number. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "result": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId)\nFROM car_makers\nLEFT JOIN model_list ON car_makers.Maker = model_list.Maker\nGROUP BY car_makers.Id, car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the full name of each car maker, along with its id and how many models it produces? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "result": "Model FROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model of the car has the minimum horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON car_makers.Maker = cars_data.Make\nWHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the model of the car with the smallest amount of horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "result": "Model\nFROM car_names\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the model of the car whose weight is below the average weight. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "result": "Model \nFROM model_list \nWHERE ModelId IN \n    (SELECT MakeId \n     FROM car_names \n     WHERE MakeId IN \n         (SELECT Id \n          FROM cars_data \n          WHERE Weight < \n              (SELECT AVG(Weight) \n               FROM cars_data)))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the model for the car with a weight smaller than the average? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  >=  '2019';",
        "question": "Find the name of the makers that produced some cars in the past two years?",
        "result": "car_makers.Maker\nFROM car_makers\nJOIN car_names ON car_makers.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year >= strftime('%Y', 'now', '-2 years')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the name of the makers that produced some cars in the past two years? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  >=  '2019';",
        "question": "What is the name of the different car makers who produced a car in the past two years?",
        "result": "Maker FROM car_makers \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE Year >= strftime('%Y', 'now', '-2 years')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of the different car makers who produced a car in the past two years? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "result": "car_makers.Maker, cars_data.Year\nFROM car_makers\nJOIN car_names ON car_makers.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year = (\n  SELECT MIN(Year) FROM cars_data\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the make and production time of the cars that were produced in the earliest year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "result": "car_makers.Maker, cars_data.Year \nFROM car_makers \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nORDER BY cars_data.Year ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maker of the carr produced in the earliest year and what year was it? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;",
        "question": "Which distinct car models are the produced before or in 1980?",
        "result": "DISTINCT Model \nFROM car_names \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Year <= 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced before or in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  <=  1980;",
        "question": "What are the different models for the cards produced before or in 1980?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Year <= 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cards produced before or in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "result": "continents.Continent, COUNT(DISTINCT car_makers.Country) \n FROM continents \n JOIN countries ON continents.ContId = countries.Continent \n JOIN car_makers ON countries.CountryName = car_makers.Country \n GROUP BY continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car makers are there in each continents? List the continent name and the count. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "result": "continents.Continent, COUNT(car_makers.Id)\n FROM continents\n LEFT JOIN countries ON continents.ContId = countries.Continent\n LEFT JOIN car_makers ON countries.CountryName = car_makers.Country\n GROUP BY continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of each continent and how many car makers are there in each one? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "result": "countries.CountryName\nFROM countries\nJOIN car_makers ON countries.CountryId = car_makers.Country\nGROUP BY countries.CountryName\nORDER BY COUNT(DISTINCT car_makers.Id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which of the countries has the most car makers? List the country name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "result": "countries.CountryName \nFROM countries \nINNER JOIN car_makers \nON countries.CountryId = car_makers.Country \nGROUP BY countries.CountryName \nORDER BY COUNT(car_makers.Id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of the country with the most car makers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "How many car models are produced by each maker? List the count and the maker full name.",
        "result": "car_makers.FullName, COUNT(model_list.ModelId) as ModelsProduced\n FROM car_makers\n INNER JOIN model_list ON car_makers.Id = model_list.Maker\n GROUP BY car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced by each maker? List the count and the maker full name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "result": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels \n FROM car_makers \n INNER JOIN model_list ON car_makers.Maker = model_list.Maker \n GROUP BY car_makers.Id, car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models that are produced by each maker and what is the id and full name of each maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "result": "cars_data.Accelerate\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nJOIN car_names ON car_names.MakeId = car_makers.Id AND car_names.Model = model_list.Model\nJOIN cars_data ON cars_data.Id = car_names.Model\nWHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw)? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "result": "cars_data.Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON car_makers.Id = model_list.Maker \nWHERE car_makers.Maker = 'amc' \nAND model_list.Model = 'hornet sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How much does the car accelerate that makes amc hornet sportabout (sw)? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'Japan';",
        "question": "How many Japanese car makers are there?",
        "result": "COUNT(*) FROM car_makers WHERE Country = 'Japan';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many Japanese car makers are there? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'Japan';",
        "question": "What is the number of makers of Japanese care?",
        "result": "COUNT(DISTINCT Maker) FROM car_makers WHERE Country = 'Japan'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of makers of Japanese care? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the america?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the america? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "result": "COUNT(*) FROM model_list\nWHERE Maker IN (\n  SELECT Maker FROM car_makers\n  WHERE Country = 'United States'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the United States? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon(mpg) of the cars with 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cards with 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "result": "MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the smallest weight of the car produced with 8 cylinders on 1974? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
        "result": "MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the minimu weight of the car with 8 cylinders produced in 1974? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "result": "Maker, Model\nFROM car_makers\nINNER JOIN model_list\nON car_makers.Id = model_list.Maker;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "result": "car_makers.Maker, model_list.Model\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "result": "countries.CountryId, countries.CountryName \n FROM countries \n WHERE EXISTS \n   (SELECT 1 FROM car_makers WHERE car_makers.Country = countries.CountryName)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the countries having at least one car maker? List name and id. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "result": "countries.CountryId, countries.CountryName \nFROM countries \nINNER JOIN car_makers ON countries.CountryName = car_makers.Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all countries with at least one car maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of cars each year?",
        "result": "Year, AVG(Weight) \nFROM cars_data \nGROUP BY Year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average weight of cars each year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "result": "AVG(Weight), Year \n FROM cars_data \n GROUP BY Year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average weight and year for each year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which European countries have at least 3 car manufacturers?",
        "result": "countries.CountryName \nFROM countries \nJOIN car_makers ON countries.CountryName = car_makers.Country \nWHERE countries.Continent = 'Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which European countries have at least 3 car manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "result": "CountryName \nFROM countries \nWHERE Continent = 'Europe' \nAND (SELECT COUNT(DISTINCT Maker) FROM car_makers WHERE car_makers.Country = countries.CountryId) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names of all European countries with at least 3 manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "result": "MAX(cars_data.Horsepower), car_makers.Maker \n FROM cars_data \n JOIN car_names ON cars_data.Id = car_names.MakeId \n JOIN model_list ON car_names.Model = model_list.Model \n JOIN car_makers ON model_list.Maker = car_makers.Maker \n WHERE cars_data.Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "result": "car_makers.Maker\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nJOIN car_names ON model_list.ModelId = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Cylinders = 3\nORDER BY cars_data.Horsepower DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the largest amount of horsepower for the models with 3 cylinders and what make is it? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "result": "model_list.Model, cars_data.MPG \n FROM model_list \n JOIN car_names ON model_list.ModelId = car_names.Model \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n ORDER BY cars_data.MPG DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model saves the most gasoline? That is to say, have the maximum miles per gallon. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "What is the car wmodel with the highest mpg?",
        "result": "Model \nFROM car_names \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nORDER BY MPG DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the car wmodel with the highest mpg? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <=  1980;",
        "question": "What is the average horsepower of the cars before or in 1980?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year <= 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before or in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <=  1980;",
        "question": "What is the average horsepower for all cards produced before or in 1980?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year <= 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cards produced before or in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'tesla';",
        "question": "What is the average edispl of the cars of model tesla?",
        "result": "AVG(Edispl) \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Maker = 'tesla'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average edispl of the cars of model tesla? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'tesla';",
        "question": "What is the average edispl for all teslas?",
        "result": "AVG(Edispl) FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName LIKE '%Tesla%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average edispl for all teslas? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "result": "Cylinders, MAX(Accelerate) \n FROM cars_data \n GROUP BY Cylinders",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for different number of cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "result": "MAX(Accelerate), Cylinders\nFROM cars_data\nGROUP BY Cylinders",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for all the different cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "result": "Model, COUNT(DISTINCT MakeId) AS NumVersions \n FROM car_names \n GROUP BY Model \n ORDER BY NumVersions DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model has the most version(make) of cars? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "result": "Model, COUNT(DISTINCT MakeId) AS Versions\nFROM car_names\nGROUP BY Model\nORDER BY Versions DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What model has the most different versions? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2019;",
        "question": "how many cars were produced in the last two years?",
        "result": "COUNT(*) FROM cars_data WHERE Year >= 2021",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in the last two years? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  >=  2019;",
        "question": "In the last two years, how many cars were made?",
        "result": "COUNT(*) FROM cars_data WHERE Year >= 2021;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### In the last two years, how many cars were made? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by American Motor?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by American Motor? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by American Motor?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by American Motor? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "result": "car_makers.Id, car_makers.FullName \n FROM car_makers \n JOIN model_list ON car_makers.Maker = model_list.Maker \n GROUP BY car_makers.Id, car_makers.FullName \n HAVING COUNT(DISTINCT model_list.ModelId) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which makers designed more than 3 car models? List full name and the id. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "result": "Id, Maker FROM car_makers WHERE (SELECT COUNT(*) FROM model_list WHERE car_makers.Id = model_list.Maker) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all makers with more than 3 models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "result": "DISTINCT model_list.Model \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE (car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models created by either the car maker General Motors or weighed more than 3500? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000?",
        "result": "Year \nFROM cars_data \nWHERE Weight BETWEEN 3000 AND 4000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### In which years cars were produced weighing no less than 3000 and no more than 4000? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?",
        "result": "Year \nFROM cars_data \nWHERE Weight < 4000 \nINTERSECT \nSELECT Year \nFROM cars_data \nWHERE Weight > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "result": "Horsepower \nFROM cars_data \nWHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "result": "Horsepower \nFROM cars_data \nWHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'tesla' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model tesla, how many cylinders does the car with the least accelerate have?",
        "result": "MIN(Cylinders) FROM cars_data \nWHERE Id IN \n    (SELECT Id FROM car_names \n     WHERE ModelId IN \n        (SELECT ModelId FROM model_list \n         WHERE Maker = 'tesla' AND Model = 'Model S')) \nAND Accelerate = \n    (SELECT MIN(Accelerate) FROM cars_data \n     WHERE Id IN \n        (SELECT Id FROM car_names \n         WHERE ModelId IN \n            (SELECT ModelId FROM model_list \n             WHERE Maker = 'tesla' AND Model = 'Model S')))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For model tesla, how many cylinders does the car with the least accelerate have? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'tesla' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a tesla model, how many cylinders does the version with least accelerate have?",
        "result": "MIN(Cylinders) FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nWHERE Maker = 'Tesla' AND Model = 'Model' \nAND Accelerate = (SELECT MIN(Accelerate) FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nWHERE Maker = 'Tesla' AND Model = 'Model');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For a tesla model, how many cylinders does the version with least accelerate have? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "result": "COUNT(*) FROM cars_data\nWHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have a larger accelerate than the car with the largest horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "result": "COUNT(*) FROM cars_data \nWHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a greater accelerate than the one with the most horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "How many countries has more than 2 car makers?",
        "result": "COUNT(DISTINCT countries.CountryId) \nFROM countries \nINNER JOIN car_makers ON countries.CountryName = car_makers.Country \nGROUP BY countries.CountryId \nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "What is the number of countries with more than 2 car makers?",
        "result": "COUNT(DISTINCT CountryName) \nFROM countries \nWHERE CountryId IN (\n    SELECT DISTINCT Country \n    FROM car_makers \n    GROUP BY Country \n    HAVING COUNT(DISTINCT Maker) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of countries with more than 2 car makers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of carsw ith over 6 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "result": "Model \nFROM car_names \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON car_names.MakeId = car_makers.Id \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Cylinders = 4 \nORDER BY Horsepower DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For the cars with 4 cylinders, which model has the largest horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "result": "Model \nFROM cars_data \nWHERE Cylinders = 4 \nORDER BY Horsepower DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For all of the 4 cylinder cars, which model has the most horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "result": "car_names.MakeId, car_makers.Maker\n FROM cars_data\n JOIN car_names ON cars_data.Id = car_names.MakeId\n JOIN car_makers ON car_names.Model = car_makers.FullName\n WHERE cars_data.Cylinders <= 3\n AND cars_data.Horsepower > (\n     SELECT MIN(Horsepower) FROM cars_data\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?",
        "result": "car_names.MakeId, car_names.Make \n FROM cars_data \n INNER JOIN car_names ON cars_data.Id = car_names.MakeId \n WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980?",
        "result": "MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year <= 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum miles per gallon of the car with 8 cylinders or produced before or in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <=  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980?",
        "result": "MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year <= 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum mpg of the cars that had 8 cylinders or that were produced before or in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor'?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which models are lighter than 3500 but not built by the 'Ford Motor'? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor?",
        "result": "model_list.Model \nFROM \n    model_list \n    INNER JOIN car_makers ON model_list.Maker = car_makers.Maker \n    INNER JOIN car_names ON car_makers.Id = car_names.MakeId \n    INNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE \n    cars_data.Weight < 3500 \n    AND car_makers.FullName != 'Ford Motor'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models wthat are lighter than 3500 but were not built by the Ford Motor? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "result": "CountryName \nFROM \ncountries \nWHERE \nCountryId NOT IN (SELECT DISTINCT Country FROM car_makers)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the name of the countries where there is not a single car maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "result": "CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names of the countries with no car makers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.",
        "result": "car_makers.Id, car_makers.Maker\n FROM car_makers\n INNER JOIN model_list ON car_makers.Maker = model_list.Maker\n INNER JOIN car_names ON model_list.ModelId = car_names.Model\n GROUP BY car_makers.Id, car_makers.Maker\n HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "result": "car_makers.Id, car_makers.Maker \n FROM car_makers \n WHERE car_makers.Id IN \n  (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) \n  AND car_makers.Id IN \n  (SELECT MakeId FROM car_names GROUP BY MakeId HAVING COUNT(*) > 3);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'tesla';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'tesla' model?",
        "result": "countries.CountryId, countries.CountryName\nFROM countries \nLEFT JOIN car_makers ON countries.CountryId = car_makers.Country \nLEFT JOIN model_list ON car_makers.Maker = model_list.Maker \nLEFT JOIN car_names ON model_list.ModelId = car_names.Model \nWHERE car_makers.Maker = 'tesla' OR countries.CountryId IN \n(SELECT car_makers.Country FROM car_makers \nGROUP BY car_makers.Country \nHAVING COUNT(DISTINCT car_makers.Maker) > 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the id and names of the countries which have more than 3 car makers or produce the 'tesla' model? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'tesla';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce teslas?",
        "result": "countries.CountryId, countries.CountryName \nFROM countries \nWHERE countries.CountryId IN (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(DISTINCT car_makers.Maker) > 3)\nOR countries.CountryId IN (SELECT countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = 'Tesla')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the ids and names of all countries that either have more than 3 car makers or produce teslas? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue\" belong to?",
        "result": "Country \nFROM \nairlines \nWHERE \nAirline = \"JetBlue\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline \"JetBlue\" belong to? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue affiliated with?",
        "result": "Country FROM airlines WHERE Abbreviation = \"Jetblue\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What country is Jetblue affiliated with? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue\"?",
        "result": "Abbreviation FROM airlines WHERE Airline = \"JetBlue\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the abbreviation of Airline \"JetBlue\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to JetBlue?",
        "result": "Abbreviation FROM airlines WHERE Airline = 'JetBlue';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which abbreviation corresponds to JetBlue? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all american airline names and their abbreviations.",
        "result": "Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all american airline names and their abbreviations. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are american airline names and abbreviations for airlines?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'American';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are american airline names and abbreviations for airlines? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Jackson\"",
        "question": "List the airport code and name in Jackson.",
        "result": "AirportCode, AirportName \nFROM airports \nWHERE City = 'Jackson';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List the airport code and name in Jackson. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Syracuse\"",
        "question": "Give the airport code and airport name corresonding to the Syracuse.",
        "result": "AirportCode, AirportName \nFROM airports \nWHERE City = 'Syracuse';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airport code and airport name corresonding to the Syracuse. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "result": "COUNT(uid) FROM airlines;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "result": "COUNT(uid) FROM airlines;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "result": "COUNT(*) FROM airports;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airports do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "result": "COUNT(*) FROM airports;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of  airports. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "result": "COUNT(*) FROM flights;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "result": "COUNT(*) FROM flights;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "result": "Airline FROM airlines WHERE Abbreviation='UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation 'UAL'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "result": "Airline \nFROM \nairlines \nWHERE \nAbbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation 'UAL'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from America?",
        "result": "COUNT(*) FROM airlines WHERE Country = 'America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from America? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the America.",
        "result": "COUNT(*) FROM airlines WHERE Country = 'America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the America. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "result": "City, Country \nFROM airports \nWHERE AirportName = 'Alton'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which city and country is the Alton airport at? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "result": "City, Country FROM airports WHERE AirportCode = 'Alton';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the city and country for the Alton airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "result": "AirportName \nFROM airports \nWHERE AirportCode = 'AKO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the airport name for airport 'AKO'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "result": "AirportName \nFROM airports \nWHERE AirportCode = 'AKO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code 'AKO'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Jackson\"",
        "question": "What are airport names at 'Jackson'?",
        "result": "AirportName FROM airports WHERE City='Jackson';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airport names at 'Jackson'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Jackson\"",
        "question": "What are the names of airports in Jackson?",
        "result": "AirportName FROM airports WHERE City = 'Jackson';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the names of airports in Jackson? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from 'APG'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from 'APG'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "How many flights depart from Jackson?",
        "result": "COUNT(*) FROM flights \nWHERE SourceAirport = 'Jackson';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from Jackson? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Return the number of flights departing from Jackson.",
        "result": "COUNT(*) FROM flights\nWHERE SourceAirport = 'Jackson';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights departing from Jackson. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "How many flights arriving in Jackson city?",
        "result": "COUNT(*) FROM flights\nINNER JOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Jackson'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights arriving in Jackson city? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Return the number of flights arriving in Jackson.",
        "result": "COUNT(*) FROM flights\nWHERE DestAirport = 'Jackson'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights arriving in Jackson. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Syracuse\"",
        "question": "How many flights depart from City 'Syracuse' and have destination City 'Ashley'?",
        "result": "COUNT(*) \nFROM flights \nJOIN airports AS s ON flights.SourceAirport = s.AirportCode \nJOIN airports AS d ON flights.DestAirport = d.AirportCode \nWHERE s.City = 'Syracuse' AND d.City = 'Ashley'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from City 'Syracuse' and have destination City 'Ashley'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Syracuse\"",
        "question": "How many flights fly from Syracuse to Ashley?",
        "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport = 'Syracuse' AND DestAirport = 'Ashley'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights fly from Syracuse to Ashley? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue' have?",
        "result": "COUNT(*) FROM flights WHERE Airline = 'JetBlue';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline 'JetBlue' have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue flights.",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'Jetblue'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the number of Jetblue flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'JetBlue' flights go to Airport 'ASY'?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue' AND DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many 'JetBlue' flights go to Airport 'ASY'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of JetBlue flights arriving in ASY Airport.",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue' AND DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of JetBlue flights arriving in ASY Airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'JetBlue' flights depart from Airport 'AHD'?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline='JetBlue' AND SourceAirport='AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many 'JetBlue' flights depart from Airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"JetBlue Airways\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of JetBlue flights leaving from AHD Airport.",
        "result": "COUNT(*) FROM flights\nWHERE Airline = 'JetBlue' AND SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of JetBlue flights leaving from AHD Airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"JetBlue Airways\"",
        "question": "How many JetBlue flights go to City 'Aberdeen'?",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue' AND DestAirport IN \n(SELECT AirportCode FROM airports WHERE City = 'Aberdeen');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many JetBlue flights go to City 'Aberdeen'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"JetBlue Airways\"",
        "question": "Count the number of JetBlue flights that arrive in Aberdeen.",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue' \nAND DestAirport = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of JetBlue flights that arrive in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "result": "airports.City \nFROM airports \nJOIN flights ON airports.AirportCode = flights.DestAirport \nGROUP BY airports.City \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which city has most number of arriving flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "result": "airports.City \nFROM airports \nINNER JOIN flights \nON airports.AirportCode = flights.DestAirport \nGROUP BY airports.City \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which city has the most frequent destination airport? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "result": "flights.SourceAirport AS City, COUNT(*) AS DepartingFlights\nFROM flights\nGROUP BY flights.SourceAirport\nORDER BY DepartingFlights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which city has most number of departing flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "result": "flights.SourceAirport, COUNT(*) AS frequency\nFROM flights\nGROUP BY flights.SourceAirport\nORDER BY frequency DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which city is the most frequent source airport? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "result": "AirportCode FROM airports\nWHERE AirportCode = (SELECT SourceAirport FROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) DESC\nLIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the code of airport that has the highest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "result": "flights.SourceAirport, COUNT(*) as NumFlights\nFROM flights\nGROUP BY flights.SourceAirport\nORDER BY NumFlights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the airport code of the airport with the most flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "result": "AirportCode \nFROM airports \nWHERE AirportCode NOT IN (\n  SELECT SourceAirport \n  FROM flights \n  UNION \n  SELECT DestAirport \n  FROM flights\n) \nORDER BY AirportCode ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the code of airport that has fewest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "result": "AirportCode \nFROM airports \nWHERE AirportCode = (\n    SELECT SourceAirport \n    FROM flights \n    GROUP BY SourceAirport \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the code of the airport with the least flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "result": "Airline, COUNT(*) AS NumFlights\nFROM flights\nGROUP BY Airline\nORDER BY NumFlights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "result": "Airline, COUNT(*) AS num_flights \nFROM flights \nGROUP BY Airline \nORDER BY num_flights DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "result": "Abbreviation, Country \nFROM airlines \nWHERE uid = (\n  SELECT Airline \n  FROM flights \n  GROUP BY Airline \n  ORDER BY COUNT(*) ASC \n  LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the abbreviation and country of the airline that has fewest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "result": "Abbreviation, Country\nFROM airlines\nWHERE uid = (\n  SELECT Airline\n  FROM flights\n  GROUP BY Airline\n  ORDER BY COUNT(*) ASC\n  LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the abbreviation of the airilne has the fewest flights and what country is it in? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.uid = flights.Airline \nJOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airlines that have some flight departing from airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "result": "Airline \nFROM \nflights \nWHERE \nSourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN Flights ON Airlines.Abbreviation = Flights.Airline \nINNER JOIN Airports ON Flights.DestAirport = Airports.AirportCode \nWHERE Airports.AirportCode = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airlines that have flights arriving at airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "result": "Airlines.Airline\nFROM Airlines\nINNER JOIN flights\nON Airlines.Abbreviation = flights.Airline\nWHERE flights.DestAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "result": "Airlines.Airline\nFROM Airlines\nINNER JOIN flights ON Airlines.Airline = flights.Airline\nWHERE flights.SourceAirport IN ('APG', 'CVO') AND flights.DestAirport IN ('APG', 'CVO')\nGROUP BY Airlines.Airline\nHAVING COUNT(DISTINCT flights.SourceAirport) = 2 AND COUNT(DISTINCT flights.DestAirport) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have flights from both airports 'APG' and 'CVO'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "result": "airlines.Airline\nFROM airlines\nINNER JOIN flights ON airlines.Airline = flights.Airline\nWHERE flights.SourceAirport IN ('APG', 'CVO')\nAND flights.DestAirport IN ('APG', 'CVO')\nGROUP BY airlines.Airline\nHAVING COUNT(DISTINCT flights.SourceAirport) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have departing flights from both APG and CVO airports? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nWHERE flights.SourceAirport = 'CVO' AND airlines.Airline NOT IN (\n    SELECT airlines.Airline \n    FROM airlines \n    JOIN flights ON airlines.Airline = flights.Airline \n    WHERE flights.SourceAirport = 'APG'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have flights from airport 'CVO' but not from 'APG'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "result": "Airlines.Airline \nFROM \nAirlines \nINNER JOIN \nflights ON Airlines.Airline = flights.Airline \nWHERE \nflights.SourceAirport = 'CVO' \nAND \nAirlines.Airline NOT IN (SELECT Airlines.Airline FROM Airlines INNER JOIN flights ON Airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have departures from CVO but not from APG airports? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "result": "airlines.Airline\nFROM airlines\nINNER JOIN flights\nON airlines.Abbreviation = flights.Airline\nGROUP BY airlines.Airline\nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have at least 10 flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "result": "Airline FROM flights \nGROUP BY Airline \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "result": "Airline \nFROM airlines \nWHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have fewer than 200 flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT Airline \n    FROM flights \n    GROUP BY Airline \n    HAVING COUNT(*) < 200\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"JetBlue Airways\"",
        "question": "What are flight numbers belonging to \"JetBlue\"?",
        "result": "FlightNo \nFROM airlines \nJOIN flights \nON airlines.uid = flights.Airline \nWHERE airlines.Airline = 'JetBlue';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers belonging to \"JetBlue\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"JetBlue Airways\"",
        "question": "Which flight numbers correspond to JetBlue flights?",
        "result": "FlightNo \nFROM flights \nWHERE Airline = 'JetBlue';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to JetBlue flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "result": "flights.FlightNo FROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.AirportCode = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport \"APG\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "result": "FlightNo FROM flights WHERE SourceAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "result": "flights.FlightNo\nFROM flights\nINNER JOIN airports\nON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = \"APG\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport \"APG\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "result": "FlightNo FROM flights WHERE DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "What are flight numbers of flights departing from \"Jackson\"?",
        "result": "flights.FlightNo \nFROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = \"Jackson\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from \"Jackson\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Give the flight numbers of flights leaving from Jackson.",
        "result": "FlightNo FROM flights\nWHERE SourceAirport = 'Jackson'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from Jackson. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "What are flight numbers of flights arriving at \"Jackson\"?",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.City = 'Jackson'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at \"Jackson\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Jackson\"",
        "question": "Give the flight numbers of flights arriving in Jackson.",
        "result": "FlightNo \nFROM flights \nWHERE DestAirport = 'Jackson';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights arriving in Jackson. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Syracuse\" OR T2.city  =  \"Jackson\"",
        "question": "Find the number of flights landing in the  Syracuse or Jackson.",
        "result": "COUNT(*) FROM flights \nWHERE DestAirport IN ('Syracuse', 'Jackson')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the number of flights landing in the  Syracuse or Jackson. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Syracuse\" OR T2.city  =  \"Jackson\"",
        "question": "How many flights land in Syracuse or Jackson?",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport IN ('SYR', 'JAN')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights land in Syracuse or Jackson? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "result": "Airports.AirportName FROM Airports\nWHERE NOT EXISTS \n(SELECT * FROM Flights \nWHERE Flights.SourceAirport = Airports.AirportCode \nOR Flights.DestAirport = Airports.AirportCode);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the name of airports which do not have any flight in and out. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "result": "airports.AirportName \nFROM airports\nLEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport\nWHERE flights.Airline IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airports do not have departing or arriving flights? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "result": "COUNT(*) FROM Documents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents do we have? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "result": "COUNT(*) FROM Documents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs with its names and descriptions.",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs with its names and descriptions. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "Show all the ids with its names and descriptions for all documents?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all the ids with its names and descriptions for all documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Show the name with template id of documents with description with the letter 'w' in it?",
        "result": "Documents.Document_Name, Documents.Template_ID \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the name with template id of documents with description with the letter 'w' in it? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name , Document_ID, template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names with document and template ids for documents that contain the letter w in their description.",
        "result": "Documents.Document_Name, Documents.Document_ID, Templates.Template_ID\nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names with document and template ids for documents that contain the letter w in their description. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the description for document named \"Robbin CV\" with its document and template id?",
        "result": "Documents.Document_Description \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the description for document named \"Robbin CV\" with its document and template id? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the description with document and template id of the document with the name Robbin CV.",
        "result": "Templates.Template_Details, Documents.Document_ID, Templates.Template_ID\nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the description with document and template id of the document with the name Robbin CV. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "result": "COUNT(DISTINCT Templates.Template_ID) AS Number_of_Templates \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many different templates do all document use? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "result": "COUNT(DISTINCT Template_ID) \nFROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the PPT template?",
        "result": "COUNT(DISTINCT Documents.Document_ID)\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the PPT template? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "result": "COUNT(*) FROM Documents\nWHERE Template_ID IN (SELECT Template_ID FROM Templates \n                      WHERE Template_Type_Code = 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents that use the PPT template type. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and the number of documents using each template.",
        "result": "Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_of_Documents\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template ids and the number of documents using each template. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "result": "Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count\nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are all different template ids used for documents, and how many times were each of them used? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the effective date period for the template used by the most documents?",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To \nFROM Templates \nWHERE Templates.Template_ID = (SELECT Template_ID FROM Documents \n                               GROUP BY Template_ID \n                               ORDER BY COUNT(*) DESC \n                               LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the effective date period for the template used by the most documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the effective date range of the template that is used for the greatest number of documents.",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To \nFROM Templates \nWHERE Templates.Template_ID = (SELECT Template_ID FROM Documents \n                               GROUP BY Template_ID \n                               ORDER BY COUNT(*) DESC \n                               LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date range of the template that is used for the greatest number of documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID \nHAVING COUNT(Documents.Document_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "result": "Template_ID \nFROM Templates \nWHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "result": "Templates.Template_ID\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates not used by any document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "result": "Templates.Template_ID\nFROM Templates\nLEFT JOIN Documents\nON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Template_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids for templates that are not used in any documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "result": "COUNT(*) FROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates do we have? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "result": "COUNT(*) FROM Templates;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates",
        "question": "Show effective date period, and template type codes for all templates.",
        "result": "Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To\nFROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show effective date period, and template type codes for all templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates",
        "question": "What are the effective date period, and type codes for each template?",
        "result": "Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To FROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date period, and type codes for each template? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "Show all effective date period for all templates.",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Date_Effective_From, Templates.Date_Effective_To\nFROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all effective date period for all templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "What are the effective date range from to?",
        "result": "Date_Effective_From, Date_Effective_To FROM Templates;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date range from to? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the effective date range with template type code PP or PPT?",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To\nFROM Templates\nWHERE Templates.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date range with template type code PP or PPT? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the effective date range that have the code PP or PPT.",
        "result": "Date_Effective_From, Date_Effective_To \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date range that have the code PP or PPT. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Give me the effective date period whose template type code is CV?",
        "result": "Date_Effective_From, Date_Effective_To \nFROM Templates \nWHERE Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Give me the effective date period whose template type code is CV? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Return the effective date period of the template type CV.",
        "result": "Date_Effective_From, Date_Effective_To\nFROM Templates\nWHERE Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date period of the template type CV. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the effective date period and template type code for the template with version number later than 5?",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the effective date period and template type code for the template with version number later than 5? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the effective date period and template type codes of templates with a version number greater than 5.",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date period and template type codes of templates with a version number greater than 5. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all effective date period and number of templates for each.",
        "result": "Template_Type_Code, Date_Effective_From, Date_Effective_To, COUNT(Template_ID) AS Number_of_Templates\nFROM Templates\nGROUP BY Template_Type_Code, Date_Effective_From, Date_Effective_To",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all effective date period and number of templates for each. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the effective date period, and how many templates correspond to each?",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Templates.Template_ID)\n FROM Templates\n GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date period, and how many templates correspond to each? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which effective date period has most number of templates?",
        "result": "Date_Effective_From, Date_Effective_To, COUNT(*) AS Template_Count \nFROM Templates \nGROUP BY Date_Effective_From, Date_Effective_To \nORDER BY Template_Count DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which effective date period has most number of templates? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the effective date period that the most templates belong to.",
        "result": "Date_Effective_From, Date_Effective_To\nFROM Templates\nWHERE (Date_Effective_To > DATE('now') OR Date_Effective_To IS NULL)\nGROUP BY Date_Effective_From, Date_Effective_To\nORDER BY COUNT(Template_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date period that the most templates belong to. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all effective date period with less than three templates.",
        "result": "Date_Effective_From, Date_Effective_To \nFROM Templates \nGROUP BY Date_Effective_From, Date_Effective_To \nHAVING COUNT(Template_ID) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all effective date period with less than three templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the effective date period that have fewer than 3 templates?",
        "result": "Date_Effective_From, Date_Effective_To \n FROM Templates \n GROUP BY Date_Effective_From, Date_Effective_To \n HAVING COUNT(Template_ID) < 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date period that have fewer than 3 templates? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "What the smallest version number and its effective date date from and to?",
        "result": "MIN(Version_Number), Date_Effective_From, Date_Effective_To FROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What the smallest version number and its effective date date from and to? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  Date_Effective_From ,  Date_Effective_To FROM Templates",
        "question": "Return the lowest version number, along with its corresponding effective date date from and to.",
        "result": "Templates.Version_Number, Templates.Date_Effective_From, Templates.Date_Effective_To\nFROM Templates\nWHERE Templates.Version_Number = (\n    SELECT MIN(Version_Number)\n    FROM Templates\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the lowest version number, along with its corresponding effective date date from and to. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the effective date range of the template used by document with the name \"Data base\"?",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To \n FROM Documents \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the effective date range of the template used by document with the name \"Data base\"? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the effective date range of the template that is used by a document named Data base.",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To \nFROM Templates \nINNER JOIN Documents \nON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date range of the template that is used by a document named Data base. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name, T2.Document_ID, T2.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names along with document and template id using templates with template type code BK.",
        "result": "Documents.Document_ID, Documents.Document_Name, Templates.Template_ID\nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all document names along with document and template id using templates with template type code BK. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name, T2.Document_ID, T2.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Return the names of documents with document and template id that use templates with the code BK?",
        "result": "Documents.Document_Name, Documents.Document_ID, Templates.Template_ID \n FROM Documents \n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Templates.Template_Type_Code = 'BK';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names of documents with document and template id that use templates with the code BK? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all effective date from and to, and the number of documents using each type.",
        "result": "Ref_Template_Types.Template_Type_Description, Ref_Template_Types.Template_Type_Code, \nCOUNT(DISTINCT Documents.Document_ID) as Num_Documents, \nTemplates.Date_Effective_From, Templates.Date_Effective_To \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Ref_Template_Types.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Ref_Template_Types.Template_Type_Description",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all effective date from and to, and the number of documents using each type. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are effective date from and to, and how many documents use each type?",
        "result": "Template_Type_Code, \nCOUNT(DISTINCT Document_ID) AS Number_of_Documents,\nMIN(Date_Effective_From) AS Effective_From,\nMAX(Date_Effective_To) AS Effective_To\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.Template_Type_Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are effective date from and to, and how many documents use each type? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which effective date period is used by most number of documents?",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To, COUNT(Documents.Document_ID) as document_count \n FROM Templates \n INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \n GROUP BY Templates.Date_Effective_From, Templates.Date_Effective_To \n ORDER BY document_count DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which effective date period is used by most number of documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.Date_Effective_From ,  T1.Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the effective date period that is most commonly used in documents.",
        "result": "Date_Effective_From, Date_Effective_To\nFROM Templates\nWHERE Template_ID IN \n(SELECT Template_ID FROM Documents)\nGROUP BY Date_Effective_From, Date_Effective_To\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date period that is most commonly used in documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all effective date from and to that are not used by any document.",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To \nFROM Templates \nLEFT JOIN Documents \nON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Template_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all effective date from and to that are not used by any document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Date_Effective_From ,  Date_Effective_To FROM Templates EXCEPT SELECT Date_Effective_From ,  Date_Effective_To FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the effective date from and to that are not used for any document?",
        "result": "Date_Effective_From, Date_Effective_To\nFROM Templates\nWHERE NOT EXISTS (\n  SELECT 1\n  FROM Documents\n  WHERE Templates.Template_ID = Documents.Template_ID\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date from and to that are not used for any document? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "result": "Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes and descriptions. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "result": "Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the type codes and descriptions for all template types? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "result": "Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = \"AD\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type descriptions for template type code \"AD\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "result": "Template_Type_Description \nFROM \nRef_Template_Types \nWHERE \nTemplate_Type_Code = 'AD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code for template type description \"Book\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = \"Book\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the type code of the template type with the description \"Book\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "result": "Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types\nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.Template_Type_Description;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the distinct template type descriptions for the templates ever used by any document? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "result": "Template_Type_Description\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.Template_Type_Description",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the different descriptions for templates that have been used in a document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the effective date range from to with template type description \"Presentation\".",
        "result": "Date_Effective_From, Date_Effective_To\nFROM Templates\nINNER JOIN Ref_Template_Types\nON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = \"Presentation\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the effective date range from to with template type description \"Presentation\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.Date_Effective_From ,  T2.Date_Effective_To FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the effective date period corresponding to templates with the description 'Presentation'.",
        "result": "Templates.Date_Effective_From, Templates.Date_Effective_To\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the effective date period corresponding to templates with the description 'Presentation'. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches",
        "question": "Find both player names in each match.",
        "result": "m.winner_name, m.loser_name\n FROM matches m",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find both player names in each match. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches",
        "question": "Give me both player names in each match?",
        "result": "matches.winner_name, matches.loser_name\nFROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Give me both player names in each match? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_age, loser_age FROM matches",
        "question": "Find both player ages in each match.",
        "result": "matches.winner_age, matches.loser_age FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find both player ages in each match. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_age, loser_age FROM matches",
        "question": "Give me both player ages in each match.",
        "result": "ROUND((julianday(matches.tourney_date) - julianday(players.birth_date))/365.25,1) AS winner_age, ROUND((julianday(matches.tourney_date) - julianday(loser_birth_date))/365.25,1) AS loser_age \n FROM matches \n JOIN players ON matches.winner_id = players.player_id \n JOIN players AS loser ON matches.loser_id = loser.player_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Give me both player ages in each match. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all American players.",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first name and birth date of all American players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of American players?",
        "result": "first_name, birth_date FROM players WHERE country_code = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names and birth dates of American players? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average loser and winner age of all matches.",
        "result": "AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age\nFROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average loser and winner age of all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average loser and winner ages across matches?",
        "result": "AVG(loser_age), AVG(winner_age) \n FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the average loser and winner ages across matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank), avg(loser_rank) FROM matches",
        "question": "Find their all average rank including winner and loser in each matches.",
        "result": "AVG(winner_rank) AS avg_winner_rank, AVG(loser_rank) AS avg_loser_rank FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find their all average rank including winner and loser in each matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank), avg(loser_rank) FROM matches",
        "question": "What is the average rank for all players including winner and loser in all matches?",
        "result": "AVG(winner_rank + loser_rank) AS avg_rank FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the average rank for all players including winner and loser in all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT min(winner_rank), min(loser_rank) FROM matches",
        "question": "Find the highest rank of all players including winner and loser in all matches.",
        "result": "MAX(ranking) FROM rankings\nINNER JOIN players ON rankings.player_id = players.player_id\nINNER JOIN matches ON players.player_id = matches.loser_id OR players.player_id = matches.winner_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the highest rank of all players including winner and loser in all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT min(winner_rank), min(loser_rank) FROM matches",
        "question": "What is the best rank of all players including winner and loser across all matches?",
        "result": "MAX(ranking) FROM rankings JOIN \n    (SELECT winner_id as player_id FROM matches \n     UNION \n     SELECT loser_id as player_id FROM matches) players \nON rankings.player_id = players.player_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the best rank of all players including winner and loser across all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct country codes of all players.",
        "result": "COUNT(DISTINCT country_code) FROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of distinct country codes of all players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct countries do players come from?",
        "result": "COUNT(DISTINCT country_code) FROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many distinct countries do players come from? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "result": "COUNT(DISTINCT loser_name) FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of distinct name of losers. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "result": "COUNT(DISTINCT loser_name) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many different loser names are there? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "result": "tourney_name \nFROM matches \nGROUP BY tourney_name \nHAVING COUNT(match_num) > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name of tourney that has more than 10 matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "result": "tourney_name \nFROM matches \nGROUP BY tourney_name \nHAVING COUNT(match_num) > 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of tournaments that have more than 10 matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all match players including winner and loser who played in both 2013 and 2016.",
        "result": "first_name, last_name\nFROM players\nWHERE player_id IN (\n    SELECT winner_id FROM matches WHERE year = 2013\n    INTERSECT\n    SELECT winner_id FROM matches WHERE year = 2016\n    INTERSECT\n    SELECT loser_id FROM matches WHERE year = 2013\n    INTERSECT\n    SELECT loser_id FROM matches WHERE year = 2016\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the names of all match players including winner and loser who played in both 2013 and 2016. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of all match players including winner and loser who played in both 2013 and 2016?",
        "result": "first_name, last_name \nFROM \n(SELECT first_name, last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE year = 2013) AS T1 \nJOIN \n(SELECT first_name, last_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE year = 2013) AS T2 \nON T1.first_name = T2.first_name AND T1.last_name = T2.last_name \nJOIN \n(SELECT first_name, last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE year = 2016) AS T3 \nON T1.first_name = T3.first_name AND T1.last_name = T3.last_name \nJOIN \n(SELECT first_name, last_name FROM players JOIN matches ON players.player_id = matches.loser_id WHERE year = 2016) AS T4 \nON T1.first_name = T4.first_name AND T1.last_name = T4.last_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of all match players including winner and loser who played in both 2013 and 2016? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the all player name in each matche who played in years of 2013 or 2016.",
        "result": "players.first_name, players.last_name \nFROM players \nJOIN matches ON players.player_id = matches.loser_id OR players.player_id = matches.winner_id \nWHERE strftime('%Y', matches.tourney_date) IN ('2013', '2016')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the all player name in each matche who played in years of 2013 or 2016. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "Including winner and loser, Give me all player name of each matche in 2013 or 2016 year?",
        "result": "winner_name, loser_name \nFROM matches \nWHERE year = 2013 OR year = 2016",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Including winner and loser, Give me all player name of each matche in 2013 or 2016 year? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "result": "players.country_code, players.first_name \nFROM players \nINNER JOIN matches ON players.player_id = matches.winner_id \nWHERE matches.tourney_name = 'WTA Championships' AND EXISTS (\n  SELECT 1 \n  FROM matches \n  WHERE tourney_name = 'Australian Open' AND winner_id = matches.winner_id\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "result": "players.first_name, players.country_code \n FROM players \n JOIN matches ON players.player_id = matches.winner_id \n WHERE tourney_name = 'WTA Championships' AND \n       tourney_name = 'Australian Open' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names and country codes for players who won both the WTA Championships and the Australian Open? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "result": "first_name, country_code \nFROM players \nWHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the first name and country code of the oldest player. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "result": "first_name, country_code\nFROM players\nWHERE birth_date = (\n  SELECT MIN(birth_date)\n  FROM players\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the first name and country code of the oldest player? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players order of their birth date from old to young.",
        "result": "first_name, last_name\nFROM players\nORDER BY birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first and last name of all players order of their birth date from old to young. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted from oldest to youngest?",
        "result": "first_name || ' ' || last_name as full_name \nFROM players \nORDER BY birth_date ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the full names of all players, sorted from oldest to youngest? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest.",
        "result": "first_name, last_name \nFROM players \nWHERE hand = 'L' \nORDER BY birth_date ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first and last name of all players who are left / L hand in the order of their date of birth from the oldest to the youngest. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date desc",
        "question": "What are the name of all left handed players, in order of date of birth from the young to the old?",
        "result": "players.first_name, players.last_name\nFROM players\nWHERE players.hand = 'L'\nORDER BY players.birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the name of all left handed players, in order of date of birth from the young to the old? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "result": "players.first_name, players.country_code \n FROM players \n INNER JOIN rankings \n ON players.player_id = rankings.player_id \n WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the first name and country code of the player who did the most number of tours. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "result": "players.first_name, players.country_code\nFROM players\nINNER JOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id\nORDER BY COUNT(rankings.tours) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the first name and country code of the player with the most tours? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "result": "year \nFROM matches \nGROUP BY year \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the year that has the most number of matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "result": "year, COUNT(*) as num_matches\n FROM matches\n GROUP BY year\n ORDER BY num_matches DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Which year had the most matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the player who won the most times.",
        "result": "winner_name, winner_rank_points \n FROM \n  (SELECT winner_name, winner_rank_points, COUNT(*) as win_count \n   FROM matches \n   GROUP BY winner_name \n   ORDER BY win_count DESC \n   LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and rank points of the player who won the most times. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the player who has won the most matches, and how many rank points does this player have?",
        "result": "players.first_name || ' ' || players.last_name as player_name, MAX(winner_matches.wins) as max_wins, rankings.ranking_points\nFROM players \nJOIN (\n    SELECT winner_id, COUNT(*) as wins\n    FROM matches\n    GROUP BY winner_id\n) as winner_matches ON players.player_id = winner_matches.winner_id\nJOIN rankings ON players.player_id = rankings.player_id\nWHERE rankings.ranking_date = (SELECT MAX(ranking_date) FROM rankings)\nGROUP BY players.player_id\nORDER BY max_wins DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the name of the player who has won the most matches, and how many rank points does this player have? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find all match player name including winner and loser where the winner has the highest rank points and participated in the Australian Open tourney.",
        "result": "matches.winner_name, matches.loser_name\nFROM matches\nINNER JOIN players ON matches.winner_id = players.player_id\nWHERE matches.tourney_name = 'Australian Open'\nAND matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find all match player name including winner and loser where the winner has the highest rank points and participated in the Australian Open tourney. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT loser_name, winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What are the match player names including winner and loser where the winner had the most rank points and participated in the Australian Open tournament?",
        "result": "matches.winner_name, matches.loser_name \nFROM matches \nJOIN players ON matches.winner_id = players.player_id \nWHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the match player names including winner and loser where the winner had the most rank points and participated in the Australian Open tournament? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "Including winner and loser, find all the player names in each match with greatest number of minutes.",
        "result": "players.first_name, players.last_name\nFROM matches \nJOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id \nWHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Including winner and loser, find all the player names in each match with greatest number of minutes. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "In each match, what are the winner with loser names who played in the longest match?",
        "result": "matches.winner_name, matches.loser_name\nFROM matches\nWHERE matches.minutes = (\n    SELECT MAX(matches.minutes)\n    FROM matches\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### In each match, what are the winner with loser names who played in the longest match? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "result": "players.first_name, AVG(rankings.ranking) AS avg_ranking \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.player_id, players.first_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average ranking for each player and their first name. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "result": "players.first_name, AVG(rankings.ranking) \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.player_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names of all players, and their average rankings? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each player and their name.",
        "result": "players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points\n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.player_id \n ORDER BY total_ranking_points DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total ranking points for each player and their name. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the names of all players, and their total ranking points?",
        "result": "players.first_name, players.last_name, SUM(rankings.ranking_points) AS total_ranking_points\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id\nORDER BY total_ranking_points DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of all players, and their total ranking points? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "result": "country_code, COUNT(*) as num_players \n FROM players \n GROUP BY country_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of players for each country. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "result": "country_code, COUNT(*) \n FROM players \n GROUP BY country_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players are from each country? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "result": "country_code \nFROM players \nGROUP BY country_code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the code of the country where has the greatest number of players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "result": "country_code \nFROM players \nGROUP BY country_code \nORDER BY COUNT(player_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the code of the country with the most players? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "result": "country_code \nFROM players \nGROUP BY country_code \nHAVING COUNT(player_id) > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the codes of countries that have more than 50 players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "result": "country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(player_id) > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the codes of countries with more than 50 players? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "result": "ranking_date, SUM(tours) as total_tours\nFROM rankings\nGROUP BY ranking_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of tours for each ranking date. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total tours were there for each ranking date?",
        "result": "ranking_date, COUNT(DISTINCT tours) AS total_tours \nFROM rankings \nGROUP BY ranking_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many total tours were there for each ranking date? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "result": "year, COUNT(*) AS num_matches\n FROM matches\n GROUP BY year;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of matches happened in each year. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "result": "year, COUNT(*) \n FROM matches \n GROUP BY year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many matches were played in each year? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "result": "winner_name, winner_rank \n FROM matches \n WHERE winner_age IN (SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3) \n ORDER BY winner_age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and rank of the 3 youngest winners across all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "result": "winner_name, winner_rank \n FROM matches \n WHERE winner_age IN (\n   SELECT DISTINCT winner_age \n   FROM matches \n   ORDER BY winner_age ASC \n   LIMIT 3\n ) \n ORDER BY winner_age ASC, winner_rank ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names and ranks of the three youngest winners across all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "result": "COUNT(DISTINCT winner_id) FROM matches\nWHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many different winners both participated in the WTA Championships and were left handed? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "result": "COUNT(DISTINCT winner_id) \nFROM matches \nWHERE winner_hand = 'L' \nAND tourney_name = 'WTA Championships';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of left handed winners who participated in the WTA Championships. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.first_name , T1.last_name ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the name and birth date of the winner who has the highest rank points in all matches.",
        "result": "players.first_name, players.last_name, players.birth_date \nFROM players \nINNER JOIN matches ON players.player_id = matches.winner_id \nINNER JOIN rankings ON players.player_id = rankings.player_id \nWHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and birth date of the winner who has the highest rank points in all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.first_name , T1.last_name  ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the name and birth date of the player with the most winner rank points across all matches?",
        "result": "players.first_name, players.last_name, players.birth_date\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nWHERE winner_rank_points = (\n    SELECT MAX(winner_rank_points) \n    FROM matches\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the name and birth date of the player with the most winner rank points across all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "result": "hand, count(*) as num_players\n FROM players\n GROUP BY hand;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of players for each hand type. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "result": "hand, COUNT(*) as count \n FROM players \n GROUP BY hand;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players are there for each hand type? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2, line_3 FROM addresses",
        "question": "what are all the addresse lines?",
        "result": "line_1, line_2, line_3 FROM Addresses;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### what are all the addresse lines? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2, line_3 FROM addresses",
        "question": "Give me the three addresse lines?",
        "result": "line_1, line_2, line_3 \n FROM Addresses",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Give me the three addresse lines? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT count(*) FROM show where If_first_show = 'T'",
        "question": "How many first shows?",
        "result": "COUNT(*) FROM show WHERE If_first_show=1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### How many first shows? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT count(*) FROM show where If_first_show = 'T'",
        "question": "Count the number of first show.",
        "result": "COUNT(If_first_show) FROM show WHERE If_first_show=1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of first show. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor ORDER BY birthday desc",
        "question": "List the names of conductors in ascending order of age.",
        "result": "Name FROM conductor ORDER BY birthday ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of conductors in ascending order of age. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor ORDER BY birthday desc",
        "question": "What are the names of conductors, ordered by age?",
        "result": "Name FROM conductor ORDER BY birthday ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors, ordered by age? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
        "question": "What are the names of american conductors?",
        "result": "Name FROM conductor WHERE Nationality = 'American'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of american conductors? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
        "question": "Return the names of american conductors.",
        "result": "Name FROM conductor\nWHERE Nationality = 'american'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of american conductors. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
        "question": "What are the record companies of orchestras in the order of founded years from oldest to latest?",
        "result": "orchestra.Record_Company \nFROM \norchestra \nORDER BY orchestra.Year_of_Founded ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the record companies of orchestras in the order of founded years from oldest to latest? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
        "question": "Return the record companies of orchestras, sorted by the founded year from oldest to latest.",
        "result": "Orchestra.Record_Company \nFROM Orchestra \nORDER BY Orchestra.Year_of_Founded ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the record companies of orchestras, sorted by the founded year from oldest to latest. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW where If_first_show = 'F'",
        "question": "What is the average attendance of non-first shows?",
        "result": "AVG(Attendance) FROM show \nINNER JOIN performance ON show.Performance_ID = performance.Performance_ID \nWHERE If_first_show = 0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the average attendance of non-first shows? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW where If_first_show = 'F'",
        "question": "Return the average attendance across all non-first shows.",
        "result": "AVG(Attendance) FROM show \nWHERE If_first_show = 0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the average attendance across all non-first shows. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "result": "MAX(Share), MIN(Share) FROM performance WHERE Type != \"Live final\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the maximum and minimum share of performances whose type is not \"Live final\". \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "result": "\n\nMAX(Share), MIN(Share)\nFROM performance\nWHERE Type != 'Live final';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the maximum and minimum shares for performances that do not have the type \"Live final\". \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "result": "COUNT(DISTINCT Nationality) FROM conductor;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### How many different nationalities do conductors have? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "result": "COUNT(DISTINCT Nationality) FROM conductor;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of different nationalities of conductors. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor ORDER BY birthday DESC",
        "question": "List names of conductors in ascending order of age.",
        "result": "Name FROM conductor ORDER BY birthday ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List names of conductors in ascending order of age. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor ORDER BY birthday DESC",
        "question": "What are the names of conductors, sorted ascending by age?",
        "result": "Name FROM conductor ORDER BY birthday ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors, sorted ascending by age? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the longest work.",
        "result": "Name\nFROM conductor\nWHERE Year_of_Work = (\n    SELECT MAX(Year_of_Work)\n    FROM conductor\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the name of the conductor with the longest work. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the longest?",
        "result": "Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the name of the conductor who has worked the longest? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "result": "conductor.Name, orchestra.Orchestra \n FROM conductor \n INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of conductors and the orchestras they have conducted. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "result": "conductor.Name, orchestra.Orchestra\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors as well as the corresonding orchestras that they have conducted? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "result": "conductor.Name\nFROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Name\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of conductors that have conducted more than one orchestras. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "result": "conductor.Name \nFROM conductor \nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Name \nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors who have conducted at more than one orchestra? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "result": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Conductor_ID\nORDER BY COUNT(Orchestra_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the name of the conductor that has conducted the most number of orchestras. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "result": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Conductor_ID\nORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the name of the conductor who has conducted the most orchestras? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded asc limit 1",
        "question": "Please show the name of the conductor who has conducted the oldest orchestras.",
        "result": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nORDER BY orchestra.Year_of_Founded ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the name of the conductor who has conducted the oldest orchestras. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID order by Year_of_Founded  desc limit 1",
        "question": "What are the names of conductors who have conducted the latest orchestras?",
        "result": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nWHERE orchestra.Year_of_Founded = (\n    SELECT MAX(Year_of_Founded)\n    FROM orchestra\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors who have conducted the latest orchestras? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "result": "Record_Company, COUNT(DISTINCT Orchestra_ID) \n FROM orchestra \n GROUP BY Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "result": "Record_Company, COUNT(DISTINCT Orchestra_ID) \n FROM orchestra \n GROUP BY Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### How many orchestras does each record company manage? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded desc",
        "question": "Please show the record formats of orchestras in ascending order of age.",
        "result": "Orchestra_ID, Orchestra, Conductor_ID, Record_Company, Year_of_Founded, Major_Record_Format\nFROM orchestra\nORDER BY Year_of_Founded ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the record formats of orchestras in ascending order of age. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra ORDER BY Year_of_Founded desc",
        "question": "What are the major record formats of orchestras, sorted by their age?",
        "result": "Major_Record_Format\nFROM orchestra\nORDER BY Year_of_Founded ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the major record formats of orchestras, sorted by their age? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc LIMIT 1",
        "question": "List the record company shared by the oldest orchestras.",
        "result": "orchestra.Record_Company \nFROM orchestra \nWHERE orchestra.Year_of_Founded = (SELECT MIN(Year_of_Founded) FROM orchestra)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the record company shared by the oldest orchestras. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded desc LIMIT 1",
        "question": "What is the record company used by the newest orchestras?",
        "result": "Orchestra.Record_Company \nFROM Orchestra \nWHERE Orchestra.Year_of_Founded = (SELECT MAX(Year_of_Founded) FROM Orchestra)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the record company used by the newest orchestras? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "result": "Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of orchestras that have no performance. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "result": "Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the orchestras that do not have any performances? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <=  2003",
        "question": "Show the record companies shared by orchestras founded before or in 2003.",
        "result": "Record_Company\nFROM orchestra\nWHERE Year_of_Founded <= 2003",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the record companies shared by orchestras founded before or in 2003. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >=  2003",
        "question": "What are the record companies that are used by both orchestras founded after or in 2003?",
        "result": "Record_Company \nFROM orchestra \nWHERE Year_of_Founded >= 2003 \nINTERSECT \nSELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded >= 2003",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the record companies that are used by both orchestras founded after or in 2003? \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT COUNT(*) FROM show WHERE Result  =  \"Glebe Park\" and If_first_show  =  \"T\"",
        "question": "Find the number of first shows in \"Glebe Park\".",
        "result": "COUNT(If_first_show) \nFROM show \nJOIN performance ON show.Performance_ID = performance.Performance_ID \nWHERE performance.Type = 'Glebe Park' AND If_first_show = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Find the number of first shows in \"Glebe Park\". \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT COUNT(*) FROM show WHERE Result  =  \"Glebe Park\" and If_first_show  =  \"T\"",
        "question": "Count the number of all first shows in \"Glebe Park\"",
        "result": "COUNT(*) \nFROM show \nJOIN performance ON show.Performance_ID = performance.Performance_ID \nWHERE performance.Type = 'Glebe Park' AND show.If_first_show = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of all first shows in \"Glebe Park\" \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID  =  T2.Performance_ID WHERE If_first_show = 'F' GROUP BY T2.Performance_ID HAVING COUNT(*)  >  1",
        "question": "Show the type in which performance that have given more than one non-first show.",
        "result": "performance.Type \nFROM performance \nJOIN (\n  SELECT Performance_ID \n  FROM show \n  WHERE If_first_show = 0 \n  GROUP BY Performance_ID \n  HAVING COUNT(*) > 1\n) AS multiple_shows ON performance.Performance_ID = multiple_shows.Performance_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the type in which performance that have given more than one non-first show. \n SELECT"
    },
    {
        "db_id": "new_orchestra",
        "query": "SELECT Type FROM performance AS T1 JOIN show AS T2 ON T1.Performance_ID  =  T2.Performance_ID Where If_first_show = 'F' GROUP BY T2.Performance_ID HAVING COUNT(*)  >  1",
        "question": "What are type of performances that have had more than one non-first show?",
        "result": "Type \nFROM performance \nWHERE Performance_ID IN (\n    SELECT Performance_ID \n    FROM show \n    WHERE If_first_show = 0 \n    GROUP BY Performance_ID \n    HAVING COUNT(*) > 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,birthday,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are type of performances that have had more than one non-first show? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "result": "state \nFROM Owners \nWHERE state IN (SELECT state FROM Professionals)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which states have both owners and professionals living there? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "result": "DISTINCT Owners.state \nFROM Owners \nINNER JOIN Professionals \nON Owners.state = Professionals.state",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the states where both owners and professionals live. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "result": "AVG(age) \nFROM Dogs \nWHERE dog_id IN (\n  SELECT dog_id \n  FROM Treatments\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of the dogs who have gone through any treatments? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "result": "AVG(age) \nFROM Dogs \nWHERE dog_id IN \n    (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the average age of the dogs who went through treatments. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "result": "professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana' OR professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "result": "professional_id, last_name, cell_number \nFROM Professionals \nWHERE state = 'Indiana' OR professional_id IN (\n   SELECT professional_id \n   FROM Treatments \n   GROUP BY professional_id \n   HAVING COUNT(*) > 2 \n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names.",
        "result": "Dogs.name \nFROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Dogs.dog_id \nHAVING SUM(Treatments.cost_of_treatment) <= 1000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs have not cost their owner more than 1000 for treatment? List the dog names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner spent more than 1000 for treatment?",
        "result": "Dogs.name \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.cost_of_treatment > 1000 \nGROUP BY Dogs.name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the names of the dogs for which the owner spent more than 1000 for treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "result": "DISTINCT first_name FROM (\n  SELECT first_name FROM Owners\n  UNION SELECT first_name FROM Professionals\n) WHERE first_name NOT IN (\n  SELECT name FROM Dogs\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which first names are used for professionals or owners but are not used as dog names? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "result": "DISTINCT first_name \nFROM \n   (SELECT first_name FROM Owners \n    UNION SELECT first_name FROM Professionals) AS owners_and_profs \nWHERE first_name NOT IN (SELECT name FROM Dogs);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the first names that are used for professionals or owners but are not used as dog names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  first_name , last_name FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, and name.",
        "result": "Professionals.professional_id, Professionals.first_name, Professionals.last_name\nFROM Professionals\nWHERE NOT EXISTS (\n    SELECT 1 FROM Treatments\n    WHERE Treatments.professional_id = Professionals.professional_id\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professional did not operate any treatment on dogs? List the professional's id, and name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  first_name , last_name FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, and name of the professionals who did not perform any treatment on dogs.",
        "result": "professionals.professional_id, professionals.first_name \n FROM professionals\n WHERE professionals.professional_id NOT IN \n   (SELECT DISTINCT professional_id FROM treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Give me the id, and name of the professionals who did not perform any treatment on dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, and name.",
        "result": "Owners.owner_id, Owners.first_name, Owners.last_name\nFROM Owners\nWHERE Owners.owner_id = (\n    SELECT Dogs.owner_id\n    FROM Dogs\n    GROUP BY Dogs.owner_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owner owns the most dogs? List the owner id, and name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id and name of the owner who has the most dogs.",
        "result": "Owners.owner_id, CONCAT(Owners.first_name, ' ', Owners.last_name) AS owner_name\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nGROUP BY Owners.owner_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Return the owner id and name of the owner who has the most dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, home and phone number.",
        "result": "professional_id, home_phone, cell_number \nFROM Professionals \nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals have done at least two treatments? List the professional's id, home and phone number. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, home and phone number of the professionals who have performed two or more treatments?",
        "result": "professional_id, home_phone, cell_number \nFROM Professionals \nWHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id, home and phone number of the professionals who have performed two or more treatments? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code where abandoned_yn = 1 GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most abandoned dogs?",
        "result": "Breeds.breed_name\nFROM Breeds\nJOIN Dogs ON Breeds.breed_code = Dogs.breed_code\nWHERE Dogs.abandoned_yn = 'Y'\nGROUP BY Breeds.breed_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the name of the breed with the most abandoned dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code where abandoned_yn = 1 GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most abandoned dogs have? Give me the breed name.",
        "result": "Breeds.breed_name \nFROM Dogs \nINNER JOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nWHERE abandoned_yn = 'Y' \nGROUP BY Breeds.breed_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which breed do the most abandoned dogs have? Give me the breed name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "result": "Owners.owner_id, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "result": "Owners.owner_id, Owners.last_name \nFROM Owners \nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Owners.owner_id \nORDER BY SUM(Treatments.cost_of_treatment) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "result": "Treatment_Types.treatment_type_description \nFROM \nTreatments \nINNER JOIN Treatment_Types \nON Treatments.treatment_type_code = Treatment_Types.treatment_type_code \nGROUP BY \nTreatments.treatment_type_code \nORDER BY \nSUM(Treatments.cost_of_treatment) ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the description of the treatment type that costs the least money in total? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "result": "Treatment_Types.treatment_type_description\nFROM Treatment_Types\nINNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code\nGROUP BY Treatment_Types.treatment_type_code\nORDER BY SUM(Treatments.cost_of_treatment) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Give me the description of the treatment type whose total cost is the lowest. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "result": "Owners.owner_id, Owners.zip_code \nFROM Owners \nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nINNER JOIN Charges ON Dogs.size_code = Charges.charge_id \nGROUP BY Owners.owner_id \nORDER BY SUM(Charges.charge_amount) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "result": "Owners.owner_id, Owners.zip_code \nFROM Owners \nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Owners.owner_id \nORDER BY SUM(Treatments.cost_of_treatment) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and name.",
        "result": "professional_id, first_name, last_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals have done at least two types of treatments? List the professional id and name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.home_phone ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and home and phone number of the professionals who operate two or more types of treatments.",
        "result": "professional_id, home_phone, cell_number\nFROM Professionals\nWHERE professional_id IN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(DISTINCT treatment_type_code) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and home and phone number of the professionals who operate two or more types of treatments. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the name of the professionals who have done treatment with cost below average?",
        "result": "professionals.first_name, professionals.last_name \nFROM professionals \nJOIN treatments ON professionals.professional_id = treatments.professional_id \nWHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the name of the professionals who have done treatment with cost below average? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me their names.",
        "result": "Professionals.first_name, Professionals.last_name\nFROM Professionals\nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals have operated a treatment that costs less than the average? Give me their names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the name of the professional who operated it.",
        "result": "Treatments.date_of_treatment, Professionals.first_name || ' ' || Professionals.last_name AS professional_name\n FROM Treatments \n JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the date of each treatment, together with the name of the professional who operated it. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name , T2.last_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's name of each treatment?",
        "result": "Treatments.date_of_treatment, Professionals.first_name || ' ' || Professionals.last_name AS operating_professional_name \nFROM Treatments \nINNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the date and the operating professional's name of each treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "result": "Treatments.cost_of_treatment, Treatment_Types.treatment_type_description\n FROM Treatments\n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the cost of each treatment and the corresponding treatment type description. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "result": "Treatments.cost_of_treatment, Treatment_Types.treatment_type_description\n FROM Treatments \n JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the cost and treatment type description of each treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's name, and the size of his for her dog.",
        "result": "Owners.first_name, Owners.last_name, Sizes.size_description\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nINNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List each owner's name, and the size of his for her dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's name, and the size of their dog?",
        "result": "Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nINNER JOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are each owner's name, and the size of their dog? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's names and the dogs's name.",
        "result": "Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List pairs of the owner's names and the dogs's name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T1.last_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's name and their dogs's name?",
        "result": "Owners.first_name, Owners.last_name, Dogs.name\nFROM Owners\nINNER JOIN Dogs\nON Owners.owner_id = Dogs.owner_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are each owner's name and their dogs's name? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "result": "Dogs.name, Treatments.date_of_treatment\nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Breeds.breed_name = (\n    SELECT breed_name FROM Breeds \n    JOIN Dogs ON Breeds.breed_code = Dogs.breed_code \n    GROUP BY Breeds.breed_code \n    HAVING COUNT(DISTINCT Dogs.dog_id) = (\n        SELECT MIN(dog_count) FROM (\n            SELECT COUNT(DISTINCT Dogs.dog_id) as dog_count \n            FROM Dogs \n            GROUP BY Dogs.breed_code\n        )\n    )\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the names of the dogs of the rarest breed and the treatment dates of them. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "result": "Dogs.name, Treatments.date_of_treatment\n FROM Dogs\n JOIN Breeds ON Dogs.breed_code = Breeds.breed_code\n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n WHERE Breeds.breed_name IN (\n     SELECT breed_name \n     FROM Breeds \n     GROUP BY breed_name \n     HAVING COUNT(*) = 1\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs are of the rarest breed? Show their names and treatment dates. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in VA? List the owner's first name and the dog's name.",
        "result": "Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'VA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs are owned by someone who lives in VA? List the owner's first name and the dog's name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in VA and the names of dogs they own.",
        "result": "Owners.first_name, Dogs.name\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Owners.state = 'VA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the first names of owners living in VA and the names of dogs they own. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What is the treatment date from dog arriving to departing?",
        "result": "(DATE(date_departed) - DATE(date_arrived)) AS treatment_duration\nFROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the treatment date from dog arriving to departing? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the dog treatment period from arriving to departing date.",
        "result": "D.dog_id, D.date_arrived, D.date_departed, \n   (JulianDay(D.date_departed) - JulianDay(D.date_arrived)) AS treatment_period\nFROM Dogs D",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the dog treatment period from arriving to departing date. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "result": "last_name \nFROM Owners \nWHERE owner_id = (\n  SELECT owner_id \n  FROM Dogs \n  WHERE date_of_birth = (\n    SELECT MIN(date_of_birth) \n    FROM Dogs\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the last name of the owner owning the youngest dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "result": "Owners.last_name\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Who owns the youngest dog? Give me his or her last name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of HI or WI.",
        "result": "email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the emails of the professionals who live in the state of HI or WI. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of HI or WI?",
        "result": "email_address \nFROM Professionals \nWHERE state IN ('HI', 'WI')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the emails of the professionals living in either the state of HI or WI? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1",
        "question": "What are the arriving date and the departing date of all the abandoned dogs?",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the abandoned dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs where abandoned_yn = 1",
        "question": "List the arrival date and the departure date for all the abandoned dogs.",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the abandoned dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "result": "COUNT(DISTINCT dog_id) FROM Treatments;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many dogs went through any treatments? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "result": "COUNT(DISTINCT dog_id) \nFROM Treatments;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Count the number of dogs that went through a treatment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "result": "COUNT(DISTINCT professional_id) \nFROM Treatments;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many professionals have performed any treatment to dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "result": "COUNT(DISTINCT professional_id) FROM Treatments;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the number of professionals who have ever treated dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name , last_name FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her name.",
        "result": "first_name, last_name \nFROM Professionals \nWHERE city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals live in a city containing the substring 'West'? List his or her name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name , last_name FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the name of the professionals living in a city that contains the substring 'West'.",
        "result": "first_name, last_name \nFROM Professionals \nWHERE city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the name of the professionals living in a city that contains the substring 'West'. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name , last_name FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his name.",
        "result": "first_name, last_name \nFROM Owners \nWHERE state LIKE '%North%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owners live in the state whose name contains the substring 'North'? List his name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name , last_name FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the name of the owners living in a state whose name contains the substring 'North'.",
        "result": "first_name, last_name \nFROM Owners \nWHERE state LIKE '%North%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Return the name of the owners living in a state whose name contains the substring 'North'. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE abandoned_yn = 1 and age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many abandoned dogs have an age below the average?",
        "result": "COUNT(*) \nFROM Dogs \nWHERE abandoned_yn = 'Y' \nAND age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many abandoned dogs have an age below the average? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE abandoned_yn = 1 and age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of abandoned dogs of an age below the average.",
        "result": "COUNT(*) \nFROM Dogs \nWHERE abandoned_yn = 'Y' AND age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Count the number of abandoned dogs of an age below the average. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "result": "MAX(cost_of_treatment) FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How much does the most recent treatment cost? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "result": "cost_of_treatment \n FROM Treatments \n ORDER BY date_of_treatment DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show me the cost of the most recently performed treatment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE abandoned_yn = 1 and dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many abandoned dogs have not gone through any treatment?",
        "result": "COUNT(*) FROM Dogs\nWHERE abandoned_yn = 'Y' AND dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many abandoned dogs have not gone through any treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "Tell me the number of dogs that have received any treatment.",
        "result": "COUNT(DISTINCT Dogs.dog_id) FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the number of dogs that have received any treatment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs where abandoned_yn = 1 )",
        "question": "How many owners temporarily do not have any abandoned dogs?",
        "result": "COUNT(DISTINCT Owners.owner_id)\nFROM Owners\nLEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id AND Dogs.abandoned_yn = 'Y'\nWHERE Dogs.owner_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many owners temporarily do not have any abandoned dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs where abandoned_yn = 1 )",
        "question": "Find the number of owners who do not own any abandoned dogs at this moment.",
        "result": "COUNT(DISTINCT Owners.owner_id)\nFROM Owners\nLEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.abandoned_yn != 'Y' OR Dogs.abandoned_yn IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the number of owners who do not own any abandoned dogs at this moment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "result": "COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many professionals did not operate any treatment on dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "result": "COUNT(*) FROM Professionals \nWHERE professional_id NOT IN \n(SELECT DISTINCT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the number of professionals who have not treated any dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the abandoned dogs? 1 stands for yes, and 0 stands for no.",
        "result": "Dogs.name, Dogs.age, Dogs.weight\nFROM Dogs\nWHERE Dogs.abandoned_yn = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the dog name, age and weight of the abandoned dogs? 1 stands for yes, and 0 stands for no. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "result": "Dogs.name, Dogs.age, Dogs.weight\nFROM Dogs\nWHERE Dogs.abandoned_yn = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs where abandoned_yn = 1",
        "question": "What is the average age of all the abandoned dogs?",
        "result": "AVG(age) \nFROM Dogs \nWHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the abandoned dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs where abandoned_yn = 1",
        "question": "Compute the average age of all the abandoned dogs.",
        "result": "AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the abandoned dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "result": "MAX(age) FROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "result": "MAX(age) FROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "result": "charge_type, charge_amount \n FROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How much does each charge type costs? List both charge type and amount. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "result": "charge_type, charge_amount \n FROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List each charge type and its amount. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "result": "MAX(charge_amount) \nFROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How much does the most expensive charge type costs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "result": "MAX(charge_amount) FROM Charges;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the charge amount of the most expensive charge type? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address , first_name , last_name FROM professionals",
        "question": "List the email and name of all the professionals.",
        "result": "email_address, first_name || ' ' || last_name AS name\n FROM Professionals;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email and name of all the professionals. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address , first_name , last_name FROM professionals",
        "question": "What are the email, and name of each professional?",
        "result": "professionals.email_address, professionals.first_name, professionals.last_name\nFROM professionals",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email, and name of each professional? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "result": "Breeds.breed_name, Sizes.size_description\n FROM Breeds, Sizes\n",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are all the possible breed type and size type combinations? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code\nFROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the name of all the professionals along with the description of the treatment they have done.",
        "result": "Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nINNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the name of all the professionals along with the description of the treatment they have done. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's name and description of the treatment they have performed?",
        "result": "Professionals.first_name, Professionals.last_name, Treatment_Types.treatment_type_description\nFROM Professionals \nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nINNER JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are each professional's name and description of the treatment they have performed? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "result": "COUNT(*) FROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### How many singers are there? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "result": "COUNT(Singer_ID) FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year desc",
        "question": "List the name of singers in ascending order of age.",
        "result": "Name FROM singer ORDER BY Birth_Year ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers in ascending order of age. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year desc",
        "question": "What are the names of singers ordered by ascending age?",
        "result": "Name FROM singer ORDER BY Birth_Year ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of singers ordered by ascending age? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "result": "Birth_Year, Citizenship \nFROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "result": "Birth_Year, Citizenship\nFROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers who is not French.",
        "result": "Name FROM singer WHERE Citizenship != 'French';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers who is not French. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French?",
        "result": "Name \nFROM singer \nWHERE Citizenship != 'French'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers who are not French? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948",
        "question": "Show the name of singers whose birth year is earlier than or in 1948?",
        "result": "Name FROM singer WHERE Birth_Year <= 1948;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the name of singers whose birth year is earlier than or in 1948? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  <=  1948",
        "question": "What are the names of the singers whose birth years are earlier than or in 1948?",
        "result": "Name FROM singer WHERE Birth_Year <= 1948;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers whose birth years are earlier than or in 1948? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1",
        "question": "What is the name of the singer with the youngest age?",
        "result": "Name FROM singer ORDER BY Birth_Year ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the singer with the youngest age? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Birth_Year DESC LIMIT 1",
        "question": "What is the name of the singer who is the youngest?",
        "result": "Name FROM singer ORDER BY Birth_Year DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the singer who is the youngest? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "result": "Citizenship, COUNT(*) \nFROM singer \nGROUP BY Citizenship;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show different citizenship of singers and the number of singers of each citizenship. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "result": "Citizenship, COUNT(*) \nFROM singer \nGROUP BY Citizenship;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### For each citizenship, how many singers are from that country? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "result": "Citizenship\nFROM singer\nGROUP BY Citizenship\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Please show the most common citizenship of singers. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the msot common singer citizenship?",
        "result": "Citizenship \nFROM singer \nGROUP BY Citizenship \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the msot common singer citizenship? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the highest net worth of singers of each citizenship.",
        "result": "Citizenship, MAX(Net_Worth_Millions)\nFROM singer\nGROUP BY Citizenship;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show different citizenships and the highest net worth of singers of each citizenship. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the highest net worth?",
        "result": "Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### For each citizenship, what is the highest net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song order by Sales desc limit 1",
        "question": "Show the names of the highest sales songs.",
        "result": "song.Title\nFROM song\nORDER BY song.Sales DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of the highest sales songs. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Title FROM song order by Sales desc limit 1",
        "question": "What are names of the highest sales songs?",
        "result": "Title FROM song ORDER BY Sales DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are names of the highest sales songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "result": "DISTINCT singer.Name\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show distinct names of singers that have songs with sales more than 300000. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "result": "Name FROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### what are the different names of the singers that have sales more than 300000? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "result": "Name FROM singer \n WHERE Singer_ID IN \n (SELECT Singer_ID FROM song \n GROUP BY Singer_ID \n HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "result": "Name FROM singer\nWHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name ,  max(T2.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the max highest position of their songs.",
        "result": "singer.Name, MAX(song.Highest_Position)\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers and the max highest position of their songs. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name ,  max(T2.Highest_Position) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the maximum highest position for their songs?",
        "result": "singer.Name, MAX(song.Highest_Position)\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### For each singer name, what is the maximum highest position for their songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "result": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers that do not have any song. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "result": "singer.Name \nFROM singer \nLEFT JOIN song \nON singer.Singer_ID = song.Singer_ID \nWHERE song.Song_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the sname of every sing that does not have any song? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945",
        "question": "Show the citizenship shared by singers with birth year before or in 1945.",
        "result": "Citizenship \nFROM singer \nWHERE Birth_Year <= 1945",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the citizenship shared by singers with birth year before or in 1945. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <=  1945",
        "question": "What are the citizenships that are shared by singers with a birth year before or in 1945?",
        "result": "Citizenship FROM singer WHERE Birth_Year <= 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the citizenships that are shared by singers with a birth year before or in 1945? \n SELECT"
    }
]
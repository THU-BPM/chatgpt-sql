[
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers do we have?",
        "result": "COUNT(*) FROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many singers do we have? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of singers?",
        "result": "COUNT(*) FROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "result": "Name, state, Age \nFROM singer \nORDER BY Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show name, country, age for all singers ordered by age from the oldest to the youngest. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "result": "Name, state, Age FROM singer ORDER BY Age DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names, countries, and ages for every singer in descending order of age? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "result": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE state='France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum age of all singers from France? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "result": "AVG(Age), MIN(Age), MAX(Age)\nFROM singer\nWHERE state = 'French'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum age for all French singers? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the release year of the song by the youngest singer.",
        "result": "singer.Name, singer.publish_year \nFROM singer \nWHERE singer.Age = (SELECT MIN(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and the release year of the song by the youngest singer. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "result": "tune_name, publish_year\nFROM singer\nWHERE Age = (\n    SELECT MIN(Age)\n    FROM singer\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names and release years for all the songs of the youngest singer? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct countries where singers above age 20 are from?",
        "result": "DISTINCT state FROM singer WHERE Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all distinct countries where singers above age 20 are from? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are  the different countries with singers above age 20?",
        "result": "state FROM singer WHERE Age > 20 GROUP BY state",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are  the different countries with singers above age 20? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all countries and the number of singers in each country.",
        "result": "singer.state, COUNT(singer.Singer_ID)\nFROM singer\nGROUP BY singer.state",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all countries and the number of singers in each country. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many singers are from each country?",
        "result": "state, COUNT(*) FROM singer GROUP BY state;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many singers are from each country? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all song names by singers above the average age.",
        "result": "tune_name \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all song names by singers above the average age. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the song names by singers who are older than average?",
        "result": "tune_name\nFROM singer\nWHERE Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all the song names by singers who are older than average? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "result": "whereabouts, Name \nFROM stadium \nWHERE stadium_volume BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "result": "whereabouts, Name \nFROM stadium \nWHERE stadium_volume BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select max(capacity), average from stadium",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "result": "MAX(stadium_volume), AVG(stadium_volume) FROM stadium;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the maximum capacity and the average of all stadiums ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(capacity) ,  max(capacity) from stadium",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "result": "AVG(stadium_volume), MAX(stadium_volume) FROM stadium;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and maximum capacities for all stadiums ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "result": "stadium.Name, stadium.stadium_volume \n FROM stadium \n WHERE stadium.avg = (SELECT MAX(avg) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "result": "Name, stadium_volume \nFROM stadium \nWHERE avg = (SELECT MAX(avg) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts are there in year 2014 or 2015?",
        "result": "COUNT(*) FROM concert WHERE Year=2014 OR Year=2015",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many concerts are there in year 2014 or 2015? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many concerts occurred in 2014 or 2015?",
        "result": "COUNT(*) FROM concert WHERE Year IN (2014, 2015);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many concerts occurred in 2014 or 2015? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "result": "stadium.Name, COUNT(concert.concert_ID) \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nGROUP BY stadium.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and the number of concerts in each stadium. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many concerts play there?",
        "result": "stadium.Name, COUNT(concert.concert_ID)\nFROM stadium\nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY stadium.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### For each stadium, how many concerts play there? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "result": "stadium.Name, stadium.stadium_volume\nFROM stadium\nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nWHERE concert.Year >= 2014\nGROUP BY stadium.Name, stadium.stadium_volume\nORDER BY COUNT(concert.concert_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and capacity with most number of concerts in year 2014 or after. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "result": "stadium.Name, stadium.stadium_volume\nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year > 2013\nGROUP BY stadium.Stadium_ID\nORDER BY COUNT(concert.concert_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity of the stadium with the most concerts after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of concerts?",
        "result": "Year, COUNT(*) AS num_concerts \nFROM concert \nGROUP BY Year \nORDER BY num_concerts DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Which year has most number of concerts? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the year that had the most concerts?",
        "result": "Year \nFROM concert \nGROUP BY Year \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the year that had the most concerts? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any concert.",
        "result": "stadium.Name \nFROM \nstadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE \nconcert.concert_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium names without any concert. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any concerts?",
        "result": "stadium.Name FROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.concert_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the stadiums without any concerts? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "result": "state\nFROM singer\nWHERE Age > 40\nAND Singer_ID IN (SELECT Singer_ID FROM singer_in_concert \n                  INNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID\n                  WHERE Year = strftime('%Y', 'now'))\nINTERSECT\nSELECT state FROM singer WHERE Age < 30",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show countries where a singer above age 40 and a singer below 30 are from. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "result": "Name \nFROM stadium \nWHERE Stadium_ID NOT IN \n    (SELECT Stadium_ID FROM concert WHERE Year = 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show names for all stadiums except for stadiums having a concert in year 2014. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "result": "Name FROM stadium\nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID FROM concert\n    WHERE Year = 2014\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of all stadiums that did not have a concert in 2014? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "result": "concert.show_designation, concert.subject, COUNT(singer_in_concert.Singer_ID) AS num_singers \nFROM concert \nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert.concert_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and theme for all concerts and the number of singers in each concert. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "question": "What are the names , themes , and number of singers for every concert ?",
        "result": "concert.show_designation, concert.subject, COUNT(singer_in_concert.Singer_ID) \nFROM concert \nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert.concert_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names , themes , and number of singers for every concert ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of concerts for each singer.",
        "result": "singer.Name, COUNT(concert.concert_ID)\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nGROUP BY singer.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List singer names and number of concerts for each singer. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of concerts for each person?",
        "result": "singer.Name, COUNT(singer_in_concert.concert_ID) \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nGROUP BY singer.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers and number of concerts for each person? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all singer names in concerts in year 2014.",
        "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "result": "singer.Name, singer.state\nFROM singer\nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nINNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID\nINNER JOIN stadium ON stadium.Stadium_ID = concert.Stadium_ID\nWHERE tune_name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having 'Hey' in its name? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "result": "singer.Name, singer.state \nFROM singer \nINNER JOIN tune ON singer.Singer_ID = tune.Singer_ID \nWHERE tune.tune_name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "result": "Name, whereabouts \nFROM stadium \nWHERE Stadium_ID IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE Year = 2014 \n  INTERSECT \n  SELECT Stadium_ID \n  FROM concert \n  WHERE Year = 2015\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "result": "stadium.Name, stadium.whereabouts \nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year = 2014 \nAND stadium.Stadium_ID IN (SELECT concert.Stadium_ID FROM concert WHERE Year = 2015)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "result": "COUNT(*) FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE stadium_volume = (SELECT MAX(stadium_volume) FROM stadium));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Find the number of concerts happened in the stadium with the highest capacity . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "result": "COUNT(concert_ID) \nFROM concert \nWHERE Stadium_ID IN (\n    SELECT Stadium_ID \n    FROM stadium \n    WHERE stadium_volume = (\n        SELECT MAX(stadium_volume) \n        FROM stadium\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,whereabouts,Name,stadium_volume,Highest,Lowest,avg)\n;# singer(Singer_ID,Name,state,tune_name,publish_year,Age,Is_male)\n;# concert(concert_ID,show_designation,subject,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the number of concerts that occurred in the stadium with the largest capacity ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of pets whose weight is heavier than 10.",
        "result": "COUNT(*) FROM Pets WHERE heaviness > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the number of pets whose weight is heavier than 10. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many pets have a greater weight than 10?",
        "result": "COUNT(*) FROM Pets WHERE heaviness > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### How many pets have a greater weight than 10? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest dog.",
        "result": "MIN(heaviness) \nFROM Pets \nWHERE genus = 'dog' \nAND how_old = (SELECT MIN(how_old) FROM Pets WHERE genus = 'dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the weight of the youngest dog. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest dog weigh?",
        "result": "MIN(heaviness) FROM Pets WHERE genus='dog' AND how_old=(SELECT MIN(how_old) FROM Pets WHERE genus='dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### How much does the youngest dog weigh? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "result": "genus, MAX(heaviness)\nFROM Pets\nGROUP BY genus;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the maximum weight for each type of pet. List the maximum weight and pet type. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and type for each type of pet.",
        "result": "Pets.genus, MAX(Pets.heaviness) \nFROM Pets \nGROUP BY Pets.genus;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### List the maximum weight and type for each type of pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of pets owned by students who are older than 20.",
        "result": "COUNT(*) FROM Has_Pet\nINNER JOIN Student ON Has_Pet.StuID = Student.identity\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Student.Age > 20;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find number of pets owned by students who are older than 20. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many pets are owned by students that have an age greater than 20?",
        "result": "COUNT(PetID) \nFROM Has_Pet \nWHERE StuID IN (\n    SELECT identity \n    FROM Student \n    WHERE Age > 20\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### How many pets are owned by students that have an age greater than 20? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "result": "COUNT(*) \nFROM Has_Pet \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nINNER JOIN Student ON Has_Pet.StuID = Student.identity \nWHERE Pets.genus = 'dog' AND Student.sex = 'F';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the number of dog pets that are raised by female students (with sex F). \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many dog pets are raised by female students?",
        "result": "COUNT(*) FROM Has_Pet \nWHERE PetID IN (\n    SELECT PetID FROM Pets \n    WHERE genus='dog'\n) AND StuID IN (\n    SELECT identity FROM Student \n    WHERE information='female'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### How many dog pets are raised by female students? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct type of pets.",
        "result": "COUNT(DISTINCT genus) AS num_distinct_pet_types\nFROM Pets",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the number of distinct type of pets. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different types of pet are there?",
        "result": "COUNT(DISTINCT genus) FROM Pets",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### How many different types of pet are there? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the first name of students who have cat or dog pet.",
        "result": "Student.given_name\nFROM Student\nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.genus IN ('cat', 'dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the first name of students who have cat or dog pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "result": "Student.given_name\nFROM Student\nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.genus IN ('cat', 'dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What are the first names of every student who has a cat or dog as a pet? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "question": "Find the first name of students who have both cat and dog pets .",
        "result": "Student.given_name \nFROM Student \nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.genus = 'cat' AND Student.identity IN \n(SELECT StuID FROM Has_Pet WHERE PetID IN \n(SELECT PetID FROM Pets WHERE genus = 'dog'));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the first name of students who have both cat and dog pets . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "result": "Student.given_name \nFROM \n  Student \n  INNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID \n  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE \n  Pets.genus = 'cat' AND Student.identity IN (\n    SELECT \n      StuID \n    FROM \n      Has_Pet \n      INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE \n      Pets.genus = 'dog'\n  );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What are the students' first names who have both cats and dogs as pets? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a cat pet.",
        "result": "Student.department, Student.Age \nFROM Student \nWHERE Student.identity NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE genus = 'cat'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the major and age of students who do not have a cat pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "result": "Student.department, Student.Age\nFROM Student\nWHERE Student.identity NOT IN \n    (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.genus='cat')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What major is every student who does not own a cat as a pet, and also how old are they? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a cat pet.",
        "result": "Student.identity\nFROM Student\nWHERE Student.identity NOT IN \n    (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.genus='cat');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the id of students who do not have a cat pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own cats as pets?",
        "result": "Student.identity \nFROM Student \nWHERE Student.identity NOT IN \n    (SELECT StuID FROM Has_Pet \n     JOIN Pets ON Has_Pet.PetID = Pets.PetID \n     WHERE Pets.genus = 'cat')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What are the ids of the students who do not own cats as pets? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "result": "Student.given_name, Student.Age\nFROM Student\nJOIN Has_Pet ON Student.identity = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.genus = 'dog'\nAND Student.identity NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.genus = 'cat')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the first name and age of students who have a dog but do not have a cat as a pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "result": "Student.given_name\nFROM Student\nJOIN Has_Pet ON Student.identity = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.genus = 'dog' AND Student.identity NOT IN \n(SELECT Student.identity FROM Student\nJOIN Has_Pet ON Student.identity = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.genus = 'cat')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the first name of every student who has a dog but does not have a cat? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the type and weight of the youngest pet.",
        "result": "Pets.genus, Pets.heaviness \nFROM Pets \nWHERE Pets.how_old = (SELECT MIN(how_old) FROM Pets)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the type and weight of the youngest pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "result": "Pets.genus, Pets.heaviness\nFROM Pets\nWHERE Pets.how_old = (SELECT MIN(how_old) FROM Pets)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What type of pet is the youngest animal, and how much does it weigh? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "result": "Pets.PetID, Pets.heaviness\nFROM Pets\nWHERE Pets.how_old > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the id and weight of all pets whose age is older than 1. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every pet who is older than 1?",
        "result": "Pets.PetID, Pets.heaviness \nFROM Pets \nWHERE Pets.how_old > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the id and weight of every pet who is older than 1? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each type of pet.",
        "result": "Pets.genus, AVG(Student.Age) AS avg_age, MAX(Student.Age) AS max_age \n FROM Pets \n JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \n JOIN Student ON Has_Pet.StuID = Student.identity \n GROUP BY Pets.genus",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the average and maximum age for each type of pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet type?",
        "result": "Pets.genus, AVG(Student.Age) AS average_age, MAX(Student.Age) AS maximum_age \n FROM Pets \n INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \n INNER JOIN Student ON Has_Pet.StuID = Student.identity \n GROUP BY Pets.genus;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the average and maximum age for each pet type? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet type.",
        "result": "Pets.genus, AVG(Pets.heaviness) \nFROM Pets \nGROUP BY Pets.genus",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the average weight for each pet type. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each type of pet?",
        "result": "genus, AVG(heaviness)\nFROM Pets\nGROUP BY genus;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the average weight for each type of pet? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the first name and age of students who have a pet.",
        "result": "Student.given_name, Student.Age\nFROM Student\nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the first name and age of students who have a pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different first names and ages of the students who do have pets?",
        "result": "Student.given_name, Student.Age \n FROM Student \n JOIN Has_Pet ON Student.identity = Has_Pet.StuID \n JOIN Pets ON Has_Pet.PetID = Pets.PetID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What are the different first names and ages of the students who do have pets? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the pet owned by student whose last name is ‘Smith’.",
        "result": "Has_Pet.PetID \nFROM Has_Pet \nINNER JOIN Student ON Has_Pet.StuID = Student.identity \nWHERE Student.surname = 'Smith'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the id of the pet owned by student whose last name is ‘Smith’. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "result": "Pets.PetID \nFROM \nStudent \nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE \nStudent.surname = 'Smith'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the id of the pet owned by the student whose last name is 'Smith'? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of pets for each student who has any pet and student id.",
        "result": "Student.identity, COUNT(Has_Pet.PetID)\n FROM Student \n JOIN Has_Pet ON Student.identity = Has_Pet.StuID \n GROUP BY Student.identity",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the number of pets for each student who has any pet and student id. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "result": "Student.identity, COUNT(Has_Pet.PetID) \nFROM Student \nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID \nGROUP BY Student.identity",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### For students who have pets , how many pets does each student have ? list their ids instead of names . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the first name and gender of student who have more than one pet.",
        "result": "Student.given_name, Pets.genus \nFROM Student \nJOIN Has_Pet ON Student.identity = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nGROUP BY Student.identity \nHAVING COUNT(Has_Pet.PetID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the first name and gender of student who have more than one pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "result": "Student.given_name, Pets.genus \nFROM Student \nJOIN Has_Pet ON Student.identity = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nGROUP BY Student.identity \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the first name and gender of the all the students who have more than one pet? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the last name of the student who has a cat that is age 3.",
        "result": "Student.surname\nFROM Student\nINNER JOIN Has_Pet ON Student.identity = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.genus = 'cat' AND Pets.how_old = 3\nORDER BY Student.surname DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the last name of the student who has a cat that is age 3. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "result": "Student.surname \nFROM Student \nJOIN Has_Pet ON Student.identity = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.genus = 'cat' AND Pets.how_old = 3 \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the last name of the student who has a cat that is 3 years old? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "Find the average age of students who do not have any pet .",
        "result": "AVG(Age) \nFROM Student \nWHERE identity NOT IN (SELECT StuID FROM Has_Pet)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### Find the average age of students who do not have any pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "question": "What is the average age for all students who do not own any pets ?",
        "result": "AVG(Age) \nFROM Student \nWHERE identity NOT IN (\n  SELECT StuID FROM Has_Pet\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(information,surname,given_name,Age,identity,department,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,genus,how_old,heaviness)\n.# \n ### What is the average age for all students who do not own any pets ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "result": "COUNT(*) FROM continents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many continents are there? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "result": "COUNT(*) FROM continents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of continents? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "result": "continents.ContId, continents.Continent, COUNT(countries.CountryId) as NumOfCountries\n FROM continents\n INNER JOIN countries ON continents.ContId = countries.mainland\n GROUP BY continents.ContId, continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many countries does each continent have? List the continent id, continent name and the number of countries. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many countries it has?",
        "result": "Continents.ContId, Continents.Continent, COUNT(countries.CountryId) AS num_countries \n FROM Continents \n LEFT JOIN countries ON Continents.ContId = countries.mainland \n GROUP BY Continents.ContId, Continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### For each continent, list its id, name, and how many countries it has? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries are listed?",
        "result": "COUNT(*) FROM countries;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many countries are listed? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "result": "COUNT(*) FROM countries;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many countries exist? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "result": "car_makers.Id, car_makers.complete_name, COUNT(model_list.ModelId) AS number_of_models\nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.manufacturer\nGROUP BY car_makers.Id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many models does each car maker produce? List maker full name, id and the number. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "result": "car_makers.Id, car_makers.complete_name, COUNT(model_list.ModelId)\nFROM car_makers\nLEFT JOIN model_list ON car_makers.Id = model_list.manufacturer\nGROUP BY car_makers.Id, car_makers.complete_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the full name of each car maker, along with its id and how many models it produces? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the car has the minimum horsepower?",
        "result": "model_list.model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.version = cars_data.Id \nWHERE cars_data.HP = (\n    SELECT MIN(Hp) \n    FROM cars_data\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which model of the car has the minimum horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "result": "model_list.Manufacturer, model_list.Style \nFROM model_list \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.HP = (SELECT MIN(HP) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the model of the car with the smallest amount of horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the car whose weight is below the average weight.",
        "result": "model_list.ModelId, model_list.manufacturer, model_list.style\nFROM model_list\nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.heaviness < (SELECT AVG(heaviness) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Find the model of the car whose weight is below the average weight. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the car with a weight smaller than the average?",
        "result": "ModelId\nFROM model_list\nWHERE manufacturer IN \n    (SELECT creator \n     FROM car_makers \n     WHERE heaviness < (SELECT AVG(heaviness) FROM car_makers)\n    )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the model for the car with a weight smaller than the average? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "result": "car_makers.creator \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.manufacturer \nINNER JOIN car_names ON model_list.ModelId = car_names.MakeId \nINNER JOIN cars_data ON car_names.version = cars_data.Id \nWHERE cars_data.Year = 1970;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Find the name of the makers that produced some cars in the year of 1970? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "result": "car_makers.creator \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.manufacturer \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.version = cars_data.Id \nWHERE cars_data.Year = 1970",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the name of the different car makers who produced a car in 1970? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "result": "car_makers.creator, cars_data.Year \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Manufacturer \n JOIN car_names ON model_list.ModelId = car_names.MakeId \n JOIN cars_data ON car_names.version = cars_data.Id \n WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Find the make and production time of the cars that were produced in the earliest year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "result": "car_makers.creator, cars_data.Year\nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.manufacturer \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.version = cars_data.Id \nWHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the maker of the carr produced in the earliest year and what year was it? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct car models are the produced after 1980?",
        "result": "DISTINCT manufacturer, style \nFROM model_list \nWHERE ModelId IN \n    (SELECT MakeId FROM car_names \n     INNER JOIN cars_data ON car_names.Manufacture = cars_data.Id \n     WHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which distinct car models are the produced after 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the cards produced after 1980?",
        "result": "ModelId, manufacturer, style FROM model_list \nINNER JOIN car_names ON model_list.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.version = cars_data.Id \nWHERE Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the different models for the cards produced after 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "result": "continents.Continent, COUNT(DISTINCT car_makers.Id)\n FROM continents\n INNER JOIN countries ON continents.ContId = countries.ContId\n INNER JOIN car_makers ON countries.CountryId = car_makers.nation\n GROUP BY continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many car makers are there in each continents? List the continent name and the count. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "result": "continents.Continent, COUNT(car_makers.Id) \n FROM continents \n LEFT JOIN countries ON continents.ContId = countries.mainland \n LEFT JOIN car_makers ON countries.CountryId = car_makers.nation \n GROUP BY continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the name of each continent and how many car makers are there in each one? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the countries has the most car makers? List the country name.",
        "result": "countries.country\nFROM countries\nJOIN car_makers ON countries.CountryId = car_makers.nation\nGROUP BY countries.CountryId\nORDER BY COUNT(car_makers.Id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which of the countries has the most car makers? List the country name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the country with the most car makers?",
        "result": "countries.country \nFROM \ncountries \nJOIN car_makers ON countries.CountryId = car_makers.nation \nGROUP BY \ncountries.CountryId \nORDER BY \nCOUNT(car_makers.Id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the name of the country with the most car makers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "result": "car_makers.complete_name, COUNT(model_list.ModelId) \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.manufacturer \nGROUP BY car_makers.complete_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many car models are produced by each maker ? Only list the count and the maker full name . \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "result": "car_makers.Id, car_makers.complete_name, COUNT(model_list.ModelId) AS num_models \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.manufacturer \n GROUP BY car_makers.Id, car_makers.complete_name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of car models that are produced by each maker and what is the id and full name of each maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "result": "cars_data.speed_up\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.version = model_list.ModelId\nJOIN car_makers ON model_list.manufacturer = car_makers.Id\nWHERE car_makers.complete_name = 'amc' AND car_names.manufacture = 'hornet sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw)? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "result": "cars_data.speed_up \nFROM \ncars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.version = model_list.ModelId \nINNER JOIN car_makers ON model_list.manufacturer = car_makers.Id \nWHERE \ncar_makers.complete_name = 'AMC' AND \nmodel_list.style = 'Hornet Sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How much does the car accelerate that makes amc hornet sportabout (sw)? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "How many car makers are there in france?",
        "result": "COUNT(*) \nFROM car_makers \nWHERE nation = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many car makers are there in france? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "What is the number of makers of care in France?",
        "result": "COUNT(DISTINCT car_makers.Id) \nFROM car_makers \nWHERE car_makers.nation = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of makers of care in France? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many car models are produced in the usa?",
        "result": "COUNT(*) FROM model_list\nWHERE manufacturer IN (\n  SELECT Id FROM car_makers\n  WHERE nation = 'usa'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many car models are produced in the usa? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the car models produced in the United States?",
        "result": "COUNT(model_list.ModelId) \nFROM model_list \nINNER JOIN car_makers ON model_list.manufacturer = car_makers.Id \nWHERE car_makers.nation = 'United States'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the count of the car models produced in the United States? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "result": "AVG(miles_per_gallon) FROM cars_data WHERE cylinder_number = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average miles per gallon(mpg) of the cars with 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "result": "AVG(miles_per_gallon) FROM cars_data WHERE cylinder_number=4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average miles per gallon of all the cards with 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "result": "MIN(heaviness) FROM cars_data WHERE cylinder_number = 8 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the smallest weight of the car produced with 8 cylinders on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "result": "MIN(heaviness) \nFROM cars_data \nWHERE cylinder_number = 8 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the minimum weight of the car with 8 cylinders produced in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the makers and models?",
        "result": "car_makers.creator, model_list.style \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.ManufacturerId",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are all the makers and models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the makers and models?",
        "result": "car_makers.creator, model_list.style\n FROM car_makers\n JOIN model_list ON car_makers.Id = model_list.Manufacturer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the makers and models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the countries having at least one car maker? List name and id.",
        "result": "countries.CountryId, countries.country \n FROM countries \n INNER JOIN car_makers ON countries.CountryId = car_makers.nation",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the countries having at least one car maker? List name and id. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all countries with at least one car maker?",
        "result": "countries.CountryId, countries.country\nFROM countries\nINNER JOIN car_makers ON countries.CountryId = car_makers.nation",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the names and ids of all countries with at least one car maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the cars with horsepower more than 150?",
        "result": "COUNT(*) FROM cars_data WHERE HP > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of the cars with horsepower more than 150? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of cars with a horsepower greater than 150?",
        "result": "COUNT(*) FROM cars_data WHERE HP > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of cars each year?",
        "result": "Year, AVG(heaviness) \n FROM cars_data \n GROUP BY Year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average weight of cars each year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "result": "Year, AVG(heaviness) as avg_weight FROM cars_data GROUP BY Year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average weight and year for each year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "result": "countries.country \nFROM countries \nJOIN car_makers ON countries.CountryId = car_makers.nation \nWHERE countries.mainland = 'Europe' \nGROUP BY countries.CountryId \nHAVING COUNT(DISTINCT car_makers.creator) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which countries in europe have at least 3 car manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "result": "countries.country \nFROM \ncountries \nJOIN \ncar_makers ON countries.CountryId = car_makers.nation \nWHERE \ncountries.mainland = 'Europe' \nGROUP BY \ncountries.CountryId \nHAVING \nCOUNT(DISTINCT car_makers.creator) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the names of all European countries with at least 3 manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "result": "MAX(HP), creator \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.manufacturer \n INNER JOIN cars_data ON model_list.ModelId = cars_data.Id \n WHERE cars_data.cylinder_number = 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "result": "car_makers.creator, MAX(cars_data.HP) \n FROM cars_data \n JOIN car_names ON cars_data.Id = car_names.MakeId \n JOIN model_list ON car_names.version = model_list.ModelId \n JOIN car_makers ON model_list.manufacturer = car_makers.Id \n WHERE cars_data.cylinder_number = 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the largest amount of horsepower for the models with 3 cylinders and what make is it? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "result": "model_list.Manufacturer, model_list.Style, MAX(cars_data.miles_per_gallon) as Max_MPG \n FROM model_list \n JOIN car_names ON model_list.ModelId = car_names.MakeId \n JOIN cars_data ON car_names.version = cars_data.Id \n GROUP BY model_list.Manufacturer, model_list.Style",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which model saves the most gasoline? That is to say, have the maximum miles per gallon. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "question": "What is the car model with the highest mpg ?",
        "result": "model_list.manufacturer, model_list.style, MAX(cars_data.miles_per_gallon) \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.MakeId \nJOIN cars_data ON car_names.version = cars_data.Id \nGROUP BY model_list.manufacturer, model_list.style \nORDER BY MAX(cars_data.miles_per_gallon) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the car model with the highest mpg ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average horsepower of the cars before 1980?",
        "result": "AVG(HP) FROM cars_data WHERE Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average horsepower of the cars before 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(horsepower) from cars_data where year  <  1980;",
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "result": "AVG(HP) FROM cars_data WHERE Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the cars of model volvo?",
        "result": "AVG(Edispl) FROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.MakeId \nWHERE manufacturer = 'volvo'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average edispl of the cars of model volvo? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "result": "AVG(Edispl) FROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.manufacturer\nINNER JOIN car_names ON model_list.ModelId = car_names.MakeId\nINNER JOIN cars_data ON car_names.version = cars_data.Id\nWHERE car_makers.complete_name = 'Volvo'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the average edispl for all volvos? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "result": "cylinder_number, MAX(speed_up) \n FROM cars_data \n GROUP BY cylinder_number",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the maximum accelerate for different number of cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "result": "cylinder_number, MAX(speed_up) \n FROM cars_data \n GROUP BY cylinder_number;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the maximum accelerate for all the different cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of cars?",
        "result": "model_list.manufacturer, COUNT(car_names.MakeId) AS total_versions\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.MakeId\nGROUP BY model_list.manufacturer\nORDER BY total_versions DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which model has the most version(make) of cars? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "result": "model_list.manufacturer, COUNT(DISTINCT car_names.version) AS version_count \n FROM model_list \n JOIN car_names ON model_list.ModelId = car_names.MakeId \n GROUP BY model_list.ModelId \n ORDER BY version_count DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What model has the most different versions? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many cars have more than 4 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE cylinder_number > 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many cars have more than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of cars with more than 4 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE cylinder_number > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of cars with more than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many cars were produced in 1980?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### how many cars were produced in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many cars were made?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### In 1980, how many cars were made? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "result": "COUNT(model_list.ModelId) \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.manufacturer \nWHERE car_makers.complete_name = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "result": "COUNT(*) \nFROM model_list \nWHERE manufacturer = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "result": "car_makers.Id, car_makers.complete_name \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.manufacturer \n GROUP BY car_makers.Id \n HAVING COUNT(model_list.ModelId) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which makers designed more than 3 car models? List full name and the id. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all makers with more than 3 models?",
        "result": "car_makers.Id, car_makers.creator \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.manufacturer \n GROUP BY car_makers.Id \n HAVING COUNT(model_list.ModelId) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the names and ids of all makers with more than 3 models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "result": "DISTINCT model_list.style \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.manufacturer \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE (car_makers.complete_name = 'General Motors' OR cars_data.heaviness > 3500);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "result": "model_list.*\nFROM model_list\nJOIN car_makers ON model_list.manufacturer = car_makers.complete_name\nWHERE car_makers.creator = 'General Motors' OR model_list.style > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the different models created by either the car maker General Motors or weighed more than 3500? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "result": "Year\nFROM cars_data\nWHERE heaviness >= 3000 AND heaviness <= 4000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### In which years cars were produced weighing no less than 3000 and no more than 4000 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct year from cars_data where weight between 3000 and 4000;",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "result": "Year \nFROM cars_data \nWHERE heaviness < 4000 \nINTERSECT \nSELECT Year \nFROM cars_data \nWHERE heaviness > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the largest accelerate?",
        "result": "HP FROM cars_data WHERE speed_up = (SELECT MAX(speed_up) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "result": "HP \nFROM cars_data \nWHERE speed_up = (SELECT MAX(speed_up) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "result": "MIN(cylinder_number) FROM cars_data \nWHERE Id IN \n    (SELECT Id FROM car_names \n     WHERE MakeId IN \n        (SELECT ModelId FROM model_list \n         WHERE manufacturer = 'volvo')) \nORDER BY speed_up ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### For model volvo, how many cylinders does the car with the least accelerate have? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "result": "MIN(cylinder_number) FROM cars_data\nWHERE Id IN (\n  SELECT cars_data.Id FROM cars_data\n  JOIN car_names ON cars_data.Id = car_names.MakeId\n  JOIN model_list ON car_names.version = model_list.ModelId\n  JOIN car_makers ON model_list.manufacturer = car_makers.Id\n  WHERE car_makers.complete_name LIKE '%volvo%'\n  ORDER BY speed_up ASC\n  LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### For a volvo model, how many cylinders does the version with least accelerate have? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "result": "COUNT(*) \nFROM cars_data \nWHERE speed_up > (SELECT MAX(HP) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many cars have a larger accelerate than the car with the largest horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "result": "COUNT(*) FROM cars_data \nWHERE speed_up > (SELECT MAX(speed_up) FROM cars_data WHERE HP = (SELECT MAX(HP) FROM cars_data))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of cars with a greater accelerate than the one with the most horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "How many countries has more than 2 car makers ?",
        "result": "COUNT(DISTINCT countries.CountryId)\nFROM countries\nINNER JOIN car_makers ON countries.CountryId = car_makers.nation\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many countries has more than 2 car makers ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "question": "What is the number of countries with more than 2 car makers ?",
        "result": "COUNT(DISTINCT countries.CountryId) \nFROM countries \nINNER JOIN car_makers ON countries.CountryId = car_makers.nation \nGROUP BY countries.CountryId \nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of countries with more than 2 car makers ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many cars has over 6 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE cylinder_number > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### How many cars has over 6 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of carsw ith over 6 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE cylinder_number > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the number of carsw ith over 6 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "result": "model_list.style \nFROM model_list \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.cylinder_number = 4 \nORDER BY cars_data.HP DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### For the cars with 4 cylinders, which model has the largest horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "result": "model_list.style \nFROM model_list \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.cylinder_number = 4 \nORDER BY cars_data.HP DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### For all of the 4 cylinder cars, which model has the most horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "result": "car_names.MakeId, car_makers.creator \nFROM car_names \nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.Manufacture = cars_data.Id \nWHERE cars_data.HP > (SELECT MIN(Hp) FROM cars_data) \nAND cars_data.cylinder_number <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "result": "car_names.MakeId, car_names.version \n FROM cars_data \n JOIN car_names ON cars_data.Id = car_names.MakeId \n WHERE cars_data.HP > (SELECT MIN(Hp) FROM cars_data) \n AND cars_data.cylinder_number < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "result": "MAX(miles_per_gallon) \nFROM cars_data \nWHERE cylinder_number = 8 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "result": "MAX(miles_per_gallon) FROM cars_data WHERE (cylinder_number = 8 OR Year < 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "result": "model_list.* \nFROM \nmodel_list \nINNER JOIN \ncar_makers \nON \nmodel_list.manufacturer = car_makers.complete_name \nWHERE \nmodel_list.style < 3500 \nAND \ncar_makers.creator <> 'Ford Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which models are lighter than 3500 but not built by the 'Ford Motor Company'? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "result": "model_list.style\nFROM model_list\nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id\nINNER JOIN car_makers ON model_list.manufacturer = car_makers.Id\nWHERE cars_data.heaviness < 3500 AND car_makers.creator <> 'Ford Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the countries where there is not a single car maker?",
        "result": "countries.country \nFROM countries \nLEFT JOIN car_makers ON countries.CountryId = car_makers.nation \nWHERE car_makers.Id IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the name of the countries where there is not a single car maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the countries with no car makers?",
        "result": "countries.country FROM countries \nLEFT JOIN car_makers ON countries.CountryId = car_makers.nation\nWHERE car_makers.Id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the names of the countries with no car makers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "result": "car_makers.Id, car_makers.creator\n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.manufacturer \n GROUP BY car_makers.Id, car_makers.creator \n HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "result": "car_makers.Id, car_makers.creator \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.manufacturer \n INNER JOIN car_names ON model_list.ModelId = car_names.MakeId \n GROUP BY car_makers.Id \n HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_names.version) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "result": "countries.CountryId, countries.country\nFROM countries\nWHERE countries.CountryId IN (\n    SELECT car_makers.nation \n    FROM car_makers \n    WHERE car_makers.creator = 'fiat' \n    GROUP BY car_makers.nation\n    HAVING COUNT(DISTINCT car_makers.Id) >= 3\n) OR countries.CountryId IN (\n    SELECT car_names.Manufacture \n    FROM car_names \n    WHERE car_names.version = 'fiat'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "result": "countries.CountryId, countries.country \n FROM countries \n LEFT JOIN car_makers ON countries.CountryId = car_makers.nation \n LEFT JOIN model_list ON car_makers.Id = model_list.manufacturer \n WHERE car_makers.Id IN \n      (SELECT car_makers.Id FROM car_makers \n       WHERE car_makers.creator = 'Fiat') \n OR countries.CountryId IN \n      (SELECT car_makers.nation FROM car_makers \n       GROUP BY car_makers.nation \n       HAVING COUNT(DISTINCT car_makers.Id) > 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,country,mainland)\n;# car_makers(Id,creator,complete_name,nation)\n;# model_list(ModelId,manufacturer,style)\n;# car_names(MakeId,version,manufacture)\n;# cars_data(Id,miles_per_gallon,cylinder_number,Edispl,HP,heaviness,speed_up,Year)\n.# \n ### What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "result": "nation \nFROM airlines \nWHERE airline_designation = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which country does Airline \"JetBlue Airways\" belong to? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What country is Jetblue Airways affiliated with?",
        "result": "nation \nFROM airlines \nWHERE airline_designation = 'Jetblue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What country is Jetblue Airways affiliated with? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "result": "abbr FROM airlines WHERE airline_designation='JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the abbreviation of Airline \"JetBlue Airways\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "result": "abbr FROM airlines WHERE airline_designation = \"Jetblue Airways\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which abbreviation corresponds to Jetblue Airways? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airline names and their abbreviations in \"USA\".",
        "result": "airline_designation, abbr FROM airlines WHERE nation = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### List all airline names and their abbreviations in \"USA\". \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "result": "airline_designation, abbr \nFROM airlines \nWHERE nation = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are the airline names and abbreviations for airlines in the USA? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "result": "airstrip_digits, airport \nFROM airports \nWHERE capital = 'Anthony'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### List the airport code and name in the city of Anthony. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "result": "airports.airstrip_digits, airports.airport \n FROM airports \n WHERE airports.capital = 'Anthony';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the airport code and airport name corresonding to the city Anthony. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airlines do we have?",
        "result": "COUNT(*) FROM airlines",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many airlines do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total number of airlines?",
        "result": "COUNT(*) FROM airlines;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the total number of airlines? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many airports do we have?",
        "result": "COUNT(*) FROM airports;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many airports do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  airports.",
        "result": "COUNT(*) FROM airports",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the number of  airports. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "result": "COUNT(*) FROM flights;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "result": "COUNT(*) FROM flights;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the number of flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airline has abbreviation 'UAL'?",
        "result": "airline_designation \nFROM \nairlines \nWHERE \nabbr = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airline has abbreviation 'UAL'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airline with abbreviation 'UAL'.",
        "result": "* FROM airlines WHERE abbr = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the airline with abbreviation 'UAL'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airlines are from USA?",
        "result": "COUNT(*) FROM airlines WHERE nation='USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many airlines are from USA? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airlines in the USA.",
        "result": "COUNT(*) FROM airlines WHERE nation = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the number of airlines in the USA. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which city and country is the Alton airport at?",
        "result": "capital, CountryAbbrev\nFROM airports\nWHERE airport = \"Alton\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which city and country is the Alton airport at? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the city and country for the Alton airport.",
        "result": "capital, CountryAbbrev \nFROM airports \nWHERE airport='Alton';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the city and country for the Alton airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the airport name for airport 'AKO'?",
        "result": "airport FROM airports WHERE airstrip_digits='AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the airport name for airport 'AKO'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the airport with code 'AKO'.",
        "result": "airport FROM airports WHERE airstrip_digits='AKO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the name of the airport with code 'AKO'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are airport names at City 'Aberdeen'?",
        "result": "airport \nFROM airports \nWHERE capital = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are airport names at City 'Aberdeen'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of airports in Aberdeen?",
        "result": "airport \nFROM airports \nWHERE capital = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are the names of airports in Aberdeen? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "result": "COUNT(*) FROM flights WHERE initial_air_station = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights depart from 'APG'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the number of flights departing from 'APG'.",
        "result": "COUNT(*) FROM flights WHERE initial_air_station = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Count the number of flights departing from 'APG'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have destination ATO?",
        "result": "COUNT(*) FROM flights WHERE flying_to = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights have destination ATO? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "result": "COUNT(*) FROM flights WHERE flying_to = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Count the number of flights into ATO. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "result": "COUNT(*) FROM flights WHERE initial_air_station = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights depart from City Aberdeen? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "result": "COUNT(*) FROM flights WHERE initial_air_station = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the number of flights departing from Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "result": "COUNT(*) FROM flights WHERE flying_to = 'Aberdeen' AND initial_air_station IN (SELECT airstrip_digits FROM airports WHERE capital = 'Aberdeen')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights arriving in Aberdeen city? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "result": "COUNT(*) FROM flights WHERE flying_to='Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the number of flights arriving in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "result": "COUNT(*) FROM flights \nWHERE initial_air_station = 'Aberdeen' AND flying_to = 'Ashley'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "result": "COUNT(*) FROM flights WHERE initial_air_station = 'Aberdeen' AND flying_to = 'Ashley'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights fly from Aberdeen to Ashley? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "result": "COUNT(*) FROM flights WHERE air_carrier_company = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights does airline 'JetBlue Airways' have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "result": "COUNT(*) FROM flights WHERE air_carrier_company = 'Jetblue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the number of Jetblue Airways flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "result": "COUNT(*) \nFROM flights \nWHERE air_carrier_company = 'United Airlines' AND flying_to = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many 'United Airlines' flights go to Airport 'ASY'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "result": "COUNT(*) FROM flights \nWHERE air_carrier_company = 'United Airlines' AND flying_to = 'ASY Airport'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Count the number of United Airlines flights arriving in ASY Airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "result": "COUNT(*) FROM flights \nWHERE air_carrier_company = 'United Airlines' \nAND initial_air_station = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many 'United Airlines' flights depart from Airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "result": "COUNT(*) \nFROM flights \nWHERE air_carrier_company = 'United Airlines' AND initial_air_station = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Return the number of United Airlines flights leaving from AHD Airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "result": "COUNT(*) FROM flights \nWHERE air_carrier_company = 'United Airlines' AND flying_to = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many United Airlines flights go to City 'Aberdeen'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "result": "COUNT(*) FROM flights \nWHERE air_carrier_company = 'United Airlines' \nAND flying_to = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Count the number of United Airlines flights that arrive in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of arriving flights?",
        "result": "airports.capital \nFROM airports \nJOIN flights ON airports.airstrip_digits = flights.flying_to \nGROUP BY airports.capital \nORDER BY COUNT(flights.air_carrier_company) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which city has most number of arriving flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has the most frequent destination airport?",
        "result": "airports.capital\nFROM flights\nJOIN airports ON flights.flying_to = airports.airstrip_digits\nGROUP BY airports.capital\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which city has the most frequent destination airport? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city has most number of departing flights?",
        "result": "initial_air_station, COUNT(*) AS num_departing_flights\nFROM flights\nGROUP BY initial_air_station\nORDER BY num_departing_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which city has most number of departing flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which city is the most frequent source airport?",
        "result": "initial_air_station\nFROM flights\nGROUP BY initial_air_station\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which city is the most frequent source airport? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of airport that has the highest number of flights?",
        "result": "airports.airstrip_digits \nFROM airports \nJOIN flights \nON airports.airstrip_digits = flights.initial_air_station \nGROUP BY airports.airstrip_digits \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the code of airport that has the highest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the airport code of the airport with the most flights?",
        "result": "airports.airstrip_digits \nFROM airports \nINNER JOIN flights ON airports.airstrip_digits = flights.initial_air_station \nGROUP BY airports.airstrip_digits \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the airport code of the airport with the most flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of airport that has fewest number of flights?",
        "result": "airports.airstrip_digits\nFROM airports\nLEFT JOIN flights ON airports.airstrip_digits = flights.initial_air_station\nGROUP BY airports.airstrip_digits\nORDER BY COUNT(flights.initial_air_station) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the code of airport that has fewest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the airport with the least flights.",
        "result": "a.airport \nFROM airports a \nJOIN flights f ON a.airstrip_digits = f.initial_air_station \nGROUP BY a.airport \nORDER BY COUNT(*) ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the code of the airport with the least flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airline has most number of flights?",
        "result": "air_carrier_company, COUNT(*) AS num_flights\nFROM flights\nGROUP BY air_carrier_company\nORDER BY num_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airline has most number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airline serves the most flights?",
        "result": "airlines.airline_designation, COUNT(*) as num_flights\nFROM airlines\nJOIN flights ON airlines.uid = flights.air_carrier_company\nGROUP BY airlines.uid\nORDER BY num_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What airline serves the most flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "result": "abbr, nation \nFROM airlines \nWHERE uid = (\n    SELECT air_carrier_company \n    FROM flights \n    GROUP BY air_carrier_company \n    ORDER BY COUNT(*) ASC \n    LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find the abbreviation and country of the airline that has fewest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "result": "abbr, nation \nFROM airlines \nWHERE uid = (SELECT air_carrier_company \n             FROM flights \n             GROUP BY air_carrier_company \n             ORDER BY COUNT(*) ASC \n             LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What is the abbreviation of the airilne has the fewest flights and what country is it in? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "result": "DISTINCT airlines.airline_designation \nFROM airlines \nJOIN flights ON airlines.uid = flights.air_carrier_company \nJOIN airports ON flights.initial_air_station = airports.airstrip_digits \nWHERE airports.airstrip_digits = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are airlines that have some flight departing from airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with source airport AHD?",
        "result": "airlines.airline_designation, airlines.abbr, airlines.nation \n FROM airlines \n JOIN flights ON airlines.uid = flights.air_carrier_company \n JOIN airports ON flights.initial_air_station = airports.airstrip_digits \n WHERE airports.airstrip_digits = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airlines have a flight with source airport AHD? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "result": "DISTINCT airlines.uid, airlines.airline_designation, airlines.abbr, airlines.nation \n FROM airlines \n JOIN flights ON airlines.uid = flights.air_carrier_company \n JOIN airports ON flights.flying_to = airports.airstrip_digits \n WHERE airports.airstrip_digits = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are airlines that have flights arriving at airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airlines have a flight with destination airport AHD?",
        "result": "airlines.airline_designation \nFROM airlines \nJOIN flights ON airlines.uid = flights.air_carrier_company \nJOIN airports ON flights.flying_to = airports.airstrip_digits \nWHERE airports.airstrip_digits = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airlines have a flight with destination airport AHD? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "result": "airlines.uid, airlines.airline_designation, airlines.abbr, airlines.nation\nFROM airlines\nINNER JOIN flights ON airlines.uid = flights.air_carrier_company\nINNER JOIN airports ON airports.airstrip_digits = flights.initial_air_station\nINNER JOIN airports AS a2 ON a2.airstrip_digits = flights.flying_to\nWHERE airports.airstrip_digits = 'APG' AND a2.airstrip_digits = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find all airlines that have flights from both airports 'APG' and 'CVO'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "result": "airlines.airline_designation \nFROM airlines \nINNER JOIN flights ON airlines.uid = flights.air_carrier_company \nINNER JOIN airports AS APG ON flights.initial_air_station = APG.airstrip_digits \nINNER JOIN airports AS CVO ON flights.flying_to = CVO.airstrip_digits \nWHERE APG.airport = 'APG Airport' AND CVO.airport = 'CVO Airport';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airlines have departing flights from both APG and CVO airports? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "result": "airlines.uid, airlines.airline_designation, airlines.abbr, airlines.nation \nFROM airlines \nINNER JOIN flights ON airlines.uid = flights.air_carrier_company \nWHERE flights.initial_air_station = 'CVO' \nAND airlines.uid NOT IN (SELECT airlines.uid FROM airlines INNER JOIN flights ON airlines.uid = flights.air_carrier_company WHERE flights.initial_air_station = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find all airlines that have flights from airport 'CVO' but not from 'APG'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "result": "airlines.airline_designation \nFROM airlines \nJOIN flights ON airlines.abbr = flights.air_carrier_company \nJOIN airports ON flights.initial_air_station = airports.airstrip_digits \nWHERE airports.capital = 'CVO' \nAND airlines.airline_designation NOT IN \n    (SELECT airlines.airline_designation \n    FROM airlines \n    JOIN flights ON airlines.abbr = flights.air_carrier_company \n    JOIN airports ON flights.initial_air_station = airports.airstrip_digits \n    WHERE airports.capital = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airlines have departures from CVO but not from APG airports? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airlines that have at least 10 flights.",
        "result": "airlines.uid, airlines.airline_designation, airlines.abbr, airlines.nation\nFROM airlines\nINNER JOIN flights ON airlines.uid = flights.air_carrier_company\nGROUP BY airlines.uid\nHAVING COUNT(flights.air_carrier_company) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find all airlines that have at least 10 flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airlines have at least 10 flights?",
        "result": "uid, airline_designation, abbr, nation \nFROM airlines \nWHERE uid IN (SELECT air_carrier_company FROM flights \n              GROUP BY air_carrier_company \n              HAVING COUNT(*) >= 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airlines have at least 10 flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airlines that have fewer than 200 flights.",
        "result": "airlines.uid, airlines.airline_designation, airlines.abbr, airlines.nation \nFROM airlines \nWHERE airlines.uid IN (\n    SELECT flights.air_carrier_company \n    FROM flights \n    GROUP BY flights.air_carrier_company \n    HAVING COUNT(*) < 200\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find all airlines that have fewer than 200 flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airlines have less than 200 flights?",
        "result": "uid, airline_designation \nFROM airlines \nWHERE uid IN (SELECT air_carrier_company \n              FROM flights \n              GROUP BY air_carrier_company \n              HAVING COUNT(*) < 200);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airlines have less than 200 flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "result": "flights.aircraft_no \nFROM flights \nINNER JOIN airlines ON flights.air_carrier_company = airlines.abbr \nWHERE airlines.airline_designation = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are flight numbers of Airline \"United Airlines\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight numbers correspond to United Airlines flights?",
        "result": "flight_no \nFROM flights \nWHERE air_carrier_company = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which flight numbers correspond to United Airlines flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "result": "flights.aircraft_no\nFROM flights\nINNER JOIN airports ON flights.initial_air_station = airports.airstrip_digits\nWHERE airports.airport = \"APG\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are flight numbers of flights departing from Airport \"APG\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights leaving from APG.",
        "result": "flight_no FROM flights WHERE initial_air_station = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the flight numbers of flights leaving from APG. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "result": "flights.aircraft_no \nFROM \nflights \nINNER JOIN airports ON flights.flying_to = airports.airstrip_digits \nWHERE \nairports.airport = \"APG\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are flight numbers of flights arriving at Airport \"APG\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight numbers of flights landing at APG.",
        "result": "flights.aircraft_no FROM flights\nJOIN airports ON flights.flying_to = airports.airstrip_digits\nWHERE airports.airstrip_digits = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the flight numbers of flights landing at APG. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "result": "flights.aircraft_no \nFROM flights \nINNER JOIN airports ON flights.initial_air_station = airports.airport \nWHERE airports.airport = \"Aberdeen\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are flight numbers of flights departing from City \"Aberdeen \"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "result": "flights.aircraft_no\nFROM flights\nINNER JOIN airports ON flights.initial_air_station = airports.airstrip_digits\nWHERE airports.airport = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the flight numbers of flights leaving from Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "result": "flights.aircraft_no \nFROM flights \nJOIN airports ON flights.flying_to = airports.airport \nWHERE airports.airport = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### What are flight numbers of flights arriving at City \"Aberdeen\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "result": "flights.aircraft_no\nFROM flights\nWHERE flights.flying_to = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Give the flight numbers of flights arriving in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "result": "COUNT(*) FROM flights\nWHERE flying_to = 'Aberdeen' OR flying_to = 'Abilene';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find the number of flights landing in the city of Aberdeen or Abilene. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "result": "COUNT(*) FROM flights WHERE flying_to IN ('Aberdeen', 'Abilene')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### How many flights land in Aberdeen or Abilene? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of airports which do not have any flight in and out.",
        "result": "airports.airport \nFROM airports \nLEFT JOIN flights ON airports.airstrip_digits = flights.initial_air_station \nWHERE flights.initial_air_station IS NULL \nAND flights.flying_to IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Find the name of airports which do not have any flight in and out. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which airports do not have departing or arriving flights?",
        "result": "airports.airport FROM airports\nLEFT JOIN flights ON airports.airstrip_digits = flights.initial_air_station OR airports.airstrip_digits = flights.flying_to\nWHERE flights.initial_air_station IS NULL AND flights.flying_to IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,airline_designation,abbr,nation)\n;# airports(capital,airstrip_digits,airport,nation,CountryAbbrev)\n;# flights(air_carrier_company,aircraft_no,initial_air_station,flying_to)\n.# \n ### Which airports do not have departing or arriving flights? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "How many employees are there?",
        "result": "COUNT(*) FROM employee;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### How many employees are there? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of employees",
        "result": "COUNT(*) FROM employee;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Count the number of employees \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort employee names by their age in ascending order.",
        "result": "Name FROM employee ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Sort employee names by their age in ascending order. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of employees and sort in ascending order of age.",
        "result": "Name FROM employee ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### List the names of employees and sort in ascending order of age. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of employees from each city?",
        "result": "capital_area, COUNT(Employee_ID) \nFROM employee \nGROUP BY capital_area",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What is the number of employees from each city? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of employees for each city.",
        "result": "capital_area, COUNT(Employee_ID) FROM employee GROUP BY capital_area;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Count the number of employees for each city. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which cities do more than one employee under age 30 come from?",
        "result": "capital_area \nFROM employee \nWHERE Age < 30 \nGROUP BY capital_area \nHAVING COUNT(*) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which cities do more than one employee under age 30 come from? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the cities that have more than one employee under age 30.",
        "result": "capital_area \nFROM employee \nWHERE Age < 30 \nGROUP BY capital_area \nHAVING COUNT(*) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the cities that have more than one employee under age 30. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each location.",
        "result": "region, COUNT(*) AS num_of_shops FROM shop GROUP BY region;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the number of shops in each location. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many shops are there in each location?",
        "result": "region, COUNT(*) \nFROM shop \nGROUP BY region;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### How many shops are there in each location? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "result": "shop.Name, shop.region\nFROM shop\nWHERE shop.number_of_goods = (\n    SELECT MAX(number_of_goods) FROM shop\n)\nINNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nINNER JOIN employee ON hiring.Employee_ID = employee.Employee_ID\nWHERE hiring.full_time_or_not = 'full-time'\nAND hiring.start_by <= date('now')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the manager name and district of the shop whose number of products is the largest. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "result": "shop.head, shop.region \nFROM shop \nWHERE shop.number_of_goods = (SELECT MAX(number_of_goods) FROM shop);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What are the manager name and district of the shop that sells the largest number of products? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of products of all stores.",
        "result": "MIN(number_of_goods), MAX(number_of_goods) FROM shop;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### find the minimum and maximum number of products of all stores. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of products across all the shops?",
        "result": "MIN(number_of_goods), MAX(number_of_goods) FROM shop;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What are the minimum and maximum number of products across all the shops? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "result": "shop.Name, shop.spot, shop.region \nFROM shop \nORDER BY shop.number_of_goods DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Return the name, location and district of all shops in descending order of number of products. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "result": "shop.Name, shop.spot, shop.region\nFROM shop\nORDER BY shop.number_of_goods DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Sort all the shops by number products in descending order, and return the name, location and district of each shop. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "result": "shop.Name \nFROM shop \nWHERE shop.number_of_goods > (\n  SELECT AVG(number_of_goods)\n  FROM shop\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the names of stores whose number products is more than the average number of products. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "result": "shop.Name \nFROM shop \nWHERE shop.number_of_goods > (\n  SELECT AVG(number_of_goods) FROM shop\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which shops' number products is above the average? Give me the shop names. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "result": "employee.Name\nFROM employee\nJOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID\nGROUP BY employee.Employee_ID\nORDER BY COUNT(evaluation.reward) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### find the name of employee who was awarded the most times in the evaluation. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "result": "employee.Name \nFROM employee \nINNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID \nGROUP BY employee.Employee_ID \nORDER BY COUNT(evaluation.award_yr) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which employee received the most awards in evaluations? Give me the employee name. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the employee who got the highest one time bonus.",
        "result": "employee.Name \nFROM evaluation \nINNER JOIN employee ON evaluation.Employee_ID = employee.Employee_ID \nWHERE evaluation.reward = (SELECT MAX(reward) FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the name of the employee who got the highest one time bonus. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "result": "employee.Name \nFROM employee \nINNER JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID \nWHERE evaluation.reward = (SELECT MAX(reward) FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which employee received the biggest bonus? Give me the employee name. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of employees who never won any award in the evaluation.",
        "result": "employee.Name \nFROM employee \nWHERE employee.Employee_ID NOT IN (SELECT evaluation.Employee_ID FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the names of employees who never won any award in the evaluation. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the employees who never received any evaluation?",
        "result": "Employee_ID, Name \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What are the names of the employees who never received any evaluation? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "result": "shop.Name \nFROM \nshop \nINNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY \nshop.Name \nORDER BY \nCOUNT(hiring.Employee_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What is the name of the shop that is hiring the largest number of employees? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most employees? Give me the shop name.",
        "result": "shop.Name \nFROM \n    shop \n    JOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY \n    shop.Shop_ID \nORDER BY \n    COUNT(hiring.Employee_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which shop has the most employees? Give me the shop name. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the shops that do not hire any employee.",
        "result": "Name FROM shop\nWHERE Shop_ID NOT IN \n(SELECT Shop_ID FROM hiring)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the name of the shops that do not hire any employee. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which shops run with no employees? Find the shop names",
        "result": "shop.Name\nFROM shop\nLEFT JOIN hiring\nON shop.Shop_ID = hiring.Shop_ID\nWHERE hiring.Employee_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which shops run with no employees? Find the shop names \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "result": "shop.Name, COUNT(hiring.Employee_ID)\n FROM shop\n JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\n GROUP BY shop.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the number of employees hired in each shop; show the shop name as well. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "result": "shop.Name, COUNT(hiring.Employee_ID) AS num_employees \nFROM shop \nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY shop.Shop_ID, shop.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### For each shop, return the number of employees working there and the name of the shop. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total bonus given in all evaluations?",
        "result": "SUM(reward) FROM evaluation",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What is total bonus given in all evaluations? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of bonus given in all the evaluations.",
        "result": "SUM(reward) FROM evaluation",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the total amount of bonus given in all the evaluations. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "result": "* FROM hiring;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Give me all the information about hiring. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "result": "Shop_ID, Employee_ID, start_by, full_time_or_not FROM hiring",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### What is all the information about hiring? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "result": "shop.region \nFROM shop \nWHERE shop.number_of_goods < 3000 \nINTERSECT \nSELECT shop.region \nFROM shop \nWHERE shop.number_of_goods > 10000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Which district has both stores with less than 3000 products and stores with more than 10000 products? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "result": "DISTINCT shop.region \nFROM shop \nWHERE shop.number_of_goods < 3000 \nAND shop.region IN (\n    SELECT shop.region \n    FROM shop \n    WHERE shop.number_of_goods > 10000\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "How many different store locations are there?",
        "result": "COUNT(DISTINCT spot) FROM shop;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### How many different store locations are there? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store locations.",
        "result": "COUNT(DISTINCT spot) FROM shop",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,capital_area)\n;# shop(Shop_ID,Name,spot,region,number_of_goods,head)\n;# hiring(Shop_ID,Employee_ID,start_by,full_time_or_not)\n;# evaluation(Employee_ID,award_yr,reward)\n.# \n ### Count the number of distinct store locations. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many documents do we have?",
        "result": "COUNT(*) FROM Documents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many documents do we have? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of documents.",
        "result": "COUNT(*) FROM Documents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "result": "Documents.Document_ID, Documents.document_title, Documents.doc_elaboration \n FROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### List document IDs, document names, and document descriptions for all documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all documents?",
        "result": "Documents.Document_ID, Documents.document_title, Documents.doc_elaboration\nFROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids, names, and descriptions for all documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "result": "Documents.document_title, Templates.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.doc_elaboration LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the document name and template id for document with description with the letter 'w' in it? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "result": "Templates.Template_ID, Documents.document_title \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.doc_elaboration LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.doc_elaboration\n FROM Documents\n INNER JOIN Templates ON Documents.parameter = Templates.Template_ID\n WHERE Documents.document_title = \"Robbin CV\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the document id, template id and description for document named \"Robbin CV\"? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.doc_elaboration \n FROM Documents \n INNER JOIN Templates ON Documents.parameter = Templates.Template_Details \n WHERE Documents.document_title = 'Robbin CV';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the document id, template id, and description for the document with the name Robbin CV. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different templates do all document use?",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many different templates do all document use? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different templates used for documents.",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of different templates used for documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many documents are using the template with type code 'PPT'?",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nJOIN Templates ON Documents.parameter = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.tempalte_class_cipher = Ref_Template_Types.category_code \nWHERE Ref_Template_Types.type_details = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many documents are using the template with type code 'PPT'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of documents that use the PPT template type.",
        "result": "COUNT(*) FROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Ref_Template_Types ON Templates.type_details = Ref_Template_Types.category_code \nWHERE Ref_Template_Types.type_details = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of documents that use the PPT template type. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all template ids and number of documents using each template.",
        "result": "Templates.Template_ID, COUNT(Documents.Document_ID) \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all template ids and number of documents using each template. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "result": "Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are all different template ids used for documents, and how many times were each of them used? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type code for the template used by the most documents?",
        "result": "Templates.Template_ID, Ref_Template_Types.category_code \n FROM Templates \n JOIN Ref_Template_Types ON Templates.type_details = Ref_Template_Types.type_details \n WHERE Templates.Template_ID = (\n     SELECT Document_ID\n     FROM Documents\n     GROUP BY Document_ID\n     ORDER BY COUNT(*) DESC\n     LIMIT 1\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the id and type code for the template used by the most documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "result": "Templates.Template_ID, Ref_Template_Types.category_code \nFROM Templates \nJOIN Ref_Template_Types ON Templates.type_details = Ref_Template_Types.type_details \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID \nORDER BY COUNT(Documents.Document_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the id and type code of the template that is used for the greatest number of documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all templates that are used by more than one document.",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show ids for all templates that are used by more than one document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single document?",
        "result": "Template_ID\nFROM Templates\nWHERE Template_ID IN (\n  SELECT Template_ID\n  FROM Documents\n  GROUP BY Template_ID\n  HAVING COUNT(DISTINCT Document_ID) > 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the template ids of any templates used in more than a single document? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any document.",
        "result": "Templates.Template_ID\nFROM Templates\nLEFT JOIN Documents\nON Templates.Template_ID = Documents.parameter\nWHERE Documents.parameter IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show ids for all templates not used by any document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for templates that are not used in any documents?",
        "result": "Templates.Template_ID \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids for templates that are not used in any documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many templates do we have?",
        "result": "COUNT(*) FROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many templates do we have? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of templates.",
        "result": "COUNT(Template_ID) FROM Templates",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "result": "Templates.Template_ID, Templates.release_no, Ref_Template_Types.category_code\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.tempalte_class_cipher = Ref_Template_Types.type_details;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show template ids, version numbers, and template type codes for all templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, version numbers, and type codes for each template?",
        "result": "Templates.Template_ID, Templates.release_no, Ref_Template_Types.category_code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.tempalte_class_cipher = Ref_Template_Types.type_details",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids, version numbers, and type codes for each template? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct template type codes for all templates.",
        "result": "DISTINCT type_details FROM Templates JOIN Ref_Template_Types ON Templates.category_code = Ref_Template_Types.category_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all distinct template type codes for all templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different template type codes?",
        "result": "category_code \nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the different template type codes? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of templates with template type code PP or PPT?",
        "result": "Templates.Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.template_class_cipher = Ref_Template_Types.category_code\nWHERE Ref_Template_Types.type_details IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids of templates with template type code PP or PPT? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of templates that have the code PP or PPT.",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types \nON Templates.template_class_cipher = Ref_Template_Types.category_code \nWHERE Ref_Template_Types.category_code = 'PP' OR Ref_Template_Types.category_code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the ids of templates that have the code PP or PPT. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many templates have template type code CV?",
        "result": "COUNT(*) FROM Templates WHERE tempalte_class_cipher = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many templates have template type code CV? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of templates of the type CV.",
        "result": "COUNT(*) FROM Templates WHERE tempalte_class_cipher = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of templates of the type CV. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "result": "Templates.release_no, Ref_Template_Types.category_code\nFROM Templates\nJOIN Ref_Template_Types ON Templates.type_details = Ref_Template_Types.type_details\nWHERE Templates.release_no > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the version number and template type code for the template with version number later than 5? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "result": "Templates.release_no, Ref_Template_Types.category_code\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.type_details = Ref_Template_Types.type_details\nWHERE Templates.release_no > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all template type codes and number of templates for each.",
        "result": "Ref_Template_Types.category_code, COUNT(Templates.Template_ID)\n FROM Ref_Template_Types\n LEFT JOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher\n GROUP BY Ref_Template_Types.category_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all template type codes and number of templates for each. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "result": "Ref_Template_Types.category_code, COUNT(Templates.Template_ID)\n FROM Ref_Template_Types\n JOIN Templates ON Ref_Template_Types.type_details = Templates.tempalte_class_cipher\n GROUP BY Ref_Template_Types.category_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the different template type codes, and how many templates correspond to each? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code has most number of templates?",
        "result": "Ref_Template_Types.category_code \nFROM Ref_Template_Types \nINNER JOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher \nGROUP BY Ref_Template_Types.category_code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Which template type code has most number of templates? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type code of the template type that the most templates belong to.",
        "result": "Ref_Template_Types.category_code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher \nGROUP BY Ref_Template_Types.category_code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the type code of the template type that the most templates belong to. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all template type codes with less than three templates.",
        "result": "Ref_Template_Types.category_code\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher\nGROUP BY Ref_Template_Types.category_code\nHAVING COUNT(Templates.Template_ID) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all template type codes with less than three templates. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "result": "Ref_Template_Types.category_code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher \nGROUP BY Ref_Template_Types.category_code \nHAVING COUNT(Templates.Template_ID) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the codes of template types that have fewer than 3 templates? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest version number and its template type code?",
        "result": "Template_ID, type_details \nFROM Templates \nORDER BY release_no ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What the smallest version number and its template type code? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "result": "Templates.release_no, Ref_Template_Types.category_code\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.tempalte_class_cipher = Ref_Template_Types.type_details\nORDER BY Templates.release_no ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the lowest version number, along with its corresponding template type code. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "result": "Ref_Template_Types.category_code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.type_details = Templates.tempalte_class_cipher \nJOIN Documents ON Templates.Template_ID = Documents.parameter \nWHERE Documents.document_title = \"Data base\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the template type code of the template used by document with the name \"Data base\"? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "result": "Ref_Template_Types.category_code \nFROM \nRef_Template_Types \nJOIN Templates ON Ref_Template_Types.type_details = Templates.Template_Details \nJOIN Documents ON Templates.Template_ID = Documents.parameter \nWHERE \nDocuments.document_title = 'Data base';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the template type code of the template that is used by a document named Data base. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all document names using templates with template type code BK.",
        "result": "Documents.document_title \nFROM Templates \nJOIN Ref_Template_Types ON Templates.template_class_cipher = Ref_Template_Types.category_code \nJOIN Documents ON Templates.Template_ID = Documents.Document_ID \nWHERE Ref_Template_Types.type_details = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all document names using templates with template type code BK. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of documents that use templates with the code BK?",
        "result": "Documents.document_title \nFROM Documents \nINNER JOIN Templates ON Documents.parameter = Templates.Template_ID \nWHERE Templates.tempalte_class_cipher = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the names of documents that use templates with the code BK? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all template type codes and the number of documents using each type.",
        "result": "Ref_Template_Types.category_code, COUNT(Documents.Document_ID)\n FROM Ref_Template_Types\n LEFT JOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher\n LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\n GROUP BY Ref_Template_Types.category_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all template type codes and the number of documents using each type. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different template type codes, and how many documents use each type?",
        "result": "Ref_Template_Types.category_code, COUNT(Templates.Template_ID)\n FROM Ref_Template_Types \n INNER JOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher \n GROUP BY Ref_Template_Types.category_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the different template type codes, and how many documents use each type? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which template type code is used by most number of documents?",
        "result": "Ref_Template_Types.category_code\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.category_code = Templates.tempalte_class_cipher\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.category_code\nORDER BY COUNT(Documents.Document_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Which template type code is used by most number of documents? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the template type that is most commonly used in documents.",
        "result": "Ref_Template_Types.category_code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.type_details = Ref_Template_Types.type_details \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Ref_Template_Types.category_code \nORDER BY COUNT(*) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the code of the template type that is most commonly used in documents. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all template type codes that are not used by any document.",
        "result": "Ref_Template_Types.category_code \nFROM Ref_Template_Types \nWHERE Ref_Template_Types.category_code NOT IN \n    (SELECT Templates.tempalte_class_cipher \n     FROM Templates \n     INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all template type codes that are not used by any document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the codes of template types that are not used for any document?",
        "result": "Ref_Template_Types.category_code \nFROM Ref_Template_Types \nWHERE Ref_Template_Types.category_code NOT IN \n    (SELECT Templates.type_details \n     FROM Templates \n     JOIN Documents ON Templates.Template_ID = Documents.Template_ID)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the codes of template types that are not used for any document? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all template type codes and descriptions.",
        "result": "category_code, type_details\nFROM Ref_Template_Types;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all template type codes and descriptions. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type codes and descriptions for all template types?",
        "result": "category_code, type_details\nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the type codes and descriptions for all template types? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the template type descriptions for template type code \"AD\".",
        "result": "type_details \nFROM Ref_Template_Types \nWHERE category_code = \"AD\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the template type descriptions for template type code \"AD\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the template type description of the template type with the code AD.",
        "result": "type_details \nFROM Ref_Template_Types \nWHERE category_code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the template type description of the template type with the code AD. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the template type code for template type description \"Book\".",
        "result": "category_code FROM Ref_Template_Types WHERE type_details = \"Book\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the template type code for template type description \"Book\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type code of the template type with the description \"Book\".",
        "result": "category_code FROM Ref_Template_Types WHERE type_details = \"Book\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the type code of the template type with the description \"Book\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "result": "Templates.Template_Details, Ref_Template_Types.type_details\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.tempalte_class_cipher = Ref_Template_Types.category_code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Ref_Template_Types.type_details",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the distinct template type descriptions for the templates ever used by any document? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different descriptions for templates that have been used in a document.",
        "result": "Templates.Template_Details \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.parameter",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the different descriptions for templates that have been used in a document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the template ids with template type description \"Presentation\".",
        "result": "Template_ID \nFROM Templates \nJOIN Ref_Template_Types \nON Templates.tempalte_class_cipher = Ref_Template_Types.category_code \nWHERE Ref_Template_Types.type_details = \"Presentation\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the template ids with template type description \"Presentation\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "result": "Template_ID FROM Templates WHERE Template_Details = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the ids corresponding to templates with the description 'Presentation'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "result": "COUNT(*) FROM Paragraphs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many paragraphs in total? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "result": "COUNT(*) FROM Paragraphs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "result": "COUNT(*) \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.document_title = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### How many paragraphs for the document with name 'Summer Show'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "result": "COUNT(*) FROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.document_title = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Count the number of paragraphs in the document named 'Summer Show'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "result": "Paragraph_ID, Document_ID, content, see_also_particularities\nFROM Paragraphs\nWHERE content LIKE '%Korea %';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show paragraph details for paragraph with text 'Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select other_details from paragraphs where paragraph_text like 'korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "result": "Paragraph_ID, Document_ID, content, see_also_particularities \nFROM Paragraphs \nWHERE content LIKE '%Korea %';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the details for the paragraph that includes the text 'Korea ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "result": "Paragraph_ID, content\nFROM Paragraphs\nWHERE Document_ID = (\n    SELECT Document_ID\n    FROM Documents\n    WHERE document_title = 'Welcome to NY'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all paragraph ids and texts for the document with name 'Welcome to NY'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "result": "Paragraph_ID, content FROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE document_title = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "result": "Paragraphs.content \nFROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.document_title = \"Customer reviews\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all paragraph texts for the document \"Customer reviews\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "result": "Paragraphs.content \nFROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.document_title = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the paragraph texts for the document with the name 'Customer reviews'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count \nFROM Documents \nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nORDER BY Documents.Document_ID ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all document ids and the number of paragraphs in each document. Order by document id. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "result": "Documents.Document_ID, Documents.document_title, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs\nFROM Documents \nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.document_title",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show all document ids, names and the number of paragraphs in each document. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "result": "Documents.Document_ID, Documents.document_title, COUNT(Paragraphs.Paragraph_ID) AS num_of_paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.document_title",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids and names of each document, as well as the number of paragraphs in each? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all document ids with at least two paragraphs.",
        "result": "Documents.Document_ID\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(*) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### List all document ids with at least two paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids of documents that have 2 or more paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the document id and name with greatest number of paragraphs?",
        "result": "Documents.Document_ID, Documents.document_title \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the document id and name with greatest number of paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the document with the most paragraphs.",
        "result": "Documents.Document_ID, Documents.document_title \nFROM Documents \nWHERE Documents.Document_ID = (\n    SELECT Document_ID \n    FROM Paragraphs \n    GROUP BY Document_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the id and name of the document with the most paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the document id with least number of paragraphs?",
        "result": "Documents.Document_ID\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the document id with least number of paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the document with the fewest paragraphs.",
        "result": "Documents.Document_ID \nFROM Documents \nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Return the id of the document with the fewest paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the document id with 1 to 2 paragraphs?",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs \nON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What is the document id with 1 to 2 paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_ID IN (SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Give the ids of documents that have between one and two paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.content LIKE '%Brazil%' AND Paragraphs.content LIKE '%Ireland%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### Show the document id with paragraph text 'Brazil' and 'Ireland'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.content LIKE '%Brazil%' AND Paragraphs.content LIKE '%Ireland%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(category_code,type_details)\n;# Templates(Template_ID,release_no,tempalte_class_cipher,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,parameter,document_title,doc_elaboration,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,content,see_also_particularities)\n.# \n ### What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many teachers are there?",
        "result": "COUNT(*) FROM teacher;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### How many teachers are there? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of teachers?",
        "result": "COUNT(*) FROM teacher",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What is the total count of teachers? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of teachers in ascending order of age.",
        "result": "Name FROM teacher ORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### List the names of teachers in ascending order of age. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the teachers ordered by ascending age?",
        "result": "Name \nFROM teacher \nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers ordered by ascending age? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and hometown of teachers?",
        "result": "Age, Hometown FROM teacher",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the age and hometown of teachers? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and hometown of every teacher?",
        "result": "Name, Age, Hometown FROM teacher;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What is the age and hometown of every teacher? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "result": "Name FROM teacher WHERE Hometown != 'Little Lever Urban District';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### List the name of teachers whose hometown is not `` Little Lever Urban District '' . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher where hometown != \"little lever urban district\"",
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "result": "Name FROM teacher \nWHERE Hometown <> 'Little Lever Urban District'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of teachers aged either 32 or 33?",
        "result": "Name FROM teacher WHERE Age IN (32, 33);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show the name of teachers aged either 32 or 33? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "result": "Name \nFROM teacher \nWHERE Age IN (32, 33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers who are aged either 32 or 33? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the hometown of the youngest teacher?",
        "result": "teacher.Hometown\nFROM teacher\nWHERE teacher.Age = (\n  SELECT MIN(Age) \n  FROM teacher\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What is the hometown of the youngest teacher? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest teacher from?",
        "result": "Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Where is the youngest teacher from? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "result": "teacher.Hometown, COUNT(teacher.Teacher_ID)\nFROM teacher\nGROUP BY teacher.Hometown;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show different hometown of teachers and the number of teachers from each hometown. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each hometown, how many teachers are there?",
        "result": "Hometown, COUNT(Teacher_ID) \n FROM teacher \n GROUP BY Hometown",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### For each hometown, how many teachers are there? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common hometown of teachers.",
        "result": "Hometown, COUNT(*) as count \nFROM teacher \nGROUP BY Hometown \nORDER BY count DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### List the most common hometown of teachers. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon hometowns for teachers?",
        "result": "Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What is the most commmon hometowns for teachers? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the hometowns shared by at least two teachers.",
        "result": "teacher1.Hometown \nFROM teacher AS teacher1 \nJOIN teacher AS teacher2 \nON teacher1.Teacher_ID <> teacher2.Teacher_ID \nAND teacher1.Hometown = teacher2.Hometown \nGROUP BY teacher1.Hometown \nHAVING COUNT(DISTINCT teacher1.Teacher_ID, teacher2.Teacher_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show the hometowns shared by at least two teachers. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two teachers come from?",
        "result": "Hometown \nFROM teacher \nGROUP BY Hometown \nHAVING COUNT(DISTINCT Teacher_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the towns from which at least two teachers come from? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "result": "teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show names of teachers and the courses they are arranged to teach. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each teacher and what course they teach?",
        "result": "teacher.Name, course.Course \n FROM teacher \n INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \n INNER JOIN course ON course_arrange.Course_ID = course.Course_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What is the name of each teacher and what course they teach? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "result": "teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "result": "teacher.Name, course.Course \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nORDER BY teacher.Name ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the teacher for the math course.",
        "result": "teacher.Name \nFROM course_arrange \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nJOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID \nWHERE course.Course = 'math';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show the name of the teacher for the math course. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math courses?",
        "result": "teacher.Name \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nWHERE course.Course = 'Math';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the people who teach math courses? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of teachers and the number of courses they teach.",
        "result": "teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses_taught \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Teacher_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show names of teachers and the number of courses they teach. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the teachers and how many courses do they teach?",
        "result": "teacher.Name, COUNT(course_arrange.Course_ID)\nFROM teacher\nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers and how many courses do they teach? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of teachers that teach at least two courses.",
        "result": "teacher.Name\nFROM teacher\nINNER JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID\nGROUP BY teacher.Teacher_ID\nHAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### Show names of teachers that teach at least two courses. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the teachers who teach at least two courses?",
        "result": "teacher.Name \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Teacher_ID \nHAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers who teach at least two courses? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "result": "teacher.Name \nFROM teacher \nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE course_arrange.Teacher_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### List the names of teachers who have not been arranged to teach courses. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "result": "teacher.Name \nFROM teacher \nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE course_arrange.Course_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,class)\n.# \n ### What are the names of the teachers whose courses have not been arranged? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many visitors below age 30 are there?",
        "result": "COUNT(*) FROM visitor WHERE Age < 30;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### How many visitors below age 30 are there? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "result": "Name FROM visitor \nWHERE membership_standing > 4 \nORDER BY membership_standing DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "result": "AVG(Age) FROM visitor WHERE membership_standing <= 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What is the average age of the visitors whose membership level is not higher than 4? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "result": "visitor.Name, visitor.membership_standing \nFROM visitor \nWHERE visitor.membership_standing > 4 \nORDER BY visitor.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most staff members?",
        "result": "Museum_ID, Name \nFROM museum \nWHERE total_workers = (SELECT MAX(total_workers) FROM museum)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### Find the id and name of the museum that has the most staff members? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "result": "AVG(total_workers) \nFROM museum \nWHERE accessible_yr < 2009",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### Find the average number of staff working for the museums that were open before 2009. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "result": "accessible_yr, total_workers FROM museum WHERE Name = 'Plaza Museum';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "result": "Name \nFROM museum \nWHERE total_workers > (SELECT MIN(total_workers) FROM museum WHERE accessible_yr > 2010)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "result": "visitor.ID, visitor.Name, visitor.Age \nFROM visitor \nJOIN visit ON visitor.ID = visit.visitor_ID \nWHERE visit.total_tickets > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### find the id, name and age for visitors who visited some museums more than once. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "result": "visitor.ID, visitor.Name, visitor.membership_standing \nFROM visitor \nINNER JOIN visit ON visitor.ID = visit.visitor_ID \nORDER BY visit.Total_spent DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "result": "Museum_ID, Name \nFROM museum \nWHERE Museum_ID = (\n  SELECT Museum_ID \n  FROM visit \n  GROUP BY Museum_ID \n  ORDER BY SUM(total_tickets) DESC \n  LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What are the id and name of the museum visited most times? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no visitor yet?",
        "result": "Name \nFROM museum \nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What is the name of the museum that had no visitor yet? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "result": "visitor.Name, visitor.Age\nFROM visitor\nINNER JOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visit.total_tickets = (SELECT MAX(total_tickets) FROM visit)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### Find the name and age of the visitor who bought the most tickets at once. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "result": "AVG(total_tickets), MAX(total_tickets) FROM visit;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What are the average and maximum number of tickets bought in all visits? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "result": "SUM(Total_spent) \nFROM visit \nINNER JOIN visitor ON visit.visitor_ID = visitor.ID \nWHERE visitor.membership_standing = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What is the total ticket expense of the visitors whose membership level is 1? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "result": "visitor.Name\nFROM visitor\nINNER JOIN visit ON visitor.ID = visit.visitor_ID\nINNER JOIN museum ON visit.Museum_ID = museum.Museum_ID\nWHERE museum.accessible_yr < 2009\nAND museum.accessible_yr > 2011",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "result": "COUNT(DISTINCT visitor_ID)\nFROM visitor\nWHERE ID NOT IN (\n  SELECT visitor_ID\n  FROM visit\n  JOIN museum ON visit.Museum_ID = museum.Museum_ID\n  WHERE accessible_yr > 2010\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### Find the number of visitors who did not visit any museum opened after 2010. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "result": "COUNT(*) FROM museum \nWHERE accessible_yr > 2013 OR accessible_yr < 2008",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,total_workers,accessible_yr)\n;# visitor(ID,Name,membership_standing,Age)\n;# visit(Museum_ID,visitor_ID,total_tickets,Total_spent)\n.# \n ### How many museums were opened after 2013 or before 2008? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM players",
        "question": "Find the total number of players.",
        "result": "COUNT(player_id) FROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the total number of players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM players",
        "question": "How many players are there?",
        "result": "COUNT(player_id) FROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many players are there? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches",
        "question": "Find the total number of matches.",
        "result": "COUNT(*) FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the total number of matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches",
        "question": "Count the number of matches.",
        "result": "COUNT(*) FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Count the number of matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the first name and birth date of all players from the country with code USA.",
        "result": "given_name, birthday FROM players WHERE state_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### List the first name and birth date of all players from the country with code USA. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the first names and birth dates of players from the USA?",
        "result": "given_name, birthday FROM players WHERE state_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the first names and birth dates of players from the USA? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all matches.",
        "result": "AVG(CAST((strftime('%s', 'now') - strftime('%s', CASE WHEN winner_how_old != '' THEN winner_how_old ELSE NULL END)) / 31536000.0 AS INTEGER)) AS avg_winner_age,\nAVG(CAST((strftime('%s', 'now') - strftime('%s', CASE WHEN loser_how_old != '' THEN loser_how_old ELSE NULL END)) / 31536000.0 AS INTEGER)) AS avg_loser_age \nFROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the average age of losers and winners of all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average ages of losers and winners across matches?",
        "result": "AVG(julianday(tourney_date) - julianday(birthday))/365.25 AS avg_loser_age, \nAVG(julianday(tourney_date) - julianday(victor_how_old))/365.25 AS avg_winner_age \nFROM matches \nJOIN players ON players.player_id = matches.loser_id OR players.player_id = matches.winner_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the average ages of losers and winners across matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all matches.",
        "result": "AVG(champion_ranking) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the average rank of winners in all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all matches?",
        "result": "AVG(champion_ranking) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the average rank for winners in all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all matches.",
        "result": "MAX(rankings.position) \nFROM rankings \nINNER JOIN matches ON rankings.player_id = matches.loser_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the highest rank of losers in all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all matches?",
        "result": "MAX(loser_rank_points) \nFROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the best rank of losers across all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct country codes of all players.",
        "result": "COUNT(DISTINCT state_code) FROM players",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### find the number of distinct country codes of all players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct countries do players come from?",
        "result": "COUNT(DISTINCT state_code) AS distinct_countries\nFROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many distinct countries do players come from? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "result": "COUNT(DISTINCT loser_id) FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the number of distinct name of losers. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "result": "COUNT(DISTINCT loser_name) AS num_different_loser_names\nFROM (\n    SELECT family_name || ' ' || given_name AS loser_name\n    FROM players JOIN matches ON players.player_id = matches.loser_id\n) AS loser_names;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many different loser names are there? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the name of tourney that has more than 10 matches.",
        "result": "tourney_id \nFROM matches \nGROUP BY tourney_id \nHAVING COUNT(*) > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the name of tourney that has more than 10 matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 matches?",
        "result": "event_name \nFROM matches \nGROUP BY event_name \nHAVING COUNT(*) > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the names of tournaments that have more than 10 matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "result": "winner \nFROM matches \nWHERE year = 2013 AND winner IN (SELECT winner FROM matches WHERE year = 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### List the names of all winners who played in both 2013 and 2016. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of players who won in both 2013 and 2016?",
        "result": "given_name, family_name\nFROM players\nWHERE player_id IN (\n    SELECT winner_id\n    FROM matches\n    WHERE year = 2013\n    AND winner_id IN (\n        SELECT winner_id\n        FROM matches\n        WHERE year = 2016\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the names of players who won in both 2013 and 2016? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "result": "COUNT(*) FROM matches WHERE year IN (2013, 2016);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### List the number of all matches who played in years of 2013 or 2016. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "How many matches were played in 2013 or 2016?",
        "result": "COUNT(*) FROM matches WHERE year IN (2013, 2016);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many matches were played in 2013 or 2016? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "result": "players.state_code, players.given_name \n FROM players \n JOIN matches ON players.player_id = matches.winner_id \n WHERE matches.tourney_id IN ('WTA Championships', 'Australian Open') AND players.player_id IN (\n     SELECT winner_id FROM matches WHERE tourney_id = 'WTA Championships'\n     INTERSECT\n     SELECT winner_id FROM matches WHERE tourney_id = 'Australian Open'\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "result": "players.given_name, players.state_code \n FROM players \n JOIN matches ON players.player_id = matches.winner_id \n WHERE matches.event_name = 'WTA Championships' AND matches.tourney_id LIKE '%AO%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the first names and country codes for players who won both the WTA Championships and the Australian Open? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the first name and country code of the oldest player.",
        "result": "given_name, winner_ioc \n FROM players \n WHERE birthday = (SELECT MIN(birthday) FROM players)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the first name and country code of the oldest player. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the first name and country code of the oldest player?",
        "result": "given_name, state_code \n FROM players \n ORDER BY birthday ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the first name and country code of the oldest player? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the first and last name of all players in the order of birth date.",
        "result": "given_name, family_name FROM players ORDER BY birthday ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### List the first and last name of all players in the order of birth date. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all players, sorted by birth date?",
        "result": "given_name || ' ' || family_name AS full_name\nFROM players\nORDER BY birthday ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the full names of all players, sorted by birth date? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "result": "given_name, family_name\nFROM players\nWHERE hand = 'L'\nORDER BY birthday ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### List the first and last name of all players who are left / L hand in the order of birth date. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed players, in order of birth date?",
        "result": "given_name || ' ' || family_name AS full_name \n FROM players \n WHERE hand = 'L' \n ORDER BY birthday ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the full names of all left handed players, in order of birth date? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "result": "players.given_name, players.state_code \n FROM players \n INNER JOIN rankings ON players.player_id = rankings.player_id \n WHERE rankings.tours = (SELECT MAX(tours) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the first name and country code of the player who did the most number of tours. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the first name and country code of the player with the most tours?",
        "result": "players.given_name, players.state_code\nFROM players\nWHERE players.player_id = (\n  SELECT player_id \n  FROM rankings \n  GROUP BY player_id \n  ORDER BY COUNT(DISTINCT day_of_ranking) DESC \n  LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the first name and country code of the player with the most tours? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of matches.",
        "result": "year FROM matches \nGROUP BY year \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the year that has the most number of matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most matches?",
        "result": "year, COUNT(*) AS num_matches \n FROM matches \n GROUP BY year \n ORDER BY num_matches DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Which year had the most matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "result": "winner_id, rank_pts \n FROM rankings \n INNER JOIN matches \n ON rankings.player_id = matches.winner_id \n GROUP BY winner_id \n ORDER BY COUNT(*) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the name and rank points of the winner who won the most times. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "result": "victor, SUM(rank_pts) as total_rank_pts \nFROM matches \nJOIN rankings ON matches.tourney_date = rankings.day_of_ranking AND matches.victor = rankings.player_id \nGROUP BY victor \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the name of the winner who has won the most matches, and how many rank points does this player have? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "result": "players.given_name || ' ' || players.family_name AS winner_name\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nJOIN rankings ON players.player_id = rankings.player_id\nWHERE matches.tourney_id = 'Australian Open' AND rankings.rank_pts = (SELECT MAX(rankings.rank_pts) FROM rankings)\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "result": "victor \nFROM matches \nWHERE tourney_id = 'Australian Open' \nAND rank_pts = (SELECT MAX(rank_pts) FROM rankings WHERE rankings.player_id = matches.winner_id);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the name of the winner with the most rank points who participated in the Australian Open tournament? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "result": "loser.family_name, loser.given_name, winner.family_name, winner.given_name \n FROM matches\n JOIN players as loser ON matches.loser_id = loser.player_id\n JOIN players as winner ON matches.winner_id = winner.player_id\n WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### find the names of loser and winner who played in the match with greatest number of minutes. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest match?",
        "result": "winner.given_name, winner.family_name, loser.given_name, loser.family_name\nFROM matches\nINNER JOIN players AS winner ON matches.winner_id = winner.player_id\nINNER JOIN players AS loser ON matches.loser_id = loser.player_id\nWHERE matches.minutes = (SELECT MAX(minutes) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the names of the winner and loser who played in the longest match? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each player and their first name.",
        "result": "AVG(rank_pts) as avg_ranking, given_name\n FROM players\n JOIN rankings ON players.player_id = rankings.player_id\n GROUP BY given_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the average ranking for each player and their first name. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their average rankings?",
        "result": "players.given_name, AVG(rankings.position) \n FROM players\n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.player_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the first names of all players, and their average rankings? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each player and their first name.",
        "result": "players.given_name, SUM(rankings.rank_pts) AS total_ranking_points\n FROM players\n INNER JOIN rankings ON players.player_id = rankings.player_id\n GROUP BY players.player_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the total ranking points for each player and their first name. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the first names of all players, and their total ranking points?",
        "result": "given_name, SUM(rank_pts) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the first names of all players, and their total ranking points? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of players for each country.",
        "result": "state_code, COUNT(*) AS player_count\n FROM players\n GROUP BY state_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### find the number of players for each country. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many players are from each country?",
        "result": "state_code, COUNT(*) as num_players\n FROM players\n GROUP BY state_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many players are from each country? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the code of the country where has the greatest number of players.",
        "result": "state_code \nFROM players \nGROUP BY state_code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### find the code of the country where has the greatest number of players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of the country with the most players?",
        "result": "state_code FROM players GROUP BY state_code ORDER BY COUNT(player_id) DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the code of the country with the most players? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the codes of countries that have more than 50 players.",
        "result": "state_code \nFROM players \nGROUP BY state_code \nHAVING COUNT(player_id) > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the codes of countries that have more than 50 players. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the codes of countries with more than 50 players?",
        "result": "state_code FROM players \nGROUP BY state_code \nHAVING COUNT(player_id) > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the codes of countries with more than 50 players? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of tours for each ranking date.",
        "result": "day_of_ranking, COUNT(tours) as total_tours \n FROM rankings \n GROUP BY day_of_ranking;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the total number of tours for each ranking date. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total tours were there for each ranking date?",
        "result": "day_of_ranking, SUM(tours) as total_tours\n FROM rankings\n GROUP BY day_of_ranking",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many total tours were there for each ranking date? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of matches happened in each year.",
        "result": "year, COUNT(*) AS num_matches\n FROM matches\n GROUP BY year;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the number of matches happened in each year. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many matches were played in each year?",
        "result": "year, COUNT(*) as num_matches \n FROM matches \n GROUP BY year;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many matches were played in each year? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "result": "winner_id, champion_ranking\n FROM matches \n WHERE winner_id IN (SELECT winner_id FROM matches ORDER BY victor_how_old LIMIT 3)\n ORDER BY victor_how_old ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the name and rank of the 3 youngest winners across all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "result": "winner_id, champion_ranking FROM matches\nORDER BY victor_how_old ASC\nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What are the names and ranks of the three youngest winners across all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "result": "COUNT(DISTINCT winner_id) \nFROM matches \nWHERE tourney_level = 'WTA Championships' AND winner_hand = 'L';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many different winners both participated in the WTA Championships and were left handed? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "result": "COUNT(DISTINCT winner_id) \nFROM matches \nWHERE winner_hand = 'L' \nAND tourney_level = 'WTA Championships';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the number of left handed winners who participated in the WTA Championships. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "result": "winner.given_name, winner.winner_ioc, winner.victor_how_old\n FROM matches AS winner\n JOIN rankings AS r ON r.player_id = winner.winner_id\n WHERE r.rank_pts = (SELECT MAX(rank_pts) FROM rankings)\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the first name, country code and birth date of the winner who has the highest rank points in all matches. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "result": "players.given_name, players.state_code, players.birthday \n FROM players \n JOIN matches ON players.player_id = matches.winner_id \n JOIN rankings ON players.player_id = rankings.player_id \n WHERE rankings.rank_pts = (SELECT MAX(rankings.rank_pts) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### What is the first name, country code, and birth date of the player with the most winner rank points across all matches? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of players for each hand type.",
        "result": "hand, COUNT(*) as num_players \n FROM players \n GROUP BY hand;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### Find the number of players for each hand type. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many players are there for each hand type?",
        "result": "hand, COUNT(*) AS count_players FROM players GROUP BY hand;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,given_name,family_name,hand,birthday,state_code)\n;# matches(best_of,draw_size,total_loss,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,failure,underdog_tier,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,event_name,victor_how_old,winner_entry,winner_side,winner_ht,winner_id,winner_ioc,victor,champion_ranking,champion_class_pts,winner_seed,year)\n;# rankings(day_of_ranking,position,player_id,rank_pts,tours)\n.# \n ### How many players are there for each hand type? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many ships ended up being 'Captured'?",
        "result": "COUNT(*) FROM ship WHERE how_vessel_disposed = 'Captured'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### How many ships ended up being 'Captured'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "result": "name, heavy_measure FROM ship ORDER BY name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### List the name and tonnage ordered by in descending alphaetical order for the names. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "result": "name, date, consequence \nFROM battle;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### List the name, date and result of each battle. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "result": "MAX(killed) as max_death_toll, MIN(killed) as min_death_toll\nFROM death;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What is maximum and minimum death toll caused each time? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "result": "AVG(killed + bruised) FROM death",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What is the average number of injuries caused each time? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "result": "death.details, death.killed, death.bruised \nFROM death \nINNER JOIN ship ON death.caused_by_ship_id = ship.id \nWHERE ship.heavy_measure = 't'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What are the death and injury situations caused by the ship with tonnage 't'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "result": "name, consequence\nFROM battle\nWHERE bulgarian_head != 'Boril'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What are the name and results of the battles when the bulgarian commander is not 'Boril' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "result": "battle.id, battle.name \nFROM battle \nWHERE battle.id IN \n    (SELECT DISTINCT ship.missed_in_warfare \n     FROM ship \n     WHERE ship.craft_classification = 'Brig') \nAND battle.consequence = 'Defeat';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What are the different ids and names of the battles that lost any 'Brig' type shipes? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "result": "battle.id, battle.name \nFROM battle \nWHERE (SELECT SUM(death.killed) FROM death WHERE death.caused_by_ship_id IN (SELECT ship.id FROM ship WHERE ship.missed_in_warfare = 0 AND ship.position = 'lost') AND death.details LIKE '%' || battle.id || '%') > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What are the ids and names of the battles that led to more than 10 people killed in total. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the ship id and name that caused most total injuries?",
        "result": "caused_by_ship_id, name \nFROM ship \nJOIN death ON ship.id = death.caused_by_ship_id \nGROUP BY caused_by_ship_id \nORDER BY COUNT(killed) + COUNT(bruised) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What is the ship id and name that caused most total injuries? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "result": "DISTINCT name FROM battle WHERE bulgarian_head = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "question": "How many different results are there for the battles?",
        "result": "COUNT(DISTINCT consequence) FROM battle;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### How many different results are there for the battles? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "result": "COUNT(DISTINCT battle.id) \nFROM battle \nLEFT JOIN (\n  SELECT DISTINCT missed_in_warfare \n  FROM ship \n  WHERE heavy_measure = '225'\n) AS lost_ships \nON battle.id = lost_ships.missed_in_warfare \nWHERE lost_ships.missed_in_warfare IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### How many battles did not lose any ship with tonnage '225'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "result": "battle.name, battle.date \nFROM battle \nINNER JOIN ship ON (battle.id = ship.missed_in_warfare) \nWHERE ship.name = 'Lettice' OR ship.name = 'HMS Atalanta'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "result": "battle.name, battle.consequence, battle.bulgarian_head \nFROM battle \nINNER JOIN ship ON battle.id = ship.missed_in_warfare \nWHERE ship.id IS NULL AND battle.consequence = 'no ships lost' AND battle.name LIKE '%English Channel%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the notes of the death events which has substring 'East'?",
        "result": "notes FROM death WHERE notes LIKE '%East%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_head,latin_commander,consequence)\n;# ship(missed_in_warfare,id,name,heavy_measure,craft_classification,position,how_vessel_disposed)\n;# death(caused_by_ship_id,id,details,killed,bruised)\n.# \n ### What are the notes of the death events which has substring 'East'? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "result": "path_1, way_2\nFROM Addresses",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### what are all the addresses including line 1 and line 2? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "result": "path_1, way_2\nFROM Addresses;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first and second line for all addresses? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses in total are listed?",
        "result": "COUNT(*) FROM Courses;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many courses in total are listed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many courses are there?",
        "result": "COUNT(*) FROM Courses;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many courses are there? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math course described?",
        "result": "Courses.course_details \nFROM Courses \nWHERE Courses.course_designation = 'Math';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How is the math course described? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the descriptions for all the math courses?",
        "result": "Courses.course_details\nFROM Courses\nWHERE Courses.course_designation LIKE '%math%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the descriptions for all the math courses? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "result": "Addresses.postcode\nFROM Addresses\nWHERE Addresses.capital_area = 'Port Chelsea';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the zip code of the address in the city Port Chelsea? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "result": "Addresses.postcode \nFROM Addresses \nWHERE Addresses.line_3 = 'Port Chelsea'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the zip code for Port Chelsea? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which department offers the most number of degrees? List department name and id.",
        "result": "Degree_Programs.department_id, Departments.department_cognomen \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nGROUP BY Degree_Programs.department_id \nORDER BY COUNT(Degree_Programs.degree_program_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which department offers the most number of degrees? List department name and id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "question": "What is the name and id of the department with the most number of degrees ?",
        "result": "Departments.department_id, Departments.department_cognomen \n FROM Departments \n JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id \n GROUP BY Departments.department_id \n ORDER BY COUNT(Degree_Programs.degree_program_id) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the name and id of the department with the most number of degrees ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "result": "COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many departments offer any degree? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "result": "COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different departments offer degrees? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "result": "COUNT(DISTINCT degree_digest_designation) \nFROM Degree_Programs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different degree names are offered? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "result": "COUNT(DISTINCT degree_program_id) AS num_degrees\nFROM Degree_Programs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different degrees are offered? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department offer?",
        "result": "COUNT(*)\nFROM Degree_Programs\nWHERE department_id = (SELECT department_id FROM Departments WHERE department_cognomen = 'engineering');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many degrees does the engineering department offer? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "result": "COUNT(*) FROM Degree_Programs \nWHERE department_id = (SELECT department_id FROM Departments WHERE department_cognomen = 'engineering')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many degrees does the engineering department have? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions of all the sections?",
        "result": "Sections.section_designation, Sections.details FROM Sections;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions of all the sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and descriptions for all the sections?",
        "result": "Sections.section_designation, Sections.details FROM Sections",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions for all the sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of courses having at most 2 sections?",
        "result": "Courses.course_designation, Courses.number_of_course\n FROM Courses \n WHERE Courses.number_of_course <= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and id of courses having at most 2 sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every course with less than 2 sections?",
        "result": "Courses.course_designation, Courses.number_of_course \n FROM Courses \n LEFT JOIN Sections ON Courses.number_of_course = Sections.course_id \n GROUP BY Courses.number_of_course \n HAVING COUNT(Sections.section_id) < 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and ids of every course with less than 2 sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "result": "section_designation \nFROM Sections \nORDER BY section_designation DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### List the section_name in reversed lexicographical order. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "result": "section_designation FROM Sections ORDER BY section_designation DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names of the sections in reverse alphabetical order? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "result": "Semesters.semester_id, Semesters.semester_cognomen\nFROM Semesters\nJOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nGROUP BY Semesters.semester_id\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the semester which most student registered in? Show both the name and the id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "result": "Semesters.semester_id, Semesters.semester_cognomen \n FROM Semesters \n JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n GROUP BY Semesters.semester_id \n ORDER BY COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### For each semester, what is the name and id of the one with the most students registered? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the description of the department whose name has the substring the computer?",
        "result": "Departments.department_info \n FROM Departments \n WHERE department_cognomen LIKE '%computer%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the description of the department whose name has the substring the computer? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the department description for the one whose name has the word computer?",
        "result": "department_info \n FROM Departments \n WHERE department_cognomen LIKE '%computer%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the department description for the one whose name has the word computer? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "result": "Students.forename, Students.midname, Students.surname, Students.student_id\nFROM Students\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nINNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nINNER JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.number_of_course\nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nINNER JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id\nGROUP BY Students.student_id\nHAVING COUNT(DISTINCT Degree_Programs.degree_program_id) = 2 AND COUNT(DISTINCT Semesters.semester_id) = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "result": "Students.student_id, Students.forename, Students.midname, Students.surname\nFROM Students\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nINNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nINNER JOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id\nGROUP BY Students.student_id\nHAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2 AND COUNT(DISTINCT Student_Enrolment.semester_id) = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "result": "Students.forename, Students.midname, Students.surname \nFROM Students \nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_digest_designation = 'Bachelor';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "result": "Students.forename, Students.midname, Students.surname \nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_digest_designation LIKE '%Bachelors%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the first, middle, and last names for everybody enrolled in a Bachelors program? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "result": "Degree_Programs.degree_digest_designation, COUNT(Student_Enrolment.student_id) AS num_students \n FROM Degree_Programs \n JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \n GROUP BY Degree_Programs.degree_digest_designation \n ORDER BY num_students DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the kind of program which most number of students are enrolled in? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "result": "Degree_Programs.degree_summary_description\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_summary_description\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the degree summary name that has the most number of students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description \n FROM Student_Enrolment \n JOIN Degree_Programs \n ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \n GROUP BY Degree_Programs.degree_program_id \n ORDER BY COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the program which most number of students are enrolled in. List both the id and the summary. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description\nFROM Degree_Programs\nINNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_description\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the program id and the summary of the degree that has the most students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "result": "Students.student_id, Students.forename, Students.midname, Students.surname, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments \n FROM Students \n JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \n GROUP BY Students.student_id \n ORDER BY number_of_enrollments DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "result": "Students.student_id, Students.forename, Students.midname, Students.surname, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments\nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nGROUP BY Students.student_id \nORDER BY number_of_enrollments DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "result": "Semesters.semester_cognomen \nFROM Semesters \nLEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nWHERE Student_Enrolment.student_enrolment_id IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which semesters do not have any student enrolled? List the semester name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the semester with no students enrolled?",
        "result": "Semesters.semester_cognomen \nFROM Semesters \nLEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nWHERE Student_Enrolment.semester_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the name of the semester with no students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "result": "DISTINCT Courses.course_designation \n FROM Courses \n INNER JOIN Sections ON Sections.course_id = Courses.number_of_course \n INNER JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.course_id = Courses.number_of_course \n INNER JOIN Student_Enrolment ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are all the course names of the courses which ever have students enrolled in? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all courses that have some students enrolled?",
        "result": "Courses.course_designation \nFROM Courses \nINNER JOIN Sections ON Courses.number_of_course = Sections.course_id \nINNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id \nINNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names of all courses that have some students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the course with most number of enrollments?",
        "result": "Courses.course_designation \nFROM \nCourses \nJOIN \nStudent_Enrolment_Courses ON Courses.number_of_course = Student_Enrolment_Courses.course_id \nGROUP BY \nCourses.course_designation \nORDER BY \nCOUNT(Student_Enrolment_Courses.student_course_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What's the name of the course with most number of enrollments? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the course with the most students enrolled?",
        "result": "Courses.course_designation\nFROM Student_Enrolment_Courses\nJOIN Sections ON Student_Enrolment_Courses.course_id = Sections.course_id\nJOIN Courses ON Sections.course_id = Courses.number_of_course\nGROUP BY Courses.course_designation\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the name of the course with the most students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "result": "Students.surname \nFROM \nStudents \nLEFT JOIN \nStudent_Enrolment ON Students.student_id = Student_Enrolment.student_id \nWHERE \nStudents.state = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "result": "Students.surname \nFROM Students \nWHERE Students.state_province_county = 'North Carolina' \nAND Students.student_id NOT IN \n(SELECT Student_Enrolment.student_id FROM Student_Enrolment)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the last name of the students who live in North Carolina but have not registered in any degree programs? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "result": "Transcripts.transcript_id, Transcripts.transcript_time \n FROM Transcripts\n JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id \n GROUP BY Transcripts.transcript_id\n HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show the date and id of the transcript with at least 2 course results. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "result": "Transcripts.transcript_time, Transcripts.transcript_id\nFROM Transcripts\nJOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id\nGROUP BY Transcripts.transcript_id\nHAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the date and id of the transcript with at least 2 courses listed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "result": "Students.mobile_no FROM Students \nWHERE Students.forename = 'Timmothy' AND Students.surname = 'Ward';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the phone number of the man with the first name Timmothy and the last name Ward? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "result": "Students.mobile_no \nFROM Students \nWHERE Students.forename = 'Timmothy' AND Students.surname = 'Ward';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the mobile phone number of the student named Timmothy Ward ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "result": "Students.forename, Students.midname, Students.surname\nFROM Students\nORDER BY date_initially_itemized\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is the first student to register? List the first name, middle name and last name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the first student to register?",
        "result": "Students.forename, Students.midname, Students.surname \nFROM Students \nWHERE Students.student_id = (SELECT MIN(student_id) FROM Students)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first, middle, and last name of the first student to register? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "result": "\n\nStudents.forename, Students.midname, Students.surname \nFROM Students \nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nINNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id \nINNER JOIN Sections ON Student_Enrolment_Courses.course_id = Sections.course_id \nINNER JOIN Courses ON Sections.course_id = Courses.number_of_course \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_digest_designation LIKE '%Graduate%' \nORDER BY Students.date_initially_itemized ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is the earliest graduate of the school? List the first name, middle name and last name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "result": "Students.forename, Students.midname, Students.surname \nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nJOIN Sections ON Student_Enrolment_Courses.course_id = Sections.course_id\nJOIN Semesters ON Student_Enrolment.semester_id = Semesters.semester_id\nWHERE Semesters.semester_cognomen = 'earliest'\nORDER BY Semesters.semester_id\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first, middle, and last name of the earliest school graduate? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "result": "\n\nStudents.forename\nFROM Students\nWHERE Students.current_address_id != Students.permanent_address_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Whose permanent address is different from his or her current address? List his or her first name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "result": "Students.forename \nFROM Students \nWHERE Students.current_address_id <> Students.permanent_address_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first name of the student whose permanent address is different from his or her current one? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "result": "Addresses.address_id, Addresses.path_1, Addresses.way_2, Addresses.line_3\nFROM Addresses\nINNER JOIN Students ON Addresses.address_id = Students.current_address_id\nGROUP BY Addresses.address_id\nORDER BY COUNT(Students.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which address holds the most number of students currently? List the address id and all lines. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "result": "Addresses.address_id, Addresses.line_1, Addresses.line_2 \nFROM Addresses \nJOIN Students ON Addresses.address_id = Students.current_address_id \nGROUP BY Addresses.address_id \nORDER BY COUNT(Students.student_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the id, line 1, and line 2 of the address with the most students? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the transcripts printed?",
        "result": "AVG(strftime('%s', transcript_time)) FROM Transcripts;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### On average, when were the transcripts printed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "What is the average transcript date?",
        "result": "AVG(transcript_time) FROM Transcripts;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the average transcript date? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first transcript released? List the date and details.",
        "result": "\n\nMIN(transcript_time) AS first_transcript_date, see_also_elaboration\nFROM Transcripts",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### When is the first transcript released? List the date and details. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "result": "MIN(transcript_time), see_also_elaboration \n FROM Transcripts",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the earliest date of a transcript release, and what details can you tell me? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are released?",
        "result": "COUNT(*) FROM Transcripts",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many transcripts are released? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many transcripts are listed?",
        "result": "COUNT(*) FROM Transcripts;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many transcripts are listed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last transcript release date?",
        "result": "MAX(transcript_time) FROM Transcripts;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the last transcript release date? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last transcript released?",
        "result": "MAX(transcript_time) FROM Transcripts",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### When was the last transcript released? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "result": "Student_Enrolment_Courses.student_course_id, COUNT(*) AS max_enrollment_count \n FROM Student_Enrolment_Courses \n GROUP BY Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id \n HAVING max_enrollment_count >= 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "result": "Student_Enrolment_Courses.student_enrolment_id, COUNT(*) AS num_courses \n FROM Student_Enrolment_Courses \n GROUP BY Student_Enrolment_Courses.course_id \n ORDER BY num_courses DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "result": "Transcripts.transcript_time, Transcripts.transcript_id\n FROM Transcripts\n INNER JOIN Transcript_Contents ON Transcript_Contents.transcript_id = Transcripts.transcript_id\n GROUP BY Transcripts.transcript_id\n ORDER BY COUNT(Transcript_Contents.student_course_id) ASC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show the date of the transcript which shows the least number of results, also list the id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the transcript with the least number of results?",
        "result": "Transcripts.transcript_time, Transcripts.transcript_id \n FROM Transcripts\n INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id\n GROUP BY Transcripts.transcript_id\n ORDER BY COUNT(*) ASC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the date and id of the transcript with the least number of results? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "result": "Semesters.semester_cognomen \nFROM \n    Semesters \n    INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n    INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE \n    Degree_Programs.degree_digest_designation IN ('Bachelor', 'Master') \nGROUP BY \n    Semesters.semester_id \nHAVING \n    COUNT(DISTINCT Degree_Programs.degree_digest_designation) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the semester when both Master students and Bachelor students got enrolled in. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "result": "\n\nSemester_id FROM Student_Enrolment\nWHERE degree_program_id IN (\n  SELECT degree_program_id \n  FROM Degree_Programs \n  WHERE degree_digest_designation IN ('Masters', 'Bachelors')\n)\nGROUP BY Semester_id\nHAVING COUNT(DISTINCT degree_program_id) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the id of the semester that had both Masters and Bachelors students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different addresses do the students currently live?",
        "result": "COUNT(DISTINCT Students.current_address_id) FROM Students",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different addresses do the students currently live? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "What are the different addresses that have students living there?",
        "result": "Addresses.address_id, Addresses.path_1, Addresses.way_2, Addresses.line_3, Addresses.capital_area, Addresses.postcode, Addresses.state_province_county, Addresses.state, Addresses.other_address_details\n FROM Addresses\n JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the different addresses that have students living there? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student details in reversed lexicographical order.",
        "result": "student_id, forename, midname, surname, mobile_no, email_address, ssn, date_initially_itemized, time_left, fine_grained_description\nFROM Students\nORDER BY surname DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### List all the student details in reversed lexicographical order. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "result": "student_id, forename, midname, surname, mobile_no, email_address, ssn, date_initially_itemized, time_left, fine_grained_description\nFROM Students\nORDER BY surname DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What other details can you tell me about students in reverse alphabetical order? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "result": "* \n FROM Sections \n WHERE section_designation = 'h'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Describe the section h. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "result": "Sections.details FROM Sections WHERE Sections.section_designation='h'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the description for the section named h? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "result": "Students.forename \nFROM \nStudents \nINNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE \nAddresses.state = 'Haiti' OR Students.mobile_no = '09700166582'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "result": "Students.forename \nFROM \nStudents \nINNER JOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE \n(Addresses.state_province_county = 'Haiti' AND Addresses.capital_area = 'permanent') \nOR \nStudents.mobile_no = '09700166582'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,path_1,way_2,line_3,capital_area,postcode,state_province_county,state,other_address_details)\n;# Courses(number_of_course,course_designation,course_details,other_details)\n;# Departments(department_id,department_cognomen,department_info,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_digest_designation,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_designation,details,other_details)\n;# Semesters(semester_id,semester_cognomen,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,forename,midname,surname,mobile_no,email_address,ssn,date_initially_itemized,time_left,fine_grained_description)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_time,see_also_elaboration)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the title of all cartoons in alphabetical order.",
        "result": "name FROM Cartoon ORDER BY name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the title of all cartoons in alphabetical order. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "result": "name FROM Cartoon ORDER BY name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the titles of the cartoons sorted alphabetically? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all cartoon directed by \"Ben Jones\".",
        "result": "Cartoon.name \nFROM Cartoon \nWHERE Cartoon.conductor = \"Ben Jones\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List all cartoon directed by \"Ben Jones\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "result": "Cartoon.name FROM Cartoon WHERE Cartoon.conductor = \"Ben Jones\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the names of all cartoons directed by Ben Jones? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "result": "COUNT(*) FROM Cartoon WHERE writer = \"Joseph Kuhr\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### How many cartoons were written by \"Joseph Kuhr\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "result": "COUNT(id) \nFROM Cartoon \nWHERE writer = 'Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the number of cartoones written by Joseph Kuhr? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all cartoon titles and their directors ordered by their air date",
        "result": "Cartoon.name, Cartoon.conductor\nFROM Cartoon\nORDER BY Cartoon.original_air_time ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### list all cartoon titles and their directors ordered by their air date \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "result": "Cartoon.name, Cartoon.conductor \n FROM Cartoon\n ORDER BY Cartoon.original_air_time",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the name and directors of all the cartoons that are ordered by air date? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "result": "Cartoon.name \nFROM Cartoon \nWHERE Cartoon.conductor = 'Ben Jones' OR Cartoon.conductor = 'Brandon Vietti';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "result": "Cartoon.name FROM Cartoon \nWHERE Cartoon.conductor = 'Ben Jones' OR Cartoon.conductor = 'Brandon Vietti'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "result": "Country, COUNT(*) as Number_of_Channels\n FROM TV_Channel\n GROUP BY Country\n ORDER BY Number_of_Channels DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### Which country has the most of TV Channels? List the country and number of TV Channels it has. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "result": "Country, COUNT(*) AS Number_of_Channels\n FROM TV_Channel\n GROUP BY Country\n ORDER BY Number_of_Channels DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the country with the most number of TV Channels and how many does it have? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "List the number of different series names and contents in the TV Channel table.",
        "result": "COUNT(DISTINCT series_designation), COUNT(DISTINCT material) FROM TV_Channel;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the number of different series names and contents in the TV Channel table. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "How many different series and contents are listed in the TV Channel table?",
        "result": "COUNT(DISTINCT series_designation), COUNT(DISTINCT material) FROM TV_Channel",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### How many different series and contents are listed in the TV Channel table? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "result": "* FROM TV_Channel WHERE series_designation = \"Sky Radio\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the content of TV Channel with serial name \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "result": "* FROM TV_series WHERE TV_station = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the content of the series Sky Radio? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "result": "pack_possible_choices FROM TV_Channel WHERE series_designation = \"Sky Radio\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the Package Option of TV Channel with serial name \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "result": "TV_Channel.pack_possible_choices \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.TV_station \nWHERE TV_series.series_designation = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the Package Options of the TV Channels whose series names are Sky Radio? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "result": "COUNT(*) FROM TV_Channel WHERE dialect = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### How many TV Channel using language English? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "result": "COUNT(*) FROM TV_Channel WHERE dialect = 'English';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### How many TV Channels use the English language? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "result": "dialect, COUNT(*) AS num_channels \n FROM TV_Channel \n GROUP BY dialect \n ORDER BY num_channels ASC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the language used least number of TV Channel. List language and number of TV Channel. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "result": "TV_Channel.dialect, COUNT(TV_Channel.id) AS channel_count \n FROM TV_Channel \n GROUP BY TV_Channel.dialect \n ORDER BY channel_count ASC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the languages used by the least number of TV Channels and how many channels use it? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "result": "TV_Channel.dialect, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.dialect;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List each language and the number of TV Channels using it. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "result": "dialect, COUNT(*) \nFROM TV_Channel \nGROUP BY dialect",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### For each language, list the number of TV Channels that use it. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "result": "TV_Channel.series_designation\nFROM TV_Channel\nINNER JOIN TV_series ON TV_Channel.id = TV_series.TV_station\nINNER JOIN Cartoon ON Cartoon.medium = TV_Channel.material\nWHERE Cartoon.name = \"The Rise of the Blue Beetle!\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "result": "TV_series.chapter \nFROM TV_series \nINNER JOIN TV_Channel ON TV_series.TV_station = TV_Channel.id \nINNER JOIN Cartoon ON Cartoon.medium = TV_Channel.material \nWHERE Cartoon.name = 'The Rise of the Blue Beetle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "result": "Cartoon.name \nFROM Cartoon \nINNER JOIN TV_series ON Cartoon.id = TV_series.id \nINNER JOIN TV_Channel ON TV_series.TV_station = TV_Channel.series_designation \nWHERE TV_Channel.series_designation = \"Sky Radio\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "result": "Cartoon.name FROM Cartoon\nINNER JOIN TV_series ON Cartoon.id = TV_series.id\nINNER JOIN TV_Channel ON TV_series.TV_station = TV_Channel.id\nWHERE TV_Channel.series_designation = \"Sky Radio\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "result": "*\nFROM TV_series\nORDER BY 18_49_Rating_Share DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the Episode of all TV series sorted by rating. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "result": "* FROM TV_series \n ORDER BY 18_49_Rating_Share DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are all of the episodes ordered by ratings? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "result": "TV_series.chapter, TV_series.18_49_Rating_Share \n FROM TV_series \n ORDER BY TV_series.18_49_Rating_Share DESC \n LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List top 3 highest Rating  TV series. List the TV series's Episode and Rating. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "result": "TV_series.chapter, TV_series.18_49_Rating_Share \n FROM TV_series \n ORDER BY TV_series.18_49_Rating_Share DESC \n LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are 3 most highly rated episodes in the TV series table and what were those ratings? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "result": "MIN(percentage_share), MAX(percentage_share) FROM TV_series;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is minimum and maximum share of TV series? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "result": "MAX(percentage_share), MIN(percentage_share) FROM TV_series;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the maximum and minimum share for the TV series? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "result": "TV_series.first_release_by \nFROM \nTV_series \nWHERE \nTV_series.chapter = \"A Love of a Lifetime\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the air date of TV series with Episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "result": "original_air_time\nFROM Cartoon\nWHERE name = \"A Love of a Lifetime\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### When did the episode \"A Love of a Lifetime\" air? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "result": "TV_series.every_week_ranking\nFROM TV_series\nWHERE TV_series.chapter = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "result": "every_week_ranking \nFROM \n  TV_series \nWHERE \n  chapter = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the weekly rank for the episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "result": "TV_Channel.series_designation \nFROM \nTV_Channel \nINNER JOIN \nTV_series \nON \nTV_Channel.id = TV_series.TV_station \nWHERE \nTV_series.chapter = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "result": "TV_series.name \nFROM TV_series \nINNER JOIN Cartoon \nON TV_series.id = Cartoon.TV_station \nWHERE Cartoon.name = \"A Love of a Lifetime\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the name of the series that has the episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "result": "Episode.*\n FROM Episode\n INNER JOIN TV_series ON Episode.series_id = TV_series.id\n INNER JOIN TV_Channel ON TV_series.TV_station = TV_Channel.id\n WHERE TV_Channel.series_designation = \"Sky Radio\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "result": "TV_series.chapter \nFROM TV_series \nWHERE TV_series.TV_station = \"Sky Radio\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the episode for the TV series named \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "result": "Cartoon.conductor, COUNT(Cartoon.id)\n FROM Cartoon\n GROUP BY Cartoon.conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### Find the number of cartoons directed by each of the listed directors. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many cartoons did each director create?",
        "result": "conductor, COUNT(id) \nFROM Cartoon \nGROUP BY conductor;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### How many cartoons did each director create? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "result": "Cartoon.manufacture_codification, TV_Channel.series_designation\nFROM Cartoon\nJOIN TV_series ON Cartoon.id = TV_series.id\nJOIN TV_Channel ON TV_series.TV_station = TV_Channel.id\nWHERE Cartoon.original_air_time = (SELECT MAX(original_air_time) FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### Find the production code and channel of the most recently aired cartoon . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "result": "Cartoon.manufacture_codification, TV_Channel.series_designation \n FROM Cartoon\n INNER JOIN TV_Channel ON Cartoon.medium = TV_Channel.id\n ORDER BY Cartoon.original_air_time DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the produdction code and channel of the most recent cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "result": "TV_Channel.pack_possible_choices, TV_series.name\nFROM TV_Channel\nINNER JOIN TV_series ON TV_Channel.series_designation = TV_series.id\nWHERE TV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "result": "TV_Channel.pack_possible_choices, TV_series.name \n FROM \n TV_Channel \n JOIN TV_series ON TV_Channel.id = TV_series.TV_station \n WHERE \n TV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.id \nWHERE Cartoon.writer = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### which countries' tv channels are playing some cartoon written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "result": "Country \nFROM \nTV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.TV_station \nJOIN Cartoon ON TV_series.id = Cartoon.medium \nWHERE \nCartoon.writer = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT Cartoon.id FROM Cartoon WHERE Cartoon.writer = 'Todd Casey')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### which countries' tv channels are not playing any cartoon written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "result": "TV_Channel.Country\nFROM TV_Channel\nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.id\nWHERE Cartoon.writer != 'Todd Casey'\nOR Cartoon.writer IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the countries that are not playing cartoons written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "result": "TV_series.name, TV_Channel.Country \n FROM TV_series \n INNER JOIN TV_Channel ON TV_series.TV_station = TV_Channel.id \n INNER JOIN Cartoon ON Cartoon.medium = TV_Channel.material \n WHERE Cartoon.conductor = 'Ben Jones' AND Cartoon.conductor = 'Michael Chang'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "result": "TV_Channel.series_designation, TV_Channel.Country \n FROM TV_Channel\n JOIN Cartoon ON Cartoon.medium = TV_Channel.material \n WHERE Cartoon.conductor IN ('Ben Jones', 'Michael Chang');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "result": "TV_Channel.pixel_feature_ratio_par, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.dialect != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "result": "pixel_feature_ratio_par, Country FROM TV_Channel WHERE dialect <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE Country IN (\n    SELECT Country \n    FROM TV_Channel \n    GROUP BY Country \n    HAVING COUNT(*) > 2 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE pack_possible_choices > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT Cartoon.id \nFROM Cartoon \nWHERE Cartoon.conductor = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### find the id of tv channels that do not play any cartoon directed by Ben Jones. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "result": "TV_Channel.id FROM TV_Channel\nWHERE TV_Channel.id NOT IN (\n    SELECT Cartoon.id FROM Cartoon\n    WHERE Cartoon.conductor = 'Ben Jones'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "result": "TV_Channel.pack_possible_choices\nFROM TV_Channel\nLEFT JOIN TV_series ON TV_Channel.id = TV_series.TV_station\nLEFT JOIN Cartoon ON Cartoon.conductor = 'Ben Jones'\nWHERE Cartoon.conductor IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### find the package option of the tv channel that do not have any cartoon directed by Ben Jones. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "result": "TV_Channel.pack_possible_choices \nFROM TV_Channel \nLEFT JOIN TV_series ON TV_Channel.series_designation = TV_series.id \nLEFT JOIN Cartoon ON TV_series.id = Cartoon.id \nWHERE Cartoon.conductor <> 'Ben Jones' OR Cartoon.conductor IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_designation,Country,dialect,material,pixel_feature_ratio_par,Hight_definition_TV,Pay_per_view_PPV,pack_possible_choices)\n;# TV_series(id,chapter,first_release_by,assessment,percentage_share,18_49_Rating_Share,Viewers_m,every_week_ranking,TV_station)\n;# Cartoon(id,name,conductor,writer,original_air_time,manufacture_codification,medium)\n.# \n ### What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many poker players are there?",
        "result": "COUNT(*) FROM poker_player;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### How many poker players are there? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of poker players.",
        "result": "COUNT(*) FROM poker_player;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Count the number of poker players. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "result": "profits \nFROM \npoker_player \nORDER BY \nprofits DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### List the earnings of poker players in descending order. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "result": "profits FROM poker_player ORDER BY profits DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the earnings of poker players, ordered descending by value? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of poker players.",
        "result": "poker_player.last_table_made, poker_player.finest_end \nFROM poker_player;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### List the final tables made and the best finishes of poker players. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all poker players?",
        "result": "poker_player.last_table_made, poker_player.finest_end \n FROM poker_player",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the final tables made and best finishes for all poker players? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average earnings of poker players?",
        "result": "AVG(profits) FROM poker_player;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the average earnings of poker players? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average earnings across all poker players.",
        "result": "AVG(profits) FROM poker_player",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the average earnings across all poker players. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the poker player with the highest earnings?",
        "result": "Poker_Player_ID, money_standing\nFROM poker_player\nWHERE profits = (SELECT MAX(profits) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the money rank of the poker player with the highest earnings? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the player with the greatest earnings.",
        "result": "Poker_Player_ID, money_standing \nFROM poker_player \nWHERE money_standing = (SELECT MAX(money_standing) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the money rank of the player with the greatest earnings. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "result": "MAX(last_table_made) \nFROM poker_player \nWHERE profits < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the maximum number of final tables made among poker players with earnings less than 200000? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "result": "MAX(last_table_made) FROM poker_player WHERE profits < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the maximum final tables made across all poker players who have earnings below 200000. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of poker players?",
        "result": "Poker_Player_ID, Name\nFROM poker_player\nJOIN people\nON poker_player.People_ID = people.People_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names of poker players? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the poker players.",
        "result": "Name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the names of all the poker players. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "result": "Poker_Player_ID, Name \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE profits > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names of poker players whose earnings is higher than 300000? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of poker players who have earnings above 300000.",
        "result": "Poker_Player_ID, People_ID, money_standing, profits \n FROM poker_player \n WHERE (money_standing + profits) > 300000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Give the names of poker players who have earnings above 300000. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "result": "p.Name \nFROM poker_player AS pp \nJOIN people AS p ON pp.People_ID = p.People_ID \nORDER BY pp.last_table_made ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### List the names of poker players ordered by the final tables made in ascending order. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "result": "poker_player.Poker_Player_ID, people.Name, poker_player.last_table_made \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nORDER BY poker_player.last_table_made ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names of poker players, ordered ascending by the number of final tables they have made? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "result": "born_date FROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY profits ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the birth date of the poker player with the lowest earnings? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "result": "people.born_date\nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE poker_player.profits = (SELECT MIN(profits) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the birth date of the poker player with the lowest earnings. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest poker player?",
        "result": "p.money_standing \nFROM \npoker_player p \nJOIN \npeople pe \nON \np.People_ID = pe.People_ID \nWHERE \npe.tallness = (SELECT MAX(tallness) FROM people) \nORDER BY \np.money_standing DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the money rank of the tallest poker player? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the poker player with the greatest height.",
        "result": "poker_player.money_standing \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.tallness = (SELECT MAX(tallness) FROM people)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the money rank of the poker player with the greatest height. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average earnings of poker players with height higher than 200?",
        "result": "AVG(profits) \nFROM poker_player \nJOIN people \nON poker_player.People_ID = people.People_ID \nWHERE tallness > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the average earnings of poker players with height higher than 200? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average earnings of poker players who are taller than 200.",
        "result": "AVG(profits) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.tallness > 200",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Give average earnings of poker players who are taller than 200. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of poker players in descending order of earnings?",
        "result": "p.Name \nFROM poker_player pp \nINNER JOIN people p ON pp.People_ID = p.People_ID \nORDER BY pp.profits DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names of poker players in descending order of earnings? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of poker players sorted by their earnings descending.",
        "result": "poker_player.Poker_Player_ID, people.Name \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nORDER BY poker_player.profits DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the names of poker players sorted by their earnings descending. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "result": "Nationality, COUNT(*) \nFROM people \nGROUP BY Nationality;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are different nationalities of people and the corresponding number of people from each nation? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each nationality?",
        "result": "Nationality, COUNT(*) \nFROM people \nGROUP BY Nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### How many people are there of each nationality? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common nationality of people?",
        "result": "Nationality\nFROM people\nGROUP BY Nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What is the most common nationality of people? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the nationality that is most common across all people.",
        "result": "Nationality \nFROM people \nGROUP BY Nationality \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Give the nationality that is most common across all people. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the nationalities that are shared by at least two people?",
        "result": "people.Nationality \nFROM people \nINNER JOIN \n(SELECT Nationality, COUNT(*) \nFROM people \nGROUP BY Nationality \nHAVING COUNT(*) > 1) AS grouped \nON people.Nationality = grouped.Nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the nationalities that are shared by at least two people? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the nationalities for which there are two or more people.",
        "result": "Nationality FROM people \nGROUP BY Nationality \nHAVING COUNT(*) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Return the nationalities for which there are two or more people. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "result": "Name, born_date \n FROM people \n ORDER BY Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### List the names and birth dates of people in ascending alphabetical order of name. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "result": "Name, born_date FROM people ORDER BY Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names and birth dates of people, ordered by their names in alphabetical order? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "result": "Name \nFROM people \nWHERE Nationality != 'Russia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Show names of people whose nationality is not \"Russia\". \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "result": "Name FROM people WHERE Nationality != 'Russia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names of people who are not from Russia? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not poker players.",
        "result": "people.Name \nFROM people \nLEFT JOIN poker_player \nON people.People_ID = poker_player.People_ID \nWHERE poker_player.Poker_Player_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### List the names of people that are not poker players. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not play poker?",
        "result": "people.Name \nFROM people \nLEFT JOIN poker_player \nON people.People_ID = poker_player.People_ID \nWHERE poker_player.Poker_Player_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### What are the names of people who do not play poker? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct nationalities are there?",
        "result": "COUNT(DISTINCT Nationality) FROM people;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### How many distinct nationalities are there? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different nationalities.",
        "result": "COUNT(DISTINCT Nationality) FROM people;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,last_table_made,finest_end,money_standing,profits)\n;# people(People_ID,Nationality,Name,born_date,tallness)\n.# \n ### Count the number of different nationalities. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "result": "COUNT(DISTINCT state) FROM AREA_CODE_STATE",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### How many states are there? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "result": "competitor_no, competitor_cognomen \nFROM CONTESTANTS \nORDER BY competitor_cognomen DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### List the contestant numbers and names, ordered by contestant name descending. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, phone numbers and states of all votes.",
        "result": "vote_id, call_up_no, state \nFROM VOTES;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### List the vote ids, phone numbers and states of all votes. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "result": "MAX(region_code), MIN(region_code) FROM AREA_CODE_STATE;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What are the maximum and minimum values of area codes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "result": "MAX(built) FROM VOTES WHERE state='CA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What is last date created of votes from the state 'CA'? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "result": "competitor_cognomen \nFROM \nCONTESTANTS \nWHERE \ncompetitor_cognomen != 'Jessie Alloway';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What are the names of the contestants whose names are not 'Jessie Alloway' \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and create time of all votes?",
        "result": "DISTINCT state, built\nFROM VOTES",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What are the distinct states and create time of all votes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "result": "competitor_no, competitor_cognomen\nFROM CONTESTANTS\nWHERE competitor_digits IN (\n    SELECT competitor_no \n    FROM VOTES \n    GROUP BY competitor_no \n    HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What are the contestant numbers and names of the contestants who had at least two votes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "result": "contestant_no, competitor_cognomen \nFROM \n  VOTES \n  JOIN CONTESTANTS \n    ON VOTES.competitor_no = CONTESTANTS.competitor_digits \nGROUP BY \n  contestant_no, competitor_cognomen \nHAVING \n  COUNT(vote_id) = (\n    SELECT \n      MIN(votes) \n    FROM \n      (\n        SELECT \n          competitor_no, COUNT(vote_id) as votes \n        FROM \n          VOTES \n        GROUP BY \n          competitor_no\n      ) \n      AS vote_count \n  ) \nORDER BY \n  contestant_no ASC \nLIMIT \n  1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "result": "COUNT(*) \nFROM VOTES \nWHERE state = 'NY' OR state = 'CA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What are the number of votes from state 'NY' or 'CA'? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many contestants did not get voted?",
        "result": "COUNT(*) FROM CONTESTANTS\nWHERE competitor_digits NOT IN (\n    SELECT competitor_no FROM VOTES\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### How many contestants did not get voted? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area code in which the most voters voted?",
        "result": "AREA_CODE_STATE.region_code \nFROM \nVOTES \nJOIN \nAREA_CODE_STATE \nON \nVOTES.state = AREA_CODE_STATE.state \nGROUP BY \nAREA_CODE_STATE.region_code \nORDER BY \nCOUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What is the area code in which the most voters voted? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "result": "VOTES.created, VOTES.state, VOTES.call_up_no \nFROM VOTES \nINNER JOIN CONTESTANTS \nON VOTES.competitor_no = CONTESTANTS.competitor_digits \nWHERE CONTESTANTS.competitor_cognomen = 'Tabatha Gehling'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "result": "AREA_CODE_STATE.region_code \nFROM AREA_CODE_STATE \nINNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state \nINNER JOIN CONTESTANTS ON CONTESTANTS.competitor_digits = VOTES.competitor_no \nWHERE CONTESTANTS.competitor_cognomen = 'Tabatha Gehling' \nINTERSECT \nSELECT AREA_CODE_STATE.region_code \nFROM AREA_CODE_STATE \nINNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state \nINNER JOIN CONTESTANTS ON CONTESTANTS.competitor_digits = VOTES.competitor_no \nWHERE CONTESTANTS.competitor_cognomen = 'Kelly Clauss'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "result": "competitor_cognomen \nFROM \nCONTESTANTS \nWHERE \ncompetitor_cognomen LIKE '%Al%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(region_code,state)\n;# CONTESTANTS(competitor_digits,competitor_cognomen)\n;# VOTES(vote_id,call_up_no,state,competitor_no,built)\n.# \n ### Return the names of the contestants whose names contain the substring 'Al' . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the countries that became independent after 1950?",
        "result": "Name FROM country WHERE IndepYear > 1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of all the countries that became independent after 1950? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the names of the nations that were founded after 1950. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have a republic as their form of government?",
        "result": "COUNT(*) FROM country WHERE government_type = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many countries have a republic as their form of government? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many countries have governments that are republics?",
        "result": "COUNT(*) FROM country WHERE government_type = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many countries have governments that are republics? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "result": "SUM(territory_space) FROM country WHERE region='Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total surface area of the countries in the Caribbean region? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much surface area do the countires in the Carribean cover together?",
        "result": "SUM(territory_space) FROM country WHERE landmass='Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How much surface area do the countires in the Carribean cover together? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "result": "continent.Name \nFROM country \nJOIN continent ON country.landmass = continent.Id \nWHERE country.Name = 'Anguilla';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which continent is Anguilla in? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "result": "country.landmass \nFROM country \nJOIN city ON country.codification = city.nation_code \nWHERE city.Name = 'Anguilla'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the continent name which Anguilla belongs to? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "result": "region FROM city WHERE Name='Kabul'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which region is the city Kabul located in? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "result": "region FROM city WHERE Name = 'Kabul'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What region is Kabul in? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nINNER JOIN city \nON countrylanguage.country_cipher = city.nation_code \nWHERE city.Name = 'Aruba' \nORDER BY countrylanguage.portion DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which language is the most popular in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nJOIN country ON countrylanguage.country_cipher = country.codification \nWHERE country.Name = \"Aruba\" AND countrylanguage.portion = 1.0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What language is predominantly spoken in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and life expectancies in Brazil?",
        "result": "citizens, life_expectation \nFROM city \nJOIN country ON city.nation_code = country.codification \nWHERE country.Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the population and life expectancies in Brazil? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil’s population and life expectancies.",
        "result": "total_citizens, life_expectation \nFROM country \nWHERE Name='Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give me Brazil’s population and life expectancies. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and population of Angola?",
        "result": "region, citizens FROM city WHERE nation_code = 'Angola';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the region and population of Angola? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its population?",
        "result": "region, citizens FROM city WHERE nation_code = 'AGO' AND Name = 'Angola';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What region does Angola belong to and what is its population? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "result": "AVG(life_expectation) \nFROM country \nWHERE region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "How long is the people’s average life expectancy in Central Africa?",
        "result": "AVG(life_expectation) FROM country WHERE location = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How long is the people’s average life expectancy in Central Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "result": "country.Name \nFROM country \nINNER JOIN city ON country.codification = city.nation_code \nWHERE country.location = 'Asia' \nORDER BY country.life_expectation ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "result": "country.Name \nFROM \ncountry \nWHERE \ncountry.location = 'Asia' \nORDER BY \ncountry.life_expectation ASC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "What is the total population and maximum GNP in Asia?",
        "result": "MAX(GNPOld), SUM(total_citizens)\nFROM country \nWHERE location = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total population and maximum GNP in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "result": "SUM(citizens), MAX(net_national_product) \nFROM city \nJOIN country ON city.nation_code = country.codification \nWHERE country.location = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many people live in Asia, and what is the largest GNP among them? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "What is the average life expectancy in African countries that are republics?",
        "result": "AVG(life_expectation) \nFROM country \nWHERE government_type = 'Republic' AND landmass = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the average life expectancy in African countries that are republics? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "result": "AVG(life_expectation) \nFROM country \nWHERE government_type = 'Republic' AND landmass = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the average life expectancy for countries in Africa which are republics? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "What is the total surface area of the continents Asia and Europe?",
        "result": "SUM(territory_space) FROM country WHERE landmass IN ('Asia', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total surface area of the continents Asia and Europe? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "result": "SUM(territory_space) \nFROM country \nWHERE location IN ('Asia', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the total surface area covered by countries in Asia or Europe. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "result": "SUM(citizens) FROM city WHERE region='Gelderland';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many people live in Gelderland district? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "What is the total population of Gelderland district?",
        "result": "SUM(citizens) \nFROM city \nWHERE region = 'Gelderland'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total population of Gelderland district? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "result": "AVG(GNPOld), SUM(total_citizens) \n FROM country \n WHERE government_type='US territory'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the average GNP and total population in all nations whose government is US territory? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "result": "AVG(GNPOld), SUM(total_citizens) FROM country WHERE territory_space = 'US';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the mean GNP and total population of nations which are considered US territory. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "How many unique languages are spoken in the world?",
        "result": "COUNT(DISTINCT dialect) AS unique_languages \nFROM countrylanguage",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many unique languages are spoken in the world? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "result": "COUNT(DISTINCT dialect) AS distinct_languages \n FROM countrylanguage",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the number of distinct languages used around the world? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "result": "COUNT(DISTINCT government_type) FROM country WHERE location = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many type of governments are in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different forms of governments are there in Africa?",
        "result": "COUNT(DISTINCT government_type) FROM country WHERE landmass = 'AF'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many different forms of governments are there in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "result": "COUNT(*) \nFROM countrylanguage \nWHERE country_cipher = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total number of languages used in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "result": "COUNT(*) FROM countrylanguage WHERE country_cipher = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many languages are spoken in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "result": "COUNT(*) \nFROM countrylanguage \nWHERE country_cipher='AFG' AND is_formal=1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many official languages does Afghanistan have? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "result": "COUNT(*) \nFROM countrylanguage \nWHERE country_cipher = 'AFG' AND is_formal = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many official languages are spoken in Afghanistan? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the country that speaks the largest number of languages?",
        "result": "country.Name \nFROM country \nJOIN (SELECT country_cipher, COUNT(DISTINCT dialect) AS num_languages \n      FROM countrylanguage \n      GROUP BY country_cipher \n      ORDER BY num_languages DESC \n      LIMIT 1) AS lang_counts \nON country.codification = lang_counts.country_cipher;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is name of the country that speaks the largest number of languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "result": "country.Name \nFROM country \nJOIN (\n   SELECT country_cipher, COUNT(DISTINCT dialect) AS language_count \n   FROM countrylanguage \n   GROUP BY country_cipher \n   ORDER BY language_count DESC \n   LIMIT 1\n) AS languages ON country.codification = languages.country_cipher",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the name of the nation that uses the greatest amount of languages. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "result": "country.landmass, COUNT(DISTINCT countrylanguage.dialect) AS num_dialects\nFROM country\nINNER JOIN countrylanguage ON countrylanguage.country_cipher = country.codification\nGROUP BY country.landmass\nORDER BY num_dialects DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which continent has the most diverse languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "result": "country.landmass, COUNT(DISTINCT countrylanguage.dialect) AS language_count\nFROM country\nJOIN countrylanguage ON countrylanguage.country_cipher = country.codification\nGROUP BY country.landmass\nORDER BY language_count DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which continent speaks the most languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "How many countries speak both English and Dutch?",
        "result": "COUNT(*) FROM countrylanguage \nWHERE dialect = 'English' AND country_cipher IN \n(SELECT country_cipher FROM countrylanguage WHERE dialect = 'Dutch')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many countries speak both English and Dutch? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "What is the number of nations that use English and Dutch?",
        "result": "COUNT(DISTINCT countrylanguage.country_cipher) \nFROM countrylanguage \nWHERE countrylanguage.dialect IN ('English', 'Dutch')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the number of nations that use English and Dutch? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of nations speak both English and French?",
        "result": "DISTINCT c1.Name\nFROM countrylanguage cl1\nJOIN country c1 ON cl1.country_cipher = c1.codification\nJOIN countrylanguage cl2 ON c1.codification = cl2.country_cipher\nJOIN country c2 ON cl2.country_cipher = c2.codification\nWHERE cl1.dialect = 'English' AND cl2.dialect = 'French'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of nations speak both English and French? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of nations that speak both English and French.",
        "result": "DISTINCT c.Name \nFROM country c \nINNER JOIN countrylanguage cl1 ON c.codification = cl1.country_cipher \nINNER JOIN countrylanguage cl2 ON c.codification = cl2.country_cipher \nWHERE cl1.dialect = 'English' AND cl2.dialect = 'French'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the names of nations that speak both English and French. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of nations where both English and French are official languages?",
        "result": "city.Name \nFROM city \nJOIN countrylanguage AS lang1 ON city.nation_code = lang1.country_cipher AND lang1.dialect = 'English' AND lang1.is_formal = 1 \nJOIN countrylanguage AS lang2 ON city.nation_code = lang2.country_cipher AND lang2.dialect = 'French' AND lang2.is_formal = 1 \nGROUP BY city.nation_code \nHAVING COUNT(DISTINCT lang1.dialect) = 1 AND COUNT(DISTINCT lang2.dialect) = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of nations where both English and French are official languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of countries with English and French as official languages.",
        "result": "country.Name\nFROM country\nINNER JOIN countrylanguage ON countrylanguage.country_cipher = country.codification\nWHERE (countrylanguage.dialect = 'English' AND countrylanguage.is_formal = 1)\nAND EXISTS (\n  SELECT 1 FROM countrylanguage\n  WHERE countrylanguage.country_cipher = country.codification\n  AND countrylanguage.dialect = 'French' AND countrylanguage.is_formal = 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the names of countries with English and French as official languages. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "result": "COUNT(DISTINCT country.location) FROM country \nJOIN countrylanguage ON country.codification=countrylanguage.country_cipher \nWHERE countrylanguage.dialect='Chinese'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the number of distinct continents where Chinese is spoken? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "result": "COUNT(DISTINCT country.location) FROM countrylanguage \nINNER JOIN country ON countrylanguage.country_cipher = country.codification \nWHERE countrylanguage.dialect = 'Chinese';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many continents speak Chinese? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "result": "city.region\nFROM city\nJOIN countrylanguage ON city.nation_code = countrylanguage.country_cipher\nWHERE countrylanguage.dialect IN ('English', 'Dutch')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the regions that use English or Dutch? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "result": "city.region \nFROM \ncity \nINNER JOIN countrylanguage \nON \ncity.nation_code = countrylanguage.country_cipher \nWHERE \ncountrylanguage.dialect = 'Dutch' OR countrylanguage.dialect = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which regions speak Dutch or English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "question": "What are the countries where either English or Dutch is the official language ?",
        "result": "country.Name \nFROM country \nJOIN countrylanguage ON countrylanguage.country_cipher = country.codification \nWHERE (countrylanguage.dialect = 'English' OR countrylanguage.dialect = 'Dutch') \nAND countrylanguage.is_formal = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the countries where either English or Dutch is the official language ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which countries have either English or Dutch as an official language?",
        "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON countrylanguage.country_cipher = country.codification \nWHERE (countrylanguage.dialect = 'English' OR countrylanguage.dialect = 'Dutch') \nAND countrylanguage.is_formal = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which countries have either English or Dutch as an official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nJOIN country ON countrylanguage.country_cipher = country.codification \nWHERE country.landmass = 'Asia' \nORDER BY countrylanguage.portion DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which language is the most popular on the Asian continent? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nJOIN country ON countrylanguage.country_cipher = country.codification \nWHERE country.landmass = 'Asia' \nGROUP BY countrylanguage.dialect \nORDER BY COUNT(DISTINCT countrylanguage.country_cipher) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the language that is used by the largest number of Asian nations? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nJOIN country ON countrylanguage.country_cipher = country.codification \nWHERE country.government_type = 'Republic' \nGROUP BY countrylanguage.dialect \nHAVING COUNT(DISTINCT countrylanguage.country_cipher) = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which languages are spoken by only one country in republic governments? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nJOIN country ON countrylanguage.country_cipher = country.codification \nWHERE country.government_type = 'Republic' \nGROUP BY countrylanguage.dialect \nHAVING COUNT(DISTINCT countrylanguage.country_cipher) = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What languages are only used by a single country with a republic government? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the city with the largest population that uses English.",
        "result": "city.Name FROM city \nJOIN countrylanguage ON city.nation_code = countrylanguage.country_cipher \nWHERE countrylanguage.dialect = 'English' \nORDER BY city.citizens DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Find the city with the largest population that uses English. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "result": "city.Name \nFROM city \nJOIN countrylanguage ON city.nation_code = countrylanguage.country_cipher \nWHERE countrylanguage.dialect = 'English' \nORDER BY city.citizens DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the most populace city that speaks English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "result": "country.Name, country.total_citizens, country.life_expectation \nFROM country \nWHERE country.location = 'Asia' \nORDER BY country.territory_space DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Find the name, population and expected life length of asian country with the largest area? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "result": "country.Name, country.total_citizens, country.life_expectation\nFROM country\nWHERE country.landmass = 'Asia'\nORDER BY country.territory_space DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the name, population, and life expectancy of the largest Asian country by land? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "result": "AVG(life_expectation) FROM country WHERE codification NOT IN (SELECT country_cipher FROM countrylanguage WHERE dialect='English' AND is_formal='T');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is average life expectancy in the countries where English is not the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "result": "AVG(life_expectation) FROM country \nWHERE codification NOT IN \n(SELECT country_cipher FROM countrylanguage \nWHERE dialect = 'English' AND is_formal = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the mean life expectancy of countries in which English is not the official language. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "result": "SUM(citizens) FROM city \nWHERE nation_code IN \n(SELECT codification FROM country WHERE NOT EXISTS \n(SELECT * FROM countrylanguage WHERE dialect='English' AND country_cipher=codification))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total number of people living in the nations that do not use English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in countries that do not speak English?",
        "result": "SUM(citizens) FROM city \nWHERE nation_code IN \n(SELECT codification FROM country WHERE country_cipher NOT IN \n(SELECT country_cipher FROM countrylanguage WHERE dialect = 'English'));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many people live in countries that do not speak English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "result": "countrylanguage.dialect\nFROM \ncountrylanguage \nJOIN \ncountry \nON countrylanguage.country_cipher = country.codification \nWHERE country.country_head = 'Beatrix' AND countrylanguage.is_formal = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the official language spoken in the country whose head of state is Beatrix? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nJOIN country ON countrylanguage.country_cipher = country.codification \nWHERE country.country_head = 'Beatrix'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the official language used in the country the name of whose head of state is Beatrix. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "result": "COUNT(DISTINCT countrylanguage.dialect)\nFROM countrylanguage\nINNER JOIN country ON countrylanguage.country_cipher = country.codification\nWHERE country.IndepYear < 1930 AND countrylanguage.is_formal = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total number of unique official languages spoken in the countries that are founded before 1930? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "result": "COUNT(DISTINCT dialect)\nFROM countrylanguage\nWHERE country_cipher IN (\n    SELECT codification\n    FROM country\n    WHERE IndepYear < 1930\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### For the countries founded before 1930, what is the total number of distinct official languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "result": "country.Name \nFROM country \nWHERE country.territory_space > (SELECT MAX(territory_space) FROM country WHERE landmass='Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the countries that have greater surface area than any country in Europe? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater area than that of any country in Europe?",
        "result": "country.Name \nFROM country \nWHERE country.territory_space > (SELECT MAX(territory_space) FROM country WHERE location = 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which countries have greater area than that of any country in Europe? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "result": "country.Name \nFROM country \nWHERE country.landmass='AF' AND country.total_citizens < (\n  SELECT MIN(total_citizens) \n  FROM country \n  WHERE landmass='AS'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the African countries that have a  population less than any country in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "result": "country.Name \nFROM \ncountry \nWHERE \ncountry.landmass = 'Africa' \nAND \ncountry.total_citizens < (\n    SELECT \n    MIN(total_citizens) \n    FROM \n    country \n    WHERE \n    landmass = 'Asia'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which African countries have a smaller population than that of any country in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "result": "country.Name \nFROM country \nWHERE country.continent = 'Asia' \nAND country.total_citizens > (\n    SELECT MAX(total_citizens) \n    FROM country \n    WHERE continent = 'Africa'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which Asian countries have a population that is larger than any country in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "result": "country.Name \nFROM country \nJOIN city ON country.codification = city.nation_code \nWHERE country.landmass = 'Asia' \nAND country.total_citizens > ALL \n    (SELECT total_citizens \n     FROM country \n     WHERE landmass = 'Africa') \nGROUP BY country.Name \nORDER BY country.Name ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the Asian countries which have a population larger than that of any country in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the country codes for countries that do not speak English?",
        "result": "codification \nFROM country \nWHERE codification NOT IN \n    (SELECT country_cipher FROM countrylanguage WHERE dialect = 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the country codes for countries that do not speak English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the country codes for countries that do not speak English.",
        "result": "country.codification \nFROM country \nLEFT JOIN countrylanguage ON country.codification = countrylanguage.country_cipher \nWHERE countrylanguage.dialect <> 'English' OR countrylanguage.dialect IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the country codes for countries that do not speak English. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the country codes of countries where people use languages other than English?",
        "result": "country.codification \nFROM country \nINNER JOIN countrylanguage \nON country.codification = countrylanguage.country_cipher \nWHERE countrylanguage.dialect <> 'English';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the country codes of countries where people use languages other than English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "result": "country.codification\nFROM country\nINNER JOIN countrylanguage ON country.codification = countrylanguage.country_cipher\nWHERE countrylanguage.dialect != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "result": "codification FROM country \nWHERE codification NOT IN \n(SELECT country_cipher FROM countrylanguage WHERE dialect = 'English') \nAND government_type != 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the codes of the countries that do not speak English and whose government forms are not Republic? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "result": "country.codification \nFROM \ncountry \nLEFT JOIN \ncountrylanguage ON country.codification = countrylanguage.country_cipher \nWHERE \n(countrylanguage.dialect <> 'English' OR countrylanguage.dialect IS NULL) \nAND \ncountry.government_type <> 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the codes of countries that do not speak English and do not have Republics for governments. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which cities are in European countries where English is not the official language?",
        "result": "city.Name\nFROM city\nINNER JOIN countrylanguage ON city.nation_code = countrylanguage.country_cipher\nINNER JOIN country ON city.nation_code = country.codification\nWHERE country.landmass = 'Europe' AND countrylanguage.dialect != 'English' AND countrylanguage.is_formal = 'F'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which cities are in European countries where English is not the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "result": "city.Name \nFROM city \nJOIN country ON city.nation_code = country.codification \nWHERE country.landmass = 'Europe' AND NOT EXISTS (\n    SELECT 1 \n    FROM countrylanguage \n    WHERE countrylanguage.country_cipher = country.codification \n    AND countrylanguage.dialect = 'English' \n    AND countrylanguage.is_formal = 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of cities in Europe for which English is not the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "result": "DISTINCT city.Name FROM city \nJOIN country ON city.nation_code = country.codification \nJOIN countrylanguage ON countrylanguage.country_cipher = country.codification \nWHERE countrylocation = 'Asia' AND countrylanguage.dialect = 'Chinese' AND countrylanguage.is_formal = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which unique cities are in Asian countries where Chinese is the official language ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "result": "city.Name \nFROM city \nINNER JOIN countrylanguage ON city.nation_code = countrylanguage.country_cipher \nWHERE city.region = 'Asia' AND countrylanguage.dialect = 'Chinese' AND countrylanguage.is_formal = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the different names of cities that are in Asia and for which Chinese is the official language. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "result": "country.Name, country.IndepYear, country.territory_space\nFROM country\nWHERE country.total_citizens = (SELECT MIN(total_citizens) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the name, independence year, and surface area of the country with the smallest population? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "result": "country.Name, country.IndepYear, country.territory_space\nFROM country\nWHERE country.total_citizens = (\n    SELECT MIN(total_citizens) FROM country\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the name, year of independence, and surface area of the country that has the lowest population. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the population, name and leader of the country with the largest area?",
        "result": "country.Name, country.country_head, country.territory_space \nFROM country \nWHERE territory_space = (SELECT MAX(territory_space) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the population, name and leader of the country with the largest area? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "result": "country.Name, country.total_citizens, country.country_head \nFROM country \nWHERE territory_space = (SELECT MAX(territory_space) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the name, population, and head of state for the country that has the largest area. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "result": "country.Name, COUNT(countrylanguage.dialect) AS num_languages \n FROM country \n JOIN countrylanguage ON countrylanguage.country_cipher = country.codification \n WHERE countrylanguage.is_formal = 1 \n GROUP BY country.codification \n HAVING COUNT(countrylanguage.dialect) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "result": "country.Name, COUNT(DISTINCT countrylanguage.dialect) AS language_count\nFROM country\nJOIN countrylanguage ON countrylanguage.country_cipher = country.codification\nGROUP BY country.Name\nHAVING language_count > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of countries that speak more than 2 languages, as well as how many languages they speak? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "result": "region, COUNT(*) \nFROM city \nWHERE citizens > (SELECT AVG(citizens) FROM city)\nGROUP BY region;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Find the number of cities in each district whose population is greater than the average population of cities? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "result": "city.region, COUNT(city.Name)\nFROM city\nWHERE city.citizens > (SELECT AVG(city.citizens) FROM city)\nGROUP BY city.region",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### How many cities in each district have a population that is above the average population across all cities? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "result": "government_type, SUM(total_citizens) \n FROM country \n WHERE government_type IN \n    (SELECT government_type \n     FROM country \n     GROUP BY government_type \n     HAVING AVG(life_expectation) > 72) \n GROUP BY government_type",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Find the government form name and total population for each government form whose average life expectancy is longer than 72. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "result": "government_type, SUM(total_citizens) AS population\n FROM country\n WHERE life_expectation > 72\n GROUP BY government_type",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "result": "country.landmass AS continent, AVG(country.life_expectation) AS avg_life_expectation, SUM(country.total_citizens) AS total_population\n FROM country\n GROUP BY country.landmass\n HAVING AVG(country.life_expectation) < 72",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "result": "country.landmass AS continent, \nSUM(country.total_citizens) AS total_population, \nAVG(country.life_expectation) AS avg_life_expectancy \nFROM country \nWHERE country.life_expectation < 72 \nGROUP BY country.landmass",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "result": "Name, territory_space \n FROM country \n ORDER BY territory_space DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names and areas of countries with the top 5 largest area? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and surface areas of the 5 largest countries.",
        "result": "country.Name, country.territory_space\n FROM country\n ORDER BY country.territory_space DESC\n LIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the names and surface areas of the 5 largest countries. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of countries with the top 3 largest population?",
        "result": "Name FROM country ORDER BY total_citizens DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are names of countries with the top 3 largest population? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "result": "Name FROM country ORDER BY total_citizens DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the names of the 3 most populated countries. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the nations with the 3 lowest populations?",
        "result": "Name FROM city \nWHERE nation_code IN (\n    SELECT codification FROM country \n    ORDER BY total_citizens ASC \n    LIMIT 3\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of the nations with the 3 lowest populations? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 countries with the fewest people.",
        "result": "Name \nFROM country \nORDER BY total_citizens ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the names of the 3 countries with the fewest people. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many countries are in Asia?",
        "result": "COUNT(*) FROM country WHERE location='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### how many countries are in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "Count the number of countries in Asia.",
        "result": "COUNT(*) FROM country WHERE location='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Count the number of countries in Asia. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "result": "country.Name \nFROM \ncountry \nINNER JOIN city ON country.codification = city.nation_code \nWHERE \ncountry.landmass = 'Europe' \nAND city.citizens = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the names of the countries that are in the continent of Europe and have a population of 80000? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "result": "Name FROM country \nWHERE landmass = 'Europe' AND total_citizens = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the names of countries that are in Europe and have a population equal to 80000. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "result": "AVG(territory_space), SUM(total_citizens)\n FROM country\n WHERE landmass = 'North America' AND territory_space > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "result": "AVG(country.territory_space) AS avg_surface_area, SUM(country.total_citizens) AS total_population\n FROM country\n JOIN city ON country.codification = city.nation_code\n WHERE country.landmass = 'North America' AND country.territory_space > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the cities whose population is between 160000 and 900000?",
        "result": "ID, Name \nFROM city \nWHERE citizens BETWEEN 160000 AND 900000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the cities whose population is between 160000 and 900000? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select name from city where population between 160000 and 900000",
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "result": "Name FROM city WHERE citizens BETWEEN 160000 AND 900000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of countries?",
        "result": "countrylanguage.dialect\nFROM countrylanguage\nGROUP BY countrylanguage.dialect\nHAVING COUNT(DISTINCT countrylanguage.country_cipher) = (\n    SELECT MAX(country_count)\n    FROM (\n        SELECT COUNT(DISTINCT country_cipher) AS country_count\n        FROM countrylanguage\n        GROUP BY dialect\n    )\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Which language is spoken by the largest number of countries? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most countries.",
        "result": "countrylanguage.dialect \nFROM countrylanguage \nGROUP BY countrylanguage.dialect \nORDER BY COUNT(DISTINCT countrylanguage.country_cipher) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Give the language that is spoken in the most countries. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "result": "country.Name, countrylanguage.dialect \n FROM country \n JOIN (SELECT country_cipher, dialect FROM countrylanguage \n ORDER BY portion DESC \n GROUP BY country_cipher) AS countrylanguage ON countrylanguage.country_cipher = country.codification",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the language spoken by the largest percentage of people in each country? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "result": "country.codification, countrylanguage.dialect\nFROM country\nJOIN countrylanguage ON country.codification = countrylanguage.country_cipher\nWHERE countrylanguage.portion = (SELECT MAX(portion) FROM countrylanguage WHERE countrylanguage.country_cipher = country.codification)\nGROUP BY country.codification;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "result": "COUNT(DISTINCT country_cipher) \nFROM countrylanguage \nWHERE dialect = 'Spanish' AND portion = (\n  SELECT MAX(portion) \n  FROM countrylanguage \n  WHERE dialect = 'Spanish'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What is the total number of countries where Spanish is spoken by the largest percentage of people? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "result": "COUNT(*) \nFROM countrylanguage \nWHERE dialect = 'Spanish' AND portion > 50.0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Count the number of countries for which Spanish is the predominantly spoken language. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "result": "country_cipher \nFROM \ncountrylanguage \nWHERE \ndialect = 'Spanish' \nORDER BY \nportion DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### What are the codes of countries where Spanish is spoken by the largest percentage of people? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "result": "country.codification \nFROM \n    countrylanguage \n    JOIN country ON countrylanguage.country_cipher = country.codification \nWHERE \n    countrylanguage.dialect = 'Spanish' AND countrylanguage.is_formal = 1 AND countrylanguage.portion >= 0.5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,nation_code,region,citizens)\n;# sqlite_sequence(name,seq)\n;# country(codification,Name,landmass,location,territory_space,IndepYear,total_citizens,life_expectation,net_national_product,GNPOld,LocalName,government_type,country_head,Capital,Code2)\n;# countrylanguage(country_cipher,dialect,is_formal,portion)\n.# \n ### Return the codes of countries for which Spanish is the predominantly spoken language. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many conductors are there?",
        "result": "COUNT(*) FROM conductor;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### How many conductors are there? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of conductors.",
        "result": "COUNT(*) FROM conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Count the number of conductors. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of conductors in ascending order of age.",
        "result": "Name FROM conductor ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### List the names of conductors in ascending order of age. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of conductors, ordered by age?",
        "result": "Name FROM conductor ORDER BY Age;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the names of conductors, ordered by age? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "result": "Name \nFROM conductor \nWHERE passport <> \"USA\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the names of conductors whose nationalities are not \"USA\"? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "result": "Name FROM conductor WHERE passport <> \"USA\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Return the names of conductors that do not have the nationality \"USA\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "result": "orchestra.record_business\nFROM orchestra\nORDER BY orchestra.year_of_established DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the record companies of orchestras in descending order of years in which they were founded? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "result": "record_business FROM orchestra ORDER BY year_of_established DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Return the record companies of orchestras, sorted descending by the years in which they were founded. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average attendance of shows?",
        "result": "AVG(portion) FROM performance",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What is the average attendance of shows? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average attendance across all shows.",
        "result": "AVG(portion) FROM performance",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Return the average attendance across all shows. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "result": "MAX(portion), MIN(portion) FROM performance WHERE class != 'Live final';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the maximum and minimum share of performances whose type is not \"Live final\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "result": "MAX(portion), MIN(portion)\nFROM performance\nWHERE class != \"Live final\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Return the maximum and minimum shares for performances that do not have the type \"Live final\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different nationalities do conductors have?",
        "result": "COUNT(DISTINCT passport) FROM conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### How many different nationalities do conductors have? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different nationalities of conductors.",
        "result": "COUNT(DISTINCT passport) FROM conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Count the number of different nationalities of conductors. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of conductors in descending order of years of work.",
        "result": "Name FROM conductor ORDER BY how_long_worked DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### List names of conductors in descending order of years of work. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "result": "Name FROM conductor ORDER BY how_long_worked DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the names of conductors, sorted descending by the number of years they have worked? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the conductor with the most years of work.",
        "result": "Name \nFROM conductor \nWHERE how_long_worked = (\n    SELECT MAX(how_long_worked) \n    FROM conductor\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### List the name of the conductor with the most years of work. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "result": "Name FROM conductor ORDER BY how_long_worked DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What is the name of the conductor who has worked the greatest number of years? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "result": "conductor.Name, orchestra.Orchestra \n FROM conductor \n JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Show the names of conductors and the orchestras they have conducted. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "result": "conductor.Name, orchestra.Orchestra\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the names of conductors as well as the corresonding orchestras that they have conducted? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "result": "conductor.Name \nFROM conductor \nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Conductor_ID \nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Show the names of conductors that have conducted more than one orchestras. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "result": "conductor.Name FROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Conductor_ID\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the names of conductors who have conducted at more than one orchestra? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "result": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Conductor_ID \nORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Show the name of the conductor that has conducted the most number of orchestras. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "result": "conductor.Name\nFROM \nconductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Name\nORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What is the name of the conductor who has conducted the most orchestras? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "result": "conductor.Name FROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.year_of_established > 2008;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Please show the name of the conductor that has conducted orchestras founded after 2008. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "result": "conductor.Name FROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.year_of_established > 2008",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the names of conductors who have conducted orchestras founded after the year 2008? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "result": "record_business, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY record_business;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Please show the different record companies and the corresponding number of orchestras. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many orchestras does each record company manage?",
        "result": "record_business, COUNT(DISTINCT Orchestra_ID) AS num_orchestras\nFROM orchestra\nGROUP BY record_business",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### How many orchestras does each record company manage? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "result": "Orchestra_ID, Orchestra, Conductor_ID, record_business, year_of_established, main_form \nFROM orchestra \nGROUP BY Orchestra_ID \nORDER BY COUNT(*) ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Please show the record formats of orchestras in ascending order of count. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "result": "Orchestra, COUNT(*) AS Frequency\nFROM orchestra\nGROUP BY Orchestra\nORDER BY Frequency DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the major record formats of orchestras, sorted by their frequency? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record company shared by the most number of orchestras.",
        "result": "record_business FROM orchestra \n GROUP BY record_business \n HAVING COUNT(DISTINCT Orchestra_ID) = (\n     SELECT MAX(count) FROM (\n         SELECT COUNT(DISTINCT Orchestra_ID) AS count \n         FROM orchestra \n         GROUP BY record_business\n     )\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### List the record company shared by the most number of orchestras. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record company used by the greatest number of orchestras?",
        "result": "record_business, COUNT(DISTINCT Orchestra_ID) AS num_orchestras \n FROM orchestra \n GROUP BY record_business \n ORDER BY num_orchestras DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What is the record company used by the greatest number of orchestras? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of orchestras that have no performance.",
        "result": "Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN \n    (SELECT Orchestra_ID FROM performance);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### List the names of orchestras that have no performance. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the orchestras that do not have any performances?",
        "result": "Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the orchestras that do not have any performances? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "result": "record_business\nFROM orchestra\nWHERE year_of_established < 2003\nINTERSECT\nSELECT record_business\nFROM orchestra\nWHERE year_of_established > 2003",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Show the record companies shared by orchestras founded before 2003 and after 2003. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "result": "record_business\nFROM orchestra\nWHERE year_of_established < 2003\nINTERSECT\nSELECT record_business\nFROM orchestra\nWHERE year_of_established > 2003;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "result": "COUNT(*) FROM orchestra WHERE record_business IN ('CD','DVD');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Find the number of orchestras whose record format is \"CD\" or \"DVD\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "result": "COUNT(*) FROM orchestra WHERE record_business IN ('CD', 'DVD');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Count the number of orchestras that have CD or DVD as their record format. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "result": "orchestra.year_of_established \nFROM orchestra \nJOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID \nGROUP BY orchestra.Orchestra_ID \nHAVING COUNT(DISTINCT performance.Performance_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### Show the years in which orchestras that have given more than one performance are founded. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "result": "Orchestra.year_of_established \nFROM orchestra \nJOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID \nGROUP BY orchestra.Orchestra_ID \nHAVING COUNT(DISTINCT performance.Performance_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,passport,how_long_worked)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,record_business,year_of_established,main_form)\n;# performance(Performance_ID,Orchestra_ID,class,Date,Official_ratings_(millions),Weekly_rank,portion)\n;# show(Show_ID,Performance_ID,If_first_show,Result,total_participation)\n.# \n ### What are years of founding for orchestras that have had more than a single performance? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many high schoolers are there?",
        "result": "COUNT(*) FROM Highschooler;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are there? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of high schoolers.",
        "result": "COUNT(*) FROM Highschooler;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each high schooler.",
        "result": "ID, name, school_level\nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each high schooler?",
        "result": "ID, name, school_level\nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the high schoolers.",
        "result": "ID, name, school_level \nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each high schooler?",
        "result": "Highschooler.ID, Highschooler.name, Highschooler.school_level \nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "result": "school_level \nFROM Highschooler \nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What grade is Kyle in? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the high schooler named Kyle.",
        "result": "school_level \nFROM Highschooler \nWHERE name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all high schoolers in grade 10.",
        "result": "name FROM Highschooler WHERE school_level = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all high schoolers in grade 10. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all high schoolers in grade 10?",
        "result": "name FROM Highschooler WHERE school_level = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all high schoolers in grade 10? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the high schooler named Kyle.",
        "result": "ID \nFROM Highschooler \nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "result": "ID\nFROM Highschooler\nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is Kyle's id? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many high schoolers are there in grade 9 or 10?",
        "result": "COUNT(*) FROM Highschooler WHERE school_level IN ('9', '10')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are there in grade 9 or 10? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "result": "COUNT(*) FROM Highschooler WHERE school_level IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers in grades 9 or 10. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of high schoolers for each grade.",
        "result": "school_level, COUNT(*) FROM Highschooler GROUP BY school_level;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the number of high schoolers for each grade. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many high schoolers are in each grade?",
        "result": "school_level, COUNT(*) \nFROM Highschooler \nGROUP BY school_level",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are in each grade? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most high schoolers?",
        "result": "school_level, COUNT(*) as num_students \n FROM Highschooler \n GROUP BY school_level \n ORDER BY num_students DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grade has the most high schoolers? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of high schoolers.",
        "result": "school_level, COUNT(*) AS num_highschoolers\nFROM Highschooler\nGROUP BY school_level\nORDER BY num_highschoolers DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade that has the greatest number of high schoolers. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "result": "school_level, COUNT(*) AS num_students\nFROM Highschooler\nGROUP BY school_level\nHAVING num_students >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me all grades that have at least 4 students. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more high schoolers?",
        "result": "school_level \nFROM Highschooler \nGROUP BY school_level \nHAVING COUNT(*) >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more high schoolers? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "result": "Friend.student_id, COUNT(Friend.friend_id) \n FROM Friend \n GROUP BY Friend.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the student IDs and numbers of friends corresponding to each. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "result": "Friend.student_id, COUNT(*) AS num_friends\nFROM Friend\nGROUP BY Friend.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many friends does each student have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high school students and their corresponding number of friends.",
        "result": "Highschooler.name, COUNT(Friend.friend_id) \nFROM Highschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high school students and their corresponding number of friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "result": "Highschooler.name, COUNT(Friend.friend_id)\nFROM Highschooler\nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of the high schoolers and how many friends does each have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID IN (\n  SELECT friend.student_id \n  FROM Friend \n  GROUP BY friend.student_id \n  ORDER BY COUNT(*) DESC \n  LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the high schooler who has the greatest number of friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the high school student with the most friends.",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID IN (\n    SELECT friend.student_id \n    FROM Friend \n    GROUP BY friend.student_id \n    ORDER BY COUNT(friend.friend_id) DESC \n    LIMIT 1 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the name of the high school student with the most friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high schoolers who have at least 3 friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(Friend.friend_id) >= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have 3 or more friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.friend_id\nWHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all of the high schooler Kyle's friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the high school student Kyle.",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Friend.friend_id = Highschooler.ID\nJOIN Highschooler AS Kyle ON Kyle.ID = Friend.student_id\nWHERE Kyle.name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the names of friends of the high school student Kyle. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many friends does the high school student Kyle have?",
        "result": "COUNT(*) \nFROM Highschooler \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Highschooler.name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many friends does the high school student Kyle have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "result": "COUNT(*) \nFROM Highschooler h \nJOIN Friend f ON h.ID = f.student_id \nWHERE h.name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of friends Kyle has. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "result": "Highschooler.ID\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (SELECT DISTINCT Friend.student_id FROM Friend);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show ids of all students who do not have any friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of high school students who do not have friends?",
        "result": "Highschooler.ID \nFROM Highschooler \nLEFT JOIN Friend \nON Highschooler.ID = Friend.student_id \nWHERE Friend.student_id IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the ids of high school students who do not have friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all high school students who do not have any friends.",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show names of all high school students who do not have any friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID NOT IN \n  (SELECT Friend.student_id FROM Friend \n   UNION \n   SELECT Friend.friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have no friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "result": "Highschooler.ID \nFROM Highschooler \nWHERE Highschooler.ID IN \n    (SELECT Friend.student_id \n     FROM Friend \n     WHERE Friend.friend_id = Highschooler.ID) \nAND Highschooler.ID IN \n    (SELECT Likes.liked_id \n     FROM Likes \n     WHERE Likes.student_id = Highschooler.ID)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ids of high schoolers who have friends and are also liked by someone else. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "result": "Friend.student_id \nFROM Friend \nINNER JOIN Likes ON Friend.student_id = Likes.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the ids of students who both have friends and are liked? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Friend ON Highschooler.ID = Friend.student_id\nINNER JOIN Likes ON Highschooler.ID = Likes.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show name of all students who have some friends and also are liked by someone else. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nJOIN Likes ON Highschooler.ID = Likes.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who both have friends and are liked? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "result": "student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of likes for each student id. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "result": "student_id, COUNT(*) FROM Likes GROUP BY student_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many likes correspond to each student id? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "result": "Highschooler.name, COUNT(Likes.liked_id) AS num_likes \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID \nHAVING num_likes > 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high schoolers who have likes, and numbers of likes for each. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "result": "Highschooler.name, COUNT(Likes.liked_id) \nFROM Highschooler, Likes \nWHERE Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(Likes.liked_id) > 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have likes, and how many likes does each have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "result": "Highschooler.name \nFROM \nHighschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY \nHighschooler.ID \nORDER BY \nCOUNT(Likes.liked_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the high schooler who has the greatest number of likes? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID \nORDER BY COUNT(Likes.liked_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Give the name of the student with the most likes. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "result": "Highschooler.name \nFROM \nHighschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more likes?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Likes.student_id\nHAVING COUNT(Likes.liked_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "result": "Highschooler.name \nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID \nHAVING AVG(Likes.grade) > 5 AND COUNT(DISTINCT Friend.friend_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have a grade higher than 5 and have at least 2 friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "result": "Highschooler.name \nFROM Highschooler \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Highschooler.school_level > 5 \nGROUP BY Highschooler.ID \nHAVING COUNT(DISTINCT Friend.friend_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many likes does Kyle have?",
        "result": "COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many likes does Kyle have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "result": "COUNT(*) FROM Likes\nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the number of likes that the high schooler named Kyle has. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "result": "AVG(H.school_level) \nFROM Highschooler H \nWHERE H.ID IN (SELECT F.student_id FROM Friend F)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Find the average grade of all students who have some friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "result": "AVG(grade)\nFROM Highschooler\nWHERE ID IN (\n    SELECT student_id\n    FROM Friend\n    UNION \n    SELECT friend_id\n    FROM Friend\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the average grade of students who have friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "result": "MIN(school_level) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Find the minimum grade of students who have no friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "result": "Highschooler.school_level \nFROM Highschooler \nWHERE Highschooler.ID NOT IN \n  (SELECT friend.student_id FROM Friend \n   UNION \n   SELECT friend.friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,school_level)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the lowest grade of students who do not have any friends? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both owners and professionals living there?",
        "result": "state FROM (\n  SELECT DISTINCT Owners.state AS state FROM Owners \n  UNION \n  SELECT DISTINCT Professionals.state AS state FROM Professionals\n) AS merged \nGROUP BY state \nHAVING COUNT(*) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which states have both owners and professionals living there? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both owners and professionals live.",
        "result": "DISTINCT location \nFROM Owners \nINNER JOIN Professionals ON Owners.city = Professionals.location",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the states where both owners and professionals live. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "result": "AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_included FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What is the average age of the dogs who have gone through any treatments? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through treatments.",
        "result": "AVG(age) \nFROM Dogs \nWHERE dog_id IN \n    (SELECT dog_included \n     FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the average age of the dogs who went through treatments. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "result": "professional_id, family_name, cell_number\nFROM Professionals\nWHERE location = 'Indiana' OR professional_id IN (\n  SELECT professional_id\n  FROM Treatments\n  GROUP BY professional_id\n  HAVING COUNT(*) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "result": "professional_id, family_name, cell_number \n FROM Professionals \n WHERE location = 'Indiana' OR professional_id IN \n (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "result": "Dogs.name\nFROM Dogs\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included\nGROUP BY Dogs.dog_id\nHAVING SUM(Treatments.therapy_expense) <= 1000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "result": "Dogs.name\nFROM Dogs\nINNER JOIN Owners ON Dogs.owner_id = Owners.owner_id\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included\nGROUP BY Dogs.name\nHAVING SUM(Treatments.therapy_expense) <= 1000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "result": "given_name\nFROM Owners\nWHERE given_name NOT IN (SELECT name FROM Dogs)\nUNION \nSELECT given_name \nFROM Professionals\nWHERE given_name NOT IN (SELECT name FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which first names are used for professionals or owners but are not used as dog names? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "result": "DISTINCT given_name\nFROM (\n  SELECT given_name FROM Owners\n  UNION\n  SELECT given_name FROM Professionals\n) AS names\nWHERE names.given_name NOT IN (\n  SELECT name FROM Dogs\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the first names that are used for professionals or owners but are not used as dog names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "result": "Professionals.professional_id, Professionals.part_code, Professionals.mail\n FROM Professionals\n WHERE Professionals.professional_id NOT IN (\n     SELECT DISTINCT professional_id FROM Treatments\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which professional did not operate any treatment on dogs? List the professional's id, role and email. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "result": "professional_id, part_code, mail \nFROM Professionals \nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Give me the id, role and email of the professionals who did not perform any treatment on dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "result": "Owners.owner_id, Owners.given_name, Owners.family_name \n FROM Owners \n INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n GROUP BY Owners.owner_id \n ORDER BY COUNT(Dogs.dog_id) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which owner owns the most dogs? List the owner id, first name and last name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "result": "Owners.owner_id, Owners.given_name, Owners.family_name\nFROM Owners\nWHERE Owners.owner_id = (\n  SELECT Dogs.owner_id\n  FROM Dogs\n  GROUP BY Dogs.owner_id\n  ORDER BY COUNT(Dogs.dog_id) DESC\n  LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Return the owner id, first name and last name of the owner who has the most dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "result": "Professionals.professional_id, Professionals.part_code, Professionals.given_name \n FROM Professionals \n INNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \n GROUP BY Professionals.professional_id, Professionals.part_code, Professionals.given_name \n HAVING COUNT(Treatments.treatment_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which professionals have done at least two treatments? List the professional's id, role, and first name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "result": "professional_id, part_code, given_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the id, role, and first name of the professionals who have performed two or more treatments? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most dogs?",
        "result": "Breeds.breed_appellation\nFROM Dogs\nINNER JOIN Breeds ON Dogs.breed_digits = Breeds.breed_cipher\nGROUP BY Dogs.breed_digits\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What is the name of the breed with the most dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "result": "Breeds.breed_appellation\nFROM Breeds\nJOIN Dogs ON Breeds.breed_cipher = Dogs.breed_digits\nGROUP BY Breeds.breed_appellation\nORDER BY COUNT(Dogs.dog_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which breed do the most dogs have? Give me the breed name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "result": "Owners.owner_id, Owners.family_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_included\nGROUP BY Owners.owner_id\nORDER BY SUM(Treatments.therapy_expense) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "result": "Owners.owner_id, Owners.family_name\nFROM Owners\nWHERE Owners.owner_id = (\n    SELECT Dogs.owner_id\n    FROM Dogs\n    INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included\n    GROUP BY Dogs.owner_id\n    ORDER BY SUM(Treatments.therapy_expense) DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the description of the treatment type that costs the least money in total?",
        "result": "Treatment_Types.therapy_category_description \nFROM Treatments \nJOIN Treatment_Types ON Treatments.care_type_encipher = Treatment_Types.therapy_category_codification \nGROUP BY Treatments.care_type_encipher \nORDER BY SUM(Treatments.therapy_expense) ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What is the description of the treatment type that costs the least money in total? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "result": "Treatment_Types.therapy_category_description\nFROM Treatment_Types\nJOIN (\n    SELECT care_type_encipher, SUM(therapy_expense) AS total_cost\n    FROM Treatments\n    GROUP BY care_type_encipher\n    ORDER BY total_cost ASC\n    LIMIT 1\n) AS Lowest_Cost_Treatment\nON Treatment_Types.therapy_category_codification = Lowest_Cost_Treatment.care_type_encipher;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Give me the description of the treatment type whose total cost is the lowest. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "result": "Owners.owner_id, Owners.zipcode\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Charges ON Dogs.dog_id = Charges.dog_id\nGROUP BY Owners.owner_id\nORDER BY SUM(Charges.fee) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "result": "Owners.owner_id, Owners.zipcode \n FROM Owners \n JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n JOIN Treatments ON Dogs.dog_id = Treatments.dog_included \n GROUP BY Owners.owner_id \n ORDER BY SUM(Treatments.therapy_expense) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "result": "professional_id, cell_number \nFROM Professionals \nWHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT care_type_encipher) >= 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which professionals have done at least two types of treatments? List the professional id and cell phone. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "result": "professional_id, cell_number \n FROM Professionals \n WHERE professional_id IN (\n   SELECT professional_id \n   FROM Treatments \n   GROUP BY professional_id \n   HAVING COUNT(DISTINCT care_type_encipher) >= 2\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "result": "Professionals.given_name, Professionals.family_name\nFROM Professionals\nINNER JOIN Treatments ON Treatments.professional_id = Professionals.professional_id\nWHERE Treatments.therapy_expense < (SELECT AVG(therapy_expense) FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the first name and last name of the professionals who have done treatment with cost below average? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "result": "Professionals.given_name, Professionals.family_name\nFROM Professionals\nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nWHERE Treatments.therapy_expense < (\n    SELECT AVG(therapy_expense) \n    FROM Treatments\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "result": "Treatments.day_of_medication, Professionals.given_name\n FROM Treatments \n JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the date of each treatment, together with the first name of the professional who operated it. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating professional's first name of each treatment?",
        "result": "Treatments.day_of_medication, Professionals.given_name\n FROM Treatments\n JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the date and the operating professional's first name of each treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "result": "Treatments.therapy_expense, Treatment_Types.therapy_category_description \n FROM Treatments \n INNER JOIN Treatment_Types \n ON Treatments.care_type_encipher = Treatment_Types.therapy_category_codification;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the cost of each treatment and the corresponding treatment type description. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and treatment type description of each treatment?",
        "result": "Treatments.treatment_id, Treatment_Types.therapy_category_description, Treatments.therapy_expense\n FROM Treatments\n JOIN Treatment_Types ON Treatments.care_type_encipher = Treatment_Types.therapy_category_codification;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the cost and treatment type description of each treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "result": "Owners.given_name, Owners.family_name, Sizes.size_number\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nINNER JOIN Sizes ON Dogs.measurement_code = Sizes.size_number;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List each owner's first name, last name, and the size of his for her dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "result": "Owners.given_name, Owners.family_name, Sizes.size_number\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Sizes ON Dogs.measurement_code = Sizes.size_number;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are each owner's first name, last name, and the size of their dog? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the owner's first name and the dogs's name.",
        "result": "Owners.given_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List pairs of the owner's first name and the dogs's name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each owner's first name and their dogs's name?",
        "result": "Owners.given_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are each owner's first name and their dogs's name? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "result": "Dogs.name, Treatments.day_of_medication \n FROM Dogs \n INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included \n WHERE Dogs.breed_digits = (SELECT breed_cipher FROM Breeds ORDER BY breed_cipher DESC LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the names of the dogs of the rarest breed and the treatment dates of them. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "result": "Dogs.name, Treatments.day_of_medication\n FROM Dogs\n INNER JOIN Breeds ON Dogs.breed_digits = Breeds.breed_cipher\n INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included\n WHERE Breeds.breed_appellation = 'rarest'\n ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which dogs are of the rarest breed? Show their names and treatment dates. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "result": "Owners.given_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Owners.state = 'Virginia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "result": "Owners.given_name, Dogs.name \n FROM Owners \n INNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \n WHERE Owners.city = 'Virginia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the first names of owners living in Virginia and the names of dogs they own. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "result": "Dogs.when_arrived, Dogs.depature_day\nFROM Dogs\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the arriving date and the departing date of the dogs who have gone through a treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "result": "Dogs.when_arrived, Dogs.depature_day\nFROM Dogs\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_included;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the arriving date and the departing date of the dogs that received a treatment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the last name of the owner owning the youngest dog.",
        "result": "Owners.family_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the last name of the owner owning the youngest dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "result": "Owners.family_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Who owns the youngest dog? Give me his or her last name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "result": "electronic_mail FROM Professionals \nWHERE location IN ('Hawaii','Wisconsin')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "result": "Professionals.mail\nFROM Professionals\nWHERE Professionals.st = 'Hawaii' OR Professionals.st = 'Wisconsin';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving date and the departing date of all the dogs?",
        "result": "Dogs.when_arrived, Dogs.depature_day\nFROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the arriving date and the departing date of all the dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arrival date and the departure date for all the dogs.",
        "result": "Dogs.when_arrived, Dogs.depature_day\nFROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the arrival date and the departure date for all the dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many dogs went through any treatments?",
        "result": "COUNT(DISTINCT dog_id) FROM Treatments;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How many dogs went through any treatments? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of dogs that went through a treatment.",
        "result": "COUNT(DISTINCT dog_id) \n FROM Treatments",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Count the number of dogs that went through a treatment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many professionals have performed any treatment to dogs?",
        "result": "COUNT(DISTINCT professional_id) FROM Treatments",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How many professionals have performed any treatment to dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of professionals who have ever treated dogs.",
        "result": "COUNT(DISTINCT professional_id) FROM Treatments;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the number of professionals who have ever treated dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "result": "Professionals.part_code, Professionals.st, Professionals.location, Professionals.district\nFROM Professionals\nWHERE Professionals.location LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "result": "Professionals.part_code, Professionals.street, Professionals.city, Professionals.st \n FROM Professionals \n WHERE Professionals.city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "result": "Owners.given_name, Owners.family_name, Owners.electronic_mail \nFROM Owners \nWHERE Owners.street LIKE '%North%' OR Owners.city LIKE '%North%' OR Owners.address LIKE '%North%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "result": "given_name, family_name, electronic_mail \n FROM Owners \n WHERE address LIKE '%North%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many dogs have an age below the average?",
        "result": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How many dogs have an age below the average? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of dogs of an age below the average.",
        "result": "COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Count the number of dogs of an age below the average. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent treatment cost?",
        "result": "MAX(therapy_expense) FROM Treatments",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How much does the most recent treatment cost? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed treatment.",
        "result": "Therapy_expense\nFROM Treatments\nORDER BY Day_of_medication DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Show me the cost of the most recently performed treatment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many dogs have not gone through any treatment?",
        "result": "COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_included FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How many dogs have not gone through any treatment? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "question": "Tell me the number of dogs that have not received any treatment .",
        "result": "COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_included FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Tell me the number of dogs that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many owners temporarily do not have any dogs?",
        "result": "COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.dog_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How many owners temporarily do not have any dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "result": "COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE depature_day IS NULL)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the number of owners who do not own any dogs at this moment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many professionals did not operate any treatment on dogs?",
        "result": "COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How many professionals did not operate any treatment on dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of professionals who have not treated any dogs.",
        "result": "COUNT(*) FROM Professionals \nWHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the number of professionals who have not treated any dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "result": "Dogs.name, Dogs.age, Dogs.mass \n FROM Dogs \n WHERE Dogs.is_forsaken = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "result": "Dogs.name, Dogs.age, Dogs.mass \n FROM Dogs \n WHERE Dogs.is_forsaken = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the dogs?",
        "result": "AVG(age) FROM Dogs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What is the average age of all the dogs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the dogs.",
        "result": "AVG(age) FROM Dogs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Compute the average age of all the dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest dog?",
        "result": "MAX(age) FROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What is the age of the oldest dog? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest dog.",
        "result": "MAX(age) FROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Tell me the age of the oldest dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "result": "allegation_category, fee \nFROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How much does each charge type costs? List both charge type and amount. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "result": "allegation_category, fee\nFROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List each charge type and its amount. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "result": "MAX(fee) FROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### How much does the most expensive charge type costs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "result": "MAX(fee) FROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What is the charge amount of the most expensive charge type? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the professionals.",
        "result": "mail, cell_number, home_phone FROM Professionals",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the email, cell phone and home phone of all the professionals. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each professional?",
        "result": "Professionals.mail, Professionals.home_ring_up, Professionals.calling, Professionals.family_name FROM Professionals;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are the email, cell phone and home phone of each professional? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "result": "Breeds.breed_appellation, Sizes.size_explanation\n FROM Breeds, Sizes;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are all the possible breed type and size type combinations? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "result": "DISTINCT Dogs.breed_digits, Sizes.size_explanation\n FROM Dogs\n JOIN Sizes ON Dogs.measurement_code = Sizes.size_number;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### Find the distinct breed type and size type combinations for dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "result": "Professionals.given_name, Treatments.therapy_category_description\n FROM Professionals \n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### List the first name of all the professionals along with the description of the treatment they have done. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "result": "Professionals.given_name, Treatment_Types.therapy_category_description \n FROM Professionals \n JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \n JOIN Treatment_Types ON Treatments.care_type_encipher = Treatment_Types.therapy_category_codification",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_cipher,breed_appellation)\n;# Charges(charge_id,allegation_category,fee)\n;# Sizes(size_number,size_explanation)\n;# Treatment_Types(therapy_category_codification,therapy_category_description)\n;# Owners(owner_id,given_name,family_name,street,city,address,zipcode,electronic_mail,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,is_forsaken,breed_digits,measurement_code,name,age,date_of_birth,gender,mass,when_arrived,date_adopted,depature_day)\n;# Professionals(professional_id,part_code,given_name,st,location,district,zip_code,family_name,mail,home_ring_up,calling)\n;# Treatments(treatment_id,dog_included,professional_id,care_type_encipher,day_of_medication,therapy_expense)\n.# \n ### What are each professional's first name and description of the treatment they have performed? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many singers are there?",
        "result": "COUNT(*) FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### How many singers are there? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of singers?",
        "result": "COUNT(Singer_ID) FROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What is the count of singers? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of singers in ascending order of net worth.",
        "result": "Name \nFROM \nsinger \nORDER BY \ngross_value ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### List the name of singers in ascending order of net worth. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of singers ordered by ascending net worth?",
        "result": "Name FROM singer ORDER BY gross_value ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the names of singers ordered by ascending net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and citizenship of singers?",
        "result": "born_date, nationality FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and citizenships of the singers?",
        "result": "born_date, nationality FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of singers whose citizenship is not \"France\".",
        "result": "Name FROM singer WHERE nationality != \"France\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### List the name of singers whose citizenship is not \"France\". \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the singers who are not French citizens?",
        "result": "Name FROM singer WHERE nationality != 'French'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the names of the singers who are not French citizens? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "result": "Name FROM singer WHERE strftime('%Y',born_date)='1948' OR strftime('%Y',born_date)='1949';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show the name of singers whose birth year is either 1948 or 1949? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "result": "Name FROM singer WHERE born_date LIKE '1948%' OR born_date LIKE '1949%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the names of the singers whose birth years are either 1948 or 1949? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer with the largest net worth?",
        "result": "Name FROM singer ORDER BY gross_value DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What is the name of the singer with the largest net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the singer who is worth the most?",
        "result": "Name \nFROM singer \nWHERE gross_value = (SELECT MAX(gross_value) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What is the name of the singer who is worth the most? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "result": "nationality, COUNT(DISTINCT Singer_ID)\nFROM singer\nGROUP BY nationality;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show different citizenship of singers and the number of singers of each citizenship. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, how many singers are from that country?",
        "result": "nationality, COUNT(*) \nFROM singer \nGROUP BY nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### For each citizenship, how many singers are from that country? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common citizenship of singers.",
        "result": "nationality \nFROM singer \nGROUP BY nationality \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Please show the most common citizenship of singers. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "question": "What is the most common singer citizenship ?",
        "result": "nationality \nFROM singer \nGROUP BY nationality \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What is the most common singer citizenship ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "result": "nationality, MAX(gross_value) \nFROM singer \nGROUP BY nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show different citizenships and the maximum net worth of singers of each citizenship. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each citizenship, what is the maximum net worth?",
        "result": "nationality, MAX(gross_value) \nFROM singer \nGROUP BY nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### For each citizenship, what is the maximum net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show titles of songs and names of singers.",
        "result": "song.Title, singer.Name\nFROM song\nINNER JOIN singer\nON song.Singer_ID = singer.Singer_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show titles of songs and names of singers. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song titles and singer names?",
        "result": "song.Title, singer.Name \nFROM song \nINNER JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the song titles and singer names? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "result": "DISTINCT singer.Name \nFROM singer \nJOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.sold > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show distinct names of singers that have songs with sales more than 300000. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the singers that have sales more than 300000?",
        "result": "Name FROM singer\nWHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE sold > 300000);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### what are the different names of the singers that have sales more than 300000? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of singers that have more than one song.",
        "result": "Name FROM singer\nWHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show the names of singers that have more than one song. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the singers that have more than one songs?",
        "result": "Name FROM singer\nWHERE Singer_ID IN \n(SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of singers and the total sales of their songs.",
        "result": "singer.Name, SUM(song.sold) AS total_sales \nFROM singer \nJOIN song ON singer.Singer_ID = song.Singer_ID \nGROUP BY singer.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show the names of singers and the total sales of their songs. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each singer name, what is the total sales for their songs?",
        "result": "singer.Name, SUM(song.sold) AS total_sales \nFROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nGROUP BY singer.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### For each singer name, what is the total sales for their songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of singers that do not have any song.",
        "result": "singer.Name FROM singer \nLEFT JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Singer_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### List the name of singers that do not have any song. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the sname of every sing that does not have any song?",
        "result": "singer.Name \nFROM singer \nLEFT JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Song_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What is the sname of every sing that does not have any song? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "result": "nationality \nFROM \nsinger \nWHERE \nborn_date < '1945-01-01' OR born_date > '1955-12-31'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### Show the citizenship shared by singers with birth year before 1945 and after 1955. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "result": "nationality \nFROM singer \nWHERE born_date < '1945-01-01' \nAND born_date > '1955-12-31' \nGROUP BY nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,born_date,gross_value,nationality)\n;# song(Song_ID,Title,Singer_ID,sold,Highest_Position)\n.# \n ### What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available features are there in total?",
        "result": "COUNT(*) FROM Other_Available_Features;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(category_code,property_type_cognomen)\n;# Ref_Property_Types(property_type_code,possession_cateory_info)\n;# Other_Available_Features(feature_id,attribute_type_digits,attribute_appellation,feature_description)\n;# Properties(property_id,type_of_property,date_on_market,date_sold,property_cognomen,property_address,number_of_room,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,possession_attribute_description)\n.# \n ### How many available features are there in total? \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the feature type name of feature AirCon?",
        "result": "Ref_Feature_Types.property_type_cognomen \nFROM Other_Available_Features \nJOIN Other_Property_Features ON Other_Available_Features.feature_id = Other_Property_Features.feature_id \nJOIN Ref_Property_Types ON Other_Property_Features.possession_attribute_description = Ref_Property_Types.possession_cateory_info \nJOIN Ref_Feature_Types ON Ref_Property_Types.property_type_code = Ref_Feature_Types.category_code \nWHERE Other_Available_Features.attribute_appellation = 'AirCon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(category_code,property_type_cognomen)\n;# Ref_Property_Types(property_type_code,possession_cateory_info)\n;# Other_Available_Features(feature_id,attribute_type_digits,attribute_appellation,feature_description)\n;# Properties(property_id,type_of_property,date_on_market,date_sold,property_cognomen,property_address,number_of_room,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,possession_attribute_description)\n.# \n ### What is the feature type name of feature AirCon? \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "result": "Properties.type_of_property, Ref_Property_Types.possession_cateory_info \n FROM Properties \n JOIN Ref_Property_Types ON Properties.type_of_property = Ref_Property_Types.property_type_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(category_code,property_type_cognomen)\n;# Ref_Property_Types(property_type_code,possession_cateory_info)\n;# Other_Available_Features(feature_id,attribute_type_digits,attribute_appellation,feature_description)\n;# Properties(property_id,type_of_property,date_on_market,date_sold,property_cognomen,property_address,number_of_room,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,possession_attribute_description)\n.# \n ### Show the property type descriptions of properties belonging to that code. \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "result": "Properties.property_cognomen \nFROM Properties \nWHERE (Properties.type_of_property = 'house' OR Properties.type_of_property = 'apartment') \nAND Properties.number_of_room > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(category_code,property_type_cognomen)\n;# Ref_Property_Types(property_type_code,possession_cateory_info)\n;# Other_Available_Features(feature_id,attribute_type_digits,attribute_appellation,feature_description)\n;# Properties(property_id,type_of_property,date_on_market,date_sold,property_cognomen,property_address,number_of_room,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,possession_attribute_description)\n.# \n ### What are the names of properties that are either houses or apartments with more than 1 room? \n SELECT"
    }
]
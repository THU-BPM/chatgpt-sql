[
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20   order by singer.age desc",
        "question": "What are all distinct countries where singers above age 20 are from , ordered by age from the oldest to the youngest .",
        "result": "singer.Country \nFROM \nsinger \nWHERE \nsinger.Age > 20 \nORDER BY \nsinger.Age DESC, \nsinger.Country ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all distinct countries where singers above age 20 are from , ordered by age from the oldest to the youngest . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20   order by singer.age desc",
        "question": "What are the different countries with singers above age 20 , ordered by age from the oldest to the youngest .",
        "result": "Country FROM singer WHERE Age > 20 ORDER BY Age DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 , ordered by age from the oldest to the youngest . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30   order by singer.age desc",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from , ordered by age from the oldest to the youngest .",
        "result": "singer.Country \nFROM singer \nWHERE singer.Age > 40 \nOR singer.Age < 30 \nORDER BY singer.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show countries where a singer above age 40 and a singer below 30 are from , ordered by age from the oldest to the youngest . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"   order by singer.age desc",
        "question": "what is the name and nation of the singer who have a song having ' Hey ' in its name , ordered by age from the oldest to the youngest .",
        "result": "singer.Name, singer.Country\nFROM singer\nWHERE singer.Song_Name LIKE '%Hey%'\nORDER BY singer.Age DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having ' Hey ' in its name , ordered by age from the oldest to the youngest . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"   order by singer.age desc",
        "question": "What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title , ordered by age from the oldest to the youngest .",
        "result": "singer.Name, singer.Country \nFROM singer \nWHERE singer.Song_Name LIKE '%Hey%' \nORDER BY singer.Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title , ordered by age from the oldest to the youngest . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20   order by singer.age desc",
        "question": "What are all distinct countries where singers above age 20 are from , in descending order of age ?",
        "result": "singer.Country \nFROM singer \nWHERE singer.Age > 20 \nGROUP BY singer.Country \nORDER BY singer.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all distinct countries where singers above age 20 are from , in descending order of age ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20   order by singer.age desc",
        "question": "What are the different countries with singers above age 20 , in descending order of age ?",
        "result": "Country FROM singer WHERE Age > 20 ORDER BY Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 , in descending order of age ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30   order by singer.age desc",
        "question": "Show countries where a singer above age 40 and a singer below 30 are from , in descending order of age ?",
        "result": "singer.Country \nFROM singer \nWHERE singer.Age > 40 \nAND singer.Country IN (\n    SELECT singer.Country \n    FROM singer \n    WHERE singer.Age < 30 \n    ) \nORDER BY singer.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show countries where a singer above age 40 and a singer below 30 are from , in descending order of age ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014   order by singer.age desc",
        "question": "List all singer names in concerts in year 2014 , in descending order of age ?",
        "result": "singer.Name\nFROM singer\nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nWHERE concert.Year = 2014\nORDER BY singer.Age DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 , in descending order of age ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"   order by singer.age desc",
        "question": "what is the name and nation of the singer who have a song having ' Hey ' in its name , in descending order of age ?",
        "result": "singer.Name, singer.Country \nFROM singer \nWHERE singer.Song_Name LIKE '%Hey%' \nORDER BY singer.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having ' Hey ' in its name , in descending order of age ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"   order by singer.age desc",
        "question": "What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title , in descending order of age ?",
        "result": "singer.Name, singer.Country\nFROM singer\nWHERE Song_Name LIKE '%Hey%'\nORDER BY singer.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title , in descending order of age ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer where  singer.country = \"France\"  ",
        "question": "What is the total number of singers , from France ?",
        "result": "COUNT(*) FROM singer WHERE Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , from France ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20 and singer.country = \"France\"  ",
        "question": "What are the different countries with singers above age 20 and from France ?",
        "result": "DISTINCT Country FROM singer WHERE Age > 20 AND Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 and from France ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20 or singer.country = \"France\"  ",
        "question": "What are the different countries with singers above age 20 or from France ?",
        "result": "DISTINCT Country FROM singer WHERE Age > 20 OR Country = 'France';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 or from France ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 and singer.country = \"France\"  ",
        "question": "List all singer names in concerts in year 2014 and from France ?",
        "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE singer.Country = 'France' AND concert.Year = 2014",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 and from France ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 or singer.country = \"France\"  ",
        "question": "List all singer names in concerts in year 2014 or from France ?",
        "result": "singer.Name\nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE (singer.Country = 'France' OR concert.Year = 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 or from France ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.country , count(*) from singer where  singer.age > 20  group by singer.country ",
        "question": "Show all countries and the number of singers in each country , where singers above age 20 are from ?",
        "result": "singer.Country, COUNT(*) \nFROM singer \nWHERE singer.Age > 20 \nGROUP BY singer.Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all countries and the number of singers in each country , where singers above age 20 are from ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) , singer.country from singer where  singer.age > 20  group by singer.country ",
        "question": "How many singers are from each country , where singers above age 20 are from ?",
        "result": "Country, COUNT(*) \nFROM singer \nWHERE Age > 20 \nGROUP BY Country;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many singers are from each country , where singers above age 20 are from ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer where  singer.age > 20  ",
        "question": "What is the total number of singers , above age 20 ?",
        "result": "COUNT(*) FROM singer WHERE Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , above age 20 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\" and singer.age > 20  ",
        "question": "What is the average , minimum , and maximum age of all singers from France and above age 20 ?",
        "result": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country='France' AND Age>20;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average , minimum , and maximum age of all singers from France and above age 20 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\" or singer.age > 20  ",
        "question": "What is the average , minimum , and maximum age of all singers from France or above age 20 ?",
        "result": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' AND Age > 20;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average , minimum , and maximum age of all singers from France or above age 20 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 and singer.age > 20  ",
        "question": "List all singer names in concerts in year 2014 and above age 20 ?",
        "result": "singer.Name\nFROM singer\nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nWHERE concert.Year >= 2014 AND singer.Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 and above age 20 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 or singer.age > 20  ",
        "question": "List all singer names in concerts in year 2014 or above age 20 ?",
        "result": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE concert.Year >= 2014 AND singer.Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 or above age 20 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer where  singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What is the total number of singers , above the average age .",
        "result": "COUNT(*) \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\" and singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What is the average , minimum , and maximum age of all singers from France and above the average age .",
        "result": "AVG(Age), MIN(Age), MAX(Age)\nFROM singer\nWHERE Country = 'France' AND Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average , minimum , and maximum age of all singers from France and above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = \"France\" or singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What is the average , minimum , and maximum age of all singers from France or above the average age .",
        "result": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France' OR Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average , minimum , and maximum age of all singers from France or above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20 and singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What are the different countries with singers above age 20 and above the average age .",
        "result": "Country \nFROM singer \nWHERE Age > 20 AND Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 and above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20 or singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What are the different countries with singers above age 20 or above the average age .",
        "result": "Country FROM singer WHERE Age > 20 OR Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 or above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 and singer.age > (select avg(singer.age) from singer  )  ",
        "question": "List all singer names in concerts in year 2014 and above the average age .",
        "result": "singer.Name \nFROM \nsinger \nJOIN \nsinger_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN \nconcert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE \nconcert.Year >= 2014 \nAND \nsinger.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 and above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 or singer.age > (select avg(singer.age) from singer  )  ",
        "question": "List all singer names in concerts in year 2014 or above the average age .",
        "result": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE concert.Year >= 2014 OR singer.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all singer names in concerts in year 2014 or above the average age . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer where  singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What is the total number of singers , who are older than average ?",
        "result": "COUNT(*) \nFROM singer \nWHERE Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 and singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What are the names of the singers who performed in a concert in 2014 and who are older than average ?",
        "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE concert.Year = 2014 \nAND singer.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014 and who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 or singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What are the names of the singers who performed in a concert in 2014 or who are older than average ?",
        "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE concert.Year = 2014 OR singer.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014 or who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\" and singer.age > (select avg(singer.age) from singer  )  ",
        "question": "what is the name and nation of the singer who have a song having ' Hey ' in its name and who are older than average ?",
        "result": "singer.Name, singer.Country\nFROM singer\nWHERE Song_Name LIKE '%Hey%' AND Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having ' Hey ' in its name and who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\" or singer.age > (select avg(singer.age) from singer  )  ",
        "question": "what is the name and nation of the singer who have a song having ' Hey ' in its name or who are older than average ?",
        "result": "singer.Name, singer.Country\nFROM singer\nWHERE singer.Song_Name LIKE '%Hey%' OR singer.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having ' Hey ' in its name or who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\" and singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title and who are older than average ?",
        "result": "singer.Name, singer.Country \nFROM singer \nWHERE Song_Name LIKE '%Hey%' AND Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title and who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\" or singer.age > (select avg(singer.age) from singer  )  ",
        "question": "What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title or who are older than average ?",
        "result": "singer.Name, singer.Country \nFROM singer \nWHERE singer.Song_Name LIKE '%Hey%' OR singer.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title or who are older than average ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.capacity between 5000 and 10000  ",
        "question": "What is the maximum capacity and the average of all stadiums , with a capacity between 5000 and 10000 .",
        "result": "MAX(Capacity), AVG(Capacity)\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the maximum capacity and the average of all stadiums , with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.capacity between 5000 and 10000  ",
        "question": "What is the average and maximum capacities for all stadiums , with a capacity between 5000 and 10000 .",
        "result": "AVG(Capacity), MAX(Capacity) FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and maximum capacities for all stadiums , with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with highest average attendance and with a capacity between 5000 and 10000 .",
        "result": "Name, Capacity \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nORDER BY Average DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance and with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with the highest average attendance and with a capacity between 5000 and 10000 .",
        "result": "Name, Capacity \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Average = (SELECT MAX(Average) FROM stadium);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance and with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014 and stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after and with a capacity between 5000 and 10000 .",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year >= 2014 AND stadium.Capacity BETWEEN 5000 AND 10000 \nGROUP BY stadium.Stadium_ID \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and capacity with most number of concerts in year 2014 or after and with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014 or stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after or with a capacity between 5000 and 10000 .",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE (concert.Year >= 2014 OR stadium.Capacity BETWEEN 5000 AND 10000) \nGROUP BY stadium.Stadium_ID \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and capacity with most number of concerts in year 2014 or after or with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013 and stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 and with a capacity between 5000 and 10000 .",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year > 2013 AND stadium.Capacity BETWEEN 5000 AND 10000 \nGROUP BY stadium.Name \nORDER BY COUNT(concert.Concert_ID) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity of the stadium with the most concerts after 2013 and with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013 or stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 or with a capacity between 5000 and 10000 .",
        "result": "Name, Capacity FROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 OR Stadium_ID IN \n(SELECT Stadium_ID FROM concert WHERE Year > 2013 \nGROUP BY Stadium_ID \nORDER BY COUNT(*) DESC \nLIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity of the stadium with the most concerts after 2013 or with a capacity between 5000 and 10000 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with highest average attendance and with capacity between 5000 and 10000 ?",
        "result": "Name, Capacity \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nORDER BY Average DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance and with capacity between 5000 and 10000 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with the highest average attendance and with capacity between 5000 and 10000 ?",
        "result": "Name, Capacity \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance and with capacity between 5000 and 10000 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014 and stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after and with capacity between 5000 and 10000 ?",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year >= 2014 AND stadium.Capacity BETWEEN 5000 AND 10000 \nGROUP BY stadium.Name, stadium.Capacity \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and capacity with most number of concerts in year 2014 or after and with capacity between 5000 and 10000 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014 or stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after or with capacity between 5000 and 10000 ?",
        "result": "Name, Capacity\nFROM stadium\nWHERE (Capacity BETWEEN 5000 AND 10000) OR Stadium_ID IN (\n  SELECT Stadium_ID\n  FROM concert\n  WHERE Year >= 2014\n  GROUP BY Stadium_ID\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and capacity with most number of concerts in year 2014 or after or with capacity between 5000 and 10000 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013 and stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 and with capacity between 5000 and 10000 ?",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE stadium.Capacity BETWEEN 5000 AND 10000 \nAND concert.Year > 2013 \nGROUP BY stadium.Stadium_ID \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity of the stadium with the most concerts after 2013 and with capacity between 5000 and 10000 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013 or stadium.capacity between 5000 and 10000  group by stadium.stadium_id  order by count(*) desc limit 1 ",
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 or with capacity between 5000 and 10000 ?",
        "result": "Name, Capacity\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000 OR Stadium_ID IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE Year > 2013 \n  GROUP BY Stadium_ID \n  ORDER BY COUNT(*) DESC \n  LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity of the stadium with the most concerts after 2013 or with capacity between 5000 and 10000 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and with highest average attendance ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and with highest average attendance ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and with highest average attendance ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and with highest average attendance ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and with the highest average attendance ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nORDER BY Average DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and with the highest average attendance ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   order by stadium.average desc limit 1 ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and with the highest average attendance ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nORDER BY Average DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and with the highest average attendance ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year >= 2014  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and in year 2014 or after .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 AND Year >= 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and in year 2014 or after . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 or concert.year >= 2014  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or in year 2014 or after .",
        "result": "Location, Name \nFROM stadium \nWHERE (Capacity BETWEEN 5000 AND 10000) OR (Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year >= 2014))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or in year 2014 or after . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year >= 2014  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and in year 2014 or after .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity >= 5000 AND Capacity <= 10000 AND Stadium_ID IN \n    (SELECT Stadium_ID FROM concert WHERE Year >= 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and in year 2014 or after . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 or concert.year >= 2014  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or in year 2014 or after .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 OR Year >= 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or in year 2014 or after . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with highest average attendance and in year 2014 or after .",
        "result": "Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium WHERE Year >= 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance and in year 2014 or after . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with the highest average attendance and in year 2014 or after .",
        "result": "Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium WHERE Year >= 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance and in year 2014 or after . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year > 2013  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and after 2013 ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 AND Year > 2013;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 or concert.year > 2013  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or after 2013 ?",
        "result": "Location, Name\nFROM stadium\nWHERE (Capacity BETWEEN 5000 AND 10000) OR (Year > 2013);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year > 2013  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and after 2013 ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Year > 2013",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 or concert.year > 2013  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or after 2013 ?",
        "result": "Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 OR Year > 2013;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with highest average attendance and after 2013 ?",
        "result": "Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium WHERE Year > 2013)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance and after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with the highest average attendance and after 2013 ?",
        "result": "Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium WHERE Year > 2013)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance and after 2013 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 and stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and without any concert .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and without any concert . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 or stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or without any concert .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nOR Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or without any concert . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 and stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and without any concert .",
        "result": "Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000\nAND Stadium_ID NOT IN (\n    SELECT Stadium_ID\n    FROM concert\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and without any concert . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 or stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or without any concert .",
        "result": "Location, Name FROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 OR Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or without any concert . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 and stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and without any concerts ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and without any concerts ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 or stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or without any concerts ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 OR Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or without any concerts ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 and stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and without any concerts ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and without any concerts ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000 or stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or without any concerts ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 OR Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or without any concerts ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "What is the maximum capacity and the average of all stadiums , without any concerts ?",
        "result": "MAX(Capacity), AVG(Capacity) FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the maximum capacity and the average of all stadiums , without any concerts ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )  ",
        "question": "What is the average and maximum capacities for all stadiums , without any concerts ?",
        "result": "AVG(Capacity), MAX(Capacity) FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and maximum capacities for all stadiums , without any concerts ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.country , count(*) from singer where  singer.age > 40  group by singer.country ",
        "question": "Show all countries and the number of singers in each country , where a singer above age 40 and ?",
        "result": "singer.Country, COUNT(singer.Singer_ID)\nFROM singer\nWHERE singer.Age > 40 AND singer.Is_male = 1\nGROUP BY singer.Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all countries and the number of singers in each country , where a singer above age 40 and ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) , singer.country from singer where  singer.age > 40  group by singer.country ",
        "question": "How many singers are from each country , where a singer above age 40 and ?",
        "result": "Country, COUNT(*) \nFROM singer \nWHERE Age > 40 \nGROUP BY Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many singers are from each country , where a singer above age 40 and ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   except select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and except for stadiums having a concert ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and except for stadiums having a concert ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   except select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or except for stadiums having a concert ?",
        "result": "Location, Name FROM stadium WHERE (Capacity BETWEEN 5000 AND 10000) OR Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or except for stadiums having a concert ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   except select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and except for stadiums having a concert ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Stadium_ID NOT IN \n(SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and except for stadiums having a concert ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   except select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or except for stadiums having a concert ?",
        "result": "Location, Name\nFROM stadium\nWHERE (Capacity BETWEEN 5000 AND 10000) OR Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or except for stadiums having a concert ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year = 2014  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and in year 2014 .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 \nAND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   union select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or in year 2014 .",
        "result": "Location, Name \nFROM stadium \nWHERE (Capacity BETWEEN 5000 AND 10000) OR (Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year = 2014  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and in year 2014 .",
        "result": "Location, Name FROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE Capacity BETWEEN 5000 AND 10000 AND Year = 2014",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   union select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or in year 2014 .",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 OR Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with highest average attendance and in year 2014 .",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nWHERE stadium.Average = (SELECT MAX(Average) FROM stadium) AND stadium.Stadium_ID IN \n    (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance and in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with the highest average attendance and in year 2014 .",
        "result": "stadium.Name, stadium.Capacity\nFROM stadium\nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nWHERE concert.Year = 2014 AND stadium.Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance and in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year = 2014  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 and in 2014 ?",
        "result": "Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000\nAND Stadium_ID IN (\n    SELECT Stadium_ID FROM concert\n    WHERE Year = 2014\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 and in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   union select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014  ",
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000 or in 2014 ?",
        "result": "Location, Name FROM stadium\nWHERE (Capacity BETWEEN 5000 AND 10000) OR (Name IN (SELECT Name FROM stadium INNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE Year = 2014));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show location and name for all stadiums with a capacity between 5000 and 10000 or in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity between 5000 and 10000 and concert.year = 2014  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 and in 2014 ?",
        "result": "Location, Name \nFROM stadium \nWHERE Capacity BETWEEN 5000 AND 10000 AND Highest = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 and in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000   union select stadium.location , stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014  ",
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000 or in 2014 ?",
        "result": "Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000 OR Highest = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the locations and names of all stations with capacity between 5000 and 10000 or in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with highest average attendance and in 2014 ?",
        "result": "Name, Capacity \nFROM stadium \nWHERE Average = (SELECT MAX(Average) FROM stadium WHERE Highest <= 2014 AND Lowest >= 2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with highest average attendance and in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   order by stadium.average desc limit 1 ",
        "question": "What is the name and capacity for the stadium with the highest average attendance and in 2014 ?",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year = 2014 \nORDER BY stadium.Average DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and capacity for the stadium with the highest average attendance and in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(singer.age) , min(singer.age) , max(singer.age) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  singer.country = \"France\" and concert.year = 2014  ",
        "question": "What is the average , minimum , and maximum age of all singers from France and in concerts in year 2014 .",
        "result": "AVG(Age), MIN(Age), MAX(Age)\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\nWHERE singer.Country = 'France' AND concert.Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average , minimum , and maximum age of all singers from France and in concerts in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  singer.age > 20 and concert.year = 2014  ",
        "question": "What are the different countries with singers above age 20 and in concerts in year 2014 .",
        "result": "singer.Country \nFROM \nsinger \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE singer.Age > 20 AND concert.Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 and in concerts in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct singer.country from singer where  singer.age > 20   union select distinct singer.country from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014  ",
        "question": "What are the different countries with singers above age 20 or in concerts in year 2014 .",
        "result": "singer.Country FROM singer\nLEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nLEFT JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID\nWHERE (singer.Age > 20 OR concert.Year = 2014)\nGROUP BY singer.Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different countries with singers above age 20 or in concerts in year 2014 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014  ",
        "question": "What is the total number of singers , who performed in a concert in 2014 ?",
        "result": "COUNT(DISTINCT Singer_ID) FROM singer_in_concert \nWHERE concert_ID IN (SELECT concert_ID FROM concert WHERE Year=2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , who performed in a concert in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  singer.song_name like \"%Hey%\" and concert.year = 2014  ",
        "question": "what is the name and nation of the singer who have a song having ' Hey ' in its name and who performed in a concert in 2014 ?",
        "result": "singer.Name, singer.Country \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE Song_Name LIKE '%Hey%' AND Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having ' Hey ' in its name and who performed in a concert in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"   union select singer.name , singer.country from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014  ",
        "question": "what is the name and nation of the singer who have a song having ' Hey ' in its name or who performed in a concert in 2014 ?",
        "result": "singer.Name, singer.Country \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE singer.Song_Name LIKE '%Hey%' OR concert.Year = 2014",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the singer who have a song having ' Hey ' in its name or who performed in a concert in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  singer.song_name like \"%Hey%\" and concert.year = 2014  ",
        "question": "What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title and who performed in a concert in 2014 ?",
        "result": "singer.Name, singer.Country \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE singer.Song_Name LIKE '%Hey%' AND concert.Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title and who performed in a concert in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , singer.country from singer where  singer.song_name like \"%Hey%\"   union select singer.name , singer.country from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014  ",
        "question": "What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title or who performed in a concert in 2014 ?",
        "result": "singer.Name, singer.Country\nFROM singer \nLEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nLEFT JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE Song_Name LIKE '%Hey%' OR Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and country of origin of every singer who has a song with the word ' Hey ' in its title or who performed in a concert in 2014 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer where  singer.song_name like \"%Hey%\"  ",
        "question": "What is the total number of singers , who have a song having ' Hey ' in its name ?",
        "result": "COUNT(DISTINCT Singer_ID) \nFROM singer \nWHERE Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , who have a song having ' Hey ' in its name ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 and singer.song_name like \"%Hey%\"  ",
        "question": "What are the names of the singers who performed in a concert in 2014 and who have a song having ' Hey ' in its name ?",
        "result": "singer.Name \nFROM \nsinger \nINNER JOIN \nsinger_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN \nconcert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE \nconcert.Year = 2014 AND singer.Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014 and who have a song having ' Hey ' in its name ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 or singer.song_name like \"%Hey%\"  ",
        "question": "What are the names of the singers who performed in a concert in 2014 or who have a song having ' Hey ' in its name ?",
        "result": "singer.Name \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE concert.Year = 2014 OR singer.Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014 or who have a song having ' Hey ' in its name ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select count(*) from singer where  singer.song_name like \"%Hey%\"  ",
        "question": "What is the total number of singers , who has a song with the word ' Hey ' in its title ?",
        "result": "COUNT(*) \nFROM singer \nWHERE Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of singers , who has a song with the word ' Hey ' in its title ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 and singer.song_name like \"%Hey%\"  ",
        "question": "What are the names of the singers who performed in a concert in 2014 and who has a song with the word ' Hey ' in its title ?",
        "result": "singer.Name \nFROM \nsinger \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE \nconcert.Year = 2014 AND \nsinger.Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014 and who has a song with the word ' Hey ' in its title ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014 or singer.song_name like \"%Hey%\"  ",
        "question": "What are the names of the singers who performed in a concert in 2014 or who has a song with the word ' Hey ' in its title ?",
        "result": "singer.Name \nFROM singer \nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nINNER JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE concert.Year = 2014 OR singer.Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers who performed in a concert in 2014 or who has a song with the word ' Hey ' in its title ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.stadium_id in (select concert.Stadium_ID from concert where  concert.year = 2014   intersect select concert.Stadium_ID from concert where  concert.year = 2015   ) ",
        "question": "What is the maximum capacity and the average of all stadiums , which some concerts happened in the years of both 2014 and 2015 .",
        "result": "MAX(Capacity) AS max_capacity, AVG(Capacity) AS avg_capacity \nFROM stadium \nWHERE Stadium_ID IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE Year IN (2014, 2015)\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the maximum capacity and the average of all stadiums , which some concerts happened in the years of both 2014 and 2015 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.stadium_id in (select concert.Stadium_ID from concert where  concert.year = 2014   intersect select concert.Stadium_ID from concert where  concert.year = 2015   ) ",
        "question": "What is the average and maximum capacities for all stadiums , which some concerts happened in the years of both 2014 and 2015 .",
        "result": "AVG(Capacity), MAX(Capacity)\nFROM stadium\nWHERE Stadium_ID IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year IN (2014, 2015)\n    GROUP BY Stadium_ID\n    HAVING COUNT(DISTINCT Year) = 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and maximum capacities for all stadiums , which some concerts happened in the years of both 2014 and 2015 . \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.stadium_id in (select concert.Stadium_ID from concert where  concert.year = 2014   intersect select concert.Stadium_ID from concert where  concert.year = 2015   ) ",
        "question": "What is the maximum capacity and the average of all stadiums , that had concerts that occurred in both 2014 and 2015 ?",
        "result": "MAX(Capacity), AVG(Capacity) \nFROM stadium \nWHERE Stadium_ID IN \n(SELECT Stadium_ID FROM concert \nWHERE Year = 2014 \nINTERSECT \nSELECT Stadium_ID FROM concert \nWHERE Year = 2015)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the maximum capacity and the average of all stadiums , that had concerts that occurred in both 2014 and 2015 ? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "select avg(stadium.capacity) , max(stadium.capacity) from stadium where  stadium.stadium_id in (select concert.Stadium_ID from concert where  concert.year = 2014   intersect select concert.Stadium_ID from concert where  concert.year = 2015   ) ",
        "question": "What is the average and maximum capacities for all stadiums , that had concerts that occurred in both 2014 and 2015 ?",
        "result": "AVG(Capacity), MAX(Capacity) \nFROM stadium \nWHERE Stadium_ID IN (\n  SELECT Stadium_ID \n  FROM concert \n  WHERE Year = 2014 \n  INTERSECT \n  SELECT Stadium_ID \n  FROM concert \n  WHERE Year = 2015 \n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and maximum capacities for all stadiums , that had concerts that occurred in both 2014 and 2015 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select max(pets.weight) , pets.pettype from pets where  pets.weight > 10  group by pets.pettype ",
        "question": "List the maximum weight and type for each type of pet , whose weight is heavier than 10 .",
        "result": "Pets.PetType, MAX(Pets.weight) \nFROM Pets \nWHERE Pets.weight > 10 \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and type for each type of pet , whose weight is heavier than 10 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count( distinct pets.pettype) from pets where  pets.weight > 10  ",
        "question": "Find the number of distinct type of pets , whose weight is heavier than 10 .",
        "result": "COUNT(DISTINCT PetType) FROM Pets WHERE weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct type of pets , whose weight is heavier than 10 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 and pets.weight > 10  ",
        "question": "Find the id and weight of all pets whose age is older than 1 and whose weight is heavier than 10 .",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nWHERE Pets.pet_age > 1 AND Pets.weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the id and weight of all pets whose age is older than 1 and whose weight is heavier than 10 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 or pets.weight > 10  ",
        "question": "Find the id and weight of all pets whose age is older than 1 or whose weight is heavier than 10 .",
        "result": "Pets.PetID, Pets.weight\nFROM Pets\nWHERE Pets.pet_age > 1 OR Pets.weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the id and weight of all pets whose age is older than 1 or whose weight is heavier than 10 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from pets where  pets.weight > 10  group by pets.pettype ",
        "question": "Find the average and maximum age for each type of pet , whose weight is heavier than 10 .",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nWHERE Pets.weight > 10 \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each type of pet , whose weight is heavier than 10 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.weight) , pets.pettype from pets where  pets.weight > 10  group by pets.pettype ",
        "question": "What is the average weight for each type of pet , whose weight is heavier than 10 .",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nWHERE Pets.weight > 10 \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each type of pet , whose weight is heavier than 10 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select max(pets.weight) , pets.pettype from pets where  pets.weight > 10  group by pets.pettype ",
        "question": "List the maximum weight and type for each type of pet that have a greater weight than 10 ?",
        "result": "Pets.PetType, MAX(Pets.weight)\nFROM Pets\nWHERE Pets.weight > 10\nGROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and type for each type of pet that have a greater weight than 10 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count( distinct pets.pettype) from pets where  pets.weight > 10  ",
        "question": "Find the number of distinct type of pets that have a greater weight than 10 ?",
        "result": "COUNT(DISTINCT PetType) FROM Pets WHERE weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct type of pets that have a greater weight than 10 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from pets where  pets.weight > 10  group by pets.pettype ",
        "question": "Find the average and maximum age for each type of pet that have a greater weight than 10 ?",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age)\nFROM Pets\nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nINNER JOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Pets.weight > 10\nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each type of pet that have a greater weight than 10 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.weight) , pets.pettype from pets where  pets.weight > 10  group by pets.pettype ",
        "question": "What is the average weight for each type of pet that have a greater weight than 10 ?",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nWHERE Pets.weight > 10 \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each type of pet that have a greater weight than 10 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select max(pets.weight) , pets.pettype from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  group by pets.pettype ",
        "question": "List the maximum weight and type for each type of pet , that are raised by female students ( with sex F ) .",
        "result": "Pets.PetType, MAX(Pets.weight) \nFROM Pets \nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Sex = 'F' \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and type for each type of pet , that are raised by female students ( with sex F ) . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from has_pet join student on Has_Pet.StuID = Student.StuID where  student.age > 20 and student.sex = \"F\"  ",
        "question": "How many pets are owned by students that have an age greater than 20 and that are raised by female students ( with sex F ) .",
        "result": "COUNT(PetID)\nFROM Has_Pet\nJOIN Student ON Student.StuID = Has_Pet.StuID\nWHERE Student.Age > 20 AND Student.Sex = 'F'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many pets are owned by students that have an age greater than 20 and that are raised by female students ( with sex F ) . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from has_pet join student on Has_Pet.StuID = Student.StuID where  student.age > 20 or student.sex = \"F\"  ",
        "question": "How many pets are owned by students that have an age greater than 20 or that are raised by female students ( with sex F ) .",
        "result": "COUNT(DISTINCT Has_Pet.PetID) \nFROM Has_Pet \nINNER JOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE (Student.Age > 20 OR Student.Sex = 'F')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many pets are owned by students that have an age greater than 20 or that are raised by female students ( with sex F ) . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count( distinct pets.pettype) from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  ",
        "question": "Find the number of distinct type of pets , that are raised by female students ( with sex F ) .",
        "result": "COUNT(DISTINCT Pets.PetType)\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Student.Sex = 'F'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct type of pets , that are raised by female students ( with sex F ) . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  group by pets.pettype ",
        "question": "Find the average and maximum age for each type of pet , that are raised by female students ( with sex F ) .",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age)\nFROM Pets\nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nJOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Student.Sex = 'F'\nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each type of pet , that are raised by female students ( with sex F ) . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.weight) , pets.pettype from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  group by pets.pettype ",
        "question": "What is the average weight for each type of pet , that are raised by female students ( with sex F ) .",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nINNER JOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Sex = 'F' \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each type of pet , that are raised by female students ( with sex F ) . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.weight > 10 and student.sex = \"F\"  ",
        "question": "How many pets have a greater weight than 10 and are raised by female students ?",
        "result": "COUNT(*) FROM Has_Pet \nINNER JOIN Student ON Has_Pet.StuID = Student.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.weight > 10 AND Student.Sex = 'F';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many pets have a greater weight than 10 and are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select max(pets.weight) , pets.pettype from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  group by pets.pettype ",
        "question": "List the maximum weight and type for each type of pet that are raised by female students ?",
        "result": "Pets.PetType, MAX(Pets.weight)\nFROM Pets\nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nINNER JOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Student.Sex = 'F'\nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and type for each type of pet that are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from has_pet join student on Has_Pet.StuID = Student.StuID where  student.age > 20 and student.sex = \"F\"  ",
        "question": "Find number of pets owned by students who are older than 20 and are raised by female students ?",
        "result": "COUNT(Has_Pet.PetID) \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'Female' AND Student.Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find number of pets owned by students who are older than 20 and are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from has_pet join student on Has_Pet.StuID = Student.StuID where  student.age > 20 or student.sex = \"F\"  ",
        "question": "Find number of pets owned by students who are older than 20 or are raised by female students ?",
        "result": "COUNT(*) \nFROM Has_Pet \nWHERE StuID IN (\n    SELECT StuID \n    FROM Student \n    WHERE Age > 20 OR Sex = 'F'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find number of pets owned by students who are older than 20 or are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count( distinct pets.pettype) from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  ",
        "question": "Find the number of distinct type of pets that are raised by female students ?",
        "result": "COUNT(DISTINCT Pets.PetType) FROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nINNER JOIN Student ON Student.StuID = Has_Pet.StuID \nWHERE Student.Sex = 'F';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct type of pets that are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  group by pets.pettype ",
        "question": "Find the average and maximum age for each type of pet that are raised by female students ?",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) \nFROM Pets \nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Sex = 'Female' \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each type of pet that are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.weight) , pets.pettype from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  student.sex = \"F\"  group by pets.pettype ",
        "question": "What is the average weight for each type of pet that are raised by female students ?",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nJOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Sex = 'Female' \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each type of pet that are raised by female students ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "Find the first name and gender of student who have more than one pet and who have cat or dog pet .",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType IN ('cat', 'dog') \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who have cat or dog pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who have cat or dog pet .",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE (Pets.PetType = 'cat' OR Pets.PetType = 'dog') \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who have cat or dog pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "Find the first name and gender of student who have more than one pet and who has a cat or dog as a pet ?",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType IN ('cat', 'dog') \nGROUP BY Student.StuID \nHAVING COUNT(DISTINCT Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who has a cat or dog as a pet ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who has a cat or dog as a pet ?",
        "result": "FName, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1\n) AND StuID IN (\n    SELECT StuID FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE PetType = 'cat' OR PetType = 'dog'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who has a cat or dog as a pet ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  intersect select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "Find the first name and gender of student who have more than one pet and who have both cat and dog pets .",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' AND Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' GROUP BY Has_Pet.StuID HAVING COUNT(*) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who have both cat and dog pets . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  intersect select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who have both cat and dog pets .",
        "result": "Student.Fname, Student.Sex\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat' AND Has_Pet.StuID IN (\n  SELECT StuID\n  FROM Has_Pet\n  WHERE PetID IN (\n    SELECT PetID\n    FROM Pets\n    WHERE PetType = 'dog'\n  )\n  GROUP BY StuID\n  HAVING COUNT(PetID) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who have both cat and dog pets . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  intersect select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "Find the first name and gender of student who have more than one pet and who have both cat and dog as pets ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat'\nAND Student.StuID IN (\n  SELECT Has_Pet.StuID\n  FROM Has_Pet\n  JOIN Pets ON Has_Pet.PetID = Pets.PetID\n  WHERE Pets.PetType = 'dog'\n  GROUP BY Has_Pet.StuID\n  HAVING COUNT(DISTINCT Pets.PetType) = 2\n)\nGROUP BY Student.StuID\nHAVING COUNT(DISTINCT Pets.PetType) = 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who have both cat and dog as pets ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1  intersect select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who have both cat and dog as pets ?",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Pet \n    WHERE PetID IN (\n        SELECT PetID \n        FROM Pets \n        WHERE PetType = 'cat'\n    ) \n    INTERSECT \n    SELECT StuID \n    FROM Has_Pet \n    WHERE PetID IN (\n        SELECT PetID \n        FROM Pets \n        WHERE PetType = 'dog'\n    )\n    GROUP BY StuID \n    HAVING COUNT(DISTINCT PetID) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who have both cat and dog as pets ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )   group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who do not have a cat pet .",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType != 'cat' \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who do not have a cat pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )   group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who do not have a cat pet .",
        "result": "Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType != 'cat' \nGROUP BY Student.StuID \nHAVING COUNT(DISTINCT Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who do not have a cat pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )   group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who does not own a cat as a pet ,",
        "result": "Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType != 'cat' \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who does not own a cat as a pet , \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  )   group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who does not own a cat as a pet ,",
        "result": "Student.Fname, Student.Sex \nFROM Student \nWHERE Student.StuID IN \n    (SELECT Has_Pet.StuID \n     FROM Has_Pet \n     JOIN Pets ON Has_Pet.PetID = Pets.PetID \n     WHERE Pets.PetType != 'cat' \n     GROUP BY Has_Pet.StuID \n     HAVING COUNT(*) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who does not own a cat as a pet , \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 and pets.pettype = \"dog\"  ",
        "question": "What is the id and weight of every pet who is older than 1 and who have a dog ?",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nWHERE Pets.pet_age > 1 AND Pets.PetType = 'dog'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 and who have a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 or pets.pettype = \"dog\"  ",
        "question": "What is the id and weight of every pet who is older than 1 or who have a dog ?",
        "result": "Pets.PetID, Pets.weight\nFROM Pets\nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nWHERE Pets.pet_age > 1 OR Pets.PetType = 'dog'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 or who have a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who have a dog ?",
        "result": "Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog'\nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who have a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "Find the first name and gender of student who have more than one pet or who have a dog ?",
        "result": "Student.Fname, Student.Sex \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE (Pets.PetType = 'dog') OR (Student.StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet or who have a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who have a dog ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog'\nGROUP BY Student.StuID\nHAVING COUNT(Has_Pet.PetID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who have a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet or who have a dog ?",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1) \nOR StuID IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet or who have a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 and pets.pettype = \"dog\"  ",
        "question": "What is the id and weight of every pet who is older than 1 and who has a dog ?",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nWHERE Pets.pet_age > 1 AND Pets.PetType = 'dog';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 and who has a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 or pets.pettype = \"dog\"  ",
        "question": "What is the id and weight of every pet who is older than 1 or who has a dog ?",
        "result": "Pets.PetID, Pets.weight\nFROM Pets\nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nINNER JOIN Student ON Has_Pet.StuID = Student.StuID\nWHERE Pets.pet_age > 1 OR Pets.PetType = 'dog'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 or who has a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who has a dog ?",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'dog' \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who has a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "Find the first name and gender of student who have more than one pet or who has a dog ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nWHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet WHERE Has_Pet.PetID IN (SELECT Pets.PetID FROM Pets WHERE Pets.PetType = 'dog'))\nOR\nStudent.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.StuID) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet or who has a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who has a dog ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog'\nGROUP BY Student.StuID\nHAVING COUNT(DISTINCT Has_Pet.PetID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who has a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"dog\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet or who has a dog ?",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (\n  SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 \n  UNION \n  SELECT StuID FROM Has_Pet \n  INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet or who has a dog ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from pets where  pets.weight > 10 and pets.pet_age > 1  ",
        "question": "Find the number of pets whose weight is heavier than 10 and whose age is older than 1 .",
        "result": "COUNT(*) FROM Pets WHERE weight > 10 AND pet_age > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of pets whose weight is heavier than 10 and whose age is older than 1 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count(*) from pets where  pets.weight > 10 or pets.pet_age > 1  ",
        "question": "Find the number of pets whose weight is heavier than 10 or whose age is older than 1 .",
        "result": "COUNT(*) FROM Pets WHERE weight > 10 OR pet_age > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of pets whose weight is heavier than 10 or whose age is older than 1 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select max(pets.weight) , pets.pettype from pets where  pets.pet_age > 1  group by pets.pettype ",
        "question": "List the maximum weight and type for each type of pet , whose age is older than 1 .",
        "result": "Pets.PetType, MAX(Pets.weight)\nFROM Pets\nWHERE Pets.pet_age > 1\nGROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and type for each type of pet , whose age is older than 1 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count( distinct pets.pettype) from pets where  pets.pet_age > 1  ",
        "question": "Find the number of distinct type of pets , whose age is older than 1 .",
        "result": "COUNT(DISTINCT PetType) FROM Pets WHERE pet_age > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct type of pets , whose age is older than 1 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from pets where  pets.pet_age > 1  group by pets.pettype ",
        "question": "Find the average and maximum age for each type of pet , whose age is older than 1 .",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) \n FROM Pets \n JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \n WHERE Pets.pet_age > 1 \n GROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each type of pet , whose age is older than 1 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.weight) , pets.pettype from pets where  pets.pet_age > 1  group by pets.pettype ",
        "question": "What is the average weight for each type of pet , whose age is older than 1 .",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nWHERE Pets.pet_age > 1 \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each type of pet , whose age is older than 1 . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select max(pets.weight) , pets.pettype from pets where  pets.pet_age > 1  group by pets.pettype ",
        "question": "List the maximum weight and type for each type of pet , who is older than 1 ?",
        "result": "Pets.PetType, MAX(Pets.weight) \nFROM Pets \nWHERE Pets.pet_age > 1 \nGROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and type for each type of pet , who is older than 1 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select count( distinct pets.pettype) from pets where  pets.pet_age > 1  ",
        "question": "Find the number of distinct type of pets , who is older than 1 ?",
        "result": "COUNT(DISTINCT PetType) FROM Pets WHERE pet_age > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct type of pets , who is older than 1 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.pet_age) , max(pets.pet_age) , pets.pettype from pets where  pets.pet_age > 1  group by pets.pettype ",
        "question": "Find the average and maximum age for each type of pet , who is older than 1 ?",
        "result": "Pets.PetType, AVG(Pets.pet_age) AS avg_age, MAX(Pets.pet_age) AS max_age \n FROM Pets \n INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \n INNER JOIN Student ON Has_Pet.StuID = Student.StuID \n WHERE Pets.pet_age > 1 \n GROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each type of pet , who is older than 1 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select avg(pets.weight) , pets.pettype from pets where  pets.pet_age > 1  group by pets.pettype ",
        "question": "What is the average weight for each type of pet , who is older than 1 ?",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nWHERE Pets.pet_age > 1 \nGROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each type of pet , who is older than 1 ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 and pets.pettype = \"cat\"  ",
        "question": "What is the id and weight of every pet who is older than 1 and who has a cat ?",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nWHERE Pets.pet_age > 1 AND Pets.PetType = 'cat'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 and who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 or pets.pettype = \"cat\"  ",
        "question": "What is the id and weight of every pet who is older than 1 or who has a cat ?",
        "result": "Pets.PetID, Pets.weight\nFROM Pets\nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nWHERE Pets.pet_age > 1 OR Pets.PetType = 'cat'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 or who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who has a cat ?",
        "result": "Student.FName, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'cat' \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  ",
        "question": "Find the first name and gender of student who have more than one pet or who has a cat ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nWHERE Student.StuID IN (\n    SELECT Has_Pet.StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat'\n    UNION\n    SELECT StuID \n    FROM Has_Pet \n    GROUP BY StuID \n    HAVING COUNT(*) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet or who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who has a cat ?",
        "result": "FName, Sex \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') GROUP BY StuID HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet or who has a cat ?",
        "result": "Fname, Sex FROM Student\nWHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType='cat') OR StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*)>1))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet or who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 and pets.pettype = \"cat\"  ",
        "question": "What is the id and weight of every pet who is older than 1 and who has a cat ?",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nWHERE Pets.pet_age > 1 AND Pets.PetType = 'cat'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 and who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select pets.petid , pets.weight from pets where  pets.pet_age > 1 or pets.pettype = \"cat\"  ",
        "question": "What is the id and weight of every pet who is older than 1 or who has a cat ?",
        "result": "Pets.PetID, Pets.weight\nFROM Pets\nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID\nWHERE Pets.pet_age > 1 OR Pets.PetType = 'cat'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every pet who is older than 1 or who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who has a cat ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat'\nGROUP BY Student.StuID\nHAVING COUNT(DISTINCT Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  ",
        "question": "Find the first name and gender of student who have more than one pet or who has a cat ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat'\nOR Student.StuID IN (\n    SELECT StuID \n    FROM Has_Pet \n    GROUP BY StuID \n    HAVING COUNT(*) > 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet or who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who has a cat ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat'\nGROUP BY Student.StuID\nHAVING COUNT(Has_Pet.PetID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID  group by student.stuid having  count(*) > 1  union select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID join pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = \"cat\"  ",
        "question": "What is the first name and gender of the all the students who have more than one pet or who has a cat ?",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Pet \n    WHERE PetID IN (\n        SELECT PetID \n        FROM Pets \n        WHERE PetType = 'cat'\n    ) \n    OR StuID IN (\n        SELECT StuID \n        FROM Has_Pet \n        GROUP BY StuID \n        HAVING COUNT(*) > 1\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet or who has a cat ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from student join has_pet on Student.StuID = Has_Pet.StuID  )   group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who do not have any pet .",
        "result": "Student.Fname, Student.Sex\nFROM Student\nWHERE StuID IN (\n  SELECT StuID \n  FROM Has_Pet \n  GROUP BY StuID \n  HAVING COUNT(PetID) > 1\n)\nAND StuID NOT IN (\n  SELECT StuID \n  FROM Has_Pet\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who do not have any pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from student join has_pet on Student.StuID = Has_Pet.StuID  )   group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who do not have any pet .",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)\nAND StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who do not have any pet . \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from student join has_pet on Student.StuID = Has_Pet.StuID  )   group by student.stuid having  count(*) > 1 ",
        "question": "Find the first name and gender of student who have more than one pet and who do not own any pets ?",
        "result": "Student.Fname, Student.Sex\nFROM Student\nWHERE Student.StuID IN (\n  SELECT Has_Pet.StuID\n  FROM Has_Pet\n  GROUP BY Has_Pet.StuID\n  HAVING COUNT(Has_Pet.PetID) > 1\n)\nAND Student.StuID NOT IN (\n  SELECT Has_Pet.StuID\n  FROM Has_Pet\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the first name and gender of student who have more than one pet and who do not own any pets ? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from has_pet join student on Has_Pet.StuID = Student.StuID where  student.stuid not in (select Student.StuID from student join has_pet on Student.StuID = Has_Pet.StuID  )   group by student.stuid having  count(*) > 1 ",
        "question": "What is the first name and gender of the all the students who have more than one pet and who do not own any pets ?",
        "result": "Fname, Sex \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Pet \n    GROUP BY StuID \n    HAVING COUNT(*) > 1 \n    INTERSECT \n    SELECT StuID \n    FROM Student \n    WHERE StuID NOT IN (\n        SELECT StuID \n        FROM Has_Pet\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the first name and gender of the all the students who have more than one pet and who do not own any pets ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.year > 1980  ",
        "question": "How many car models are produced in the usa and are the produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa') \nAND ModelId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year > 1980))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.year > 1980  ",
        "question": "How many car models are produced in the usa or are the produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA') \nOR ModelId IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list) AND Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA')) \nAND cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.year > 1980  ",
        "question": "What is the count of the car models produced in the usa and are the produced after 1980 ?",
        "result": "COUNT(model_list.ModelId) FROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.Country = 'usa' AND model_list.ModelId IN \n(SELECT car_names.MakeId FROM car_names \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.year > 1980  ",
        "question": "What is the count of the car models produced in the usa or are the produced after 1980 ?",
        "result": "COUNT(DISTINCT ModelId) \nFROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA') \nAND ModelId IN (SELECT MakeId FROM car_names WHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980  ",
        "question": "What are all the makers and models that are the produced after 1980 ?",
        "result": "Maker, Model FROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980  ",
        "question": "What are the makers and models that are the produced after 1980 ?",
        "result": "car_makers.Maker, model_list.Model\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN cars_data ON car_makers.Country = cars_data.Id\nWHERE cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 and cars_data.year > 1980   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders and are the produced after 1980 ?",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker \n JOIN car_names ON model_list.ModelId = car_names.Model \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Year > 1980 AND cars_data.Cylinders = 3 \n GROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 or cars_data.year > 1980   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders or are the produced after 1980 ?",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.Maker \n INNER JOIN car_names ON model_list.ModelId = car_names.Model \n INNER JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE (cars_data.Year > 1980) AND (cars_data.Cylinders = 3) \n GROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year > 1980  ",
        "question": "How many cars have more than 4 cylinders and are the produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year > 1980  ",
        "question": "How many cars have more than 4 cylinders or are the produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.year > 1980  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and are the produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' AND ModelId IN \n(SELECT MakeId FROM car_names WHERE MakeId IN \n(SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')) \nAND ModelId IN \n(SELECT Id FROM cars_data WHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.year > 1980  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or are the produced after 1980 ?",
        "result": "COUNT(DISTINCT model_list.ModelId) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.FullName \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE (car_makers.FullName = 'American Motor Company' OR cars_data.Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.year > 1980  ",
        "question": "What is the number of car models created by the car maker American Motor Company and are the produced after 1980 ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' \nAND ModelId IN (SELECT MakeId FROM car_names) \nAND ModelId IN (SELECT Id FROM cars_data WHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.year > 1980  ",
        "question": "What is the number of car models created by the car maker American Motor Company or are the produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' AND ModelId IN \n(SELECT MakeId FROM car_names WHERE MakeId = model_list.ModelId AND Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.year > 1980  ",
        "question": "How many cars has over 6 cylinders and are the produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.year > 1980  ",
        "question": "How many cars has over 6 cylinders or are the produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or are the produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.year > 1980  ",
        "question": "How many car models are produced in the usa and produced after 1980 ?",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.Country = 'USA' AND cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.year > 1980  ",
        "question": "How many car models are produced in the usa or produced after 1980 ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa') \nOR ModelId IN (SELECT Id FROM cars_data WHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.year > 1980  ",
        "question": "What is the count of the car models produced in the usa and produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa') AND ModelId IN \n(SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year > 1980))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.year > 1980  ",
        "question": "What is the count of the car models produced in the usa or produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA') \nOR ModelId IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names)) AND Maker IN (SELECT Maker FROM car_makers WHERE Country != 'USA')) \nAND Id IN (SELECT Id FROM cars_data WHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year > 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and produced after 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year>1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year > 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or produced after 1980 ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year > 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and produced after 1980 ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 AND Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year > 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or produced after 1980 ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year > 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 and produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year > 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 or produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year > 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 and produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year > 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 or produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year > 1980  ",
        "question": "How many cars have more than 4 cylinders and produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Cylinders > 4 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year > 1980  ",
        "question": "How many cars have more than 4 cylinders or produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year > 1980  ",
        "question": "What is the number of cars with more than 4 cylinders and produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Cylinders > 4 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year > 1980  ",
        "question": "What is the number of cars with more than 4 cylinders or produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.year > 1980  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and produced after 1980 ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' AND ModelId IN (\n  SELECT MakeId \n  FROM car_names \n  WHERE MakeId IN (\n    SELECT Id \n    FROM car_makers \n    WHERE FullName = 'American Motor Company' AND Country = 'USA'\n  )\n) AND ModelId IN (\n  SELECT Id \n  FROM cars_data \n  WHERE Year > 1980\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.year > 1980  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or produced after 1980 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' OR ModelId IN \n(SELECT DISTINCT MakeId FROM car_names \nINNER JOIN cars_data ON car_names.Model=cars_data.Id \nWHERE Year > 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.year > 1980  ",
        "question": "What is the number of car models created by the car maker American Motor Company and produced after 1980 ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' AND ModelId IN (\n    SELECT DISTINCT MakeId \n    FROM car_names \n    INNER JOIN cars_data ON car_names.Model = cars_data.Id \n    WHERE cars_data.Year > 1980 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.year > 1980  ",
        "question": "What is the number of car models created by the car maker American Motor Company or produced after 1980 ?",
        "result": "COUNT(DISTINCT ModelId) \nFROM model_list \nWHERE Maker = 'American Motor Company' OR Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.year > 1980  ",
        "question": "How many cars has over 6 cylinders and produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.year > 1980  ",
        "question": "How many cars has over 6 cylinders or produced after 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE (Cylinders > 6) OR (Year > 1980);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or produced after 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and make amc hornet sportabout (sw) ?",
        "result": "AVG(MPG) FROM cars_data \nWHERE Cylinders = 4 AND MakeId = (\n    SELECT Id FROM car_names \n    WHERE Make = 'amc' AND Model = 'hornet sportabout (sw)'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and make amc hornet sportabout (sw) ?",
        "result": "AVG(MPG) FROM cars_data \nWHERE Cylinders = 4 AND Id IN \n(SELECT Id FROM car_names WHERE Model = 'hornet sportabout (sw)' AND Maker = 'amc')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > 150 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the number of the cars with horsepower more than 150 and make amc hornet sportabout (sw) ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Horsepower > 150 AND Id IN (\n    SELECT Id FROM car_names \n    WHERE MakeId = (\n        SELECT Id FROM car_makers \n        WHERE Maker = 'amc' AND FullName = 'hornet sportabout (sw)'\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > 150 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the number of cars with a horsepower greater than 150 and make amc hornet sportabout (sw) ?",
        "result": "COUNT(*) FROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year < 1980 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the average horsepower of the cars before 1980 and make amc hornet sportabout (sw) ?",
        "result": "AVG(Horsepower) FROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN countries ON car_makers.Country = countries.CountryName \nWHERE Year < 1980 AND Make = 'amc hornet sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year < 1980 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the average horsepower for all cars produced before 1980 and make amc hornet sportabout (sw) ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN countries ON car_makers.Country = countries.CountryId \nWHERE cars_data.Year < 1980 AND car_names.Make = 'amc hornet sportabout (sw)';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders > 4 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "How many cars have more than 4 cylinders and make amc hornet sportabout (sw) ?",
        "result": "COUNT(*) \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON car_makers.Id = model_list.Maker \nWHERE cars_data.Cylinders > 4 AND car_makers.Maker = 'amc' AND car_names.Make = 'hornet sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders > 4 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "What is the number of cars with more than 4 cylinders and make amc hornet sportabout (sw) ?",
        "result": "COUNT(*) FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN countries ON car_makers.Country = countries.CountryName \nWHERE cars_data.Cylinders > 4 AND car_names.Make = 'amc hornet sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.year = 1980 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "how many cars were produced in 1980 and make amc hornet sportabout (sw) ?",
        "result": "COUNT(*) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE Year = 1980 AND Model = 'hornet sportabout (sw)' AND Maker = 'amc'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and make amc hornet sportabout (sw) ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = \"American Motors Corporation\" \nAND car_names.Make = \"AMC Hornet Sportabout (sw)\" \nORDER BY cars_data.Accelerate DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and make amc hornet sportabout (sw) ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders > 6 and car_names.make = \"amc hornet sportabout (sw)\"  ",
        "question": "How many cars has over 6 cylinders and make amc hornet sportabout (sw) ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Cylinders > 6 AND Id IN \n(SELECT MakeId FROM car_names WHERE Model = 'Hornet Sportabout (Sw)' AND Maker = 'AMC')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and make amc hornet sportabout (sw) ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"france\"  group by car_makers.id having  count(*) > 3 ",
        "question": "What are the names and ids of all makers with more than 3 models and are there in france ?",
        "result": "car_makers.Id, car_makers.Maker\nFROM car_makers\nWHERE car_makers.Country = \"france\" AND \n      (SELECT COUNT(model_list.ModelId) FROM model_list WHERE model_list.Maker = car_makers.Maker) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all makers with more than 3 models and are there in france ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) > 3  union select car_makers.fullname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"france\"  ",
        "question": "What are the names and ids of all makers with more than 3 models or are there in france ?",
        "result": "Id, Maker FROM car_makers \nWHERE Id IN (SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(*) > 3)\nOR Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all makers with more than 3 models or are there in france ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"france\"  group by car_makers.id having  count(*) > 3 ",
        "question": "What are the names and ids of all makers with more than 3 models and in france ?",
        "result": "car_makers.Id, car_makers.Maker \n FROM car_makers \n WHERE car_makers.Country = 'france' AND \n       (SELECT COUNT(*) FROM model_list WHERE model_list.Maker = car_makers.Maker) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all makers with more than 3 models and in france ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) > 3  union select car_makers.fullname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"france\"  ",
        "question": "What are the names and ids of all makers with more than 3 models or in france ?",
        "result": "car_makers.Id, car_makers.Maker \n FROM car_makers \n WHERE car_makers.Country = 'France' OR car_makers.Id IN \n     (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT ModelId) > 3);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all makers with more than 3 models or in france ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 and countries.countryname = \"usa\"  ",
        "question": "Which distinct car models are the produced after 1980 and are produced in the usa ?",
        "result": "DISTINCT Model\nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year > 1980 AND car_makers.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 or countries.countryname = \"usa\"  ",
        "question": "Which distinct car models are the produced after 1980 or are produced in the usa ?",
        "result": "DISTINCT Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE (cars_data.Year > 1980) OR (car_makers.Country = 'usa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 and countries.countryname = \"usa\"  ",
        "question": "What are the different models for the cars produced after 1980 and are produced in the usa ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN car_makers ON car_names.MakeId = car_makers.Id \nJOIN cars_data ON car_makers.Country = 'usa' AND car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 or countries.countryname = \"usa\"  ",
        "question": "What are the different models for the cars produced after 1980 or are produced in the usa ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE (cars_data.Year > 1980 OR car_makers.Country = 'USA');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"  ",
        "question": "What are all the makers and models that are produced in the usa ?",
        "result": "car_makers.Maker, model_list.Model\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nWHERE car_makers.Country = \"USA\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"  ",
        "question": "What are the makers and models that are produced in the usa ?",
        "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nWHERE car_makers.Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" and countries.countryname = \"usa\"  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and are produced in the usa ?",
        "result": "COUNT(model_list.ModelId) FROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker AND car_makers.FullName = 'American Motor Company'\nINNER JOIN countries ON car_makers.Country = countries.CountryName AND countries.Continent = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" or countries.countryname = \"usa\"  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or are produced in the usa ?",
        "result": "COUNT(DISTINCT model_list.ModelId) \nFROM model_list \nLEFT JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'American Motor Company' OR car_makers.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" and countries.countryname = \"usa\"  ",
        "question": "What is the number of car models created by the car maker American Motor Company and are produced in the usa ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' \nAND ModelId IN (\n  SELECT MakeId FROM car_names \n  WHERE Country = 'USA'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" or countries.countryname = \"usa\"  ",
        "question": "What is the number of car models created by the car maker American Motor Company or are produced in the usa ?",
        "result": "COUNT(DISTINCT ModelId) FROM model_list \nWHERE Maker = 'American Motor Company' OR ModelId IN \n(SELECT MakeId FROM car_names WHERE Country = 'usa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or are produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 and countries.countryname = \"usa\"  ",
        "question": "Which distinct car models are the produced after 1980 and produced in the usa ?",
        "result": "DISTINCT Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN cars_data ON car_makers.Country = 'USA' AND cars_data.Year > 1980 AND model_list.ModelId = cars_data.Id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 or countries.countryname = \"usa\"  ",
        "question": "Which distinct car models are the produced after 1980 or produced in the usa ?",
        "result": "DISTINCT Model \nFROM car_names \nINNER JOIN model_list ON car_names.Model = model_list.ModelId \nINNER JOIN car_makers ON car_makers.Id = model_list.Maker \nINNER JOIN countries ON car_makers.Country = countries.CountryId \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 OR countries.CountryName = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 and countries.countryname = \"usa\"  ",
        "question": "What are the different models for the cars produced after 1980 and produced in the usa ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN car_makers ON car_names.MakeId = car_makers.Id \nJOIN cars_data ON car_makers.Country = 'USA' AND cars_data.Year > 1980 AND cars_data.Id = car_names.MakeId",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  cars_data.year > 1980 or countries.countryname = \"usa\"  ",
        "question": "What are the different models for the cars produced after 1980 or produced in the usa ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.Make = cars_data.Id \nWHERE (cars_data.Year > 1980 OR car_makers.Country = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"  ",
        "question": "What are all the makers and models that produced in the usa ?",
        "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nWHERE car_makers.Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\"  ",
        "question": "What are the makers and models that produced in the usa ?",
        "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nWHERE car_makers.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" and countries.countryname = \"usa\"  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and produced in the usa ?",
        "result": "COUNT(model_list.ModelId) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'American Motor Company' AND car_makers.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" or countries.countryname = \"usa\"  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or produced in the usa ?",
        "result": "COUNT(DISTINCT ModelId) FROM model_list\nWHERE Maker = 'American Motor Company' OR Maker IN \n(SELECT DISTINCT Maker FROM car_makers WHERE Country = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" and countries.countryname = \"usa\"  ",
        "question": "What is the number of car models created by the car maker American Motor Company and produced in the usa ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' AND ModelId IN (\n  SELECT MakeId \n  FROM car_names \n  WHERE Make = 'USA'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\" or countries.countryname = \"usa\"  ",
        "question": "What is the number of car models created by the car maker American Motor Company or produced in the usa ?",
        "result": "COUNT(*) FROM model_list WHERE Maker = 'American Motor Company' OR ModelId IN (SELECT MakeId FROM car_names WHERE Country = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or produced in the usa ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 4  ",
        "question": "What are the different models for the cars produced after 1980 and with 4 cylinders ?",
        "result": "model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE cars_data.Year > 1980 AND cars_data.Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 4  ",
        "question": "What are the different models for the cars produced after 1980 or with 4 cylinders ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE (cars_data.Year > 1980 OR cars_data.Cylinders = 4)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders = 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with 4 cylinders ?",
        "result": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC' \nAND car_names.Make = 'Hornet Sportabout (sw)' \nAND cars_data.Cylinders = 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders = 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with 4 cylinders ?",
        "result": "cars_data.Accelerate \nFROM \ncars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE \ncar_makers.FullName = \"American Motors Corporation\" \nAND car_names.Make = \"AMC Hornet Sportabout (sw)\" \nAND cars_data.Cylinders = 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 4  ",
        "question": "What is the number of the cars with horsepower more than 150 and with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 4  ",
        "question": "What is the number of the cars with horsepower more than 150 or with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 4  ",
        "question": "What is the average horsepower of the cars before 1980 and with 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 4  ",
        "question": "What is the average horsepower of the cars before 1980 or with 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders = 4  ",
        "question": "how many cars were produced in 1980 and with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders = 4  ",
        "question": "how many cars were produced in 1980 or with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 OR Cylinders=4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with 4 cylinders ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Cylinders = 4 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with 4 cylinders ?",
        "result": "Horsepower \nFROM cars_data \nWHERE Cylinders = 4 \nORDER BY Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 4  ",
        "question": "What are the different models for the cars produced after 1980 and with 4 cylinders ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN car_makers ON car_names.MakeId = car_makers.Id \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 4  ",
        "question": "What are the different models for the cars produced after 1980 or with 4 cylinders ?",
        "result": "Model\nFROM model_list\nJOIN car_names ON model_list.ModelId = car_names.Model\nJOIN car_makers ON car_names.MakeId = car_makers.Id\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE (Year > 1980 OR Cylinders = 4)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders = 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with 4 cylinders ?",
        "result": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' \nAND cars_data.Cylinders = 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders = 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with 4 cylinders ?",
        "result": "cars_data.Accelerate \nFROM \ncars_data \nJOIN \ncar_names ON cars_data.Id = car_names.MakeId \nJOIN \nmodel_list ON car_names.Model = model_list.Model \nJOIN \ncar_makers ON model_list.Maker = car_makers.Maker \nWHERE \n(car_makers.FullName = 'AMC' AND car_names.Make = 'Hornet Sportabout (sw)') \nAND \ncars_data.Cylinders = 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 4  ",
        "question": "What is the number of the cars with horsepower more than 150 and with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 4  ",
        "question": "What is the number of the cars with horsepower more than 150 or with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 4  ",
        "question": "What is the average horsepower of the cars before 1980 and with 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 4  ",
        "question": "What is the average horsepower of the cars before 1980 or with 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE (Year < 1980) OR (Cylinders = 4)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders = 4  ",
        "question": "how many cars were produced in 1980 and with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 AND Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders = 4  ",
        "question": "how many cars were produced in 1980 or with 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 OR Cylinders=4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with 4 cylinders ?",
        "result": "Horsepower FROM cars_data WHERE Cylinders = 4 ORDER BY Accelerate DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with 4 cylinders ?",
        "result": "cars_data.Horsepower \nFROM \ncars_data \nWHERE \ncars_data.Cylinders = 4 \nORDER BY \ncars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 8  ",
        "question": "Which distinct car models are the produced after 1980 and produced with 8 cylinders ?",
        "result": "DISTINCT Model\nFROM car_names\nINNER JOIN model_list ON car_names.Model = model_list.Model\nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON car_makers.Country = cars_data.Id\nWHERE Year > 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 8  ",
        "question": "Which distinct car models are the produced after 1980 or produced with 8 cylinders ?",
        "result": "DISTINCT Model \nFROM model_list \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 8  ",
        "question": "What are the different models for the cars produced after 1980 and produced with 8 cylinders ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 8  ",
        "question": "What are the different models for the cars produced after 1980 or produced with 8 cylinders ?",
        "result": "model_list.Model \nFROM model_list \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders = 8  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and produced with 8 cylinders ?",
        "result": "Accelerate \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' \nAND cars_data.Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders = 8  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or produced with 8 cylinders ?",
        "result": "Accelerate FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 8  ",
        "question": "What is the number of the cars with horsepower more than 150 and produced with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 8  ",
        "question": "What is the number of the cars with horsepower more than 150 or produced with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 8  ",
        "question": "What is the number of cars with a horsepower greater than 150 and produced with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 8  ",
        "question": "What is the number of cars with a horsepower greater than 150 or produced with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 8  ",
        "question": "What is the average horsepower of the cars before 1980 and produced with 8 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8  ",
        "question": "What is the average horsepower of the cars before 1980 or produced with 8 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 8  ",
        "question": "What is the average horsepower for all cars produced before 1980 and produced with 8 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8  ",
        "question": "What is the average horsepower for all cars produced before 1980 or produced with 8 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE (Year < 1980) OR (Cylinders = 8)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders = 8  ",
        "question": "how many cars were produced in 1980 and produced with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Year = 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders = 8  ",
        "question": "how many cars were produced in 1980 or produced with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 8   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and produced with 8 cylinders ?",
        "result": "MAX(Horsepower) \nFROM cars_data \nWHERE Cylinders = 8 \nORDER BY Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 8   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and produced with 8 cylinders ?",
        "result": "Horsepower \nFROM cars_data \nWHERE Cylinders = 8 AND Accelerate = (SELECT MAX(Accelerate) FROM cars_data WHERE Cylinders = 8)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and produced with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year = 1974  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and on 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year=1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year = 1974  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or on 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE (Cylinders = 4 OR Year = 1974)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year = 1974  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and on 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year=1974",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year = 1974  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or on 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year = 1974  ",
        "question": "What is the number of the cars with horsepower more than 150 and on 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year = 1974  ",
        "question": "What is the number of the cars with horsepower more than 150 or on 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year = 1974  ",
        "question": "What is the number of cars with a horsepower greater than 150 and on 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year = 1974  ",
        "question": "What is the number of cars with a horsepower greater than 150 or on 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 and cars_data.year = 1974   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders and on 1974 ?",
        "result": "MAX(cars_data.Horsepower), car_makers.Maker\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.FullName\nWHERE cars_data.Cylinders = 3 AND cars_data.Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 or cars_data.year = 1974   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders or on 1974 ?",
        "result": "MAX(cars_data.Horsepower), car_makers.Maker\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE (cars_data.Cylinders = 3 OR cars_data.Year = 1974)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders or on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data where  cars_data.year = 1974  group by cars_data.cylinders ",
        "question": "What is the maximum accelerate for different number of cylinders , on 1974 ?",
        "result": "Cylinders, MAX(Accelerate) \n FROM cars_data \n WHERE Year = 1974 \n GROUP BY Cylinders",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for different number of cylinders , on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data where  cars_data.year = 1974  group by cars_data.cylinders ",
        "question": "What is the maximum accelerate for all the different cylinders , on 1974 ?",
        "result": "MAX(Accelerate) \nFROM cars_data \nWHERE Year = 1974 \nGROUP BY Cylinders",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for all the different cylinders , on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year = 1974  ",
        "question": "What is the number of cars with more than 4 cylinders and on 1974 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year = 1974  ",
        "question": "What is the number of cars with more than 4 cylinders or on 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year = 1974   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and on 1974 ?",
        "result": "Horsepower \nFROM cars_data \nWHERE Year = 1974 \nORDER BY Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year = 1974   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and on 1974 ?",
        "result": "cars_data.Horsepower \nFROM \n  cars_data \nWHERE \n  cars_data.Year = 1974 AND cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data WHERE Year = 1974)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and on 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 8  ",
        "question": "What are the different models for the cars produced after 1980 and with 8 cylinders produced ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 8  ",
        "question": "What are the different models for the cars produced after 1980 or with 8 cylinders produced ?",
        "result": "Model\nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders = 8  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with 8 cylinders produced ?",
        "result": "cars_data.Accelerate \nFROM \ncars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE \ncar_makers.FullName = 'American Motors Corporation' AND \nmodel_list.Model = 'Hornet Sportabout (sw)' AND \ncars_data.Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders = 8  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with 8 cylinders produced ?",
        "result": "cars_data.Accelerate\nFROM car_names \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON car_makers.Maker = model_list.Maker \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 8  ",
        "question": "What is the number of the cars with horsepower more than 150 and with 8 cylinders produced ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 8  ",
        "question": "What is the number of the cars with horsepower more than 150 or with 8 cylinders produced ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 8  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with 8 cylinders produced ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 8  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with 8 cylinders produced ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 8  ",
        "question": "What is the average horsepower of the cars before 1980 and with 8 cylinders produced ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8  ",
        "question": "What is the average horsepower of the cars before 1980 or with 8 cylinders produced ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 8  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with 8 cylinders produced ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with 8 cylinders produced ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE Year < 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders = 8  ",
        "question": "how many cars were produced in 1980 and with 8 cylinders produced ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Year = 1980 AND Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders = 8  ",
        "question": "how many cars were produced in 1980 or with 8 cylinders produced ?",
        "result": "COUNT(*) FROM cars_data WHERE (Year=1980 OR Cylinders=8);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 8   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with 8 cylinders produced ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Cylinders = 8 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 8   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with 8 cylinders produced ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Cylinders = 8 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with 8 cylinders produced ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year = 1974  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and in 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year = 1974  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or in 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE (Cylinders = 4 OR Year = 1974);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year = 1974  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and in 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year=1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year = 1974  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or in 1974 ?",
        "result": "AVG(MPG) FROM cars_data WHERE (Cylinders = 4 OR Year = 1974)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year = 1974  ",
        "question": "What is the number of the cars with horsepower more than 150 and in 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year = 1974  ",
        "question": "What is the number of the cars with horsepower more than 150 or in 1974 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Horsepower > 150 OR Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year = 1974  ",
        "question": "What is the number of cars with a horsepower greater than 150 and in 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year = 1974  ",
        "question": "What is the number of cars with a horsepower greater than 150 or in 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 and cars_data.year = 1974   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders and in 1974 ?",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year = 1974 AND cars_data.Cylinders = 3 \nGROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 or cars_data.year = 1974   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders or in 1974 ?",
        "result": "MAX(cars_data.Horsepower), car_makers.Maker\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE cars_data.Cylinders = 3 OR cars_data.Year = 1974\nGROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders or in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year = 1974  ",
        "question": "What is the number of cars with more than 4 cylinders and in 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Year = 1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year = 1974  ",
        "question": "What is the number of cars with more than 4 cylinders or in 1974 ?",
        "result": "COUNT(*) FROM cars_data WHERE (Cylinders > 4 OR Year = 1974);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year = 1974   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and in 1974 ?",
        "result": "Horsepower FROM cars_data \nWHERE Year = 1974 \nORDER BY Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year = 1974   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and in 1974 ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Year = 1974 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and in 1974 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.horsepower > 150  ",
        "question": "What are the different models for the cars produced after 1980 and with horsepower more than 150 ?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN car_names ON car_makers.Id = car_names.MakeId\nINNER JOIN cars_data ON car_names.Model = cars_data.Id\nWHERE cars_data.Year > 1980 AND cars_data.Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.horsepower > 150  ",
        "question": "What are the different models for the cars produced after 1980 or with horsepower more than 150 ?",
        "result": "Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980 OR cars_data.Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.horsepower > 150  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with horsepower more than 150 ?",
        "result": "Accelerate \nFROM car_names \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.Maker = 'amc' \nAND car_names.Make = 'hornet sportabout (sw)' \nAND cars_data.Horsepower > 150",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.horsepower > 150  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with horsepower more than 150 ?",
        "result": "cars_data.Accelerate \nFROM \ncar_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nINNER JOIN car_names ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE \ncar_makers.FullName = 'amc hornet sportabout (sw)' AND cars_data.Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and with horsepower more than 150 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or with horsepower more than 150 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 OR Horsepower>150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and with horsepower more than 150 ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or with horsepower more than 150 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 OR Horsepower > 150",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.horsepower > 150  ",
        "question": "What is the average horsepower of the cars before 1980 and with horsepower more than 150 ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.horsepower > 150  ",
        "question": "What is the average horsepower of the cars before 1980 or with horsepower more than 150 ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.horsepower > 150  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with horsepower more than 150 ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.horsepower > 150  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with horsepower more than 150 ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.horsepower > 150  ",
        "question": "How many cars have more than 4 cylinders and with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.horsepower > 150  ",
        "question": "How many cars have more than 4 cylinders or with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.horsepower > 150  ",
        "question": "What is the number of cars with more than 4 cylinders and with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.horsepower > 150  ",
        "question": "What is the number of cars with more than 4 cylinders or with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.horsepower > 150  ",
        "question": "how many cars were produced in 1980 and with horsepower more than 150 ?",
        "result": "COUNT(*) \nFROM cars_data \nWHERE Year = 1980 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.horsepower > 150  ",
        "question": "how many cars were produced in 1980 or with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.horsepower > 150   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with horsepower more than 150 ?",
        "result": "Horsepower \nFROM \n    cars_data \nWHERE \n    Horsepower > 150 AND \n    Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.horsepower > 150   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with horsepower more than 150 ?",
        "result": "Horsepower FROM cars_data WHERE Horsepower > 150 ORDER BY Accelerate DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.horsepower > 150  ",
        "question": "How many cars has over 6 cylinders and with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.horsepower > 150  ",
        "question": "How many cars has over 6 cylinders or with horsepower more than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or with horsepower more than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.horsepower > 150  ",
        "question": "What are the different models for the cars produced after 1980 and with a horsepower greater than 150 ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_names ON model_list.Maker = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.horsepower > 150  ",
        "question": "What are the different models for the cars produced after 1980 or with a horsepower greater than 150 ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.horsepower > 150  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with a horsepower greater than 150 ?",
        "result": "Accelerate \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Horsepower > 150",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.horsepower > 150  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with a horsepower greater than 150 ?",
        "result": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE (car_makers.FullName = 'amc hornet sportabout (sw)' AND cars_data.Horsepower > 150)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and with a horsepower greater than 150 ?",
        "result": "AVG(MPG) FROM cars_data \nWHERE Cylinders=4 AND Horsepower>150",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or with a horsepower greater than 150 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and with a horsepower greater than 150 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.horsepower > 150  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or with a horsepower greater than 150 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 OR Horsepower>150",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.horsepower > 150  ",
        "question": "What is the average horsepower of the cars before 1980 and with a horsepower greater than 150 ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.horsepower > 150  ",
        "question": "What is the average horsepower of the cars before 1980 or with a horsepower greater than 150 ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.horsepower > 150  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with a horsepower greater than 150 ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.horsepower > 150  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with a horsepower greater than 150 ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.horsepower > 150  ",
        "question": "How many cars have more than 4 cylinders and with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.horsepower > 150  ",
        "question": "How many cars have more than 4 cylinders or with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.horsepower > 150  ",
        "question": "What is the number of cars with more than 4 cylinders and with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Horsepower > 150",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.horsepower > 150  ",
        "question": "What is the number of cars with more than 4 cylinders or with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.horsepower > 150  ",
        "question": "how many cars were produced in 1980 and with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.horsepower > 150  ",
        "question": "how many cars were produced in 1980 or with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.horsepower > 150   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with a horsepower greater than 150 ?",
        "result": "Horsepower FROM cars_data \nWHERE Horsepower > 150 AND Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.horsepower > 150   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with a horsepower greater than 150 ?",
        "result": "Horsepower FROM cars_data WHERE Horsepower > 150 ORDER BY Accelerate DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.horsepower > 150  ",
        "question": "How many cars has over 6 cylinders and with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.horsepower > 150  ",
        "question": "How many cars has over 6 cylinders or with a horsepower greater than 150 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or with a horsepower greater than 150 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by car_makers.country  order by count(*) desc limit 1 ",
        "question": "What is the name of the country with the most car makers and in europe ?",
        "result": "countries.CountryName \nFROM countries \nWHERE countries.Continent = 'Europe' \nAND countries.CountryId = (\n    SELECT countries.CountryId \n    FROM car_makers \n    JOIN countries ON car_makers.Country = countries.CountryId \n    GROUP BY car_makers.Country \n    ORDER BY COUNT(DISTINCT car_makers.Maker) DESC \n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of the country with the most car makers and in europe ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryid having  count(*) >= 1 ",
        "question": "What are the names and ids of all countries with at least one car maker and in europe ?",
        "result": "countries.CountryId, countries.CountryName\nFROM countries\nINNER JOIN car_makers ON countries.CountryId = car_makers.Country\nWHERE countries.Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all countries with at least one car maker and in europe ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) >= 1  union select countries.countryname , countries.countryid from countries join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  ",
        "question": "What are the names and ids of all countries with at least one car maker or in europe ?",
        "result": "countries.CountryId, countries.CountryName \nFROM countries \nLEFT JOIN car_makers ON countries.CountryName = car_makers.Country \nWHERE car_makers.Id IS NOT NULL OR countries.Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all countries with at least one car maker or in europe ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and in europe ?",
        "result": "COUNT(DISTINCT countries.CountryId)\nFROM countries\nINNER JOIN car_makers ON countries.CountryName = car_makers.Country\nWHERE countries.Continent = 'Europe'\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and in europe ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = \"europe\"  group by countries.countryid having  count(*) > 2 ",
        "question": "What is the number of countries with more than 2 car makers and in europe ?",
        "result": "COUNT(DISTINCT countries.CountryId) \nFROM countries \nINNER JOIN car_makers ON countries.CountryId = car_makers.Country \nWHERE countries.Continent = 'Europe' \nGROUP BY countries.CountryId \nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of countries with more than 2 car makers and in europe ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 3  ",
        "question": "Which distinct car models are the produced after 1980 and with 3 cylinders ?",
        "result": "DISTINCT Model \nFROM model_list \nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders = 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 3  ",
        "question": "Which distinct car models are the produced after 1980 or with 3 cylinders ?",
        "result": "DISTINCT Model FROM model_list\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE (cars_data.Year > 1980) OR (cars_data.Cylinders = 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 3  ",
        "question": "What is the number of the cars with horsepower more than 150 and with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 3  ",
        "question": "What is the number of the cars with horsepower more than 150 or with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 3  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 3  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 3  ",
        "question": "What is the average horsepower of the cars before 1980 and with 3 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 3  ",
        "question": "What is the average horsepower of the cars before 1980 or with 3 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 3  ",
        "question": "Which distinct car models are the produced after 1980 and with 3 cylinders ?",
        "result": "DISTINCT Model\nFROM model_list\nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE Year > 1980 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 3  ",
        "question": "Which distinct car models are the produced after 1980 or with 3 cylinders ?",
        "result": "DISTINCT Model\nFROM model_list\nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE Year > 1980 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 3  ",
        "question": "What is the number of the cars with horsepower more than 150 and with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 3  ",
        "question": "What is the number of the cars with horsepower more than 150 or with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 3  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 3  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 3  ",
        "question": "What is the average horsepower of the cars before 1980 and with 3 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE Year < 1980 AND Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 3  ",
        "question": "What is the average horsepower of the cars before 1980 or with 3 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE Year < 1980 OR Cylinders = 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.year < 1980  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and before 1980 ?",
        "result": "cars_data.Accelerate \nFROM \ncar_names \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE \ncar_makers.FullName = 'AMC' AND car_names.Make = 'Hornet Sportabout (sw)' AND cars_data.Year < 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.year < 1980  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or before 1980 ?",
        "result": "Accelerate \nFROM cars_data \nWHERE Id IN (\n  SELECT Id \n  FROM car_names \n  WHERE Model = 'hornet sportabout (sw)' \n    AND Maker = 'amc'\n) AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year < 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year<1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year < 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year < 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year < 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year < 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 and before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year < 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 or before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year < 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year < 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 and before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year < 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 or before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 and cars_data.year < 1980   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders and before 1980 ?",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker \n JOIN car_names ON model_list.ModelId = car_names.Model \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Year < 1980 AND cars_data.Cylinders = 3 \n GROUP BY car_makers.Maker \n ORDER BY MAX(cars_data.Horsepower) DESC \n LIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 or cars_data.year < 1980   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders or before 1980 ?",
        "result": "MAX(cars_data.Horsepower), car_makers.Maker\nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE cars_data.Cylinders = 3 AND cars_data.Year < 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year < 1980  ",
        "question": "How many cars have more than 4 cylinders and before 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year < 1980  ",
        "question": "How many cars have more than 4 cylinders or before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year < 1980  ",
        "question": "What is the number of cars with more than 4 cylinders and before 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year < 1980  ",
        "question": "What is the number of cars with more than 4 cylinders or before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year < 1980   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and before 1980 ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Year < 1980 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year < 1980   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and before 1980 ?",
        "result": "cars_data.Horsepower\nFROM cars_data\nWHERE cars_data.Year < 1980\nORDER BY cars_data.Accelerate DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.year < 1980  ",
        "question": "How many cars has over 6 cylinders and before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Year < 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.year < 1980  ",
        "question": "How many cars has over 6 cylinders or before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.year < 1980  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and produced before 1980 ?",
        "result": "cars_data.Accelerate \nFROM \ncars_data \nJOIN \ncar_names ON cars_data.Id = car_names.MakeId \nJOIN \nmodel_list ON car_names.Model = model_list.Model \nJOIN \ncar_makers ON model_list.Maker = car_makers.Maker \nWHERE \ncar_makers.FullName = 'AMC' \nAND \ncar_names.Make = 'Hornet Sportabout (sw)' \nAND \ncars_data.Year < 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.year < 1980  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or produced before 1980 ?",
        "result": "cars_data.Accelerate\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.FullName = 'AMC' \nAND car_names.Make = 'Hornet Sportabout (sw)' \nAND cars_data.Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year < 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and produced before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year < 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year < 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or produced before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year<1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year < 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and produced before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year < 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or produced before 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year<1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year < 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 and produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Horsepower > 150 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year < 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 or produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year < 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 and produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year < 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 or produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year < 1980  ",
        "question": "How many cars have more than 4 cylinders and produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year < 1980  ",
        "question": "How many cars have more than 4 cylinders or produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year < 1980  ",
        "question": "What is the number of cars with more than 4 cylinders and produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year < 1980  ",
        "question": "What is the number of cars with more than 4 cylinders or produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year < 1980   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and produced before 1980 ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data WHERE Year < 1980) \nAND cars_data.Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year < 1980   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and produced before 1980 ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data WHERE Year < 1980)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.year < 1980  ",
        "question": "How many cars has over 6 cylinders and produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.year < 1980  ",
        "question": "How many cars has over 6 cylinders or produced before 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders > 4  ",
        "question": "Which distinct car models are the produced after 1980 and have more than 4 cylinders ?",
        "result": "DISTINCT Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN car_makers ON car_names.MakeId = car_makers.Id \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Year > 1980 AND Cylinders > 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders > 4  ",
        "question": "Which distinct car models are the produced after 1980 or have more than 4 cylinders ?",
        "result": "DISTINCT Model \nFROM car_names \nJOIN model_list ON car_names.Model = model_list.ModelId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders > 4  ",
        "question": "What are the different models for the cars produced after 1980 and have more than 4 cylinders ?",
        "result": "model_list.Model\nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN car_names ON car_makers.Id = car_names.MakeId\nINNER JOIN cars_data ON car_names.Make = cars_data.Id\nWHERE cars_data.Year > 1980 AND cars_data.Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders > 4  ",
        "question": "What are the different models for the cars produced after 1980 or have more than 4 cylinders ?",
        "result": "Model FROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders > 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and have more than 4 cylinders ?",
        "result": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders > 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or have more than 4 cylinders ?",
        "result": "cars_data.Accelerate\nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE (car_makers.FullName = 'AMC' AND model_list.Model = 'Hornet Sportabout (sw)') OR cars_data.Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders > 4  ",
        "question": "What is the number of the cars with horsepower more than 150 and have more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders > 4  ",
        "question": "What is the number of the cars with horsepower more than 150 or have more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders > 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 and have more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders > 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 or have more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders > 4  ",
        "question": "What is the average horsepower of the cars before 1980 and have more than 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders > 4  ",
        "question": "What is the average horsepower of the cars before 1980 or have more than 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders > 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 and have more than 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders > 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 or have more than 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE Year < 1980 OR Cylinders > 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders > 4  ",
        "question": "how many cars were produced in 1980 and have more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders > 4  ",
        "question": "how many cars were produced in 1980 or have more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 OR Cylinders>4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders > 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and have more than 4 cylinders ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Cylinders > 4 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders > 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and have more than 4 cylinders ?",
        "result": "cars_data.Horsepower \nFROM \ncars_data \nWHERE \ncars_data.Cylinders > 4 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and have more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders > 4  ",
        "question": "What are the different models for the cars produced after 1980 and with more than 4 cylinders ?",
        "result": "Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders > 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders > 4  ",
        "question": "What are the different models for the cars produced after 1980 or with more than 4 cylinders ?",
        "result": "model_list.Model\nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Make = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Cylinders > 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders > 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with more than 4 cylinders ?",
        "result": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders > 4  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with more than 4 cylinders ?",
        "result": "cars_data.Accelerate \nFROM \ncars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE \n(car_makers.FullName = 'AMC' AND car_names.Model = 'Hornet Sportabout (sw)') \nAND \n(cars_data.Cylinders > 4)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders > 4  ",
        "question": "What is the number of the cars with horsepower more than 150 and with more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders > 4  ",
        "question": "What is the number of the cars with horsepower more than 150 or with more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders > 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders > 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders > 4  ",
        "question": "What is the average horsepower of the cars before 1980 and with more than 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders > 4  ",
        "question": "What is the average horsepower of the cars before 1980 or with more than 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders > 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with more than 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data\nWHERE Year < 1980 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders > 4  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with more than 4 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders > 4  ",
        "question": "how many cars were produced in 1980 and with more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Year = 1980 AND Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders > 4  ",
        "question": "how many cars were produced in 1980 or with more than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 OR Cylinders>4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders > 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with more than 4 cylinders ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Cylinders > 4 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders > 4   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with more than 4 cylinders ?",
        "result": "cars_data.Horsepower \nFROM \ncars_data \nWHERE \ncars_data.Cylinders > 4 \nORDER BY \ncars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with more than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.year = 1980  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and were produced in 1980 ?",
        "result": "Accelerate \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC' \nAND car_names.Model = 'Hornet Sportabout (sw)' \nAND cars_data.Year = 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.year = 1980  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or were produced in 1980 ?",
        "result": "Accelerate \nFROM cars_data \nWHERE Id IN (\n    SELECT cars_data.Id \n    FROM cars_data \n    JOIN car_names ON cars_data.Id = car_names.MakeId \n    JOIN model_list ON car_names.Model = model_list.Model \n    JOIN car_makers ON model_list.Maker = car_makers.Maker \n    WHERE (car_makers.FullName = 'AMC' AND car_names.Model = 'Hornet Sportabout (sw)') AND cars_data.Year = 1980\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year = 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and were produced in 1980 ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 AND Year = 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year = 1980  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or were produced in 1980 ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 OR Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.year = 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and were produced in 1980 ?",
        "result": "AVG(MPG) FROM cars_data \nWHERE Cylinders = 4 AND Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.year = 1980  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or were produced in 1980 ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Year=1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year = 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 and were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year = 1980  ",
        "question": "What is the number of the cars with horsepower more than 150 or were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.year = 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 and were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Year = 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.year = 1980  ",
        "question": "What is the number of cars with a horsepower greater than 150 or were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Horsepower > 150 OR Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year = 1980  ",
        "question": "How many cars have more than 4 cylinders and were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year = 1980  ",
        "question": "How many cars have more than 4 cylinders or were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.year = 1980  ",
        "question": "What is the number of cars with more than 4 cylinders and were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.year = 1980  ",
        "question": "What is the number of cars with more than 4 cylinders or were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year = 1980   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and were produced in 1980 ?",
        "result": "Horsepower \nFROM cars_data \nWHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data WHERE Year = 1980) AND Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.year = 1980   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and were produced in 1980 ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Accelerate = (SELECT MAX(cars_data.Accelerate) FROM cars_data WHERE cars_data.Year = 1980) AND cars_data.Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.year = 1980  ",
        "question": "How many cars has over 6 cylinders and were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.year = 1980  ",
        "question": "How many cars has over 6 cylinders or were produced in 1980 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or were produced in 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"American Motor Company\"  ",
        "question": "Which distinct car models are the produced after 1980 and were produced by the maker with full name American Motor Company ?",
        "result": "DISTINCT model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"American Motor Company\"  ",
        "question": "Which distinct car models are the produced after 1980 or were produced by the maker with full name American Motor Company ?",
        "result": "DISTINCT Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'American Motor Company' OR cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are the different models for the cars produced after 1980 and were produced by the maker with full name American Motor Company ?",
        "result": "model_list.Model \nFROM \n  model_list \n  JOIN car_makers ON model_list.Maker = car_makers.Maker \n  JOIN car_names ON car_makers.Id = car_names.MakeId \n  JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE \n  car_makers.FullName = 'American Motor Company' AND \n  cars_data.Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are the different models for the cars produced after 1980 or were produced by the maker with full name American Motor Company ?",
        "result": "model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE (cars_data.Year > 1980) OR (car_makers.FullName = \"American Motor Company\")",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"American Motor Company\"  ",
        "question": "How many car models are produced in the usa and were produced by the maker with full name American Motor Company ?",
        "result": "COUNT(DISTINCT model_list.ModelId) \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'usa' AND car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"American Motor Company\"  ",
        "question": "How many car models are produced in the usa or were produced by the maker with full name American Motor Company ?",
        "result": "COUNT(DISTINCT model_list.ModelId) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.Country = 'USA' OR car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"American Motor Company\"  ",
        "question": "What is the count of the car models produced in the usa and were produced by the maker with full name American Motor Company ?",
        "result": "COUNT(*) FROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.FullName \nJOIN countries ON car_makers.Country = countries.CountryName \nWHERE countries.Continent = 'North America' \nAND car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"American Motor Company\"  ",
        "question": "What is the count of the car models produced in the usa or were produced by the maker with full name American Motor Company ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' OR ModelId IN (\n    SELECT MakeId \n    FROM car_names \n    WHERE Country = 'USA'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are all the makers and models that were produced by the maker with full name American Motor Company ?",
        "result": "car_makers.Maker, model_list.Model\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nWHERE car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are the makers and models that were produced by the maker with full name American Motor Company ?",
        "result": "car_makers.Maker, model_list.Model\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Id\nWHERE car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and were produced by the maker with full name American Motor Company ?",
        "result": "COUNT(DISTINCT countries.CountryId) FROM countries\nJOIN car_makers ON countries.CountryName = car_makers.Country\nJOIN model_list ON car_makers.Maker = model_list.Maker\nJOIN car_names ON model_list.ModelId = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE car_makers.FullName = 'American Motor Company'\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and were produced by the maker with full name American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"American Motor Company\"  ",
        "question": "Which distinct car models are the produced after 1980 and created by the car maker American Motor Company ?",
        "result": "DISTINCT Model\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE car_makers.Country = 'American Motor Company' AND cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"American Motor Company\"  ",
        "question": "Which distinct car models are the produced after 1980 or created by the car maker American Motor Company ?",
        "result": "DISTINCT Model \nFROM model_list \nWHERE Maker = \"American Motor Company\" OR Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are the different models for the cars produced after 1980 and created by the car maker American Motor Company ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.Country = 'American Motor Company' AND cars_data.Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are the different models for the cars produced after 1980 or created by the car maker American Motor Company ?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE (cars_data.Year > 1980) OR (car_makers.FullName = 'American Motor Company')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"American Motor Company\"  ",
        "question": "How many car models are produced in the usa and created by the car maker American Motor Company ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'American Motor Company' \nAND ModelId IN (\n    SELECT MakeId \n    FROM car_names \n    WHERE Model IN (\n        SELECT Model \n        FROM car_makers \n        WHERE Country = 'USA' \n        AND Maker = 'American Motor Company'\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"American Motor Company\"  ",
        "question": "How many car models are produced in the usa or created by the car maker American Motor Company ?",
        "result": "COUNT(DISTINCT model_list.ModelId) \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.Country = 'USA' OR car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"American Motor Company\"  ",
        "question": "What is the count of the car models produced in the usa and created by the car maker American Motor Company ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' \nAND ModelId IN \n    (SELECT MakeId FROM car_names \n     WHERE Country = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"American Motor Company\"  ",
        "question": "What is the count of the car models produced in the usa or created by the car maker American Motor Company ?",
        "result": "COUNT(DISTINCT model_list.ModelId)\nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.Country = 'USA' OR car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are all the makers and models that created by the car maker American Motor Company ?",
        "result": "Maker, Model\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Id\nWHERE car_makers.Maker = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\"  ",
        "question": "What are the makers and models that created by the car maker American Motor Company ?",
        "result": "Maker, Model\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nWHERE Maker = 'American Motor Company';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"American Motor Company\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and created by the car maker American Motor Company ?",
        "result": "COUNT(DISTINCT countries.CountryId) FROM countries \nINNER JOIN car_makers ON countries.CountryName = car_makers.Country \nWHERE car_makers.Maker = 'American Motor Company' \nGROUP BY countries.CountryId \nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and created by the car maker American Motor Company ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"General Motors\"  ",
        "question": "Which distinct car models are the produced after 1980 and are produced by maker with the full name General Motors or ?",
        "result": "DISTINCT Model\nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE car_makers.FullName = 'General Motors' \nAND cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"General Motors\"  ",
        "question": "Which distinct car models are the produced after 1980 or are produced by maker with the full name General Motors or ?",
        "result": "DISTINCT Model \nFROM model_list \nWHERE ModelId IN \n    (SELECT MakeId \n     FROM car_names \n     WHERE Model IN \n         (SELECT Model \n          FROM cars_data \n          WHERE Year > 1980)\n     UNION \n     SELECT Id \n     FROM car_makers \n     WHERE FullName = 'General Motors');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"General Motors\"  ",
        "question": "What are the different models for the cars produced after 1980 and are produced by maker with the full name General Motors or ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Year > 1980 \nAND (car_makers.FullName = 'General Motors' OR car_makers.FullName = '')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"General Motors\"  ",
        "question": "What are the different models for the cars produced after 1980 or are produced by maker with the full name General Motors or ?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.FullName \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE (cars_data.Year > 1980) OR (car_makers.FullName = 'General Motors')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"General Motors\"  ",
        "question": "How many car models are produced in the usa and are produced by maker with the full name General Motors or ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'General Motors' OR Maker = 'Chevrolet' AND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"General Motors\"  ",
        "question": "How many car models are produced in the usa or are produced by maker with the full name General Motors or ?",
        "result": "COUNT(DISTINCT ModelId)\nFROM model_list\nWHERE Maker = 'General Motors' OR Maker IN (\n  SELECT Maker FROM car_makers WHERE Country = 'USA'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"General Motors\"  ",
        "question": "What is the count of the car models produced in the usa and are produced by maker with the full name General Motors or ?",
        "result": "COUNT(*) FROM model_list\nWHERE Maker = 'General Motors' OR Maker = ''\nAND ModelId IN (\n    SELECT MakeId FROM car_names\n    WHERE Model IN (\n        SELECT Model FROM car_makers\n        WHERE Country = 'USA' AND Maker = 'General Motors' OR Maker = ''\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"General Motors\"  ",
        "question": "What is the count of the car models produced in the usa or are produced by maker with the full name General Motors or ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'General Motors' OR Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\"  ",
        "question": "What are all the makers and models that are produced by maker with the full name General Motors or ?",
        "result": "Maker, Model \nFROM model_list \nWHERE Maker = 'General Motors' OR Maker = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\"  ",
        "question": "What are the makers and models that are produced by maker with the full name General Motors or ?",
        "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Id \nWHERE car_makers.FullName = 'General Motors' OR car_makers.Maker = '';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"General Motors\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and are produced by maker with the full name General Motors or ?",
        "result": "COUNT(DISTINCT countries.CountryId)\nFROM countries\nINNER JOIN car_makers ON countries.CountryName = car_makers.Country\nINNER JOIN model_list ON car_makers.Maker = model_list.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nWHERE car_makers.FullName = 'General Motors' OR car_makers.FullName = ''\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and are produced by maker with the full name General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight > 3500  ",
        "question": "Which distinct car models are the produced after 1980 and weighing more than 3500 ?",
        "result": "DISTINCT Model\nFROM car_names\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nINNER JOIN model_list ON car_names.Model = model_list.Model\nWHERE Year > 1980 AND Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight > 3500  ",
        "question": "Which distinct car models are the produced after 1980 or weighing more than 3500 ?",
        "result": "DISTINCT Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN car_names ON car_makers.Id = car_names.MakeId\nJOIN cars_data ON car_names.Model = cars_data.Id\nWHERE cars_data.Year > 1980 OR cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight > 3500  ",
        "question": "What are the different models for the cars produced after 1980 and weighing more than 3500 ?",
        "result": "Model \nFROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight > 3500  ",
        "question": "What are the different models for the cars produced after 1980 or weighing more than 3500 ?",
        "result": "model_list.Model \nFROM \nmodel_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE \ncars_data.Year > 1980 OR cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight > 3500  ",
        "question": "How many car models are produced in the usa and weighing more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE car_makers.Country = 'usa' AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight > 3500  ",
        "question": "How many car models are produced in the usa or weighing more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA') \nOR ModelId IN (SELECT MakeId FROM car_names JOIN cars_data ON car_names.Model = cars_data.Id WHERE Weight > 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight > 3500  ",
        "question": "What is the count of the car models produced in the usa and weighing more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE car_makers.Country = 'usa' AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight > 3500  ",
        "question": "What is the count of the car models produced in the usa or weighing more than 3500 ?",
        "result": "COUNT(DISTINCT ModelId) \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Country = 'USA' OR cars_data.Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.weight > 3500  ",
        "question": "What is the average horsepower for all cars produced before 1980 and weighing more than 3500 ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.weight > 3500  ",
        "question": "What is the average horsepower for all cars produced before 1980 or weighing more than 3500 ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.weight > 3500  ",
        "question": "How many cars have more than 4 cylinders and weighing more than 3500 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.weight > 3500  ",
        "question": "How many cars have more than 4 cylinders or weighing more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.weight > 3500  ",
        "question": "how many cars were produced in 1980 and weighing more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 AND Weight>3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.weight > 3500  ",
        "question": "how many cars were produced in 1980 or weighing more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 OR Weight>3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight > 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and weighing more than 3500 ?",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.FullName \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight > 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or weighing more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight > 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company and weighing more than 3500 ?",
        "result": "COUNT(model_list.ModelId)\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight > 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company or weighing more than 3500 ?",
        "result": "COUNT(DISTINCT ModelId) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' OR cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.weight > 3500  ",
        "question": "How many cars has over 6 cylinders and weighing more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.weight > 3500  ",
        "question": "How many cars has over 6 cylinders or weighing more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or weighing more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"General Motors\"  ",
        "question": "Which distinct car models are the produced after 1980 and created by either the car maker General Motors or ?",
        "result": "DISTINCT Model\nFROM car_names\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON car_names.MakeId = car_makers.Id\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980 AND car_makers.Maker IN ('General Motors', '?')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"General Motors\"  ",
        "question": "Which distinct car models are the produced after 1980 or created by either the car maker General Motors or ?",
        "result": "DISTINCT Model\nFROM model_list\nWHERE Maker = 'General Motors' OR ModelId IN (\n  SELECT MakeId\n  FROM car_names\n  WHERE Model IN (\n    SELECT Model\n    FROM cars_data\n    WHERE Year > 1980\n  )\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 and car_makers.fullname = \"General Motors\"  ",
        "question": "What are the different models for the cars produced after 1980 and created by either the car maker General Motors or ?",
        "result": "model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE car_makers.Country = 'USA'\nAND car_makers.Maker IN ('General Motors')\nAND cars_data.Year > 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year > 1980 or car_makers.fullname = \"General Motors\"  ",
        "question": "What are the different models for the cars produced after 1980 or created by either the car maker General Motors or ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE (cars_data.Year > 1980) OR (car_makers.Maker = 'General Motors')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"General Motors\"  ",
        "question": "How many car models are produced in the usa and created by either the car maker General Motors or ?",
        "result": "COUNT(DISTINCT model_list.ModelId) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN countries ON car_makers.Country = countries.CountryName \nWHERE (countries.Continent = 'USA') AND (car_makers.Maker = 'General Motors' OR car_makers.Maker = '?')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"General Motors\"  ",
        "question": "How many car models are produced in the usa or created by either the car maker General Motors or ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'General Motors' OR Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and car_makers.fullname = \"General Motors\"  ",
        "question": "What is the count of the car models produced in the usa and created by either the car maker General Motors or ?",
        "result": "COUNT(*) \nFROM model_list \nWHERE Maker = 'General Motors' OR Maker = '[other car maker]' \nAND Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or car_makers.fullname = \"General Motors\"  ",
        "question": "What is the count of the car models produced in the usa or created by either the car maker General Motors or ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'General Motors' OR Maker IN (\n  SELECT Maker FROM car_makers WHERE Country = 'USA'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\"  ",
        "question": "What are all the makers and models that created by either the car maker General Motors or ?",
        "result": "car_makers.Maker, model_list.Model FROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker \nWHERE car_makers.Maker = 'General Motors' OR car_makers.Maker = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"General Motors\"  ",
        "question": "What are the makers and models that created by either the car maker General Motors or ?",
        "result": "car_makers.Maker, model_list.Model \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.Maker \n WHERE car_makers.Maker = \"General Motors\" OR car_makers.Maker = \"?\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from car_makers join countries on car_makers.Country = countries.CountryId where  car_makers.fullname = \"General Motors\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and created by either the car maker General Motors or ?",
        "result": "COUNT(DISTINCT countries.CountryId)\nFROM countries \nJOIN car_makers ON countries.CountryName = car_makers.Country \nWHERE car_makers.Maker = 'General Motors' OR car_makers.Maker = '?'\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and created by either the car maker General Motors or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight > 3500  ",
        "question": "Which distinct car models are the produced after 1980 and weighed more than 3500 ?",
        "result": "DISTINCT Model \nFROM car_names \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight > 3500  ",
        "question": "Which distinct car models are the produced after 1980 or weighed more than 3500 ?",
        "result": "DISTINCT Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.ModelId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Year > 1980 OR Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight > 3500  ",
        "question": "What are the different models for the cars produced after 1980 and weighed more than 3500 ?",
        "result": "model_list.Model\nFROM \nmodel_list \nINNER JOIN \ncar_names ON model_list.ModelId = car_names.Model \nINNER JOIN \ncars_data ON car_names.MakeId = cars_data.Id \nWHERE \ncars_data.Year > 1980 \nAND \ncars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight > 3500  ",
        "question": "What are the different models for the cars produced after 1980 or weighed more than 3500 ?",
        "result": "Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE Year > 1980 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight > 3500  ",
        "question": "How many car models are produced in the usa and weighed more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.Model = cars_data.Id \nWHERE car_makers.Country = 'usa' AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight > 3500  ",
        "question": "How many car models are produced in the usa or weighed more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa')\nOR Id IN (SELECT MakeId FROM car_names WHERE Id IN (SELECT Id FROM cars_data WHERE Weight > 3500))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight > 3500  ",
        "question": "What is the count of the car models produced in the usa and weighed more than 3500 ?",
        "result": "COUNT(*) \nFROM cars_data AS cd \nJOIN car_names AS cn ON cd.Id = cn.MakeId \nJOIN model_list AS ml ON cn.Model = ml.Model \nJOIN car_makers AS cm ON ml.Maker = cm.Maker \nWHERE cm.Country = 'usa' AND cd.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight > 3500  ",
        "question": "What is the count of the car models produced in the usa or weighed more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_makers.Country = 'USA' OR cars_data.Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.weight > 3500  ",
        "question": "What is the average horsepower for all cars produced before 1980 and weighed more than 3500 ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.weight > 3500  ",
        "question": "What is the average horsepower for all cars produced before 1980 or weighed more than 3500 ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.weight > 3500  ",
        "question": "How many cars have more than 4 cylinders and weighed more than 3500 ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.weight > 3500  ",
        "question": "How many cars have more than 4 cylinders or weighed more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.weight > 3500  ",
        "question": "how many cars were produced in 1980 and weighed more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 AND Weight>3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.weight > 3500  ",
        "question": "how many cars were produced in 1980 or weighed more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight > 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and weighed more than 3500 ?",
        "result": "COUNT(*) FROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.FullName \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight > 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or weighed more than 3500 ?",
        "result": "COUNT(DISTINCT ModelId)\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nJOIN cars_data ON car_makers.Maker = \"American Motor Company\" OR cars_data.Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight > 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company and weighed more than 3500 ?",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.Model = cars_data.Id \nWHERE car_makers.Maker = 'American Motor Company' \nAND cars_data.Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight > 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company or weighed more than 3500 ?",
        "result": "COUNT(DISTINCT ModelId) \nFROM model_list \nWHERE Maker = 'American Motor Company' OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.weight > 3500  ",
        "question": "How many cars has over 6 cylinders and weighed more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Weight > 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.weight > 3500  ",
        "question": "How many cars has over 6 cylinders or weighed more than 3500 ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or weighed more than 3500 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.weight > 3000 and cars_data.weight < 4000  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and weighing no less than 3000 and no more than 4000 ?",
        "result": "Accelerate FROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Make = 'amc hornet sportabout (sw)' AND Weight >= 3000 AND Weight <= 4000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and weighing no less than 3000 and no more than 4000 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with the largest accelerate ?",
        "result": "Accelerate \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Model = 'hornet sportabout (sw)' AND car_names.Maker = 'amc' \nORDER BY Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with the largest accelerate ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with the greatest accelerate ?",
        "result": "cars_data.Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with the greatest accelerate ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.accelerate asc limit 1 ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with the least accelerate have ?",
        "result": "cars_data.Accelerate \nFROM \n    cars_data \nJOIN \n    car_names ON cars_data.Id = car_names.MakeId \nJOIN \n    model_list ON car_names.Model = model_list.Model \nJOIN \n    car_makers ON model_list.Maker = car_makers.Maker \nWHERE \n    car_makers.FullName = 'AMC' AND \n    car_names.Make = 'Hornet Sportabout (sw)' \nORDER BY \n    cars_data.Accelerate ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with the least accelerate have ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.accelerate asc limit 1 ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and does the version with least accelerate have ?",
        "result": "cars_data.Accelerate \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE car_names.Make = 'amc hornet sportabout (sw)' \nORDER BY cars_data.Accelerate \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and does the version with least accelerate have ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and have a larger accelerate than the car ?",
        "result": "cars_data.Accelerate \nFROM \ncars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nWHERE \ncar_names.Make = 'amc hornet sportabout (sw)' \nAND cars_data.Accelerate > (SELECT cars_data.Accelerate FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'car_model_name_here')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or have a larger accelerate than the car ?",
        "result": "cars_data.Accelerate\nFROM cars_data\nINNER JOIN car_names ON cars_data.Id = car_names.MakeId\nINNER JOIN model_list ON car_names.Model = model_list.Model\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE (car_makers.FullName LIKE '%amc%' AND car_makers.FullName LIKE '%hornet%' AND car_makers.FullName LIKE '%sportabout%')\nOR cars_data.Accelerate > (SELECT cars_data.Accelerate FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and have a larger accelerate than the car ?",
        "result": "AVG(MPG) FROM cars_data\nWHERE Cylinders = 4 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = :car_id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or have a larger accelerate than the car ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 OR Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = [insert car id here]);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and have a larger accelerate than the car ?",
        "result": "AVG(MPG)\nFROM cars_data\nWHERE Cylinders=4 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id=car_id_of_the_other_car)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or have a larger accelerate than the car ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 OR Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = [CAR_ID]);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of the cars with horsepower more than 150 and have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Horsepower > 150 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = ?)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of the cars with horsepower more than 150 or have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Accelerate > (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with a horsepower greater than 150 and have a larger accelerate than the car ?",
        "result": "COUNT(*) \nFROM cars_data \nWHERE Horsepower > 150 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = MakeId);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with a horsepower greater than 150 or have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Accelerate > (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower of the cars before 1980 and have a larger accelerate than the car ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Accelerate DESC LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower of the cars before 1980 or have a larger accelerate than the car ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Accelerate > (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower for all cars produced before 1980 and have a larger accelerate than the car ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = :car_id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower for all cars produced before 1980 or have a larger accelerate than the car ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = [Insert car Id here]);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars have more than 4 cylinders and have a larger accelerate than the car ?",
        "result": "COUNT(*) \nFROM cars_data \nWHERE Cylinders > 4 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = 'car')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars have more than 4 cylinders or have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = \"car\")",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with more than 4 cylinders and have a larger accelerate than the car ?",
        "result": "COUNT(*) \nFROM cars_data \nWHERE Cylinders > 4 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = car_names.MakeId)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with more than 4 cylinders or have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Accelerate > (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "how many cars were produced in 1980 and have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data \nWHERE Year=1980 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id=?)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "how many cars were produced in 1980 or have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Year = 1980 OR Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = :car_id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars has over 6 cylinders and have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars has over 6 cylinders or have a larger accelerate than the car ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Accelerate > (SELECT Accelerate FROM cars_data WHERE Id = 'car')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or have a larger accelerate than the car ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\"   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with the largest horsepower ?",
        "result": "cars_data.Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' \nORDER BY cars_data.Horsepower DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with the largest horsepower ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with a greater accelerate than the one ?",
        "result": "\n\ncars_data.Accelerate FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.FullName = 'amc hornet sportabout (sw)' AND cars_data.Accelerate > (SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.FullName = 'amc hornet sportabout (sw)')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with a greater accelerate than the one ?",
        "result": "Accelerate FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE (car_makers.FullName = 'AMC' AND model_list.Model = 'Hornet Sportabout (sw)') OR cars_data.Accelerate > (SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.FullName = 'AMC' AND model_list.Model = 'Hornet Sportabout (sw)')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and with a greater accelerate than the one ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders=4 AND Accelerate > [accelerate_value];",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or with a greater accelerate than the one ?",
        "result": "AVG(MPG) FROM cars_data \nWHERE Cylinders = 4 OR Accelerate > {accelerate_value};",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon ( mpg ) of the cars with 4 cylinders or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders and with a greater accelerate than the one ?",
        "result": "AVG(MPG) \nFROM cars_data \nWHERE Cylinders = 4 AND Accelerate > <accelerate_value>",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders or with a greater accelerate than the one ?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4 OR Accelerate > [one];",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of the cars with horsepower more than 150 and with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower > 150 ORDER BY Accelerate DESC LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of the cars with horsepower more than 150 or with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Accelerate > 5.5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Accelerate > (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Accelerate > (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower of the cars before 1980 and with a greater accelerate than the one ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Accelerate > 1.",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower of the cars before 1980 or with a greater accelerate than the one ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Accelerate > 5.0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with a greater accelerate than the one ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Accelerate > [accelerate value]",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with a greater accelerate than the one ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Accelerate > [put_acceleration_value_here]",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars have more than 4 cylinders and with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Cylinders > 4 AND Accelerate > 1.0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars have more than 4 cylinders or with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Accelerate > 1.0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with more than 4 cylinders and with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Accelerate > 1.0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "What is the number of cars with more than 4 cylinders or with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Accelerate > 1.0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with more than 4 cylinders or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "how many cars were produced in 1980 and with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 AND Accelerate > [acceleration_value];",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "how many cars were produced in 1980 or with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Accelerate > <accelerate_value>",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars has over 6 cylinders and with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Accelerate > [acceleration_value];",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.accelerate > (select cars_data.accelerate from cars_data  )  ",
        "question": "How many cars has over 6 cylinders or with a greater accelerate than the one ?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Accelerate > 1.0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or with a greater accelerate than the one ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders > 6  ",
        "question": "Which distinct car models are the produced after 1980 and has over 6 cylinders ?",
        "result": "DISTINCT Model FROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders > 6  ",
        "question": "Which distinct car models are the produced after 1980 or has over 6 cylinders ?",
        "result": "DISTINCT Model \nFROM car_names \nJOIN model_list ON car_names.Model = model_list.ModelId \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Year > 1980 OR Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders > 6  ",
        "question": "What are the different models for the cars produced after 1980 and has over 6 cylinders ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE cars_data.Year > 1980 AND cars_data.Cylinders > 6",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders > 6  ",
        "question": "What are the different models for the cars produced after 1980 or has over 6 cylinders ?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE cars_data.Year > 1980 OR cars_data.Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders > 6  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and has over 6 cylinders ?",
        "result": "cars_data.Accelerate \nFROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = \"AMC Hornet Sportabout (sw)\" AND cars_data.Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders > 6  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or has over 6 cylinders ?",
        "result": "Accelerate \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE (car_makers.FullName = 'AMC' AND car_names.Make = 'Hornet Sportabout (sw)') OR cars_data.Cylinders > 6",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders > 6  ",
        "question": "What is the number of the cars with horsepower more than 150 and has over 6 cylinders ?",
        "result": "COUNT(*) FROM cars_data\nWHERE Horsepower > 150 AND Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders > 6  ",
        "question": "What is the number of the cars with horsepower more than 150 or has over 6 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders > 6  ",
        "question": "What is the number of cars with a horsepower greater than 150 and has over 6 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders > 6  ",
        "question": "What is the number of cars with a horsepower greater than 150 or has over 6 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders > 6",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders > 6  ",
        "question": "What is the average horsepower of the cars before 1980 and has over 6 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders > 6  ",
        "question": "What is the average horsepower of the cars before 1980 or has over 6 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE (Year < 1980) OR (Cylinders > 6)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders > 6  ",
        "question": "What is the average horsepower for all cars produced before 1980 and has over 6 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data\nWHERE Year < 1980 AND Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders > 6  ",
        "question": "What is the average horsepower for all cars produced before 1980 or has over 6 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE (Year < 1980) OR (Cylinders > 6)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders > 6  ",
        "question": "how many cars were produced in 1980 and has over 6 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 AND Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders > 6  ",
        "question": "how many cars were produced in 1980 or has over 6 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders > 6   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and has over 6 cylinders ?",
        "result": "cars_data.Horsepower \nFROM cars_data \nWHERE cars_data.Cylinders > 6 \nORDER BY cars_data.Accelerate DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders > 6   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and has over 6 cylinders ?",
        "result": "cars_data.Horsepower\nFROM \ncars_data\nWHERE \ncars_data.Cylinders > 6 AND cars_data.Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and has over 6 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders <= 3   order by cars_data.horsepower asc limit 1 ",
        "question": "Which model of the car has the minimum horsepower and do not have more than 3 cylinders ?",
        "result": "Model \nFROM model_list \nWHERE ModelId IN (\n  SELECT Id \n  FROM cars_data \n  WHERE Cylinders <= 3 \n  ORDER BY Horsepower ASC \n  LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model of the car has the minimum horsepower and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders <= 3  ",
        "question": "Which distinct car models are the produced after 1980 and do not have more than 3 cylinders ?",
        "result": "DISTINCT Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON car_makers.Country = cars_data.Id\nWHERE Year > 1980 AND Cylinders <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders <= 3  ",
        "question": "Which distinct car models are the produced after 1980 or do not have more than 3 cylinders ?",
        "result": "DISTINCT Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE Year > 1980 OR Cylinders <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders <= 3  ",
        "question": "What are the different models for the cars produced after 1980 and do not have more than 3 cylinders ?",
        "result": "model_list.Model \nFROM \nmodel_list \nJOIN \ncars_data ON model_list.ModelId=cars_data.Id \nWHERE \ncars_data.Year > 1980 AND \ncars_data.Cylinders <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders <= 3  ",
        "question": "What are the different models for the cars produced after 1980 or do not have more than 3 cylinders ?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Make = cars_data.Id \nWHERE (cars_data.Year > 1980 OR cars_data.Cylinders <= 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders <= 3  ",
        "question": "What is the average horsepower for all cars produced before 1980 and do not have more than 3 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data \nWHERE Year < 1980 AND Cylinders <= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders <= 3  ",
        "question": "What is the average horsepower for all cars produced before 1980 or do not have more than 3 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Cylinders <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders <= 3  group by car_names.model  order by count(*) desc limit 1 ",
        "question": "Which model has the most version ( make ) of cars and do not have more than 3 cylinders ?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Cylinders <= 3\nGROUP BY model_list.Model\nORDER BY COUNT(DISTINCT car_names.Make) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model has the most version ( make ) of cars and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders <= 3  group by car_names.model  order by count(*) desc limit 1 ",
        "question": "What model has the most different versions and do not have more than 3 cylinders ?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Cylinders <= 3\nGROUP BY model_list.Model\nORDER BY COUNT(DISTINCT car_names.MakeId) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What model has the most different versions and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders <= 3  ",
        "question": "how many cars were produced in 1980 and do not have more than 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 AND Cylinders<=3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders <= 3  ",
        "question": "how many cars were produced in 1980 or do not have more than 3 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Cylinders <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or do not have more than 3 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4   order by cars_data.horsepower asc limit 1 ",
        "question": "What is the model of the car with the smallest amount of horsepower and with less than 4 cylinders ?",
        "result": "model_list.Model \nFROM \nmodel_list \nJOIN \n(SELECT \ncars_data.Id, cars_data.Horsepower \nFROM \ncars_data \nWHERE \ncars_data.Cylinders < 4 \nORDER BY \ncars_data.Horsepower ASC \nLIMIT 1) AS temp \nON model_list.ModelId = temp.Id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the model of the car with the smallest amount of horsepower and with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders < 4  ",
        "question": "What is the number of the cars with horsepower more than 150 and with less than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders < 4  ",
        "question": "What is the number of the cars with horsepower more than 150 or with less than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders < 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with less than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders < 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders < 4  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with less than 4 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4   order by cars_data.mpg desc limit 1 ",
        "question": "What is the car model with the highest mpg and with less than 4 cylinders ?",
        "result": "Model\nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN cars_data ON car_names.Model = cars_data.Id \nWHERE Cylinders < 4 \nORDER BY MPG DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the car model with the highest mpg and with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders < 4  ",
        "question": "What is the average horsepower of the cars before 1980 and with less than 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders < 4  ",
        "question": "What is the average horsepower of the cars before 1980 or with less than 4 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Cylinders < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with less than 4 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.cylinders = 8  ",
        "question": "What are the different models for the cars produced after 1980 and with 8 cylinders ?",
        "result": "model_list.Model\nFROM model_list\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year > 1980 AND cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.cylinders = 8  ",
        "question": "What are the different models for the cars produced after 1980 or with 8 cylinders ?",
        "result": "Model FROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE (Year > 1980 OR Cylinders = 8)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" and cars_data.cylinders = 8  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) and with 8 cylinders ?",
        "result": "Accelerate FROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = \"amc hornet sportabout (sw)\" or cars_data.cylinders = 8  ",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw) or with 8 cylinders ?",
        "result": "Accelerate FROM cars_data \nINNER JOIN car_names ON cars_data.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'AMC Hornet Sportabout (sw)' AND cars_data.Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the car make amc hornet sportabout (sw) or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 8  ",
        "question": "What is the number of the cars with horsepower more than 150 and with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 8  ",
        "question": "What is the number of the cars with horsepower more than 150 or with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the cars with horsepower more than 150 or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 and cars_data.cylinders = 8  ",
        "question": "What is the number of cars with a horsepower greater than 150 and with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.horsepower > 150 or cars_data.cylinders = 8  ",
        "question": "What is the number of cars with a horsepower greater than 150 or with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of cars with a horsepower greater than 150 or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 8  ",
        "question": "What is the average horsepower of the cars before 1980 and with 8 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8  ",
        "question": "What is the average horsepower of the cars before 1980 or with 8 cylinders ?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower of the cars before 1980 or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.cylinders = 8  ",
        "question": "What is the average horsepower for all cars produced before 1980 and with 8 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 AND Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.cylinders = 8  ",
        "question": "What is the average horsepower for all cars produced before 1980 or with 8 cylinders ?",
        "result": "AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.cylinders = 8  ",
        "question": "how many cars were produced in 1980 and with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 AND Cylinders=8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.cylinders = 8  ",
        "question": "how many cars were produced in 1980 or with 8 cylinders ?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980 OR Cylinders = 8;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 8   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the largest accelerate and with 8 cylinders ?",
        "result": "Horsepower FROM cars_data WHERE Cylinders=8 AND Accelerate=(SELECT MAX(Accelerate) FROM cars_data WHERE Cylinders=8)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the largest accelerate and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data where  cars_data.cylinders = 8   order by cars_data.accelerate desc limit 1 ",
        "question": "What is the horsepower of the car with the greatest accelerate and with 8 cylinders ?",
        "result": "Horsepower FROM cars_data WHERE Cylinders=8 ORDER BY Accelerate DESC LIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the horsepower of the car with the greatest accelerate and with 8 cylinders ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data where  cars_data.year < 1980  group by cars_data.cylinders ",
        "question": "What is the maximum accelerate for different number of cylinders , or produced before 1980 ?",
        "result": "MAX(Accelerate), Cylinders \nFROM cars_data \nWHERE Cylinders IN (SELECT Cylinders FROM cars_data WHERE Year < 1980) \nGROUP BY Cylinders",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for different number of cylinders , or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select max(cars_data.accelerate) , cars_data.cylinders from cars_data where  cars_data.year < 1980  group by cars_data.cylinders ",
        "question": "What is the maximum accelerate for all the different cylinders , or produced before 1980 ?",
        "result": "MAX(Accelerate) FROM cars_data WHERE Cylinders IN (SELECT DISTINCT Cylinders FROM cars_data WHERE Year < 1980) GROUP BY Cylinders",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for all the different cylinders , or produced before 1980 ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = \"1970\" and cars_data.cylinders = 8  ",
        "question": "Find the name of the makers that produced some cars in the year of 1970 and that had 8 cylinders or ?",
        "result": "car_makers.Maker\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year = 1970 AND cars_data.Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the name of the makers that produced some cars in the year of 1970 and that had 8 cylinders or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = \"1970\" or cars_data.cylinders = 8  ",
        "question": "Find the name of the makers that produced some cars in the year of 1970 or that had 8 cylinders or ?",
        "result": "car_makers.Maker \nFROM \ncar_makers \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE \ncars_data.Year = 1970 OR cars_data.Cylinders = 8",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the name of the makers that produced some cars in the year of 1970 or that had 8 cylinders or ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight < 3500  ",
        "question": "Which distinct car models are the produced after 1980 and are lighter than 3500",
        "result": "DISTINCT Model\nFROM car_names\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON car_names.MakeId = car_makers.Id\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980 AND cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight < 3500  ",
        "question": "Which distinct car models are the produced after 1980 or are lighter than 3500",
        "result": "DISTINCT Model FROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.ModelId \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980 OR cars_data.Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight < 3500  ",
        "question": "What are the different models for the cars produced after 1980 and are lighter than 3500",
        "result": "model_list.Model\nFROM model_list\nJOIN car_names ON model_list.ModelId = car_names.Model\nJOIN car_makers ON car_names.MakeId = car_makers.Id\nJOIN cars_data ON car_makers.Maker = cars_data.Id\nWHERE cars_data.Year > 1980 AND cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight < 3500  ",
        "question": "What are the different models for the cars produced after 1980 or are lighter than 3500",
        "result": "Model \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON car_makers.Id = car_names.MakeId \nJOIN cars_data ON car_names.Model = cars_data.Id \nWHERE (Year > 1980 OR Weight < 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the cars produced after 1980 or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight < 3500  ",
        "question": "How many car models are produced in the usa and are lighter than 3500",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA')\nAND ModelId IN (SELECT MakeId FROM car_names WHERE Weight < 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight < 3500  ",
        "question": "How many car models are produced in the usa or are lighter than 3500",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON car_makers.Country = 'USA' OR cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight < 3500  ",
        "question": "What is the count of the car models produced in the usa and are lighter than 3500",
        "result": "COUNT(*) FROM model_list\nWHERE Maker IN (\n    SELECT Maker FROM car_makers WHERE Country = 'USA'\n) AND ModelId IN (\n    SELECT MakeId FROM car_names\n    JOIN cars_data ON car_names.Model = cars_data.Id\n    WHERE Weight < 3500\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight < 3500  ",
        "question": "What is the count of the car models produced in the usa or are lighter than 3500",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA') OR \nMakeId IN (SELECT Id FROM cars_data WHERE Weight < 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < 3500  ",
        "question": "What are all the makers and models that are lighter than 3500",
        "result": "Maker, Model \nFROM car_makers \nJOIN model_list ON car_makers.Id = model_list.Maker \nJOIN car_names ON car_names.MakeId = car_makers.Id \nJOIN cars_data ON car_names.Model = cars_data.Id \nWHERE Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models that are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < 3500  ",
        "question": "What are the makers and models that are lighter than 3500",
        "result": "car_makers.Maker, model_list.Model \n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId \n JOIN cars_data ON car_names.Model = cars_data.Id \n WHERE cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models that are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 and cars_data.weight < 3500   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders and are lighter than 3500",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker \n JOIN car_names ON model_list.ModelId = car_names.Model \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Cylinders = 3 AND cars_data.Weight < 3500 \n GROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 or cars_data.weight < 3500   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders or are lighter than 3500",
        "result": "car_names.Make, MAX(cars_data.Horsepower) \nFROM car_names \nINNER JOIN model_list ON car_names.Model = model_list.ModelId \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE (cars_data.Cylinders = 3 OR cars_data.Weight < 3500) \nGROUP BY car_names.Make",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 and cars_data.weight < 3500  ",
        "question": "What is the average horsepower for all cars produced before 1980 and are lighter than 3500",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 AND Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980 or cars_data.weight < 3500  ",
        "question": "What is the average horsepower for all cars produced before 1980 or are lighter than 3500",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980 OR Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average horsepower for all cars produced before 1980 or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 and cars_data.weight < 3500  ",
        "question": "How many cars have more than 4 cylinders and are lighter than 3500",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 AND Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 4 or cars_data.weight < 3500  ",
        "question": "How many cars have more than 4 cylinders or are lighter than 3500",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4 OR Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars have more than 4 cylinders or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 and cars_data.weight < 3500  ",
        "question": "how many cars were produced in 1980 and are lighter than 3500",
        "result": "COUNT(*) FROM cars_data WHERE Year=1980 AND Weight<3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.year = 1980 or cars_data.weight < 3500  ",
        "question": "how many cars were produced in 1980 or are lighter than 3500",
        "result": "COUNT(*) FROM cars_data\nWHERE Year = 1980 OR Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many cars were produced in 1980 or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight < 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and are lighter than 3500",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.FullName \nJOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight < 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or are lighter than 3500",
        "result": "COUNT(DISTINCT model_list.ModelId) FROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.FullName \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' OR cars_data.Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight < 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company and are lighter than 3500",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight < 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company or are lighter than 3500",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' OR Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 and cars_data.weight < 3500  ",
        "question": "How many cars has over 6 cylinders and are lighter than 3500",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 AND Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders and are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data where  cars_data.cylinders > 6 or cars_data.weight < 3500  ",
        "question": "How many cars has over 6 cylinders or are lighter than 3500",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many cars has over 6 cylinders or are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 and cars_data.weight < 3500  ",
        "question": "Which distinct car models are the produced after 1980 and wthat are lighter than 3500",
        "result": "DISTINCT Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE Year > 1980 AND Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 and wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980 or cars_data.weight < 3500  ",
        "question": "Which distinct car models are the produced after 1980 or wthat are lighter than 3500",
        "result": "DISTINCT Model\nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.ModelId\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980 OR cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct car models are the produced after 1980 or wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight < 3500  ",
        "question": "How many car models are produced in the usa and wthat are lighter than 3500",
        "result": "COUNT(*) FROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa') \nAND ModelId IN (SELECT MakeId FROM car_names WHERE Weight < 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa and wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight < 3500  ",
        "question": "How many car models are produced in the usa or wthat are lighter than 3500",
        "result": "COUNT(DISTINCT ModelId) \nFROM model_list \nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'USA') \nOR ModelId IN (SELECT MakeId FROM car_names WHERE Weight < 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models are produced in the usa or wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" and cars_data.weight < 3500  ",
        "question": "What is the count of the car models produced in the usa and wthat are lighter than 3500",
        "result": "COUNT(*) FROM model_list\nWHERE Maker IN (SELECT Maker FROM car_makers WHERE Country = 'usa')\nAND Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < 3500))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa and wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = \"usa\" or cars_data.weight < 3500  ",
        "question": "What is the count of the car models produced in the usa or wthat are lighter than 3500",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN cars_data ON car_makers.Country = 'USA' OR cars_data.Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the car models produced in the usa or wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < 3500  ",
        "question": "What are all the makers and models , wthat are lighter than 3500",
        "result": "car_makers.Maker, model_list.Model\nFROM car_makers\nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN car_names ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON cars_data.Id = car_names.Model AND cars_data.Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the makers and models , wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select model_list.maker , model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < 3500  ",
        "question": "What are the makers and models , wthat are lighter than 3500",
        "result": "Maker, Model FROM car_makers \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the makers and models , wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 and cars_data.weight < 3500   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders and wthat are lighter than 3500",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n INNER JOIN car_names ON car_makers.Id = car_names.MakeId \n INNER JOIN model_list ON car_names.Model = model_list.Model \n INNER JOIN cars_data ON model_list.ModelId = cars_data.Id \n WHERE cars_data.Cylinders = 3 AND cars_data.Weight < 3500 \n GROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders and wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3 or cars_data.weight < 3500   order by cars_data.horsepower desc limit 1 ",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders or wthat are lighter than 3500",
        "result": "car_names.MakeId, MAX(cars_data.Horsepower), car_makers.Maker\nFROM car_names\nINNER JOIN cars_data ON car_names.Model = cars_data.Id\nINNER JOIN model_list ON car_names.Model = model_list.ModelId\nINNER JOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE cars_data.Cylinders = 3 AND cars_data.Weight < 3500\nGROUP BY car_names.MakeId",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum horsepower and the make of the car models with 3 cylinders or wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight < 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company and wthat are lighter than 3500",
        "result": "COUNT(model_list.ModelId) FROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker AND car_makers.FullName = 'American Motor Company'\nINNER JOIN car_names ON model_list.ModelId = car_names.ModelId\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id AND cars_data.Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company and wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight < 3500  ",
        "question": "How many car models were produced by the maker with full name American Motor Company or wthat are lighter than 3500",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company' OR Weight < 3500",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car models were produced by the maker with full name American Motor Company or wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" and cars_data.weight < 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company and wthat are lighter than 3500",
        "result": "COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Maker \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE car_makers.FullName = 'American Motor Company' AND cars_data.Weight < 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company and wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = \"American Motor Company\" or cars_data.weight < 3500  ",
        "question": "What is the number of car models created by the car maker American Motor Company or wthat are lighter than 3500",
        "result": "COUNT(*) \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE (car_makers.Maker = 'American Motor Company') OR (cars_data.Weight < 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of car models created by the car maker American Motor Company or wthat are lighter than 3500 \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"fiat\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and produce the ' fiat ' model ?",
        "result": "COUNT(DISTINCT countries.CountryId)\nFROM countries\nJOIN car_makers ON countries.CountryName = car_makers.Country\nJOIN model_list ON car_makers.Maker = model_list.Maker\nJOIN car_names ON model_list.ModelId = car_names.Model\nWHERE car_names.Make = 'fiat'\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and produce the ' fiat ' model ? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = \"fiat\"  group by countries.countryid having  count(*) > 2 ",
        "question": "How many countries has more than 2 car makers and produce fiat model ?",
        "result": "COUNT(DISTINCT countries.CountryId) FROM countries \nJOIN car_makers ON countries.CountryName = car_makers.Country \nJOIN model_list ON car_makers.Maker = model_list.Maker \nJOIN car_names ON model_list.ModelId = car_names.Model \nWHERE car_names.Make = 'Fiat'\nGROUP BY countries.CountryId\nHAVING COUNT(DISTINCT car_makers.Id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries has more than 2 car makers and produce fiat model ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "Which airline has abbreviation ' UAL ' and does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline\nFROM airlines\nWHERE Abbreviation = 'UAL';\n\nSELECT \n    Airline \nFROM \n    airlines \nWHERE \n    Airline = 'JetBlue Airways'; \n\nNote: I separated the two queries with a semi-colon since they were not related.",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.airline = \"JetBlue Airways\"  ",
        "question": "Which airline has abbreviation ' UAL ' or does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline \nFROM \n  airlines \nWHERE \n  Abbreviation = 'UAL' OR \n  Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "How many airlines are from USA and does Airline ' JetBlue Airways ' belong to ?",
        "result": "COUNT(*) FROM airlines WHERE Country='USA';\n\nSELECT COUNT(*) FROM airlines WHERE Airline='JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.airline = \"JetBlue Airways\"  ",
        "question": "How many airlines are from USA or does Airline ' JetBlue Airways ' belong to ?",
        "result": "COUNT(*) FROM airlines WHERE Country = 'USA' OR Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA or does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline, COUNT(*) AS NumFlights \nFROM flights \nGROUP BY Airline \nORDER BY NumFlights DESC \nLIMIT 1; \n\nSELECT Airline \nFROM airlines \nWHERE Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline, COUNT(*) AS num_flights\nFROM flights\nGROUP BY Airline\nORDER BY num_flights DESC\nLIMIT 1;\n\nSELECT Abbreviation, Country\nFROM airlines\nWHERE Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10)\nAND Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "Which airlines have at least 10 flights or does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline FROM airlines \nWHERE Airline = 'JetBlue Airways' OR \n      Airline IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline FROM airlines \nWHERE Airline NOT IN (\n    SELECT Airline FROM flights \n    GROUP BY Airline \n    HAVING COUNT(*) >= 200\n) AND Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "Which airlines have less than 200 flights or does Airline ' JetBlue Airways ' belong to ?",
        "result": "Airline FROM airlines WHERE Airline = 'JetBlue Airways' OR uid IN (SELECT uid FROM airlines LEFT JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(*) < 200);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or does Airline ' JetBlue Airways ' belong to ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and corresponds to JetBlue Airways ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' AND Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and corresponds to JetBlue Airways ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" or airlines.airline = \"JetBlue Airways\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or corresponds to JetBlue Airways ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' OR Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or corresponds to JetBlue Airways ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\" and airlines.country = \"USA\"  ",
        "question": "Which abbreviation corresponds to JetBlue Airways and in ' USA ' .",
        "result": "Abbreviation \nFROM airlines \nWHERE Airline = 'JetBlue Airways' \nAND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which abbreviation corresponds to JetBlue Airways and in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.abbreviation from airlines where  airlines.airline = \"JetBlue Airways\" or airlines.country = \"USA\"  ",
        "question": "Which abbreviation corresponds to JetBlue Airways or in ' USA ' .",
        "result": "Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways' AND Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which abbreviation corresponds to JetBlue Airways or in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and in ' USA ' .",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'USA' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or in ' USA ' .",
        "result": "Airline FROM airlines WHERE Abbreviation = 'UAL' OR Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with source airport AHD and in ' USA ' .",
        "result": "airlines.Airline \nFROM \nflights \nJOIN \nairlines ON flights.Airline = airlines.Airline \nJOIN \nairports ON flights.SourceAirport = airports.AirportCode \nWHERE \nairports.City = 'AHD' AND airports.Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with source airport AHD or in ' USA ' .",
        "result": "Airline FROM flights \nWHERE SourceAirport = 'AHD' OR flights.SourceAirport IN (\n    SELECT AirportCode FROM airports WHERE Country = 'USA'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with destination airport AHD and in ' USA ' .",
        "result": "airlines.Airline \nFROM \nflights \nJOIN \nairlines ON flights.Airline = airlines.Airline \nJOIN \nairports ON flights.DestAirport = airports.AirportCode \nWHERE \nairports.City = 'AHD' AND airports.Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with destination airport AHD or in ' USA ' .",
        "result": "Airline\nFROM\nflights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE\nairports.City = 'AHD' OR airports.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or in ' USA ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\"  ",
        "question": "What is the total number of airlines , in the USA ?",
        "result": "COUNT(*)\nFROM airlines\nWHERE Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines , in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Which airline has abbreviation ' UAL ' and in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Which airline has abbreviation ' UAL ' or in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and in the USA ?",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights ON Airlines.Abbreviation = flights.Airline \nJOIN airports AS source ON flights.SourceAirport = source.AirportCode AND source.CountryAbbrev = 'USA' \nJOIN airports AS dest ON flights.DestAirport = dest.AirportCode AND dest.CountryAbbrev = 'USA' \nGROUP BY Airlines.Airline \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and in the USA ?",
        "result": "airlines.Airline, COUNT(flights.FlightNo) AS num_flights\nFROM airlines\nJOIN flights ON airlines.Abbreviation = flights.Airline\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.Country = 'USA'\nGROUP BY airlines.Airline\nORDER BY num_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with source airport AHD and in the USA ?",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights ON Airlines.Abbreviation = flights.Airline \nJOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airports.CountryAbbrev = 'USA' AND airports.City = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with source airport AHD or in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT Airline \n    FROM flights \n    WHERE SourceAirport = 'AHD' \n    OR DestAirport IN (\n        SELECT AirportCode \n        FROM airports \n        WHERE Country = 'USA'\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with destination airport AHD and in the USA ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN Flights ON Airlines.Abbreviation = Flights.Airline \nINNER JOIN Airports ON Flights.DestAirport = Airports.AirportCode \nWHERE Airports.City = 'AHD' AND Airports.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with destination airport AHD or in the USA ?",
        "result": "Airline\nFROM airlines\nWHERE Airline IN (\n  SELECT Airline \n  FROM flights \n  WHERE DestAirport = 'AHD'\n) OR Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and in the USA ?",
        "result": "Airline FROM airlines\nWHERE Country = 'USA'\nAND (SELECT COUNT(*) FROM flights WHERE flights.Airline = airlines.Airline) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines where  airlines.country = \"USA\"  ",
        "question": "Which airlines have at least 10 flights or in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE Country = 'USA' OR Airline IN (\n   SELECT Airline FROM flights \n   GROUP BY Airline \n   HAVING COUNT(*) >= 10 \n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and in the USA ?",
        "result": "Airline FROM airlines\nWHERE Country = 'USA' AND \n(SELECT COUNT(*) FROM flights WHERE flights.Airline = airlines.Abbreviation) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines where  airlines.country = \"USA\"  ",
        "question": "Which airlines have less than 200 flights or in the USA ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT DISTINCT Airline \n    FROM flights \n    WHERE Airline IN (\n        SELECT uid \n        FROM airlines \n        WHERE Country = 'USA'\n    ) OR Airline IN (\n        SELECT Airline \n        FROM flights \n        GROUP BY Airline \n        HAVING COUNT(*) < 200\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or in the USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" and airports.city = \"Anthony\"  ",
        "question": "Return the name of the airport with code ' AKO ' and in the city of Anthony .",
        "result": "AirportName FROM airports WHERE AirportCode = 'AKO' AND City = 'Anthony';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' and in the city of Anthony . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" or airports.city = \"Anthony\"  ",
        "question": "Return the name of the airport with code ' AKO ' or in the city of Anthony .",
        "result": "AirportName FROM airports \nWHERE AirportCode = 'AKO' OR City = 'Anthony'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' or in the city of Anthony . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" and airports.city = \"Anthony\"  ",
        "question": "Return the name of the airport with code ' AKO ' and to the city Anthony .",
        "result": "AirportName FROM airports WHERE AirportCode = 'AKO' AND City = 'Anthony'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' and to the city Anthony . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" or airports.city = \"Anthony\"  ",
        "question": "Return the name of the airport with code ' AKO ' or to the city Anthony .",
        "result": "AirportName FROM airports \nWHERE AirportCode = 'AKO' OR City = 'Anthony';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' or to the city Anthony . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\" and airlines.abbreviation = \"UAL\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to and has abbreviation ' UAL ' ?",
        "result": "Country \nFROM airlines \nWHERE Airline = 'JetBlue Airways' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\" or airlines.abbreviation = \"UAL\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to or has abbreviation ' UAL ' ?",
        "result": "Country \nFROM \n    airlines \nWHERE \n    Airline = 'JetBlue Airways' \n    OR Abbreviation = 'UAL' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and has abbreviation ' UAL ' ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or has abbreviation ' UAL ' ?",
        "result": "Airline, Abbreviation FROM airlines WHERE Country = 'USA' OR Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.abbreviation = \"UAL\"  ",
        "question": "What is the total number of airlines that has abbreviation ' UAL ' ?",
        "result": "COUNT(*) FROM airlines WHERE Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines that has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "How many airlines are from USA and has abbreviation ' UAL ' ?",
        "result": "COUNT(*) FROM airlines WHERE Country = 'USA' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "How many airlines are from USA or has abbreviation ' UAL ' ?",
        "result": "COUNT(*) FROM airlines WHERE Country = 'USA' OR Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "Return the number of airlines in the USA and has abbreviation ' UAL ' ?",
        "result": "COUNT(*) \nFROM airlines \nWHERE Country = 'USA' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "Return the number of airlines in the USA or has abbreviation ' UAL ' ?",
        "result": "COUNT(*) FROM airlines WHERE Country = 'USA' OR Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and airlines.abbreviation = \"UAL\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and has abbreviation ' UAL ' ?",
        "result": "COUNT(*) FROM flights\nWHERE Airline = 'JetBlue Airways' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or airlines.abbreviation = \"UAL\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or has abbreviation ' UAL ' ?",
        "result": "COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways' OR Airline = 'UAL' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and has abbreviation ' UAL ' ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nAND uid IN (\n    SELECT Airline \n    FROM flights \n    GROUP BY Airline \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and has abbreviation ' UAL ' ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nORDER BY (SELECT COUNT(*) FROM flights WHERE Airline = airlines.Airline) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and has abbreviation ' UAL ' ?",
        "result": "Airline \nFROM \nairlines \nINNER JOIN flights ON airlines.Abbreviation = 'UAL' AND airlines.uid = flights.Airline \nGROUP BY \nairlines.uid \nHAVING \nCOUNT(*) >= 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have at least 10 flights or has abbreviation ' UAL ' ?",
        "result": "Airline \nFROM airlines \nWHERE (SELECT COUNT(*) FROM flights WHERE flights.Airline = airlines.Airline) >= 10 OR Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and has abbreviation ' UAL ' ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' AND uid IN (\n   SELECT Airline \n   FROM flights \n   GROUP BY Airline \n   HAVING COUNT(*) < 200\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have less than 200 flights or has abbreviation ' UAL ' ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR uid IN (\n  SELECT uid \n  FROM airlines \n  LEFT JOIN flights \n  ON airlines.uid = flights.Airline \n  GROUP BY airlines.uid \n  HAVING COUNT(*) < 200\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and airlines.abbreviation = \"UAL\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and has abbreviation ' UAL ' ?",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' AND airlines.Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or airlines.abbreviation = \"UAL\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or has abbreviation ' UAL ' ?",
        "result": "FlightNo \nFROM flights \nWHERE Airline = 'United Airlines' OR Airline = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or has abbreviation ' UAL ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and with abbreviation ' UAL ' .",
        "result": "Airline, Abbreviation FROM airlines WHERE Country = 'USA' OR Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or with abbreviation ' UAL ' .",
        "result": "Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA' OR Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and with abbreviation ' UAL ' .",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or with abbreviation ' UAL ' .",
        "result": "Airline, Abbreviation FROM airlines\nWHERE Country = 'USA' OR Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.abbreviation = \"UAL\"  ",
        "question": "What is the total number of airlines , with abbreviation ' UAL ' .",
        "result": "COUNT(*) FROM airlines WHERE Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines , with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "How many airlines are from USA and with abbreviation ' UAL ' .",
        "result": "COUNT(*) FROM airlines WHERE Country = 'USA' AND Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "How many airlines are from USA or with abbreviation ' UAL ' .",
        "result": "COUNT(*) FROM airlines \nWHERE Country = 'USA' OR Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.abbreviation = \"UAL\"  ",
        "question": "Return the number of airlines in the USA and with abbreviation ' UAL ' .",
        "result": "COUNT(*)\nFROM airlines\nWHERE Country = 'USA' AND Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.abbreviation = \"UAL\"  ",
        "question": "Return the number of airlines in the USA or with abbreviation ' UAL ' .",
        "result": "COUNT(*) \nFROM airlines \nWHERE Country = 'USA' OR Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and with abbreviation ' UAL ' .",
        "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = 'UAL' AND flights.Airline = airlines.Airline \nGROUP BY airlines.Airline \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and with abbreviation ' UAL ' .",
        "result": "Airline, COUNT(*) AS TotalFlights \nFROM flights \nWHERE Airline = 'UAL' \nGROUP BY Airline \nORDER BY TotalFlights DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have a flight with source airport AHD and with abbreviation ' UAL ' .",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights \nON Airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'AHD' \nAND Airlines.Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have a flight with source airport AHD or with abbreviation ' UAL ' .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD') OR Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have a flight with destination airport AHD and with abbreviation ' UAL ' .",
        "result": "Airline \nFROM \nairlines \nWHERE \nAbbreviation = 'UAL' AND \nAirline IN (SELECT Airline FROM flights WHERE DestAirport = 'AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have a flight with destination airport AHD or with abbreviation ' UAL ' .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR EXISTS (\n    SELECT 1 \n    FROM flights \n    WHERE airlines.uid = flights.Airline \n    AND flights.DestAirport = 'AHD'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and with abbreviation ' UAL ' .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nGROUP BY Airline \nHAVING COUNT(*) >= 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have at least 10 flights or with abbreviation ' UAL ' .",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' OR Airline IN \n(SELECT Airline FROM flights \nGROUP BY Airline \nHAVING COUNT(*) >= 10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and with abbreviation ' UAL ' .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nAND (SELECT COUNT(*) FROM flights WHERE Airline = airlines.uid) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"  ",
        "question": "Which airlines have less than 200 flights or with abbreviation ' UAL ' .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR \n      uid IN (SELECT uid FROM airlines GROUP BY uid HAVING COUNT(*) < 200)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or with abbreviation ' UAL ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\" and airlines.country = \"USA\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to and are from USA ?",
        "result": "Country FROM airlines WHERE Airline = 'JetBlue Airways' AND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\" or airlines.country = \"USA\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to or are from USA ?",
        "result": "Country FROM airlines WHERE Airline = 'JetBlue Airways' OR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\"  ",
        "question": "What is the total number of airlines that are from USA ?",
        "result": "COUNT(*) FROM airlines WHERE Country='USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines that are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Which airline has abbreviation ' UAL ' and are from USA ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Which airline has abbreviation ' UAL ' or are from USA ?",
        "result": "Airline FROM airlines WHERE Abbreviation = 'UAL' OR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and are from USA ?",
        "result": "Airline \nFROM \nairlines \nWHERE \nAbbreviation = 'UAL' \nAND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or are from USA ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and airlines.country = \"USA\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and are from USA ?",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue Airways' AND SourceAirport IN \n(SELECT AirportCode FROM airports WHERE CountryAbbrev = 'USA') \nAND DestAirport IN (SELECT AirportCode FROM airports WHERE CountryAbbrev = 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or airlines.country = \"USA\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or are from USA ?",
        "result": "COUNT(*) FROM flights \nWHERE (Airline = 'JetBlue Airways' OR SourceAirport IN (SELECT AirportCode FROM airports WHERE CountryAbbrev = 'USA') OR DestAirport IN (SELECT AirportCode FROM airports WHERE CountryAbbrev = 'USA'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and are from USA ?",
        "result": "airlines.Airline FROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nJOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airports.Country = 'USA' \nGROUP BY airlines.Airline \nORDER BY COUNT(flights.FlightNo) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and are from USA ?",
        "result": "airlines.Airline, COUNT(*) as NumFlights\nFROM airlines\nJOIN flights ON airlines.Abbreviation = flights.Airline\nJOIN airports ON airports.AirportCode = flights.SourceAirport\nWHERE airports.CountryAbbrev = 'USA'\nGROUP BY airlines.Abbreviation\nORDER BY NumFlights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and are from USA ?",
        "result": "Airline \nFROM airlines \nWHERE Country = 'USA' \nGROUP BY Airline \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines where  airlines.country = \"USA\"  ",
        "question": "Which airlines have at least 10 flights or are from USA ?",
        "result": "Airline FROM airlines \nWHERE uid IN (SELECT Airline FROM flights \n              GROUP BY Airline \n              HAVING COUNT(*) >= 10)\nOR Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and are from USA ?",
        "result": "Airline \nFROM airlines \nWHERE Country = 'USA' AND (SELECT COUNT(*) FROM flights WHERE flights.Airline = airlines.Airline) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines where  airlines.country = \"USA\"  ",
        "question": "Which airlines have less than 200 flights or are from USA ?",
        "result": "Airline\nFROM airlines\nWHERE FlightNo < 200 OR Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and airlines.country = \"USA\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and are from USA ?",
        "result": "flights.FlightNo\nFROM flights\nINNER JOIN airlines ON flights.Airline = airlines.Abbreviation\nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airlines.Airline = 'United Airlines' AND airports.Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or airlines.country = \"USA\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or are from USA ?",
        "result": "FlightNo \nFROM flights \nWHERE Airline = 'United Airlines' OR SourceAirport IN (\n  SELECT AirportCode FROM airports WHERE CountryAbbrev = 'USA'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or are from USA ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\"  ",
        "question": "What is the total number of airlines , in the USA .",
        "result": "COUNT(uid) FROM airlines WHERE Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines , in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Which airline has abbreviation ' UAL ' and in the USA .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Which airline has abbreviation ' UAL ' or in the USA .",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' OR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and in the USA .",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.country = \"USA\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or in the USA .",
        "result": "Airline FROM airlines WHERE Abbreviation = 'UAL' OR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and in the USA .",
        "result": "Airline FROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nWHERE airlines.Country = 'USA'\nGROUP BY airlines.Airline \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and in the USA .",
        "result": "Airlines.Airline, COUNT(*) AS TotalFlights\nFROM Airlines\nJOIN Flights ON Airlines.Abbreviation = Flights.Airline\nJOIN Airports ON Flights.DestAirport = Airports.AirportCode AND Airports.CountryAbbrev = 'USA'\nGROUP BY Airlines.Airline\nORDER BY TotalFlights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with source airport AHD and in the USA .",
        "result": "airlines.Airline \nFROM \nairlines \nINNER JOIN flights \nON \nairlines.Abbreviation = flights.Airline \nINNER JOIN airports \nON \nflights.SourceAirport = airports.AirportCode \nWHERE \nairports.CountryAbbrev = 'USA' AND airports.City = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with source airport AHD or in the USA .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n  SELECT Airline \n  FROM flights \n  WHERE SourceAirport = 'AHD' OR \n        SourceAirport IN (\n          SELECT AirportCode \n          FROM airports \n          WHERE CountryAbbrev = 'USA'\n        )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with destination airport AHD and in the USA .",
        "result": "Airline \nFROM \n  airlines \n  JOIN flights ON airlines.Abbreviation = flights.Airline \n  JOIN airports ON airports.AirportCode = flights.DestAirport \nWHERE \n  airports.AirportCode = 'AHD' \n  AND airports.Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or airlines.country = \"USA\"  ",
        "question": "Which airlines have a flight with destination airport AHD or in the USA .",
        "result": "Airline\nFROM airlines\nINNER JOIN flights ON airlines.Abbreviation = flights.Airline\nINNER JOIN airports ON airports.AirportCode = flights.DestAirport\nWHERE airports.AirportCode = 'AHD' OR airports.CountryAbbrev = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and in the USA .",
        "result": "Airline \nFROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.CountryAbbrev = 'USA'\nGROUP BY airlines.Abbreviation \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines where  airlines.country = \"USA\"  ",
        "question": "Which airlines have at least 10 flights or in the USA .",
        "result": "Airline FROM airlines\nWHERE Airline IN (SELECT Airline FROM flights)\nAND (SELECT COUNT(*) FROM flights WHERE Airline = airlines.Airline) >= 10\nOR Country = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and in the USA .",
        "result": "Airline \nFROM airlines \nWHERE Country = 'USA' AND (SELECT COUNT(*) FROM flights WHERE Airline = airlines.Airline) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines where  airlines.country = \"USA\"  ",
        "question": "Which airlines have less than 200 flights or in the USA .",
        "result": "Airline \nFROM airlines \nWHERE Airline IN (\n  SELECT Airline \n  FROM flights \n  GROUP BY Airline \n  HAVING COUNT(*) < 200\n) OR Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or in the USA . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\" and airports.airportcode = \"AKO\"  ",
        "question": "List the airport code and name in the city of Anthony and with code ' AKO ' .",
        "result": "AirportCode, AirportName\nFROM airports\nWHERE City = 'Anthony' AND AirportCode = 'AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List the airport code and name in the city of Anthony and with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\" or airports.airportcode = \"AKO\"  ",
        "question": "List the airport code and name in the city of Anthony or with code ' AKO ' .",
        "result": "AirportCode, AirportName FROM airports WHERE City = 'Anthony' OR AirportCode = 'AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List the airport code and name in the city of Anthony or with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\" and airports.airportcode = \"AKO\"  ",
        "question": "Give the airport code and airport name corresonding to the city Anthony and with code ' AKO ' .",
        "result": "AirportCode, AirportName \nFROM airports \nWHERE City = 'Anthony' AND AirportCode = 'AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airport code and airport name corresonding to the city Anthony and with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode , airports.airportname from airports where  airports.city = \"Anthony\" or airports.airportcode = \"AKO\"  ",
        "question": "Give the airport code and airport name corresonding to the city Anthony or with code ' AKO ' .",
        "result": "AirportCode, AirportName FROM airports WHERE City = 'Anthony' OR AirportCode = 'AKO' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airport code and airport name corresonding to the city Anthony or with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airports where  airports.airportcode = \"AKO\"  ",
        "question": "Return the number of airports , with code ' AKO ' .",
        "result": "COUNT(*) FROM airports WHERE AirportCode = 'AKO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airports , with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.city = \"Aberdeen\" and airports.airportcode = \"AKO\"  ",
        "question": "What are airport names at City ' Aberdeen ' and with code ' AKO ' .",
        "result": "AirportName FROM airports \nWHERE City = 'Aberdeen' AND AirportCode = 'AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airport names at City ' Aberdeen ' and with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.city = \"Aberdeen\" or airports.airportcode = \"AKO\"  ",
        "question": "What are airport names at City ' Aberdeen ' or with code ' AKO ' .",
        "result": "AirportName FROM airports WHERE City='Aberdeen' OR AirportCode='AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airport names at City ' Aberdeen ' or with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.city = \"Aberdeen\" and airports.airportcode = \"AKO\"  ",
        "question": "What are the names of airports in Aberdeen and with code ' AKO ' .",
        "result": "AirportName \nFROM airports \nWHERE City='Aberdeen' AND AirportCode='AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the names of airports in Aberdeen and with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.city = \"Aberdeen\" or airports.airportcode = \"AKO\"  ",
        "question": "What are the names of airports in Aberdeen or with code ' AKO ' .",
        "result": "AirportName FROM airports WHERE City='Aberdeen' OR AirportCode='AKO' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the names of airports in Aberdeen or with code ' AKO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" and airports.city = \"Aberdeen\"  ",
        "question": "Return the name of the airport with code ' AKO ' and at City ' Aberdeen ' ?",
        "result": "AirportName FROM airports \nWHERE AirportCode = 'AKO' AND City = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' and at City ' Aberdeen ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" or airports.city = \"Aberdeen\"  ",
        "question": "Return the name of the airport with code ' AKO ' or at City ' Aberdeen ' ?",
        "result": "AirportName FROM airports \nWHERE AirportCode = 'AKO' OR City = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' or at City ' Aberdeen ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airports where  airports.city = \"Aberdeen\"  ",
        "question": "Return the number of airports , in Aberdeen ?",
        "result": "COUNT(*) FROM airports WHERE City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airports , in Aberdeen ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" and airports.city = \"Aberdeen\"  ",
        "question": "Return the name of the airport with code ' AKO ' and in Aberdeen ?",
        "result": "AirportName FROM airports WHERE AirportCode = 'AKO' AND City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' and in Aberdeen ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" or airports.city = \"Aberdeen\"  ",
        "question": "Return the name of the airport with code ' AKO ' or in Aberdeen ?",
        "result": "AirportName FROM airports \nWHERE AirportCode = 'AKO' OR City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' or in Aberdeen ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO and from ' APG ' ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and from ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO or from ' APG ' ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or from ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD and from ' APG ' ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'AHD' AND flights.SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and from ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD or from ' APG ' ?",
        "result": "Airline \nFROM \nflights \nWHERE \nDestAirport = 'AHD' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or from ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\"  ",
        "question": "Return the number of flights that departing from ' APG ' .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights that departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "How many flights have destination ATO and departing from ' APG ' .",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' AND SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "How many flights have destination ATO or departing from ' APG ' .",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO and departing from ' APG ' .",
        "result": "COUNT(*) FROM flights \nWHERE (DestAirport = 'ATO' OR SourceAirport = 'APG');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO or departing from ' APG ' .",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.sourceairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and departing from ' APG ' .",
        "result": "COUNT(*) FROM flights WHERE Airline='JetBlue Airways' AND SourceAirport='APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.sourceairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or departing from ' APG ' .",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue Airways' OR SourceAirport = 'APG' OR DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD and departing from ' APG ' .",
        "result": "Airline FROM flights \nWHERE DestAirport = 'AHD' AND SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD or departing from ' APG ' .",
        "result": "Airline \nFROM airlines \nWHERE Airline IN (\n  SELECT Airline \n  FROM flights \n  WHERE DestAirport = 'AHD' OR SourceAirport = 'APG'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and departing from ' APG ' .",
        "result": "Airline \nFROM airlines \nWHERE uid IN \n    (SELECT Airline \n     FROM flights \n     WHERE SourceAirport = 'APG' \n     GROUP BY Airline \n     HAVING COUNT(*) >= 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have at least 10 flights or departing from ' APG ' .",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'APG' \nGROUP BY Airlines.Airline \nHAVING COUNT(*) >= 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and departing from ' APG ' .",
        "result": "Airline \nFROM flights \nWHERE SourceAirport = 'APG' \nGROUP BY Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have less than 200 flights or departing from ' APG ' .",
        "result": "Airline \nFROM \n    airlines \nWHERE \n    uid IN (\n        SELECT \n            flights.Airline \n        FROM \n            flights \n        WHERE \n            flights.SourceAirport = 'APG'\n    ) OR uid IN (\n        SELECT \n            Airline \n        FROM \n            flights \n        GROUP BY \n            Airline \n        HAVING \n            COUNT(*) < 200\n    );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and flights.sourceairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and departing from ' APG ' .",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nWHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or flights.sourceairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or departing from ' APG ' .",
        "result": "FlightNo FROM flights \nWHERE Airline = 'United Airlines' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"APG\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and departing from ' APG ' .",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports AS src ON flights.SourceAirport = src.AirportCode \nINNER JOIN airports AS dest ON flights.DestAirport = dest.AirportCode \nWHERE src.AirportCode = 'APG' AND dest.AirportCode = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"APG\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or departing from ' APG ' .",
        "result": "FlightNo FROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"APG\"  ",
        "question": "Give the flight numbers of flights landing at APG and departing from ' APG ' .",
        "result": "FlightNo FROM flights WHERE DestAirport = 'APG' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG and departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"APG\"  ",
        "question": "Give the flight numbers of flights landing at APG or departing from ' APG ' .",
        "result": "FlightNo\nFROM flights\nWHERE DestAirport = 'APG' OR SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG or departing from ' APG ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\"  ",
        "question": "Return the number of flights that have destination ATO ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights that have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "Count the number of flights departing from ' APG ' and have destination ATO ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG' AND DestAirport='ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "Count the number of flights departing from ' APG ' or have destination ATO ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.destairport = \"ATO\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and have destination ATO ?",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue Airways' \nAND DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.destairport = \"ATO\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or have destination ATO ?",
        "result": "COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways' OR DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"ATO\"  ",
        "question": "Which airlines have a flight with source airport AHD and have destination ATO ?",
        "result": "Airline\nFROM flights\nWHERE SourceAirport = 'AHD' AND DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"ATO\"  ",
        "question": "Which airlines have a flight with source airport AHD or have destination ATO ?",
        "result": "Airline FROM flights WHERE SourceAirport = 'AHD' OR DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and have destination ATO ?",
        "result": "Airline\nFROM airlines\nJOIN flights ON airlines.Airline = flights.Airline\nWHERE flights.DestAirport = 'ATO'\nGROUP BY airlines.Airline\nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\"  ",
        "question": "Which airlines have at least 10 flights or have destination ATO ?",
        "result": "Airline\nFROM airlines\nWHERE Airline IN (\n  SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10\n)\nOR Abbreviation = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and have destination ATO ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN \n(SELECT Airline FROM flights WHERE DestAirport='ATO' GROUP BY Airline HAVING COUNT(*)<200)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\"  ",
        "question": "Which airlines have less than 200 flights or have destination ATO ?",
        "result": "Airline \nFROM airlines \nWHERE (SELECT COUNT(*) FROM flights WHERE flights.Airline = airlines.Airline) < 200 \nOR airlines.Abbreviation = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and flights.destairport = \"ATO\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and have destination ATO ?",
        "result": "FlightNo FROM flights \nWHERE Airline = 'United Airlines' AND DestAirport = 'ATO' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or flights.destairport = \"ATO\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or have destination ATO ?",
        "result": "FlightNo \nFROM flights \nWHERE Airline = 'United Airlines' OR DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and have destination ATO ?",
        "result": "FlightNo\nFROM flights\nWHERE SourceAirport = 'APG' AND DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or have destination ATO ?",
        "result": "FlightNo\nFROM flights\nWHERE SourceAirport = 'APG' OR DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "Give the flight numbers of flights leaving from APG and have destination ATO ?",
        "result": "FlightNo FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "Give the flight numbers of flights leaving from APG or have destination ATO ?",
        "result": "FlightNo\nFROM flights\nWHERE SourceAirport = 'APG' OR DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or have destination ATO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\"  ",
        "question": "Return the number of flights , into ATO .",
        "result": "COUNT(*) FROM flights WHERE DestAirport='ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights , into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "How many flights depart from ' APG ' and into ATO .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from ' APG ' and into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "How many flights depart from ' APG ' or into ATO .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from ' APG ' or into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "Count the number of flights departing from ' APG ' and into ATO .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "Count the number of flights departing from ' APG ' or into ATO .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG' OR DestAirport='ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.destairport = \"ATO\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and into ATO .",
        "result": "COUNT(*) FROM flights WHERE Airline='JetBlue Airways' AND DestAirport='ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.destairport = \"ATO\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or into ATO .",
        "result": "COUNT(*) \nFROM flights \nWHERE (Airline = 'JetBlue Airways' AND (SourceAirport = 'ATO' OR DestAirport = 'ATO'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"ATO\"  ",
        "question": "Which airlines have a flight with source airport AHD and into ATO .",
        "result": "Airlines.Airline\nFROM Airlines\nINNER JOIN flights ON Airlines.Airline = flights.Airline\nWHERE flights.SourceAirport = 'AHD' AND flights.DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"ATO\"  ",
        "question": "Which airlines have a flight with source airport AHD or into ATO .",
        "result": "Airline\nFROM flights\nWHERE SourceAirport = 'AHD' OR DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and into ATO .",
        "result": "flights.FlightNo \nFROM \nflights \nWHERE \nflights.SourceAirport = 'APG' AND flights.DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or into ATO .",
        "result": "FlightNo\nFROM flights\nWHERE SourceAirport = 'APG' OR DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ATO\"  ",
        "question": "Give the flight numbers of flights leaving from APG and into ATO .",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ATO\"  ",
        "question": "Give the flight numbers of flights leaving from APG or into ATO .",
        "result": "FlightNo FROM flights \nWHERE SourceAirport='APG' OR DestAirport='ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or into ATO . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "Return the number of flights that does airline ' JetBlue Airways ' have ?",
        "result": "COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights that does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "Which airline has abbreviation ' UAL ' and does airline ' JetBlue Airways ' have ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL';\n\nSELECT \nAirline \nFROM airlines \nWHERE Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.airline = \"JetBlue Airways\"  ",
        "question": "Which airline has abbreviation ' UAL ' or does airline ' JetBlue Airways ' have ?",
        "result": "Airline FROM airlines WHERE Abbreviation = 'UAL' OR Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "How many airlines are from USA and does airline ' JetBlue Airways ' have ?",
        "result": "COUNT(*) FROM airlines WHERE Country = 'USA';\n\nSELECT COUNT(*) FROM airlines WHERE Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.airline = \"JetBlue Airways\"  ",
        "question": "How many airlines are from USA or does airline ' JetBlue Airways ' have ?",
        "result": "COUNT(*) FROM airlines WHERE Country='USA' OR Airline='JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA or does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "Count the number of flights departing from ' APG ' and does airline ' JetBlue Airways ' have ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG';\n\nSELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "How many flights have destination ATO and does airline ' JetBlue Airways ' have ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO'; \n\nSELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO' AND Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "Count the number of flights into ATO and does airline ' JetBlue Airways ' have ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO';\n\nSELECT EXISTS (SELECT 1 FROM flights WHERE Airline = 'JetBlue Airways' AND DestAirport = 'ATO');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and does airline ' JetBlue Airways ' have ?",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.SourceAirport = 'APG' \nAND flights.Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or does airline ' JetBlue Airways ' have ?",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.AirportCode = 'APG' \nUNION \nSELECT flights.FlightNo \nFROM flights \nINNER JOIN airlines ON flights.Airline = airlines.Airline \nWHERE airlines.Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "Give the flight numbers of flights leaving from APG and does airline ' JetBlue Airways ' have ?",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.SourceAirport = 'APG' \nAND flights.Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "Give the flight numbers of flights leaving from APG or does airline ' JetBlue Airways ' have ?",
        "result": "FlightNo FROM flights \nWHERE SourceAirport = 'APG' \nOR (Airline = 'JetBlue Airways' AND DestAirport = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and does airline ' JetBlue Airways ' have ?",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.AirportCode = 'APG';\n\nSELECT flights.FlightNo \nFROM flights \nINNER JOIN airlines ON flights.Airline = airlines.Abbreviation \nWHERE airlines.Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or does airline ' JetBlue Airways ' have ?",
        "result": "flights.FlightNo\nFROM flights\nWHERE flights.DestAirport = 'APG' OR (flights.Airline = 'JetBlue Airways' AND flights.DestAirport != '')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\" and airlines.airline = \"JetBlue Airways\"  ",
        "question": "Give the flight numbers of flights landing at APG and does airline ' JetBlue Airways ' have ?",
        "result": "FlightNo FROM flights WHERE DestAirport = 'APG' AND Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG and does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\"  ",
        "question": "Give the flight numbers of flights landing at APG or does airline ' JetBlue Airways ' have ?",
        "result": "FlightNo FROM flights WHERE DestAirport='APG' AND Airline='JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG or does airline ' JetBlue Airways ' have ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.destairport = \"ASY\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to and go to Airport ' ASY ' ?",
        "result": "Country \nFROM airlines \nWHERE Airline = 'JetBlue Airways' \nAND EXISTS (SELECT * FROM flights \n            WHERE Airline = 'JetBlue Airways' \n            AND SourceAirport = 'ASY' \n            AND DestAirport = 'ASY')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"   union select airlines.country from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to or go to Airport ' ASY ' ?",
        "result": "Country FROM airlines WHERE Airline = 'JetBlue Airways'\nUNION \nSELECT Country FROM airports WHERE AirportCode = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.destairport = \"ASY\"  ",
        "question": "Which airline has abbreviation ' UAL ' and go to Airport ' ASY ' ?",
        "result": "uid, Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nAND uid IN (SELECT Airline FROM flights WHERE DestAirport = 'ASY')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which airline has abbreviation ' UAL ' or go to Airport ' ASY ' ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' OR AirportCode = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.destairport = \"ASY\"  ",
        "question": "How many airlines are from USA and go to Airport ' ASY ' ?",
        "result": "COUNT(*) FROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nJOIN airports ON airports.AirportCode = flights.DestAirport \nWHERE airlines.Country = 'USA' AND airports.AirportCode = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ASY\"  ",
        "question": "Count the number of flights departing from ' APG ' and go to Airport ' ASY ' ?",
        "result": "COUNT(*) FROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ASY\"  ",
        "question": "Count the number of flights departing from ' APG ' or go to Airport ' ASY ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and go to Airport ' ASY ' ?",
        "result": "airlines.Airline\nFROM airlines\nJOIN flights ON airlines.Abbreviation = flights.Airline\nWHERE flights.DestAirport = 'ASY'\nGROUP BY airlines.Airline\nORDER BY COUNT(flights.FlightNo) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and go to Airport ' ASY ' ?",
        "result": "Airline, COUNT(*) AS NumFlights \nFROM flights \nWHERE DestAirport = 'ASY' \nGROUP BY Airline \nORDER BY NumFlights DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"ASY\"  ",
        "question": "Which airlines have a flight with source airport AHD and go to Airport ' ASY ' ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN flights \nON Airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'AHD' AND flights.DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"ASY\"  ",
        "question": "Which airlines have a flight with source airport AHD or go to Airport ' ASY ' ?",
        "result": "Airline \nFROM airlines \nWHERE Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD' OR DestAirport = 'ASY')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and go to Airport ' ASY ' ?",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'ASY' \nGROUP BY Airlines.Airline \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which airlines have at least 10 flights or go to Airport ' ASY ' ?",
        "result": "airlines.Airline\nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'ASY' OR flights.SourceAirport = 'ASY' \nGROUP BY airlines.Abbreviation \nHAVING COUNT(flights.Airline) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and go to Airport ' ASY ' ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n  SELECT airlines.uid \n  FROM airlines \n  JOIN flights ON airlines.Airline = flights.Airline \n  WHERE flights.DestAirport = 'ASY'\n  GROUP BY airlines.uid \n  HAVING COUNT(*) < 200\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which airlines have less than 200 flights or go to Airport ' ASY ' ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n  SELECT Airline \n  FROM flights \n  GROUP BY Airline \n  HAVING COUNT(*) < 200 \n  UNION \n  SELECT uid \n  FROM airlines \n  WHERE Abbreviation = 'ASY' \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ASY\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and go to Airport ' ASY ' ?",
        "result": "flights.FlightNo\nFROM flights\nWHERE flights.SourceAirport = 'APG' AND flights.DestAirport = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ASY\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or go to Airport ' ASY ' ?",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.SourceAirport = 'APG' OR flights.DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ASY\"  ",
        "question": "Give the flight numbers of flights leaving from APG and go to Airport ' ASY ' ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ASY\"  ",
        "question": "Give the flight numbers of flights leaving from APG or go to Airport ' ASY ' ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or go to Airport ' ASY ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.destairport = \"ASY\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to and arriving in ASY Airport .",
        "result": "airlines.Country \nFROM \nairlines \nINNER JOIN \nflights ON airlines.Airline = flights.Airline \nINNER JOIN \nairports ON flights.DestAirport = airports.AirportCode \nWHERE \nairlines.Airline = 'JetBlue Airways' \nAND \nairports.AirportCode = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"   union select airlines.country from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to or arriving in ASY Airport .",
        "result": "Country \nFROM airlines \nWHERE Airline = 'JetBlue Airways' \nUNION \nSELECT Country \nFROM airports \nWHERE AirportCode = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.destairport = \"ASY\"  ",
        "question": "Which airline has abbreviation ' UAL ' and arriving in ASY Airport .",
        "result": "Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = 'UAL' AND flights.DestAirport = 'ASY' AND airlines.uid = flights.Airline",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which airline has abbreviation ' UAL ' or arriving in ASY Airport .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR uid IN (\n    SELECT Airline \n    FROM flights \n    WHERE DestAirport = 'ASY'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.destairport = \"ASY\"  ",
        "question": "How many airlines are from USA and arriving in ASY Airport .",
        "result": "COUNT(*) \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.City = 'Ashley' AND airports.CountryAbbrev = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ASY\"  ",
        "question": "Count the number of flights departing from ' APG ' and arriving in ASY Airport .",
        "result": "COUNT(*) FROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ASY\"  ",
        "question": "Count the number of flights departing from ' APG ' or arriving in ASY Airport .",
        "result": "COUNT(*) FROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and arriving in ASY Airport .",
        "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'ASY' \nGROUP BY airlines.Airline \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and arriving in ASY Airport .",
        "result": "Airline\nFROM flights\nWHERE DestAirport = 'ASY'\nGROUP BY Airline\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"ASY\"  ",
        "question": "Which airlines have a flight with source airport AHD and arriving in ASY Airport .",
        "result": "Airlines.Airline \nFROM \nAirlines \nJOIN \nFlights ON Airlines.Abbreviation=Flights.Airline \nWHERE \nFlights.SourceAirport='AHD' AND Flights.DestAirport='ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"ASY\"  ",
        "question": "Which airlines have a flight with source airport AHD or arriving in ASY Airport .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD' OR DestAirport = 'ASY')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and arriving in ASY Airport .",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'ASY' \nGROUP BY Airlines.Abbreviation \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which airlines have at least 10 flights or arriving in ASY Airport .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT COUNT(*) \n    FROM flights \n    WHERE flights.DestAirport = 'ASY' \n    GROUP BY flights.Airline \n    HAVING COUNT(*) >= 10 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and arriving in ASY Airport .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT airlines.uid \n    FROM airlines \n    JOIN flights ON airlines.Abbreviation = flights.Airline \n    JOIN airports ON airports.AirportCode = flights.DestAirport \n    WHERE airports.AirportCode = 'ASY'\n    GROUP BY airlines.uid \n    HAVING COUNT(*) < 200\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ASY\"  ",
        "question": "Which airlines have less than 200 flights or arriving in ASY Airport .",
        "result": "Airline FROM flights\nWHERE Airline NOT IN (\n    SELECT Airline FROM flights\n    WHERE DestAirport = 'ASY'\n)\nGROUP BY Airline\nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ASY\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and arriving in ASY Airport .",
        "result": "flights.FlightNo \nFROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nJOIN airports AS airports_1 ON flights.DestAirport = airports_1.AirportCode \nWHERE airports.AirportCode = 'APG' AND airports_1.AirportCode = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ASY\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or arriving in ASY Airport .",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.SourceAirport = 'APG' OR flights.DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"ASY\"  ",
        "question": "Give the flight numbers of flights leaving from APG and arriving in ASY Airport .",
        "result": "FlightNo FROM flights\nWHERE SourceAirport = 'APG' AND DestAirport = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"ASY\"  ",
        "question": "Give the flight numbers of flights leaving from APG or arriving in ASY Airport .",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or arriving in ASY Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and from Airport ' AHD ' ?",
        "result": "Airlines.Airline, Airlines.Abbreviation \nFROM Airlines \nINNER JOIN Flights \nON Airlines.Abbreviation = Flights.Airline \nINNER JOIN Airports \nON Flights.SourceAirport = Airports.AirportCode \nWHERE Airports.Country = 'USA' AND Airports.AirportCode = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or from Airport ' AHD ' ?",
        "result": "airlines.Airline, airlines.Abbreviation \nFROM airlines \nINNER JOIN flights ON airlines.uid = flights.Airline \nINNER JOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airlines.Country = 'USA' OR airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and from Airport ' AHD ' ?",
        "result": "Airline, Abbreviation FROM airlines \nWHERE Country = 'USA' AND uid IN \n(SELECT Airline FROM flights \nWHERE SourceAirport = 'AHD' OR DestAirport = 'AHD');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or from Airport ' AHD ' ?",
        "result": "Airline, Abbreviation FROM airlines \nWHERE Country = 'USA' OR \nAbbreviation IN (SELECT Airline FROM flights \n                 WHERE SourceAirport = 'AHD' OR DestAirport = 'AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and from Airport ' AHD ' ?",
        "result": "airlines.Airline \nFROM \nairlines \nJOIN flights \nON airlines.Abbreviation = 'UAL' AND flights.Airline = airlines.Airline \nAND flights.SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or from Airport ' AHD ' ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' OR uid IN \n(SELECT Airline FROM flights \nWHERE SourceAirport = 'AHD' OR DestAirport = 'AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "Return the number of airlines in the USA and from Airport ' AHD ' ?",
        "result": "COUNT(*) \nFROM airlines \nWHERE Country = 'USA' OR Abbreviation IN (\n    SELECT Airline \n    FROM flights \n    WHERE SourceAirport = 'AHD' \n    OR DestAirport = 'AHD'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO and from Airport ' AHD ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO' OR SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO or from Airport ' AHD ' ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport='ATO' OR SourceAirport='AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD and from Airport ' AHD ' ?",
        "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights \nON airlines.Airline = flights.Airline \nWHERE flights.DestAirport = 'AHD' \nAND flights.SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD or from Airport ' AHD ' ?",
        "result": "Airline \nFROM flights \nWHERE DestAirport = 'AHD' OR SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or from Airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.sourceairport = \"AHD\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to and leaving from AHD Airport .",
        "result": "airlines.Country \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nJOIN airports ON airports.AirportCode = flights.SourceAirport \nWHERE airlines.Airline = 'JetBlue Airways' \nAND airports.AirportCode = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.country from airlines where  airlines.airline = \"JetBlue Airways\"   union select airlines.country from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Which country does Airline ' JetBlue Airways ' belong to or leaving from AHD Airport .",
        "result": "Country \nFROM airlines \nINNER JOIN flights \nON airlines.Airline = flights.Airline \nINNER JOIN airports \nON flights.SourceAirport = airports.AirportCode \nWHERE airlines.Airline = 'JetBlue Airways' OR airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which country does Airline ' JetBlue Airways ' belong to or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"AHD\"  ",
        "question": "Which airline has abbreviation ' UAL ' and leaving from AHD Airport .",
        "result": "Airline FROM airlines \nINNER JOIN flights ON airlines.Abbreviation = 'UAL' AND flights.SourceAirport = 'AHD' AND airlines.uid = flights.Airline",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Which airline has abbreviation ' UAL ' or leaving from AHD Airport .",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nOR uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "How many airlines are from USA and leaving from AHD Airport .",
        "result": "COUNT(DISTINCT airlines.uid) \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airlines.Country = 'USA' AND airports.AirportCode = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"AHD\"  ",
        "question": "How many flights have destination ATO and leaving from AHD Airport .",
        "result": "COUNT(*) FROM flights WHERE DestAirport='ATO' AND SourceAirport='AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"AHD\"  ",
        "question": "How many flights have destination ATO or leaving from AHD Airport .",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO' OR SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO and leaving from AHD Airport .",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO or leaving from AHD Airport .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='AHD' OR DestAirport='ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "Which airline has most number of flights and leaving from AHD Airport .",
        "result": "airlines.Airline\nFROM airlines\nJOIN flights ON airlines.Abbreviation = flights.Airline\nWHERE flights.SourceAirport = 'AHD'\nGROUP BY airlines.Airline\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has most number of flights and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  group by airlines.airline  order by count(*) desc limit 1 ",
        "question": "What airline serves the most flights and leaving from AHD Airport .",
        "result": "Airline, COUNT(*) AS TotalFlights \nFROM flights \nWHERE SourceAirport = 'AHD' \nGROUP BY Airline \nORDER BY TotalFlights DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airline serves the most flights and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD and leaving from AHD Airport .",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'AHD' AND flights.SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD or leaving from AHD Airport .",
        "result": "Airline \nFROM \nflights \nWHERE \nDestAirport = 'AHD' \nOR \nSourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and leaving from AHD Airport .",
        "result": "Airline \nFROM flights \nWHERE SourceAirport = 'AHD' \nGROUP BY Airline \nHAVING COUNT(*) >= 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have at least 10 flights or leaving from AHD Airport .",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN Flights ON Airlines.Abbreviation = Flights.Airline \nWHERE Flights.SourceAirport = 'AHD' \nGROUP BY Airlines.Abbreviation \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and leaving from AHD Airport .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT COUNT(*) \n    FROM flights \n    WHERE SourceAirport = 'AHD'\n    GROUP BY Airline\n    HAVING COUNT(*) < 200\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have less than 200 flights or leaving from AHD Airport .",
        "result": "Airline FROM flights \nWHERE Airline NOT IN (\n  SELECT Airline FROM flights \n  GROUP BY Airline \n  HAVING COUNT(*) >= 200\n) OR SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"AHD\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and leaving from AHD Airport .",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.DestAirport = 'APG' AND flights.SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"AHD\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or leaving from AHD Airport .",
        "result": "FlightNo FROM flights WHERE SourceAirport='AHD' OR DestAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"AHD\"  ",
        "question": "Give the flight numbers of flights landing at APG and leaving from AHD Airport .",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.DestAirport = 'APG' AND flights.SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG and leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"AHD\"  ",
        "question": "Give the flight numbers of flights landing at APG or leaving from AHD Airport .",
        "result": "FlightNo\nFROM flights\nWHERE DestAirport = 'APG' OR SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG or leaving from AHD Airport . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and from airport ' AHD ' ?",
        "result": "Airlines.Airline, Airlines.Abbreviation \nFROM Airlines \nINNER JOIN Flights ON Airlines.Abbreviation = Flights.Airline \nINNER JOIN Airports ON Flights.SourceAirport = Airports.AirportCode \nWHERE Airports.Country = 'USA' AND Airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or from airport ' AHD ' ?",
        "result": "Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA' OR Abbreviation IN (\n  SELECT Airline FROM flights WHERE SourceAirport = 'AHD' OR DestAirport = 'AHD'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and from airport ' AHD ' ?",
        "result": "Airline, Abbreviation FROM airlines \nWHERE Country = 'USA' \nAND uid IN (\n    SELECT Airline FROM flights \n    WHERE SourceAirport = 'AHD'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or from airport ' AHD ' ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' OR \n      EXISTS (SELECT 1 FROM flights \n              WHERE airlines.Abbreviation = flights.Airline \n                AND flights.SourceAirport = 'AHD' \n             )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and from airport ' AHD ' ?",
        "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights \nON airlines.Abbreviation = 'UAL' \nAND flights.SourceAirport = 'AHD' \nAND airlines.uid = flights.Airline",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or from airport ' AHD ' ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR uid IN (\n    SELECT Airline \n    FROM flights \n    WHERE SourceAirport = 'AHD' OR DestAirport = 'AHD'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "Return the number of airlines in the USA and from airport ' AHD ' ?",
        "result": "COUNT(DISTINCT airlines.Abbreviation)\nFROM airlines\nINNER JOIN flights\nON airlines.Abbreviation = flights.Airline\nINNER JOIN airports\nON flights.SourceAirport = airports.AirportCode\nWHERE airlines.Country = 'USA' AND airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO and from airport ' AHD ' ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO or from airport ' AHD ' ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD and from airport ' AHD ' ?",
        "result": "Airlines.Airline\nFROM Airlines\nINNER JOIN flights\nON Airlines.Abbreviation = flights.Airline\nWHERE flights.DestAirport = 'AHD' AND flights.SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD or from airport ' AHD ' ?",
        "result": "Airline FROM flights \nWHERE DestAirport = 'AHD' OR SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or from airport ' AHD ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and with source airport AHD ?",
        "result": "Airline, Abbreviation FROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.Country = 'USA' AND airports.City = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or with source airport AHD ?",
        "result": "Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA' OR EXISTS (\n    SELECT 1 FROM flights\n    WHERE Airline = airlines.Airline AND SourceAirport = 'AHD'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and with source airport AHD ?",
        "result": "Airlines.Airline, Airlines.Abbreviation \nFROM Airlines \nJOIN flights ON Airlines.Airline = flights.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE Airlines.Country = 'USA' AND airports.City = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or with source airport AHD ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' OR uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and with source airport AHD ?",
        "result": "Airline \nFROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'AHD' AND airlines.Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or with source airport AHD ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"AHD\"  ",
        "question": "Return the number of airlines in the USA and with source airport AHD ?",
        "result": "COUNT(*) FROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airlines.Country = 'USA' AND airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"AHD\"  ",
        "question": "How many flights have destination ATO and with source airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport='ATO' AND SourceAirport='AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"AHD\"  ",
        "question": "How many flights have destination ATO or with source airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO and with source airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' AND SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"AHD\"  ",
        "question": "Count the number of flights into ATO or with source airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport IN ('ATO','AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD and with source airport AHD ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN Flights ON Airlines.Abbreviation = Flights.Airline \nWHERE Flights.SourceAirport = 'AHD' AND Flights.DestAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"AHD\"  ",
        "question": "Which airlines have a flight with destination airport AHD or with source airport AHD ?",
        "result": "Airline \nFROM flights \nWHERE DestAirport='AHD' OR SourceAirport='AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"AHD\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and with source airport AHD ?",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.DestAirport = 'APG' AND flights.SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"AHD\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or with source airport AHD ?",
        "result": "FlightNo \nFROM flights \nWHERE DestAirport = 'APG' OR SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"AHD\"  ",
        "question": "Give the flight numbers of flights landing at APG and with source airport AHD ?",
        "result": "FlightNo \nFROM flights \nWHERE DestAirport = 'APG' AND SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG and with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"AHD\"  ",
        "question": "Give the flight numbers of flights landing at APG or with source airport AHD ?",
        "result": "FlightNo FROM flights WHERE DestAirport='APG' OR SourceAirport='AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG or with source airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.destairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and with destination airport AHD ?",
        "result": "Airline, Abbreviation \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.Country = 'USA' AND airports.City = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or with destination airport AHD ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' OR Abbreviation IN \n(SELECT Airline FROM flights WHERE DestAirport = 'AHD');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.destairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and with destination airport AHD ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' AND \n      EXISTS (SELECT 1 FROM flights WHERE airlines.uid = flights.Airline AND flights.DestAirport = 'AHD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or with destination airport AHD ?",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE Country = 'USA' OR uid IN (\n    SELECT Airline \n    FROM flights \n    WHERE DestAirport = 'AHD'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.destairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and with destination airport AHD ?",
        "result": "Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'AHD' AND airlines.Abbreviation = 'UAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or with destination airport AHD ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation='UAL' OR Airline IN (SELECT Airline FROM flights WHERE DestAirport='AHD');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.destairport = \"AHD\"  ",
        "question": "Return the number of airlines in the USA and with destination airport AHD ?",
        "result": "COUNT(*) FROM airlines \nWHERE Country = 'USA' \nAND uid IN (\n  SELECT DISTINCT Airline FROM flights \n  WHERE DestAirport = 'AHD'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"AHD\"  ",
        "question": "How many flights depart from ' APG ' and with destination airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from ' APG ' and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"AHD\"  ",
        "question": "How many flights depart from ' APG ' or with destination airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from ' APG ' or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"AHD\"  ",
        "question": "Count the number of flights departing from ' APG ' and with destination airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG' AND DestAirport='AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"AHD\"  ",
        "question": "Count the number of flights departing from ' APG ' or with destination airport AHD ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"AHD\"  ",
        "question": "Which airlines have a flight with source airport AHD and with destination airport AHD ?",
        "result": "Airline \nFROM \nflights \nWHERE \nSourceAirport='AHD' AND DestAirport='AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"AHD\"  ",
        "question": "Which airlines have a flight with source airport AHD or with destination airport AHD ?",
        "result": "Airline \nFROM flights \nWHERE SourceAirport = 'AHD' OR DestAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"AHD\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and with destination airport AHD ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"AHD\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or with destination airport AHD ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"AHD\"  ",
        "question": "Give the flight numbers of flights leaving from APG and with destination airport AHD ?",
        "result": "FlightNo FROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"AHD\"  ",
        "question": "Give the flight numbers of flights leaving from APG or with destination airport AHD ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or with destination airport AHD ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.airline in (select flights.Airline from flights where  flights.sourceairport = \"APG\"   intersect select flights.Airline from flights where  flights.sourceairport = \"CVO\"   ) ",
        "question": "What is the total number of airlines , that have flights from both airports ' APG ' and ' CVO ' .",
        "result": "COUNT(DISTINCT airlines.Airline) \nFROM airlines \nINNER JOIN flights ON airlines.Airline = flights.Airline \nWHERE flights.SourceAirport IN ('APG', 'CVO') AND flights.DestAirport IN ('APG', 'CVO')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines , that have flights from both airports ' APG ' and ' CVO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) > 10  intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "Find all airlines that have at least 10 flights and that have flights from both airports ' APG ' and ' CVO ' .",
        "result": "Airlines.Airline \nFROM \nAirlines \nJOIN \n(SELECT Airline FROM flights WHERE SourceAirport = 'APG' OR SourceAirport = 'CVO' GROUP BY Airline HAVING COUNT(DISTINCT DestAirport) >= 2) AS F\nON Airlines.Abbreviation = F.Airline \nGROUP BY Airlines.Airline \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have at least 10 flights and that have flights from both airports ' APG ' and ' CVO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) < 200  intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "Find all airlines that have fewer than 200 flights and that have flights from both airports ' APG ' and ' CVO ' .",
        "result": "Airlines.Airline\nFROM Airlines\nINNER JOIN Flights ON Airlines.Airline = Flights.Airline\nWHERE Flights.SourceAirport IN ('APG','CVO') AND Flights.DestAirport IN ('APG','CVO')\nGROUP BY Airlines.Airline\nHAVING COUNT(*) < 200",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have fewer than 200 flights and that have flights from both airports ' APG ' and ' CVO ' . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"APG\"   intersect select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"CVO\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and from both APG and CVO airports ?",
        "result": "A.Airline, A.Abbreviation\nFROM airlines A\nJOIN flights F ON A.Airline = F.Airline\nJOIN airports S ON F.SourceAirport = S.AirportCode AND (S.City = 'APG' OR S.City = 'CVO') AND S.CountryAbbrev = 'USA'\nJOIN airports D ON F.DestAirport = D.AirportCode AND D.CountryAbbrev = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and from both APG and CVO airports ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"APG\"   intersect select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"CVO\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and from both APG and CVO airports ?",
        "result": "Airline, Abbreviation FROM airlines \nWHERE Country = 'USA' \nAND Abbreviation IN \n(SELECT Airline FROM flights \nWHERE SourceAirport IN ('APG', 'CVO') \nOR DestAirport IN ('APG', 'CVO'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and from both APG and CVO airports ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"CVO\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and from both APG and CVO airports ?",
        "result": "airlines.Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = 'UAL' \nAND flights.SourceAirport IN ('APG', 'CVO') \nAND flights.Airline = airlines.Airline",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and from both APG and CVO airports ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"APG\"   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"CVO\"  ",
        "question": "Which airlines have a flight with destination airport AHD and from both APG and CVO airports ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN flights \nON Airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'AHD' \nAND flights.SourceAirport IN ('APG','CVO')\nGROUP BY Airlines.Airline \nHAVING COUNT(DISTINCT flights.SourceAirport) = 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and from both APG and CVO airports ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "What is the total number of airlines , that have flights from airport ' CVO '",
        "result": "COUNT(DISTINCT airlines.uid) \nFROM airlines \nINNER JOIN flights \nON airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'CVO' OR flights.DestAirport = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total number of airlines , that have flights from airport ' CVO ' \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  group by airlines.airline  order by count(*) asc limit 1 ",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights and that have flights from airport ' CVO '",
        "result": "Abbreviation, Country\nFROM airlines\nWHERE uid = (\n  SELECT airlines.uid\n  FROM airlines\n  JOIN flights ON airlines.Airline = flights.Airline\n  WHERE flights.SourceAirport = 'CVO'\n  GROUP BY airlines.uid\n  ORDER BY COUNT(*) ASC\n  LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the abbreviation and country of the airline that has fewest number of flights and that have flights from airport ' CVO ' \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Find all airlines that have at least 10 flights and that have flights from airport ' CVO '",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nWHERE flights.SourceAirport = 'CVO' \nGROUP BY airlines.Airline \nHAVING COUNT(flights.FlightNo) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have at least 10 flights and that have flights from airport ' CVO ' \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "Find all airlines that have at least 10 flights or that have flights from airport ' CVO '",
        "result": "Airline \nFROM airlines \nWHERE Airline IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10) \nOR Airline IN (SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' OR DestAirport = 'CVO')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have at least 10 flights or that have flights from airport ' CVO ' \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Find all airlines that have fewer than 200 flights and that have flights from airport ' CVO '",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'CVO' \nGROUP BY airlines.Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have fewer than 200 flights and that have flights from airport ' CVO ' \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "Find all airlines that have fewer than 200 flights or that have flights from airport ' CVO '",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n  SELECT uid FROM (\n    SELECT airlines.uid, COUNT(*) as num_flights \n    FROM airlines \n    LEFT JOIN flights ON airlines.Abbreviation = flights.Airline \n    WHERE flights.SourceAirport <> 'CVO' AND flights.DestAirport <> 'CVO'\n    GROUP BY airlines.uid\n  ) \n  WHERE num_flights < 200 \n  UNION \n  SELECT uid FROM airlines \n  INNER JOIN flights ON airlines.Abbreviation = flights.Airline \n  WHERE flights.SourceAirport = 'CVO' OR flights.DestAirport = 'CVO'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airlines that have fewer than 200 flights or that have flights from airport ' CVO ' \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"CVO\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' and from CVO ?",
        "result": "Airline, Abbreviation FROM airlines\nWHERE Country = 'USA' AND Abbreviation = 'CVO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' and from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "List all airline names and their abbreviations in ' USA ' or from CVO ?",
        "result": "Airline, Abbreviation FROM airlines WHERE Country = 'USA' OR Abbreviation = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airline names and their abbreviations in ' USA ' or from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"CVO\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA and from CVO ?",
        "result": "Airline, Abbreviation FROM airlines WHERE Country = 'USA' OR Abbreviation = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA and from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline , airlines.abbreviation from airlines where  airlines.country = \"USA\"   union select airlines.airline , airlines.abbreviation from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "What are the airline names and abbreviations for airlines in the USA or from CVO ?",
        "result": "Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA' OR Abbreviation = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airline names and abbreviations for airlines in the USA or from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\" and flights.sourceairport = \"CVO\"  ",
        "question": "Give the airline with abbreviation ' UAL ' and from CVO ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' AND Country = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"CVO\"  ",
        "question": "Give the airline with abbreviation ' UAL ' or from CVO ?",
        "result": "Airline FROM airlines WHERE Abbreviation='UAL' OR CountryAbbrev='CVO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.country = \"USA\" and flights.sourceairport = \"CVO\"  ",
        "question": "Return the number of airlines in the USA and from CVO ?",
        "result": "COUNT(*) \nFROM airlines \nWHERE Country = 'USA' OR Abbreviation = 'CVO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airlines in the USA and from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"CVO\"  ",
        "question": "Count the number of flights into ATO and from CVO ?",
        "result": "COUNT(*) FROM flights WHERE (DestAirport = 'ATO' OR SourceAirport = 'CVO')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"CVO\"  ",
        "question": "Count the number of flights into ATO or from CVO ?",
        "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport='CVO' OR DestAirport='ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"CVO\"  ",
        "question": "Which airlines have a flight with destination airport AHD and from CVO ?",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.DestAirport = 'AHD' AND flights.SourceAirport = 'CVO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"CVO\"  ",
        "question": "Which airlines have a flight with destination airport AHD or from CVO ?",
        "result": "Airline \nFROM flights \nWHERE DestAirport='AHD' OR SourceAirport='CVO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or from CVO ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airline has abbreviation ' UAL ' and have at least 10 flights ?",
        "result": "Airline FROM airlines\nJOIN flights ON airlines.Abbreviation = 'UAL' AND airlines.uid = flights.Airline\nGROUP BY Airline\nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and have at least 10 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airline has abbreviation ' UAL ' or have at least 10 flights ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' OR Airline IN \n(SELECT Airline FROM flights \nGROUP BY Airline \nHAVING COUNT(*) >= 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or have at least 10 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Give the airline with abbreviation ' UAL ' and have at least 10 flights ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nAND (\n  SELECT COUNT(*) \n  FROM flights \n  WHERE flights.Airline = airlines.Abbreviation\n) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and have at least 10 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10 ",
        "question": "Give the airline with abbreviation ' UAL ' or have at least 10 flights ?",
        "result": "Airline \nFROM \nairlines \nWHERE \nAbbreviation = 'UAL' OR \n(Airline IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or have at least 10 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airline has abbreviation ' UAL ' and have less than 200 flights ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' AND \n      (SELECT COUNT(*) FROM flights \n       WHERE airlines.uid = flights.Airline) < 200",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and have less than 200 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airline has abbreviation ' UAL ' or have less than 200 flights ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' OR \n(SELECT COUNT(*) FROM flights WHERE airlines.Airline = flights.Airline) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or have less than 200 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  airlines.abbreviation = \"UAL\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Give the airline with abbreviation ' UAL ' and have less than 200 flights ?",
        "result": "Airline FROM airlines \nWHERE Abbreviation = 'UAL' AND \n(SELECT COUNT(*) FROM flights WHERE Airline = airlines.Airline) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' and have less than 200 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\"   union select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200 ",
        "question": "Give the airline with abbreviation ' UAL ' or have less than 200 flights ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' OR uid IN (\n    SELECT DISTINCT Airline \n    FROM flights \n    GROUP BY Airline \n    HAVING COUNT(*) < 200\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airline with abbreviation ' UAL ' or have less than 200 flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" and airlines.airline = \"United Airlines\"  ",
        "question": "Which airline has abbreviation ' UAL ' and correspond to United Airlines flights ?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL' \nAND Airline LIKE '%United Airlines%' \nAND uid IN (SELECT DISTINCT Airline FROM flights);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines where  airlines.abbreviation = \"UAL\" or airlines.airline = \"United Airlines\"  ",
        "question": "Which airline has abbreviation ' UAL ' or correspond to United Airlines flights ?",
        "result": "Airline FROM airlines WHERE Abbreviation = 'UAL' OR Airline = 'United Airlines';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airline has abbreviation ' UAL ' or correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" and airlines.airline = \"United Airlines\"  ",
        "question": "How many airlines are from USA and correspond to United Airlines flights ?",
        "result": "COUNT(*) \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE airlines.Country = 'USA' AND airlines.Airline = 'United Airlines' AND flights.SourceAirport != flights.DestAirport;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines where  airlines.country = \"USA\" or airlines.airline = \"United Airlines\"  ",
        "question": "How many airlines are from USA or correspond to United Airlines flights ?",
        "result": "COUNT(*) \nFROM airlines \nWHERE Country = 'USA' OR Airline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airlines are from USA or correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\" and airlines.airline = \"United Airlines\"  ",
        "question": "Count the number of flights departing from ' APG ' and correspond to United Airlines flights ?",
        "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG' AND Airline = 'United Airlines';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"ATO\" and airlines.airline = \"United Airlines\"  ",
        "question": "How many flights have destination ATO and correspond to United Airlines flights ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' AND Airline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\" and airlines.airline = \"United Airlines\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and correspond to United Airlines flights ?",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.AirportCode = 'APG' AND airlines.Airline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or correspond to United Airlines flights ?",
        "result": "flights.FlightNo\nFROM flights \nINNER JOIN airlines ON flights.Airline = airlines.Abbreviation\nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airports.AirportCode = 'APG' OR airlines.Airline = 'United';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\" and airlines.airline = \"United Airlines\"  ",
        "question": "Give the flight numbers of flights leaving from APG and correspond to United Airlines flights ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' AND Airline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"  ",
        "question": "Give the flight numbers of flights leaving from APG or correspond to United Airlines flights ?",
        "result": "FlightNo FROM flights WHERE SourceAirport = 'APG' OR Airline = 'United';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\" and airlines.airline = \"United Airlines\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and correspond to United Airlines flights ?",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.AirportCode = 'APG' \nAND airlines.Airline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\"   union select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or correspond to United Airlines flights ?",
        "result": "FlightNo FROM flights \nWHERE DestAirport = 'APG' OR Airline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or correspond to United Airlines flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\"  ",
        "question": "Return the number of flights that departing from Airport ' APG ' ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights that departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "How many flights have destination ATO and departing from Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO' AND SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "How many flights have destination ATO or departing from Airport ' APG ' ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport='ATO' OR SourceAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO and departing from Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO or departing from Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO' OR SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.sourceairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and departing from Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways' AND SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.sourceairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or departing from Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways' OR SourceAirport = 'APG' OR DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD and departing from Airport ' APG ' ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN Flights ON Airlines.Abbreviation = Flights.Airline \nWHERE Flights.DestAirport = 'AHD' AND Flights.SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD or departing from Airport ' APG ' ?",
        "result": "Airline FROM flights WHERE DestAirport = 'AHD' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and departing from Airport ' APG ' ?",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'APG' \nGROUP BY Airlines.Airline \nHAVING COUNT(*) >= 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have at least 10 flights or departing from Airport ' APG ' ?",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nWHERE flights.SourceAirport = 'APG' \nGROUP BY airlines.Airline \nHAVING COUNT(flights.FlightNo) >= 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and departing from Airport ' APG ' ?",
        "result": "Airline \nFROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'APG' \nGROUP BY flights.Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have less than 200 flights or departing from Airport ' APG ' ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG') OR uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and flights.sourceairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and departing from Airport ' APG ' ?",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or flights.sourceairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or departing from Airport ' APG ' ?",
        "result": "flights.FlightNo \nFROM \nflights \nINNER JOIN \nairlines ON flights.Airline = airlines.Abbreviation \nINNER JOIN \nairports ON flights.SourceAirport = airports.AirportCode \nWHERE \nairlines.Airline = 'United Airlines' OR airports.AirportCode = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"APG\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and departing from Airport ' APG ' ?",
        "result": "flights.FlightNo \nFROM \nflights \nWHERE \nflights.SourceAirport = 'APG' AND flights.DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"APG\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or departing from Airport ' APG ' ?",
        "result": "FlightNo\nFROM flights\nWHERE SourceAirport = 'APG' OR DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"APG\"  ",
        "question": "Give the flight numbers of flights landing at APG and departing from Airport ' APG ' ?",
        "result": "flights.FlightNo \nFROM flights \nWHERE flights.DestAirport = 'APG' OR flights.SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG and departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"APG\"  ",
        "question": "Give the flight numbers of flights landing at APG or departing from Airport ' APG ' ?",
        "result": "FlightNo FROM flights WHERE SourceAirport='APG' OR DestAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG or departing from Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\"  ",
        "question": "Return the number of flights that leaving from APG .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights that leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "How many flights have destination ATO and leaving from APG .",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' AND SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "How many flights have destination ATO or leaving from APG .",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'ATO' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have destination ATO or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" and flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO and leaving from APG .",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"ATO\" or flights.sourceairport = \"APG\"  ",
        "question": "Count the number of flights into ATO or leaving from APG .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.sourceairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and leaving from APG .",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue Airways' AND SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.sourceairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or leaving from APG .",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways' AND (SourceAirport = 'APG' OR DestAirport = 'APG');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" and flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD and leaving from APG .",
        "result": "Airlines.Airline \nFROM Airlines \nINNER JOIN Flights \nON Airlines.Abbreviation = Flights.Airline \nWHERE Flights.DestAirport = 'AHD' AND Flights.SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"AHD\" or flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have a flight with destination airport AHD or leaving from APG .",
        "result": "Airline FROM flights \nWHERE DestAirport = 'AHD' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with destination airport AHD or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and leaving from APG .",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'APG' \nGROUP BY airlines.Airline \nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have at least 10 flights or leaving from APG .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n  SELECT Airline \n  FROM flights \n  WHERE SourceAirport = 'APG' \n  OR DestAirport = 'APG' \n  GROUP BY Airline \n  HAVING COUNT(*) >= 10\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and leaving from APG .",
        "result": "Airline \nFROM airlines \nINNER JOIN flights ON airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'APG' \nGROUP BY Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"APG\"  ",
        "question": "Which airlines have less than 200 flights or leaving from APG .",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT Airline \n    FROM flights \n    WHERE SourceAirport = 'APG'\n    UNION \n    SELECT Airline \n    FROM flights \n    GROUP BY Airline \n    HAVING COUNT(*) < 200 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and flights.sourceairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and leaving from APG .",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or flights.sourceairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or leaving from APG .",
        "result": "flights.FlightNo \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Airline \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE (airlines.Abbreviation = 'UA' OR airports.AirportCode = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"APG\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' and leaving from APG .",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE flights.DestAirport = 'APG' AND airports.AirportCode = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"APG\"  ",
        "question": "What are flight numbers of flights arriving at Airport ' APG ' or leaving from APG .",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode \nWHERE airports.AirportCode = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights arriving at Airport ' APG ' or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" and flights.sourceairport = \"APG\"  ",
        "question": "Give the flight numbers of flights landing at APG and leaving from APG .",
        "result": "FlightNo \nFROM flights \nWHERE DestAirport = 'APG' OR SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG and leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.destairport = \"APG\" or flights.sourceairport = \"APG\"  ",
        "question": "Give the flight numbers of flights landing at APG or leaving from APG .",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights landing at APG or leaving from APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"APG\"  ",
        "question": "Return the number of flights that arriving at Airport ' APG ' ?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights that arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"APG\"  ",
        "question": "Count the number of flights departing from ' APG ' and arriving at Airport ' APG ' ?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"APG\"  ",
        "question": "Count the number of flights departing from ' APG ' or arriving at Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.destairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and arriving at Airport ' APG ' ?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways' AND DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.destairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or arriving at Airport ' APG ' ?",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'JetBlue Airways' OR (SourceAirport = 'APG' OR DestAirport = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"APG\"  ",
        "question": "Which airlines have a flight with source airport AHD and arriving at Airport ' APG ' ?",
        "result": "Airlines.Airline \nFROM \n    Airlines \nINNER JOIN \n    flights ON Airlines.Abbreviation = flights.Airline \nINNER JOIN \n    airports ON flights.DestAirport = airports.AirportCode \nWHERE \n    flights.SourceAirport = 'AHD' \n    AND airports.AirportCode = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"APG\"  ",
        "question": "Which airlines have a flight with source airport AHD or arriving at Airport ' APG ' ?",
        "result": "Airline \nFROM airlines \nWHERE uid IN (\n    SELECT Airline \n    FROM flights \n    WHERE SourceAirport = 'AHD' OR DestAirport = 'APG'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\"  group by airlines.airline having  count(*) > 10 ",
        "question": "Which airlines have at least 10 flights and arriving at Airport ' APG ' ?",
        "result": "Airline FROM flights WHERE DestAirport='APG' GROUP BY Airline HAVING COUNT(*)>=10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) > 10  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\"  ",
        "question": "Which airlines have at least 10 flights or arriving at Airport ' APG ' ?",
        "result": "Airlines.Airline \nFROM \nAirlines \nINNER JOIN flights ON Airlines.Airline = flights.Airline \nWHERE \nflights.DestAirport = 'APG' OR flights.SourceAirport = 'APG' \nGROUP BY \nAirlines.Airline \nHAVING \nCOUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have at least 10 flights or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\"  group by airlines.airline having  count(*) < 200 ",
        "question": "Which airlines have less than 200 flights and arriving at Airport ' APG ' ?",
        "result": "Airline FROM flights \nWHERE DestAirport='APG' \nGROUP BY Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200  union select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = \"APG\"  ",
        "question": "Which airlines have less than 200 flights or arriving at Airport ' APG ' ?",
        "result": "Airline FROM airlines\nWHERE uid IN (\n    SELECT COUNT(*) FROM flights\n    WHERE Airline=airlines.uid AND (DestAirport='APG' OR SourceAirport='APG')\n    HAVING COUNT(*)<200\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have less than 200 flights or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" and flights.destairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights and arriving at Airport ' APG ' ?",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airlines ON flights.Airline = airlines.Airline \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Abbreviation = 'UA' \nAND airports.AirportCode = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"United Airlines\" or flights.destairport = \"APG\"  ",
        "question": "Which flight numbers correspond to United Airlines flights or arriving at Airport ' APG ' ?",
        "result": "flights.FlightNo \nFROM \nflights \nJOIN \nairlines ON flights.Airline = airlines.Abbreviation \nJOIN \nairports ON flights.DestAirport = airports.AirportCode \nWHERE \nairlines.Airline = 'United Airlines' OR airports.AirportCode = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight numbers correspond to United Airlines flights or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"APG\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and arriving at Airport ' APG ' ?",
        "result": "FlightNo FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"APG\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or arriving at Airport ' APG ' ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"APG\"  ",
        "question": "Give the flight numbers of flights leaving from APG and arriving at Airport ' APG ' ?",
        "result": "FlightNo FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"APG\"  ",
        "question": "Give the flight numbers of flights leaving from APG or arriving at Airport ' APG ' ?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' OR DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or arriving at Airport ' APG ' ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.destairport = \"APG\"  ",
        "question": "Return the number of flights , landing at APG .",
        "result": "COUNT(*) \nFROM flights \nWHERE DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights , landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"APG\"  ",
        "question": "Count the number of flights departing from ' APG ' and landing at APG .",
        "result": "COUNT(*) \nFROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' and landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"APG\"  ",
        "question": "Count the number of flights departing from ' APG ' or landing at APG .",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG' OR DestAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights departing from ' APG ' or landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" and flights.destairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have and landing at APG .",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways' AND DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have and landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = \"JetBlue Airways\" or flights.destairport = \"APG\"  ",
        "question": "How many flights does airline ' JetBlue Airways ' have or landing at APG .",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways' OR DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airline ' JetBlue Airways ' have or landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" and flights.destairport = \"APG\"  ",
        "question": "Which airlines have a flight with source airport AHD and landing at APG .",
        "result": "Airlines.Airline \nFROM Airlines \nJOIN flights ON Airlines.Abbreviation = flights.Airline \nWHERE flights.SourceAirport = 'AHD' AND flights.DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD and landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = \"AHD\" or flights.destairport = \"APG\"  ",
        "question": "Which airlines have a flight with source airport AHD or landing at APG .",
        "result": "Airline FROM flights\nWHERE SourceAirport = 'AHD' OR DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airlines have a flight with source airport AHD or landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"APG\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' and landing at APG .",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports AS dep_airport ON flights.SourceAirport = dep_airport.AirportCode \nINNER JOIN airports AS arr_airport ON flights.DestAirport = arr_airport.AirportCode \nWHERE dep_airport.AirportCode = 'APG' AND arr_airport.AirportCode = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' and landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"APG\"  ",
        "question": "What are flight numbers of flights departing from Airport ' APG ' or landing at APG .",
        "result": "FlightNo FROM flights WHERE SourceAirport='APG' OR DestAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight numbers of flights departing from Airport ' APG ' or landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" and flights.destairport = \"APG\"  ",
        "question": "Give the flight numbers of flights leaving from APG and landing at APG .",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG' AND DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG and landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights where  flights.sourceairport = \"APG\" or flights.destairport = \"APG\"  ",
        "question": "Give the flight numbers of flights leaving from APG or landing at APG .",
        "result": "FlightNo FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight numbers of flights leaving from APG or landing at APG . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airports where  airports.airportcode not in (select flights.SourceAirport from flights  ) and airports.airportcode not in (select flights.DestAirport from flights  )  ",
        "question": "Return the number of airports , which do not have any flight in and out .",
        "result": "COUNT(*) \nFROM airports \nWHERE AirportCode NOT IN \n(SELECT DISTINCT SourceAirport FROM flights \nUNION \nSELECT DISTINCT DestAirport FROM flights)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airports , which do not have any flight in and out . \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select count(*) from airports where  airports.airportcode not in (select flights.SourceAirport from flights  ) and airports.airportcode not in (select flights.DestAirport from flights  )  ",
        "question": "Return the number of airports that do not have departing or arriving flights ?",
        "result": "COUNT(*) FROM airports \nWHERE AirportCode NOT IN \n(SELECT DISTINCT SourceAirport FROM flights \nUNION SELECT DISTINCT DestAirport FROM flights)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airports that do not have departing or arriving flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.city , airports.country from airports where  airports.airportname = \"Alton\" and airports.airportcode not in (select flights.SourceAirport from flights join airports on flights.SourceAirport = airports.AirportCode where  airports.airportname = \"Alton\"   ) and airports.airportcode not in (select flights.DestAirport from flights  )  ",
        "question": "Which city and country is the Alton airport at and do not have departing or arriving flights ?",
        "result": "airports.City, airports.Country\nFROM airports\nLEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport\nWHERE airports.AirportCode = 'Alton'\nAND flights.SourceAirport IS NULL\nAND flights.DestAirport IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which city and country is the Alton airport at and do not have departing or arriving flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.airportcode = \"AKO\" and airports.airportcode not in (select flights.SourceAirport from flights join airports on flights.SourceAirport = airports.AirportCode where  airports.airportcode = \"AKO\"   ) and airports.airportcode not in (select flights.DestAirport from flights  )  ",
        "question": "Return the name of the airport with code ' AKO ' and do not have departing or arriving flights ?",
        "result": "AirportName FROM airports\nWHERE AirportCode = 'AKO'\nAND AirportCode NOT IN\n(SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the airport with code ' AKO ' and do not have departing or arriving flights ? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportname from airports where  airports.city = \"Aberdeen\" and airports.airportcode not in (select flights.SourceAirport from flights join airports on flights.SourceAirport = airports.AirportCode where  airports.city = \"Aberdeen\"   ) and airports.airportcode not in (select flights.DestAirport from flights  )  ",
        "question": "What are the names of airports in Aberdeen and do not have departing or arriving flights ?",
        "result": "AirportName FROM airports \nWHERE City = 'Aberdeen' AND AirportCode NOT IN \n(SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the names of airports in Aberdeen and do not have departing or arriving flights ? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) , employee.city from employee  group by employee.city having  count(*) > 1 ",
        "question": "What is the number of employees from each city that do more than one employee ?",
        "result": "City, COUNT(Employee_ID) \nFROM employee \nWHERE Employee_ID IN (\n  SELECT Employee_ID \n  FROM hiring \n  WHERE Is_full_time = 1\n  GROUP BY Employee_ID \n  HAVING COUNT(Shop_ID) > 1\n) \nGROUP BY City",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What is the number of employees from each city that do more than one employee ? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) , employee.city from employee  group by employee.city having  count(*) > 1 ",
        "question": "Count the number of employees for each city that do more than one employee ?",
        "result": "City, COUNT(Employee_ID)\nFROM employee\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of employees for each city that do more than one employee ? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) from employee where  employee.age < 30  ",
        "question": "Count the number of employees , under age 30 come from ?",
        "result": "COUNT(Employee_ID) FROM employee WHERE Age < 30;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of employees , under age 30 come from ? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) , employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1 ",
        "question": "What is the number of employees from each city , that have more than one employee under age 30 .",
        "result": "City, COUNT(Employee_ID)\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(Employee_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What is the number of employees from each city , that have more than one employee under age 30 . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) , employee.city from employee where  employee.age < 30  group by employee.city having  count(*) > 1 ",
        "question": "Count the number of employees for each city , that have more than one employee under age 30 .",
        "result": "City, COUNT(*) \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(*) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of employees for each city , that have more than one employee under age 30 . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000   order by shop.number_products desc",
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products , in descending order of number of products .",
        "result": "DISTINCT shop.District\nFROM shop\nWHERE shop.Number_products < 3000\n  AND EXISTS (SELECT 1 FROM shop WHERE shop.Number_products > 10000 AND shop.District = shop.District)\nORDER BY shop.Number_products DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which district has both stores with less than 3000 products and stores with more than 10000 products , in descending order of number of products . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000   order by shop.number_products desc",
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products , in descending order of number of products .",
        "result": "shop.District\nFROM shop\nWHERE shop.Number_products < 3000\nINTERSECT\nSELECT shop.District\nFROM shop\nWHERE shop.Number_products > 10000\nORDER BY shop.Number_products DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products , in descending order of number of products . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min(shop.number_products) , max(shop.number_products) from shop where  shop.number_products > (select avg(shop.number_products) from shop  )  ",
        "question": "find the minimum and maximum number of products of all stores , whose number products is more than the average number of products .",
        "result": "MIN(Number_products), MAX(Number_products)\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the minimum and maximum number of products of all stores , whose number products is more than the average number of products . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) , shop.location from shop where  shop.number_products > (select avg(shop.number_products) from shop  )  group by shop.location ",
        "question": "Which shops ' number products is above the average ? Find the number of shops in each location .",
        "result": "shop.Location, COUNT(*) \nFROM shop \nWHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop) \nGROUP BY shop.Location;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which shops ' number products is above the average ? Find the number of shops in each location . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min(shop.number_products) , max(shop.number_products) from shop where  shop.number_products > (select avg(shop.number_products) from shop  )  ",
        "question": "Which shops ' number products is above the average ? find the minimum and maximum number of products of all stores .",
        "result": "Shop_ID, Name, Number_products \nFROM shop \nWHERE Number_products > (SELECT AVG(Number_products) FROM shop)\nORDER BY Number_products ASC \nLIMIT 1; \n\nSELECT MAX(Number_products) FROM shop;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which shops ' number products is above the average ? find the minimum and maximum number of products of all stores . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )  ",
        "question": "Count the number of employees , who never won any award in the evaluation .",
        "result": "COUNT(*) \nFROM employee \nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of employees , who never won any award in the evaluation . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )  ",
        "question": "Count the number of employees , who never received any evaluation ?",
        "result": "COUNT(*) FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of employees , who never received any evaluation ? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min(shop.number_products) , max(shop.number_products) from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )  ",
        "question": "What are the minimum and maximum number of products across all the shops , that do not hire any employee .",
        "result": "MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What are the minimum and maximum number of products across all the shops , that do not hire any employee . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count(*) , shop.location from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )  group by shop.location ",
        "question": "Which shops run with no employees ? Find the number of shops in each location .",
        "result": "shop.Location, COUNT(shop.Shop_ID) AS num_shops\nFROM shop\nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nWHERE hiring.Employee_ID IS NULL\nGROUP BY shop.Location;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which shops run with no employees ? Find the number of shops in each location . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min(shop.number_products) , max(shop.number_products) from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )  ",
        "question": "Which shops run with no employees ? find the minimum and maximum number of products of all stores .",
        "result": "shop.Shop_ID, shop.Name, shop.Location, shop.District, shop.Number_products, shop.Manager_name \nFROM shop \nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nWHERE hiring.Employee_ID IS NULL \nORDER BY shop.Shop_ID ASC;\n\nSELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products \nFROM shop;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which shops run with no employees ? find the minimum and maximum number of products of all stores . \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min(shop.number_products) , max(shop.number_products) from shop where  shop.number_products < 3000  ",
        "question": "find the minimum and maximum number of products of all stores , with less than 3000 products and ?",
        "result": "MIN(Number_products), MAX(Number_products) FROM shop WHERE Number_products < 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the minimum and maximum number of products of all stores , with less than 3000 products and ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents where  documents.document_description like \"%w%\"  ",
        "question": "Count the number of documents , with description with the letter ' w ' in it ?",
        "result": "COUNT(*) FROM Documents WHERE Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents , with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_description like \"%w%\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents , with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents , with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_description like \"%w%\"  ",
        "question": "What are the ids , names , and descriptions for all documents , with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents , with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\" and documents.document_description like \"%w%\"  ",
        "question": "What is the document id , template id and description for document named ' Robbin CV ' and with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.Document_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Robbin CV' AND Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id , template id and description for document named ' Robbin CV ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\" or documents.document_description like \"%w%\"  ",
        "question": "What is the document id , template id and description for document named ' Robbin CV ' or with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Documents.Template_ID, Documents.Document_Description\nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Robbin CV' OR Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id , template id and description for document named ' Robbin CV ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\" and documents.document_description like \"%w%\"  ",
        "question": "Return the document id , template id , and description for the document with the name Robbin CV and with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.Document_Description\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Robbin CV' AND Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the document id , template id , and description for the document with the name Robbin CV and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\" or documents.document_description like \"%w%\"  ",
        "question": "Return the document id , template id , and description for the document with the name Robbin CV or with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Documents.Template_ID, Documents.Document_Description \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV' OR Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the document id , template id , and description for the document with the name Robbin CV or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents where  documents.document_description like \"%w%\"  ",
        "question": "Count the number of different templates used for documents , with description with the letter ' w ' in it ?",
        "result": "COUNT(DISTINCT Templates.Template_ID)\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Templates.Template_Details LIKE '%w%' OR Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents , with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" and documents.document_description like \"%w%\"  ",
        "question": "How many documents are using the template with type code ' PPT ' and with description with the letter ' w ' in it ?",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'PPT' AND Ref_Template_Types.Template_Type_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the template with type code ' PPT ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" or documents.document_description like \"%w%\"  ",
        "question": "How many documents are using the template with type code ' PPT ' or with description with the letter ' w ' in it ?",
        "result": "COUNT(DISTINCT Documents.Document_ID)\nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'PPT' OR Ref_Template_Types.Template_Type_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the template with type code ' PPT ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" and documents.document_description like \"%w%\"  ",
        "question": "How many paragraphs for the document with name ' Summer Show ' and with description with the letter ' w ' in it ?",
        "result": "COUNT(*) \nFROM Paragraphs p \nJOIN Documents d ON p.Document_ID = d.Document_ID \nWHERE d.Document_Name = 'Summer Show' AND d.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many paragraphs for the document with name ' Summer Show ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" or documents.document_description like \"%w%\"  ",
        "question": "How many paragraphs for the document with name ' Summer Show ' or with description with the letter ' w ' in it ?",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Document_ID IN \n    (SELECT Document_ID \n     FROM Documents \n     WHERE Document_Name = 'Summer Show' OR Document_Description LIKE '%w%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many paragraphs for the document with name ' Summer Show ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" and documents.document_description like \"%w%\"  ",
        "question": "Count the number of paragraphs in the document named ' Summer Show ' and with description with the letter ' w ' in it ?",
        "result": "COUNT(Paragraph_ID) \nFROM Paragraphs \nWHERE Document_ID = (\n    SELECT Document_ID \n    FROM Documents \n    WHERE Document_Name = 'Summer Show'\n) \nAND Paragraph_Text LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs in the document named ' Summer Show ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" or documents.document_description like \"%w%\"  ",
        "question": "Count the number of paragraphs in the document named ' Summer Show ' or with description with the letter ' w ' in it ?",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Document_ID IN (\n  SELECT Document_ID \n  FROM Documents \n  WHERE Document_Name = 'Summer Show' \n  OR Document_Description LIKE '%w%'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs in the document named ' Summer Show ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and documents.document_description like \"%w%\"  ",
        "question": "Show all paragraph ids and texts for the document with name ' Welcome to NY ' and with description with the letter ' w ' in it ?",
        "result": "Paragraph_ID, Paragraph_Text \n FROM Paragraphs \n WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY' AND Document_Description LIKE '%w%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and texts for the document with name ' Welcome to NY ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" or documents.document_description like \"%w%\"  ",
        "question": "Show all paragraph ids and texts for the document with name ' Welcome to NY ' or with description with the letter ' w ' in it ?",
        "result": "Paragraph_ID, Paragraph_Text \n FROM Paragraphs\n WHERE Document_ID IN (\n   SELECT Document_ID \n   FROM Documents \n   WHERE Document_Name = 'Welcome to NY' OR Document_Description LIKE '%w%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and texts for the document with name ' Welcome to NY ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and documents.document_description like \"%w%\"  ",
        "question": "What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' and with description with the letter ' w ' in it ?",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY') \nAND Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" or documents.document_description like \"%w%\"  ",
        "question": "What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' or with description with the letter ' w ' in it ?",
        "result": "Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY') OR Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Description LIKE '%w%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\" and documents.document_description like \"%w%\"  ",
        "question": "What are the paragraph texts for the document with the name ' Customer reviews ' and with description with the letter ' w ' in it ?",
        "result": "Paragraph_Text\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_Name = 'Customer reviews' AND Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the paragraph texts for the document with the name ' Customer reviews ' and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\" or documents.document_description like \"%w%\"  ",
        "question": "What are the paragraph texts for the document with the name ' Customer reviews ' or with description with the letter ' w ' in it ?",
        "result": "Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews' OR Document_Description LIKE '%w%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the paragraph texts for the document with the name ' Customer reviews ' or with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_description like \"%w%\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "What is the document id and name with greatest number of paragraphs and with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Documents.Document_Name\nFROM Documents\nWHERE Documents.Document_Description LIKE '%w%' \nAND Documents.Document_ID IN (\n    SELECT Paragraphs.Document_ID \n    FROM Paragraphs \n    GROUP BY Paragraphs.Document_ID \n    ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC \n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id and name with greatest number of paragraphs and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_description like \"%w%\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "Return the id and name of the document with the most paragraphs and with description with the letter ' w ' in it ?",
        "result": "Documents.Document_ID, Documents.Document_Name \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%' \nAND Documents.Document_ID = (SELECT Document_ID \n                             FROM Paragraphs \n                             GROUP BY Document_ID \n                             ORDER BY COUNT(*) DESC \n                             LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and name of the document with the most paragraphs and with description with the letter ' w ' in it ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents where  documents.document_description like \"%w%\"  ",
        "question": "Count the number of documents , that contain the letter w in their description .",
        "result": "COUNT(*) FROM Documents WHERE Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents , that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_description like \"%w%\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents , that contain the letter w in their description .",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents , that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_description like \"%w%\"  ",
        "question": "What are the ids , names , and descriptions for all documents , that contain the letter w in their description .",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents , that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents where  documents.document_description like \"%w%\"  ",
        "question": "Count the number of different templates used for documents , that contain the letter w in their description .",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents , that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" and documents.document_description like \"%w%\"  ",
        "question": "Count the number of documents that use the PPT template type and that contain the letter w in their description .",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT' AND Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents that use the PPT template type and that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" or documents.document_description like \"%w%\"  ",
        "question": "Count the number of documents that use the PPT template type or that contain the letter w in their description .",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT' OR Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents that use the PPT template type or that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents where  documents.document_description like \"%w%\"  group by documents.template_id having  count(*) > 1 ",
        "question": "Show ids for all templates that are used by more than one document and that contain the letter w in their description .",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Description LIKE '%w%' \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document and that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select documents.template_id from documents where  documents.document_description like \"%w%\"  ",
        "question": "Show ids for all templates that are used by more than one document or that contain the letter w in their description .",
        "result": "Templates.Template_ID\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Templates.Template_Type_Description LIKE '%w%' OR Templates.Template_ID IN \n(SELECT Templates.Template_ID \n FROM Templates \n INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \n GROUP BY Templates.Template_ID \n HAVING COUNT(DISTINCT Documents.Document_ID) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document or that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" and documents.document_description like \"%w%\"  ",
        "question": "Return the template type code of the template that is used by a document named Data base and that contain the letter w in their description .",
        "result": "Templates.Template_Type_Code \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base' \nAND Templates.Template_Details LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type code of the template that is used by a document named Data base and that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" or documents.document_description like \"%w%\"  ",
        "question": "Return the template type code of the template that is used by a document named Data base or that contain the letter w in their description .",
        "result": "Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' OR Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type code of the template that is used by a document named Data base or that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\" and documents.document_description like \"%w%\"  ",
        "question": "What are the names of documents that use templates with the code BK and that contain the letter w in their description .",
        "result": "Documents.Document_Name\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK'\nAND Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the names of documents that use templates with the code BK and that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\" or documents.document_description like \"%w%\"  ",
        "question": "What are the names of documents that use templates with the code BK or that contain the letter w in their description .",
        "result": "Documents.Document_Name \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'BK' OR Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the names of documents that use templates with the code BK or that contain the letter w in their description . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "Count the number of documents that named ' Robbin CV ' ?",
        "result": "COUNT(*) FROM Documents WHERE Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents that named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents that named ' Robbin CV ' ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents that named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "What are the ids , names , and descriptions for all documents that named ' Robbin CV ' ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents that named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Robbin CV\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and named ' Robbin CV ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Description LIKE '%w%' AND Documents.Document_Name = 'Robbin CV';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Robbin CV\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or named ' Robbin CV ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "Count the number of different templates used for documents that named ' Robbin CV ' ?",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents that named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" and documents.document_name = \"Robbin CV\"  ",
        "question": "How many documents are using the template with type code ' PPT ' and named ' Robbin CV ' ?",
        "result": "COUNT(*) \nFROM Documents \nWHERE Template_ID = (\n   SELECT Template_ID \n   FROM Templates \n   WHERE Template_Type_Code = 'PPT' AND Template_Details = 'Robbin CV'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the template with type code ' PPT ' and named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" or documents.document_name = \"Robbin CV\"  ",
        "question": "How many documents are using the template with type code ' PPT ' or named ' Robbin CV ' ?",
        "result": "COUNT(DISTINCT Documents.Document_ID)\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'PPT' OR Templates.Template_Details = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the template with type code ' PPT ' or named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents where  documents.document_name = \"Robbin CV\"  group by documents.template_id having  count(*) > 1 ",
        "question": "What are the template ids of any templates used in more than a single document and named ' Robbin CV ' ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV' \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document and named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select documents.template_id from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "What are the template ids of any templates used in more than a single document or named ' Robbin CV ' ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_ID IN \n    (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1)\n    OR Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document or named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\" and documents.document_name = \"Robbin CV\"  ",
        "question": "Show all document names using templates with template type code BK and named ' Robbin CV ' ?",
        "result": "Documents.Document_Name\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'BK' AND Templates.Template_Details = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all document names using templates with template type code BK and named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\" or documents.document_name = \"Robbin CV\"  ",
        "question": "Show all document names using templates with template type code BK or named ' Robbin CV ' ?",
        "result": "Documents.Document_Name\nFROM Documents\nJOIN Templates ON Templates.Template_ID = Documents.Template_ID\nJOIN Ref_Template_Types ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'BK' OR Templates.Template_Type_Code = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all document names using templates with template type code BK or named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Robbin CV\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "Return the id and name of the document with the most paragraphs and named ' Robbin CV ' ?",
        "result": "Documents.Document_ID, Documents.Document_Name \nFROM Documents \nWHERE Documents.Document_Name = 'Robbin CV' \nORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and name of the document with the most paragraphs and named ' Robbin CV ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "Count the number of documents , with the name Robbin CV .",
        "result": "COUNT(*) \nFROM Documents \nWHERE Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents , with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents , with the name Robbin CV .",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents , with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "What are the ids , names , and descriptions for all documents , with the name Robbin CV .",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents , with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Robbin CV\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and with the name Robbin CV .",
        "result": "Documents.Document_Name, Documents.Template_ID\n FROM Documents\n JOIN Templates ON Documents.Template_ID = Templates.Template_ID\n WHERE Documents.Document_Description LIKE '%w%' AND Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Robbin CV\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or with the name Robbin CV .",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n WHERE Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents where  documents.document_name = \"Robbin CV\"  ",
        "question": "Count the number of different templates used for documents , with the name Robbin CV .",
        "result": "COUNT(DISTINCT Templates.Template_ID) AS Num_Templates \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents , with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" and documents.document_name = \"Robbin CV\"  ",
        "question": "How many documents are using the template with type code ' PPT ' and with the name Robbin CV .",
        "result": "COUNT(DISTINCT Documents.Document_ID)\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT' AND Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the template with type code ' PPT ' and with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\" or documents.document_name = \"Robbin CV\"  ",
        "question": "How many documents are using the template with type code ' PPT ' or with the name Robbin CV .",
        "result": "COUNT(DISTINCT Documents.Document_ID)\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'PPT' OR Documents.Document_Name = 'Robbin CV';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many documents are using the template with type code ' PPT ' or with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Robbin CV\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "What is the document id and name with greatest number of paragraphs and with the name Robbin CV .",
        "result": "Documents.Document_ID, Documents.Document_Name \nFROM Documents \nWHERE Documents.Document_Name = \"Robbin CV\" \nORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id and name with greatest number of paragraphs and with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Robbin CV\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "Return the id and name of the document with the most paragraphs and with the name Robbin CV .",
        "result": "Documents.Document_ID, Documents.Document_Name \nFROM Documents \nJOIN (\n    SELECT Document_ID, COUNT(*) AS paragraph_count \n    FROM Paragraphs \n    GROUP BY Document_ID \n    ORDER BY paragraph_count DESC LIMIT 1 \n) AS max_paragraphs ON Documents.Document_ID = max_paragraphs.Document_ID \nWHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and name of the document with the most paragraphs and with the name Robbin CV . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "Count the number of documents that are using the template with type code ' PPT ' ?",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents that are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents that are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents that are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "What are the ids , names , and descriptions for all documents that are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents that are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_description like \"%w%\" and templates.template_type_code = \"PPT\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Description LIKE '%w%' AND Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\"   union select documents.document_name , documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%' OR Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Robbin CV\" and templates.template_type_code = \"PPT\"  ",
        "question": "What is the document id , template id and description for document named ' Robbin CV ' and are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.Document_Description \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Documents.Document_Name = 'Robbin CV' AND Ref_Template_Types.Template_Type_Code = 'PPT';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id , template id and description for document named ' Robbin CV ' and are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\"   union select documents.document_id , documents.template_id , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "What is the document id , template id and description for document named ' Robbin CV ' or are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Documents.Template_ID, Documents.Document_Description \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Robbin CV' OR Templates.Template_Type_Code = 'PPT';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id , template id and description for document named ' Robbin CV ' or are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Robbin CV\" and templates.template_type_code = \"PPT\"  ",
        "question": "Return the document id , template id , and description for the document with the name Robbin CV and are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Documents.Template_ID, Ref_Template_Types.Template_Type_Description\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Documents.Document_Name = 'Robbin CV' AND Ref_Template_Types.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the document id , template id , and description for the document with the name Robbin CV and are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\"   union select documents.document_id , documents.template_id , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "Return the document id , template id , and description for the document with the name Robbin CV or are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Documents.Template_ID, Documents.Document_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nLEFT JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Documents.Document_Name = 'Robbin CV' OR Ref_Template_Types.Template_Type_Code = 'PPT';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the document id , template id , and description for the document with the name Robbin CV or are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "Count the number of different templates used for documents that are using the template with type code ' PPT ' ?",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents that are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  group by documents.template_id having  count(*) > 1 ",
        "question": "What are the template ids of any templates used in more than a single document and are using the template with type code ' PPT ' ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Code = 'PPT' \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document and are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select templates.template_id from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "What are the template ids of any templates used in more than a single document or are using the template with type code ' PPT ' ?",
        "result": "Template_ID \nFROM \nTemplates \nWHERE \nTemplate_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1) \nOR \nTemplate_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document or are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "Return the id and name of the document with the most paragraphs and are using the template with type code ' PPT ' ?",
        "result": "Documents.Document_ID, Documents.Document_Name\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'PPT'\nGROUP BY Documents.Document_ID\nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and name of the document with the most paragraphs and are using the template with type code ' PPT ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "Count the number of documents , that use the PPT template type .",
        "result": "COUNT(*) FROM Documents \nWHERE Template_ID IN (\n    SELECT Template_ID FROM Templates \n    WHERE Template_Type_Code = 'PPT'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents , that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents , that use the PPT template type .",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents , that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "What are the ids , names , and descriptions for all documents , that use the PPT template type .",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents , that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_description like \"%w%\" and templates.template_type_code = \"PPT\"  ",
        "question": "Return the names and template ids for documents that contain the letter w in their description and that use the PPT template type .",
        "result": "Documents.Document_Name, Documents.Template_ID\n FROM Documents \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \n WHERE Documents.Document_Description LIKE '%w%' AND Ref_Template_Types.Template_Type_Description = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description and that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\"   union select documents.document_name , documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "Return the names and template ids for documents that contain the letter w in their description or that use the PPT template type .",
        "result": "Documents.Document_Name, Documents.Template_ID\n FROM Documents \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \n WHERE Documents.Document_Description LIKE '%w%' OR Ref_Template_Types.Template_Type_Description = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description or that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  ",
        "question": "Count the number of different templates used for documents , that use the PPT template type .",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents , that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"PPT\"  group by documents.template_id having  count(*) > 1 ",
        "question": "Show ids for all templates that are used by more than one document and that use the PPT template type .",
        "result": "Templates.Template_ID \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT' \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document and that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select templates.template_id from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "Show ids for all templates that are used by more than one document or that use the PPT template type .",
        "result": "Templates.Template_ID\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Templates.Template_Type_Code = 'PPT' OR Templates.Template_ID IN (\n    SELECT Template_ID\n    FROM Documents\n    GROUP BY Template_ID\n    HAVING COUNT(DISTINCT Document_ID) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document or that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  group by templates.template_type_code having  count(*) < 3 ",
        "question": "What are the codes of template types that have fewer than 3 templates and that use the PPT template type .",
        "result": "Template_Type_Code FROM Ref_Template_Types \nWHERE Template_Type_Code = 'PPT' \nAND Template_Type_Code IN (SELECT Template_Type_Code FROM Templates \n                           GROUP BY Template_Type_Code \n                           HAVING COUNT(Template_ID) < 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "What are the codes of template types that have fewer than 3 templates or that use the PPT template type .",
        "result": "Template_Type_Code FROM Ref_Template_Types \nWHERE Template_Type_Code = 'PPT' OR \nTemplate_Type_Code IN (SELECT Template_Type_Code FROM Templates \nGROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates or that use the PPT template type . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id , count(*) from documents  group by documents.template_id having  count(*) > 1 ",
        "question": "Show all template ids and number of documents using each template , that are used by more than one document .",
        "result": "Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template ids and number of documents using each template , that are used by more than one document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id , count(*) from documents  group by documents.template_id having  count(*) > 1 ",
        "question": "Show all template ids and number of documents using each template that used in more than a single document ?",
        "result": "Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template ids and number of documents using each template that used in more than a single document ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates   except select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , not used by any document .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates   except select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the ids , version numbers , and type codes for each template , not used by any document .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates   except select distinct templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Show all distinct template type codes for all templates , not used by any document .",
        "result": "DISTINCT Templates.Template_Type_Code \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Template_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   except select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What is the version number and template type code for the template with version number later than 5 and not used by any document .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Version_Number > 5\nAND NOT EXISTS (\n  SELECT 1 FROM Documents\n  WHERE Documents.Template_ID = Templates.Template_ID\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 and not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   except select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What is the version number and template type code for the template with version number later than 5 or not used by any document .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \n FROM Templates \n LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \n WHERE Templates.Version_Number > 5 OR Documents.Document_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 or not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   except select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 and not used by any document .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5 \nAND Templates.Template_ID NOT IN (\n    SELECT DISTINCT Documents.Template_ID \n    FROM Documents\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 and not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   except select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 or not used by any document .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5 OR Templates.Template_ID NOT IN \n    (SELECT DISTINCT Documents.Template_ID FROM Documents)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 or not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"   except select templates.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and not used by any document .",
        "result": "Templates.Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'\nAND Templates.Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"   except select templates.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' or not used by any document .",
        "result": "Templates.Template_ID \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation') \nOR Documents.Document_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' or not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates   except select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , that are not used in any documents ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , that are not used in any documents ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates   except select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the ids , version numbers , and type codes for each template , that are not used in any documents ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Template_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , that are not used in any documents ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates   except select distinct templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "Show all distinct template type codes for all templates , that are not used in any documents ?",
        "result": "DISTINCT Templates.Template_Type_Code \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , that are not used in any documents ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  except select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the codes of template types that have fewer than 3 templates and that are not used in any documents ?",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Template_ID IS NULL \nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(Templates.Template_ID) < 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that are not used in any documents ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  except select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the codes of template types that have fewer than 3 templates or that are not used in any documents ?",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN \n    (SELECT Template_Type_Code FROM Templates) \n    OR Template_Type_Code IN \n    (SELECT Template_Type_Code \n     FROM Templates \n     GROUP BY Template_Type_Code \n     HAVING COUNT(*) < 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates or that are not used in any documents ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "Count the number of templates , with template type code PP or PPT ?",
        "result": "COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates , with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , with template type code PP or PPT ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "What are the ids , version numbers , and type codes for each template , with template type code PP or PPT ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "Show all distinct template type codes for all templates , with template type code PP or PPT ?",
        "result": "DISTINCT Template_Type_Code \nFROM Templates \nWHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5 and templates.template_type_code = \"PP\"   union select templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 and with template type code PP or PPT ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5 AND Templates.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 and with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5 and templates.template_type_code = \"PP\"   union select templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 and with template type code PP or PPT ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Version_Number > 5 AND (Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 and with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.template_type_code = \"PP\"  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "Show all template type codes with less than three templates and with template type code PP or PPT ?",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nWHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')\nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(*) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates and with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" and templates.template_type_code = \"PP\"   union select templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' and with template type code PP or PPT ?",
        "result": "Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' \nAND Templates.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' and with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.template_type_code = \"PP\"   union select templates.template_id from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "What are the template ids with template type description ' Presentation ' and with template type code PP or PPT ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND (Ref_Template_Types.Template_Type_Code = 'PP' OR Ref_Template_Types.Template_Type_Code = 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' and with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.template_type_code = \"PP\"   union select templates.template_id from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and with template type code PP or PPT ?",
        "result": "Templates.Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND (Ref_Template_Types.Template_Type_Code = 'PP' OR Ref_Template_Types.Template_Type_Code = 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and with template type code PP or PPT ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "Count the number of templates , that have the code PP or PPT .",
        "result": "COUNT(*) FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates , that have the code PP or PPT . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , that have the code PP or PPT .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , that have the code PP or PPT . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "What are the ids , version numbers , and type codes for each template , that have the code PP or PPT .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , that have the code PP or PPT . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates where  templates.template_type_code = \"PP\" or templates.template_type_code = \"PPT\"  ",
        "question": "Show all distinct template type codes for all templates , that have the code PP or PPT .",
        "result": "DISTINCT Template_Type_Code\nFROM Templates\nWHERE Template_Type_Code IN ('PP','PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , that have the code PP or PPT . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.template_type_code = \"PP\"  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "What are the codes of template types that have fewer than 3 templates and that have the code PP or PPT .",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code IN ('PP', 'PPT') \nGROUP BY Template_Type_Code \nHAVING COUNT(*) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that have the code PP or PPT . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" and templates.template_type_code = \"PP\"   union select templates.template_type_code from templates where  templates.template_type_code = \"PPT\"  ",
        "question": "Return the template type code of the template that is used by a document named Data base and that have the code PP or PPT .",
        "result": "Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' AND Templates.Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type code of the template that is used by a document named Data base and that have the code PP or PPT . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"CV\"  group by documents.template_id  order by count(*) desc limit 1 ",
        "question": "What is the id and type code for the template used by the most documents and have template type code CV ?",
        "result": "Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Template_Type_Code = 'CV'\nAND Templates.Template_ID IN (\n    SELECT Template_ID\n    FROM Documents\n    GROUP BY Template_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the id and type code for the template used by the most documents and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"CV\"  ",
        "question": "Count the number of templates that have template type code CV ?",
        "result": "COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates that have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"CV\"  ",
        "question": "Show template ids , version numbers , and template type codes for all templates that have template type code CV ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates that have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.template_type_code = \"CV\"  ",
        "question": "What are the ids , version numbers , and type codes for each template that have template type code CV ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template that have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates where  templates.template_type_code = \"CV\"  ",
        "question": "Show all distinct template type codes for all templates that have template type code CV ?",
        "result": "DISTINCT Template_Type_Code \nFROM Templates \nWHERE Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates that have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5 and templates.template_type_code = \"CV\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 and have template type code CV ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5 AND Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5 or templates.template_type_code = \"CV\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 or have template type code CV ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Version_Number > 5 OR Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 or have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5 and templates.template_type_code = \"CV\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 and have template type code CV ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5 \nAND Templates.Template_Type_Code = 'CV';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5 or templates.template_type_code = \"CV\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 or have template type code CV ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \n FROM Templates \n WHERE Templates.Version_Number > 5 OR Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 or have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.template_type_code = \"CV\"  group by templates.template_type_code  order by count(*) desc limit 1 ",
        "question": "Which template type code has most number of templates and have template type code CV ?",
        "result": "Template_Type_Code \nFROM \n    Ref_Template_Types \nWHERE \n    Template_Type_Code = 'CV' \nGROUP BY \n    Template_Type_Code \nORDER BY \n    COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which template type code has most number of templates and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" and templates.template_type_code = \"CV\"  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' and have template type code CV ?",
        "result": "Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base' AND Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" or templates.template_type_code = \"CV\"  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' or have template type code CV ?",
        "result": "Templates.Template_Type_Code\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Data base' OR Templates.Template_Type_Code = 'CV';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' or have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"CV\"  group by templates.template_type_code  order by count(*) desc limit 1 ",
        "question": "Which template type code is used by most number of documents and have template type code CV ?",
        "result": "Template_Type_Code \nFROM Documents \nWHERE Template_Type_Code = 'CV' \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which template type code is used by most number of documents and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.template_type_code = \"CV\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and have template type code CV ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or templates.template_type_code = \"CV\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' or have template type code CV ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' OR Templates.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' or have template type code CV ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.version_number > 5  group by documents.template_id  order by count(*) desc limit 1 ",
        "question": "What is the id and type code for the template used by the most documents and with version number later than 5 ?",
        "result": "Templates.Template_ID, Templates.Template_Type_Code \n FROM Templates \n JOIN Documents ON Templates.Template_ID = Documents.Template_ID \n WHERE Templates.Version_Number > 5 \n GROUP BY Templates.Template_ID \n ORDER BY COUNT(Documents.Document_ID) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the id and type code for the template used by the most documents and with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.version_number > 5  ",
        "question": "Count the number of templates , with version number later than 5 ?",
        "result": "COUNT(*) FROM Templates WHERE Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates , with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , with version number later than 5 ?",
        "result": "Template_ID, Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "What are the ids , version numbers , and type codes for each template , with version number later than 5 ?",
        "result": "Template_ID, Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "Show all distinct template type codes for all templates , with version number later than 5 ?",
        "result": "DISTINCT Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"CV\" and templates.version_number > 5  ",
        "question": "How many templates have template type code CV and with version number later than 5 ?",
        "result": "COUNT(*) FROM Templates \nWHERE Template_Type_Code = 'CV' AND Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates have template type code CV and with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"CV\" or templates.version_number > 5  ",
        "question": "How many templates have template type code CV or with version number later than 5 ?",
        "result": "COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV' OR Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates have template type code CV or with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.version_number > 5  group by templates.template_type_code having  count(*) < 3 ",
        "question": "Show all template type codes with less than three templates and with version number later than 5 ?",
        "result": "Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE Templates.Version_Number > 5 AND Ref_Template_Types.Template_Type_Code NOT IN \n(SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) >= 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates and with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "Show all template type codes with less than three templates or with version number later than 5 ?",
        "result": "Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE (SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code) < 3\nOR Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates or with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" and templates.version_number > 5  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' and with version number later than 5 ?",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' AND Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' and with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" or templates.version_number > 5  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' or with version number later than 5 ?",
        "result": "Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' OR Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' or with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.version_number > 5  ",
        "question": "What are the template ids with template type description ' Presentation ' and with version number later than 5 ?",
        "result": "Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' and with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or templates.version_number > 5  ",
        "question": "What are the template ids with template type description ' Presentation ' or with version number later than 5 ?",
        "result": "Template_ID \nFROM Templates \nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code \n    FROM Ref_Template_Types \n    WHERE Template_Type_Description = 'Presentation'\n) OR Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' or with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.version_number > 5  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and with version number later than 5 ?",
        "result": "Templates.Template_ID \nFROM Templates \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' \nAND Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or templates.version_number > 5  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' or with version number later than 5 ?",
        "result": "Template_ID \nFROM Templates \nWHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation') \nOR Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' or with version number later than 5 ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.version_number > 5  group by documents.template_id  order by count(*) desc limit 1 ",
        "question": "What is the id and type code for the template used by the most documents and with a version number greater than 5 .",
        "result": "Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Version_Number > 5 AND Templates.Template_ID = (\n    SELECT Documents.Template_ID\n    FROM Documents\n    GROUP BY Documents.Template_ID\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the id and type code for the template used by the most documents and with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.version_number > 5  ",
        "question": "Count the number of templates , with a version number greater than 5 .",
        "result": "COUNT(*)\nFROM Templates\nWHERE Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates , with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , with a version number greater than 5 .",
        "result": "Template_ID, Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "What are the ids , version numbers , and type codes for each template , with a version number greater than 5 .",
        "result": "Template_ID, Version_Number, Template_Type_Code \nFROM Templates \nWHERE Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "Show all distinct template type codes for all templates , with a version number greater than 5 .",
        "result": "DISTINCT Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"CV\" and templates.version_number > 5  ",
        "question": "How many templates have template type code CV and with a version number greater than 5 .",
        "result": "COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV' AND Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates have template type code CV and with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates where  templates.template_type_code = \"CV\" or templates.version_number > 5  ",
        "question": "How many templates have template type code CV or with a version number greater than 5 .",
        "result": "COUNT(*) FROM Templates \nWHERE Template_Type_Code = 'CV' OR Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates have template type code CV or with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.version_number > 5  group by templates.template_type_code having  count(*) < 3 ",
        "question": "Show all template type codes with less than three templates and with a version number greater than 5 .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nWHERE Templates.Version_Number > 5 \nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(Templates.Template_ID) < 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates and with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from templates where  templates.version_number > 5  ",
        "question": "Show all template type codes with less than three templates or with a version number greater than 5 .",
        "result": "Template_Type_Code \nFROM \n    Ref_Template_Types \nWHERE \n    Template_Type_Code NOT IN (\n        SELECT \n            Template_Type_Code \n        FROM \n            Templates \n        GROUP BY \n            Template_Type_Code \n        HAVING \n            COUNT(Template_ID) >= 3\n    ) \n    OR \n    Template_Type_Code IN (\n        SELECT \n            Template_Type_Code \n        FROM \n            Templates \n        WHERE \n            Version_Number > 5 \n    );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates or with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" and templates.version_number > 5  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' and with a version number greater than 5 .",
        "result": "Templates.Template_Type_Code\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Data base' AND Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' and with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\" or templates.version_number > 5  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' or with a version number greater than 5 .",
        "result": "Templates.Template_Type_Code\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Data base' OR Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' or with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.version_number > 5  ",
        "question": "What are the template ids with template type description ' Presentation ' and with a version number greater than 5 .",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' \nAND Templates.Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' and with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or templates.version_number > 5  ",
        "question": "What are the template ids with template type description ' Presentation ' or with a version number greater than 5 .",
        "result": "Template_ID \nFROM Templates \nWHERE Version_Number > 5 OR Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' or with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and templates.version_number > 5  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and with a version number greater than 5 .",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND Templates.Version_Number > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or templates.version_number > 5  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' or with a version number greater than 5 .",
        "result": "Template_ID \nFROM Templates \nWHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation') OR Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' or with a version number greater than 5 . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by templates.template_type_code having  count(*) < 3 ",
        "question": "Return the template type code of the template that is used by a document named Data base and that have fewer than 3 templates ?",
        "result": "Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base' AND Templates.Template_Type_Code IN (\n  SELECT Template_Type_Code FROM Templates\n  GROUP BY Template_Type_Code\n  HAVING COUNT(*) < 3\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type code of the template that is used by a document named Data base and that have fewer than 3 templates ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"   union select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3 ",
        "question": "Return the template type code of the template that is used by a document named Data base or that have fewer than 3 templates ?",
        "result": "Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base' OR \n      Templates.Template_ID IN (SELECT Template_ID \n                                FROM Templates \n                                GROUP BY Template_ID \n                                HAVING COUNT(*) < 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type code of the template that is used by a document named Data base or that have fewer than 3 templates ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by documents.template_id  order by count(*) desc limit 1 ",
        "question": "What is the id and type code for the template used by the most documents and used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Template_ID = (\n    SELECT Documents.Template_ID \n    FROM Documents \n    WHERE Documents.Document_Name = 'Data base'\n    GROUP BY Documents.Template_ID \n    ORDER BY COUNT(*) DESC \n    LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the id and type code for the template used by the most documents and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents where  documents.document_name = \"Data base\"  group by documents.template_id having  count(*) > 1 ",
        "question": "What are the template ids of any templates used in more than a single document and used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'\nGROUP BY Templates.Template_ID\nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select documents.template_id from documents where  documents.document_name = \"Data base\"  ",
        "question": "What are the template ids of any templates used in more than a single document or used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID\nFROM Templates\nWHERE Templates.Template_ID IN (\n    SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1\n) OR Templates.Template_ID IN (\n    SELECT Templates.Template_ID FROM Templates\n    INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\n    WHERE Documents.Document_Name = 'Data base'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document or used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Count the number of templates that used by document with the name ' Data base ' ?",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates that used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Show template ids , version numbers , and template type codes for all templates that used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates that used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "What are the ids , version numbers , and type codes for each template that used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template that used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Show all distinct template type codes for all templates that used by document with the name ' Data base ' ?",
        "result": "DISTINCT Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates that used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"CV\" and documents.document_name = \"Data base\"  ",
        "question": "How many templates have template type code CV and used by document with the name ' Data base ' ?",
        "result": "COUNT(Templates.Template_ID)\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Templates.Template_Type_Code = 'CV' AND Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates have template type code CV and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.version_number > 5 and documents.document_name = \"Data base\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 and used by document with the name ' Data base ' ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Version_Number > 5 AND Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   union select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 or used by document with the name ' Data base ' ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates \nWHERE Templates.Version_Number > 5 OR Templates.Template_ID IN \n(SELECT Documents.Template_ID FROM Documents WHERE Documents.Document_Name = 'Data base')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 or used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.version_number > 5 and documents.document_name = \"Data base\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 and used by document with the name ' Data base ' ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Version_Number > 5 AND Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   union select templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 or used by document with the name ' Data base ' ?",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nWHERE Templates.Version_Number > 5 OR Templates.Template_ID IN (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 or used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by templates.template_type_code  order by count(*) desc limit 1 ",
        "question": "Which template type code has most number of templates and used by document with the name ' Data base ' ?",
        "result": "Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'\nGROUP BY Ref_Template_Types.Template_Type_Code\nORDER BY COUNT(Templates.Template_ID) DESC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which template type code has most number of templates and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by templates.template_type_code  order by count(*) desc limit 1 ",
        "question": "Which template type code is used by most number of documents and used by document with the name ' Data base ' ?",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' \nGROUP BY Ref_Template_Types.Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which template type code is used by most number of documents and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and documents.document_name = \"Data base\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or documents.document_name = \"Data base\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' or used by document with the name ' Data base ' ?",
        "result": "Templates.Template_ID\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'\nOR Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' or used by document with the name ' Data base ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Data base\"  ",
        "question": "Return the names and template ids for documents that contain the letter w in their description and that is used by a document named Data base .",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Description LIKE '%w%' AND Templates.Template_ID IN \n (SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description and that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Data base\"  ",
        "question": "Return the names and template ids for documents that contain the letter w in their description or that is used by a document named Data base .",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n WHERE Documents.Document_Description LIKE '%w%' OR \n Documents.Template_ID IN \n (SELECT Templates.Template_ID \n  FROM Templates \n  WHERE Templates.Template_Details LIKE '%Data base%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description or that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by documents.template_id  order by count(*) desc limit 1 ",
        "question": "Return the id and type code of the template that is used for the greatest number of documents and that is used by a document named Data base .",
        "result": "Templates.Template_ID, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Template_ID = (\n    SELECT Templates.Template_ID\n    FROM Templates\n    JOIN Documents ON Templates.Template_ID = Documents.Template_ID\n    WHERE Documents.Document_Name = 'Data base'\n    GROUP BY Templates.Template_ID\n    ORDER BY COUNT(Documents.Document_ID) DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and type code of the template that is used for the greatest number of documents and that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents where  documents.document_name = \"Data base\"  group by documents.template_id having  count(*) > 1 ",
        "question": "Show ids for all templates that are used by more than one document and that is used by a document named Data base .",
        "result": "Templates.Template_ID\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'\nGROUP BY Templates.Template_ID\nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document and that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select documents.template_id from documents where  documents.document_name = \"Data base\"  ",
        "question": "Show ids for all templates that are used by more than one document or that is used by a document named Data base .",
        "result": "Templates.Template_ID\nFROM Templates\nWHERE Templates.Template_ID IN (\n    SELECT Template_ID\n    FROM Documents\n    WHERE Document_Name = 'Data base'\n    UNION \n    SELECT Template_ID\n    FROM Documents\n    GROUP BY Template_ID\n    HAVING COUNT(*) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document or that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Count the number of templates , that is used by a document named Data base .",
        "result": "COUNT(DISTINCT Templates.Template_ID) \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates , that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , that is used by a document named Data base .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "What are the ids , version numbers , and type codes for each template , that is used by a document named Data base .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "Show all distinct template type codes for all templates , that is used by a document named Data base .",
        "result": "DISTINCT Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Documents \nON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by templates.template_type_code  order by count(*) desc limit 1 ",
        "question": "Return the type code of the template type that the most templates belong to and that is used by a document named Data base .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' \nGROUP BY Ref_Template_Types.Template_Type_Code \nORDER BY COUNT(Templates.Template_ID) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the type code of the template type that the most templates belong to and that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by templates.template_type_code having  count(*) < 3 ",
        "question": "What are the codes of template types that have fewer than 3 templates and that is used by a document named Data base .",
        "result": "Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'\nGROUP BY Ref_Template_Types.Template_Type_Code\nHAVING COUNT(DISTINCT Templates.Template_ID) < 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  ",
        "question": "What are the codes of template types that have fewer than 3 templates or that is used by a document named Data base .",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code IN \n    (SELECT Template_Type_Code \n     FROM Templates \n     GROUP BY Template_Type_Code \n     HAVING COUNT(*) < 3) \nOR Template_Type_Code IN \n    (SELECT Template_Type_Code \n     FROM Templates \n     INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \n     WHERE Documents.Document_Name = 'Data base')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates or that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Data base\"  group by templates.template_type_code  order by count(*) desc limit 1 ",
        "question": "Return the code of the template type that is most commonly used in documents and that is used by a document named Data base .",
        "result": "Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base'\nGROUP BY Templates.Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the code of the template type that is most commonly used in documents and that is used by a document named Data base . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = \"Robbin CV\" and templates.template_type_code = \"BK\"  ",
        "question": "What is the document id , template id and description for document named ' Robbin CV ' and using templates with template type code BK .",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.Document_Description \n FROM Documents \n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Name = 'Robbin CV' AND Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id , template id and description for document named ' Robbin CV ' and using templates with template type code BK . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.template_id , documents.document_description from documents where  documents.document_name = \"Robbin CV\"   union select documents.document_id , documents.template_id , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  ",
        "question": "What is the document id , template id and description for document named ' Robbin CV ' or using templates with template type code BK .",
        "result": "Documents.Document_ID, Templates.Template_ID, Documents.Document_Description \n FROM Documents \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Name = 'Robbin CV' OR Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id , template id and description for document named ' Robbin CV ' or using templates with template type code BK . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  group by documents.template_id having  count(*) > 1 ",
        "question": "What are the template ids of any templates used in more than a single document and using templates with template type code BK .",
        "result": "Templates.Template_ID\nFROM Templates\nWHERE Templates.Template_Type_Code = 'BK'\nGROUP BY Templates.Template_ID\nHAVING COUNT(DISTINCT Documents.Document_ID) > 1\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document and using templates with template type code BK . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select templates.template_id from templates where  templates.template_type_code = \"BK\"  ",
        "question": "What are the template ids of any templates used in more than a single document or using templates with template type code BK .",
        "result": "Template_ID \nFROM Templates \nWHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1) \nOR Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single document or using templates with template type code BK . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  group by paragraphs.document_id  order by count(*) desc limit 1 ",
        "question": "What is the document id and name with greatest number of paragraphs and using templates with template type code BK .",
        "result": "Documents.Document_ID, Documents.Document_Name \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Ref_Template_Types.Template_Type_Code = 'BK' \nGROUP BY Documents.Document_ID, Documents.Document_Name \nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id and name with greatest number of paragraphs and using templates with template type code BK . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  ",
        "question": "Count the number of documents , that use templates with the code BK ?",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of documents , that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  ",
        "question": "List document IDs , document names , and document descriptions for all documents , that use templates with the code BK ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List document IDs , document names , and document descriptions for all documents , that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_id , documents.document_name , documents.document_description from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  ",
        "question": "What are the ids , names , and descriptions for all documents , that use templates with the code BK ?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , names , and descriptions for all documents , that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  documents.document_description like \"%w%\" and templates.template_type_code = \"BK\"  ",
        "question": "Return the names and template ids for documents that contain the letter w in their description and that use templates with the code BK ?",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%' AND Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description and that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\"   union select documents.document_name , documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  ",
        "question": "Return the names and template ids for documents that contain the letter w in their description or that use templates with the code BK ?",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents\n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Description LIKE '%w%' OR Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and template ids for documents that contain the letter w in their description or that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count( distinct documents.template_id) from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  ",
        "question": "Count the number of different templates used for documents , that use templates with the code BK ?",
        "result": "COUNT(DISTINCT Templates.Template_ID)\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different templates used for documents , that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents join templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = \"BK\"  group by documents.template_id having  count(*) > 1 ",
        "question": "Show ids for all templates that are used by more than one document and that use templates with the code BK ?",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_Type_Code = 'BK' \nGROUP BY Templates.Template_ID \nHAVING COUNT(DISTINCT Documents.Document_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document and that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id from documents  group by documents.template_id having  count(*) > 1  union select templates.template_id from templates where  templates.template_type_code = \"BK\"  ",
        "question": "Show ids for all templates that are used by more than one document or that use templates with the code BK ?",
        "result": "Templates.Template_ID \nFROM Templates \nWHERE Templates.Template_ID IN \n  (SELECT DISTINCT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1)\n  OR Templates.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates that are used by more than one document or that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates where  templates.template_type_code = \"BK\"  group by templates.template_type_code having  count(*) < 3 ",
        "question": "What are the codes of template types that have fewer than 3 templates and that use templates with the code BK ?",
        "result": "Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nINNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code IN (\n  SELECT Templates.Template_Type_Code\n  FROM Templates\n  WHERE Templates.Template_Type_Code = 'BK'\n  GROUP BY Templates.Template_Type_Code\n  HAVING COUNT(Templates.Template_ID) < 3\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select templates.template_type_code from templates where  templates.template_type_code = \"BK\"  ",
        "question": "What are the codes of template types that have fewer than 3 templates or that use templates with the code BK ?",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code \n    FROM Templates \n    WHERE Template_Type_Code NOT IN (\n        SELECT Template_Type_Code \n        FROM Templates \n        GROUP BY Template_Type_Code \n        HAVING COUNT(*) >= 3\n    )\n    OR Template_Type_Code = 'BK'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates or that use templates with the code BK ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates   except select distinct templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the different template type codes , that are not used by any document .",
        "result": "Ref_Template_Types.Template_Type_Code\nFROM Ref_Template_Types\nWHERE NOT EXISTS (\n    SELECT 1 FROM Templates\n    WHERE Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\n)\n;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the different template type codes , that are not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  except select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the codes of template types that have fewer than 3 templates and that are not used by any document .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_ID IS NULL AND Ref_Template_Types.Template_Type_Code NOT IN \n(SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) >= 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that are not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  except select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the codes of template types that have fewer than 3 templates or that are not used by any document .",
        "result": "Template_Type_Code FROM Ref_Template_Types \nWHERE Template_Type_Code NOT IN \n    (SELECT Template_Type_Code FROM Templates) OR\n    Template_Type_Code IN \n    (SELECT Template_Type_Code FROM Templates \n     GROUP BY Template_Type_Code \n     HAVING COUNT(*) < 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates or that are not used by any document . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  except select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the codes of template types that have fewer than 3 templates and that are not used for any document ?",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_ID IS NULL \nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(Templates.Template_ID) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates and that are not used for any document ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  except select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID  ",
        "question": "What are the codes of template types that have fewer than 3 templates or that are not used for any document ?",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Templates.Template_ID IS NULL OR Ref_Template_Types.Template_Type_Code IN (\n  SELECT Templates.Template_Type_Code \n  FROM Templates \n  GROUP BY Templates.Template_Type_Code \n  HAVING COUNT(Templates.Template_ID) < 3 \n) \nGROUP BY Ref_Template_Types.Template_Type_Code ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the codes of template types that have fewer than 3 templates or that are not used for any document ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\"  ",
        "question": "What are the type codes and descriptions for all template types , with the code AD .",
        "result": "Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the type codes and descriptions for all template types , with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_code from ref_template_types where  ref_template_types.template_type_description = \"Book\" and ref_template_types.template_type_code = \"AD\"  ",
        "question": "Return the type code of the template type with the description ' Book ' and with the code AD .",
        "result": "Template_Type_Code FROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book' AND Template_Type_Code = 'AD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the type code of the template type with the description ' Book ' and with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_code from ref_template_types where  ref_template_types.template_type_description = \"Book\" or ref_template_types.template_type_code = \"AD\"  ",
        "question": "Return the type code of the template type with the description ' Book ' or with the code AD .",
        "result": "Template_Type_Code \nFROM \nRef_Template_Types \nWHERE \nTemplate_Type_Description = 'Book' \nOR \nTemplate_Type_Code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the type code of the template type with the description ' Book ' or with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and ref_template_types.template_type_code = \"AD\"  ",
        "question": "What are the template ids with template type description ' Presentation ' and with the code AD .",
        "result": "Templates.Template_ID\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' AND Ref_Template_Types.Template_Type_Code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' and with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or ref_template_types.template_type_code = \"AD\"  ",
        "question": "What are the template ids with template type description ' Presentation ' or with the code AD .",
        "result": "Templates.Template_ID \nFROM Templates \nINNER JOIN Ref_Template_Types \nON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' OR Templates.Template_Type_Code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids with template type description ' Presentation ' or with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" and ref_template_types.template_type_code = \"AD\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' and with the code AD .",
        "result": "Template_ID \nFROM Templates \nWHERE Template_Type_Code = 'AD' AND Template_ID IN \n  (SELECT Template_ID FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' and with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\" or ref_template_types.template_type_code = \"AD\"  ",
        "question": "Return the ids corresponding to templates with the description ' Presentation ' or with the code AD .",
        "result": "Template_ID\nFROM Templates\nWHERE Template_Type_Code = 'AD' OR Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to templates with the description ' Presentation ' or with the code AD . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_code , ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_description = \"Book\"  ",
        "question": "What are the type codes and descriptions for all template types , with the description ' Book ' .",
        "result": "Template_Type_Code, Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Book'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the type codes and descriptions for all template types , with the description ' Book ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\" and ref_template_types.template_type_description = \"Book\"  ",
        "question": "Return the template type description of the template type with the code AD and with the description ' Book ' .",
        "result": "Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types\nWHERE Ref_Template_Types.Template_Type_Code = 'AD' AND Ref_Template_Types.Template_Type_Description = 'Book'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD and with the description ' Book ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\" or ref_template_types.template_type_description = \"Book\"  ",
        "question": "Return the template type description of the template type with the code AD or with the description ' Book ' .",
        "result": "Template_Type_Description \nFROM \nRef_Template_Types \nWHERE \nTemplate_Type_Code = 'AD' OR Template_Type_Description = 'Book'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD or with the description ' Book ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.version_number > 5 and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 and with template type description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \n FROM Templates \n JOIN Ref_Template_Types \n ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \n WHERE Templates.Version_Number > 5 \n AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 and with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   union select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 or with template type description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Templates.Version_Number > 5 OR Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 or with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.version_number > 5 and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 and with template type description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \n FROM Templates \n JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \n WHERE Templates.Version_Number > 5 AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 and with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   union select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 or with template type description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Ref_Template_Types\nON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Templates.Version_Number > 5 OR Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 or with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  group by templates.template_type_code having  count(*) < 3 ",
        "question": "Show all template type codes with less than three templates and with template type description ' Presentation ' .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' \nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(Templates.Template_ID) < 3 ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates and with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select ref_template_types.template_type_code from ref_template_types where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Show all template type codes with less than three templates or with template type description ' Presentation ' .",
        "result": "Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Presentation' OR Template_Type_Code IN (\nSELECT Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nHAVING COUNT(*) < 3\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates or with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\" and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the template type description of the template type with the code AD and with template type description ' Presentation ' .",
        "result": "Ref_Template_Types.Template_Type_Description \nFROM \nRef_Template_Types \nWHERE \nRef_Template_Types.Template_Type_Code = 'AD' AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD and with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\" or ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the template type description of the template type with the code AD or with template type description ' Presentation ' .",
        "result": "Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD' OR Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD or with template type description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  group by documents.template_id  order by count(*) desc limit 1 ",
        "question": "What is the id and type code for the template used by the most documents and with the description ' Presentation ' .",
        "result": "Templates.Template_ID, Templates.Template_Type_Code \nFROM Templates \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Description = 'Presentation' \nGROUP BY Templates.Template_ID \nORDER BY COUNT(Documents.Document_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the id and type code for the template used by the most documents and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Count the number of templates , with the description ' Presentation ' .",
        "result": "COUNT(*) FROM Templates \nWHERE Template_Type_Code IN \n(SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of templates , with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Show template ids , version numbers , and template type codes for all templates , with the description ' Presentation ' .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nINNER JOIN Ref_Template_Types\nON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show template ids , version numbers , and template type codes for all templates , with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id , templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What are the ids , version numbers , and type codes for each template , with the description ' Presentation ' .",
        "result": "Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids , version numbers , and type codes for each template , with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Show all distinct template type codes for all templates , with the description ' Presentation ' .",
        "result": "DISTINCT Template_Type_Code \nFROM Ref_Template_Types \nWHERE Template_Type_Description = 'Presentation';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct template type codes for all templates , with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = \"CV\" and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "How many templates have template type code CV and with the description ' Presentation ' .",
        "result": "COUNT(*)\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'CV' AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many templates have template type code CV and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.version_number > 5 and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 and with the description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Templates.Version_Number > 5 AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   union select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What is the version number and template type code for the template with version number later than 5 or with the description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Templates.Version_Number > 5 OR Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the version number and template type code for the template with version number later than 5 or with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.version_number > 5 and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 and with the description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Templates.Version_Number > 5 AND Ref_Template_Types.Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.version_number , templates.template_type_code from templates where  templates.version_number > 5   union select templates.version_number , templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5 or with the description ' Presentation ' .",
        "result": "Templates.Version_Number, Templates.Template_Type_Code \n FROM Templates \n WHERE Templates.Version_Number > 5 OR Templates.Template_Type_Code = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the version numbers and template type codes of templates with a version number greater than 5 or with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = \"Presentation\"  group by templates.template_type_code having  count(*) < 3 ",
        "question": "Show all template type codes with less than three templates and with the description ' Presentation ' .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation'\nGROUP BY Ref_Template_Types.Template_Type_Code \nHAVING COUNT(Templates.Template_ID) < 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates  group by templates.template_type_code having  count(*) < 3  union select ref_template_types.template_type_code from ref_template_types where  ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Show all template type codes with less than three templates or with the description ' Presentation ' .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates \nON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'Presentation' OR \n    (Ref_Template_Types.Template_Type_Code IN \n        (SELECT Template_Type_Code \n        FROM Templates \n        GROUP BY Template_Type_Code \n        HAVING COUNT(Template_ID) < 3))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all template type codes with less than three templates or with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  documents.document_name = \"Data base\" and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' and with the description ' Presentation ' .",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' AND Documents.Document_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from documents join templates on Documents.Template_ID = Templates.Template_ID join ref_template_types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  documents.document_name = \"Data base\" or ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "What is the template type code of the template used by document with the name ' Data base ' or with the description ' Presentation ' .",
        "result": "Templates.Template_Type_Code \nFROM Templates \nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Document_Name = 'Data base' OR Documents.Document_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the template type code of the template used by document with the name ' Data base ' or with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\" and ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the template type description of the template type with the code AD and with the description ' Presentation ' .",
        "result": "Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD' AND Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD and with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select ref_template_types.template_type_description from ref_template_types where  ref_template_types.template_type_code = \"AD\" or ref_template_types.template_type_description = \"Presentation\"  ",
        "question": "Return the template type description of the template type with the code AD or with the description ' Presentation ' .",
        "result": "Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code = 'AD' OR Template_Type_Description = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the template type description of the template type with the code AD or with the description ' Presentation ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Summer Show\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and with name ' Summer Show ' ?",
        "result": "Documents.Document_Name, Templates.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%' AND Documents.Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Summer Show\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or with name ' Summer Show ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE (Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Summer Show')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Korea\" and documents.document_name = \"Summer Show\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' and with name ' Summer Show ' ?",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Paragraph_Text LIKE '%Korea%' AND Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' and with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   union select documents.other_details from documents where  documents.document_name = \"Summer Show\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' or with name ' Summer Show ' ?",
        "result": "Paragraphs.*\nFROM Paragraphs\nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Paragraph_Text LIKE '%Korea%' OR Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' or with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "List all document ids with at least two paragraphs and with name ' Summer Show ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_Name = 'Summer Show'\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select documents.document_id from documents where  documents.document_name = \"Summer Show\"  ",
        "question": "List all document ids with at least two paragraphs or with name ' Summer Show ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_ID IS NOT NULL\nGROUP BY Documents.Document_ID\nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2 OR Documents.Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs or with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  group by paragraphs.document_id  order by count(*) asc limit 1 ",
        "question": "Return the id of the document with the fewest paragraphs and with name ' Summer Show ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nWHERE Documents.Document_Name = 'Summer Show'\nORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the document with the fewest paragraphs and with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "What is the document id with 1 to 2 paragraphs and with name ' Summer Show ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_Name = 'Summer Show' \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select documents.document_id from documents where  documents.document_name = \"Summer Show\"  ",
        "question": "What is the document id with 1 to 2 paragraphs or with name ' Summer Show ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_Name = 'Summer Show' \nOR (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs or with name ' Summer Show ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Summer Show\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and in the document named ' Summer Show ' .",
        "result": "Documents.Document_Name, Documents.Template_ID \nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%' AND Documents.Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Summer Show\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or in the document named ' Summer Show ' .",
        "result": "Documents.Document_Name, Documents.Template_ID \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  ",
        "question": "Count the number of paragraphs , in the document named ' Summer Show ' .",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Document_ID = (\n    SELECT Document_ID \n    FROM Documents \n    WHERE Document_Name = 'Summer Show'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs , in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Korea\" and documents.document_name = \"Summer Show\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' and in the document named ' Summer Show ' .",
        "result": "Paragraphs.*\nFROM Paragraphs\nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Paragraph_Text LIKE '%Korea%' AND Documents.Document_Name = 'Summer Show'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' and in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   union select documents.other_details from documents where  documents.document_name = \"Summer Show\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' or in the document named ' Summer Show ' .",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%' OR Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' or in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "List all document ids with at least two paragraphs and in the document named ' Summer Show ' .",
        "result": "Documents.Document_ID \nFROM \nDocuments \nJOIN \nParagraphs \nON \nDocuments.Document_ID = Paragraphs.Document_ID \nWHERE \nDocuments.Document_Name = 'Summer Show' \nGROUP BY \nDocuments.Document_ID \nHAVING \nCOUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select documents.document_id from documents where  documents.document_name = \"Summer Show\"  ",
        "question": "List all document ids with at least two paragraphs or in the document named ' Summer Show ' .",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = 'Summer Show' OR \n    (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs or in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  group by paragraphs.document_id  order by count(*) asc limit 1 ",
        "question": "Return the id of the document with the fewest paragraphs and in the document named ' Summer Show ' .",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_Name = 'Summer Show' \nORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the document with the fewest paragraphs and in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "What is the document id with 1 to 2 paragraphs and in the document named ' Summer Show ' .",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = 'Summer Show' \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select documents.document_id from documents where  documents.document_name = \"Summer Show\"  ",
        "question": "What is the document id with 1 to 2 paragraphs or in the document named ' Summer Show ' .",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE (Documents.Document_Name = 'Summer Show') AND (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs or in the document named ' Summer Show ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs where  paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Count the number of paragraphs , with text ' Korea ' .",
        "result": "COUNT(*) FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs , with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" and paragraphs.paragraph_text = \"Korea\"  ",
        "question": "How many paragraphs for the document with name ' Summer Show ' and with text ' Korea ' .",
        "result": "COUNT(*) FROM Paragraphs \nWHERE Document_ID IN \n(SELECT Document_ID FROM Documents \nWHERE Document_Name = 'Summer Show')\nAND Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many paragraphs for the document with name ' Summer Show ' and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" or paragraphs.paragraph_text = \"Korea\"  ",
        "question": "How many paragraphs for the document with name ' Summer Show ' or with text ' Korea ' .",
        "result": "COUNT(*) FROM Paragraphs\nWHERE Document_ID IN (\n  SELECT Document_ID FROM Documents\n  WHERE Document_Name = 'Summer Show'\n) OR Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many paragraphs for the document with name ' Summer Show ' or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" and paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Count the number of paragraphs in the document named ' Summer Show ' and with text ' Korea ' .",
        "result": "COUNT(*) \nFROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Summer Show' AND Paragraphs.Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs in the document named ' Summer Show ' and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Summer Show\" or paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Count the number of paragraphs in the document named ' Summer Show ' or with text ' Korea ' .",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')\nOR Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs in the document named ' Summer Show ' or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Show all paragraph ids and texts for the document with name ' Welcome to NY ' and with text ' Korea ' .",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (\n    SELECT Document_ID \n    FROM Documents \n    WHERE Document_Name = 'Welcome to NY' \n    AND Document_Description = 'Korea'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and texts for the document with name ' Welcome to NY ' and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" or paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Show all paragraph ids and texts for the document with name ' Welcome to NY ' or with text ' Korea ' .",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID IN \n(SELECT Document_ID FROM Documents \nWHERE Document_Name = 'Welcome to NY' OR Document_Description LIKE '%Korea%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and texts for the document with name ' Welcome to NY ' or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and paragraphs.paragraph_text = \"Korea\"  ",
        "question": "What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' and with text ' Korea ' .",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY') AND Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" or paragraphs.paragraph_text = \"Korea\"  ",
        "question": "What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' or with text ' Korea ' .",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY') \nOR Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\" and paragraphs.paragraph_text = \"Korea\"  ",
        "question": "What are the paragraph texts for the document with the name ' Customer reviews ' and with text ' Korea ' .",
        "result": "Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (\n    SELECT Document_ID \n    FROM Documents \n    WHERE Document_Name = 'Customer reviews'\n) AND Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the paragraph texts for the document with the name ' Customer reviews ' and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\" or paragraphs.paragraph_text = \"Korea\"  ",
        "question": "What are the paragraph texts for the document with the name ' Customer reviews ' or with text ' Korea ' .",
        "result": "Paragraph_Text FROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews' OR Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the paragraph texts for the document with the name ' Customer reviews ' or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "List all document ids with at least two paragraphs and with text ' Korea ' .",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%' \nGROUP BY Documents.Document_ID \nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  ",
        "question": "List all document ids with at least two paragraphs or with text ' Korea ' .",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%' \nGROUP BY Documents.Document_ID \nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  group by paragraphs.document_id  order by count(*) asc limit 1 ",
        "question": "Return the id of the document with the fewest paragraphs and with text ' Korea ' .",
        "result": "Documents.Document_ID\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%'\nGROUP BY Documents.Document_ID\nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the document with the fewest paragraphs and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "What is the document id with 1 to 2 paragraphs and with text ' Korea ' .",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraph_Text LIKE '%Korea%' \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  ",
        "question": "What is the document id with 1 to 2 paragraphs or with text ' Korea ' .",
        "result": "Documents.Document_ID\nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE (SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = Documents.Document_ID) BETWEEN 1 AND 2 OR Paragraphs.Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs or with text ' Korea ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs where  paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Count the number of paragraphs , that includes the text ' Korea ' ?",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs , that includes the text ' Korea ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "What are the ids of documents that have 2 or more paragraphs and that includes the text ' Korea ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%' \nGROUP BY Documents.Document_ID \nHAVING COUNT(*) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of documents that have 2 or more paragraphs and that includes the text ' Korea ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  ",
        "question": "What are the ids of documents that have 2 or more paragraphs or that includes the text ' Korea ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_ID IN (\n    SELECT Document_ID \n    FROM Paragraphs \n    GROUP BY Document_ID \n    HAVING COUNT(*) >= 2\n) OR Documents.Document_Name LIKE '%Korea%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of documents that have 2 or more paragraphs or that includes the text ' Korea ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "Give the ids of documents that have between one and two paragraphs and that includes the text ' Korea ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%' \nGROUP BY Documents.Document_ID \nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 1 AND COUNT(DISTINCT Paragraphs.Paragraph_ID) <= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Give the ids of documents that have between one and two paragraphs and that includes the text ' Korea ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Korea\"  ",
        "question": "Give the ids of documents that have between one and two paragraphs or that includes the text ' Korea ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE (Paragraphs.Paragraph_ID IS NULL OR Paragraphs.Paragraph_ID IN \n      (SELECT Paragraph_ID FROM Paragraphs GROUP BY Document_ID \n       HAVING COUNT(*) BETWEEN 1 AND 2)) OR Documents.Document_Description LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Give the ids of documents that have between one and two paragraphs or that includes the text ' Korea ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Welcome to NY\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and with name ' Welcome to NY ' .",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n WHERE Documents.Document_Description LIKE '%w%' AND Documents.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Welcome to NY\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or with name ' Welcome to NY ' .",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Korea\" and documents.document_name = \"Welcome to NY\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' and with name ' Welcome to NY ' .",
        "result": "Paragraphs.* FROM Paragraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Paragraph_Text LIKE '%Korea%' AND Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' and with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   union select documents.other_details from documents where  documents.document_name = \"Welcome to NY\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' or with name ' Welcome to NY ' .",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE '%Korea%' OR Paragraph_Text LIKE '%Welcome to NY%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' or with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "List all document ids with at least two paragraphs and with name ' Welcome to NY ' .",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs \nON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = ' Welcome to NY ' \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select documents.document_id from documents where  documents.document_name = \"Welcome to NY\"  ",
        "question": "List all document ids with at least two paragraphs or with name ' Welcome to NY ' .",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = 'Welcome to NY' \nOR \nDocuments.Document_ID IN (\n    SELECT Document_ID \n    FROM Paragraphs \n    GROUP BY Document_ID \n    HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs or with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  group by paragraphs.document_id  order by count(*) asc limit 1 ",
        "question": "Return the id of the document with the fewest paragraphs and with name ' Welcome to NY ' .",
        "result": "Documents.Document_ID \nFROM \nDocuments \nWHERE \nDocuments.Document_Name = 'Welcome to NY' \nAND \nDocuments.Document_ID IN \n(SELECT \nDocument_ID \nFROM \nParagraphs \nGROUP BY Document_ID \nHAVING \nCOUNT(*) = (SELECT \nMIN(ParagraphsCount) \nFROM \n(SELECT \nDocument_ID, COUNT(*) AS ParagraphsCount \nFROM \nParagraphs \nGROUP BY Document_ID)))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the document with the fewest paragraphs and with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "What is the document id with 1 to 2 paragraphs and with name ' Welcome to NY ' .",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Document_Name = ' Welcome to NY ' \nAND (\n    SELECT COUNT(*) \n    FROM Paragraphs \n    WHERE Paragraphs.Document_ID = Documents.Document_ID\n) BETWEEN 1 AND 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select documents.document_id from documents where  documents.document_name = \"Welcome to NY\"  ",
        "question": "What is the document id with 1 to 2 paragraphs or with name ' Welcome to NY ' .",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_ID IN (\n    SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2\n) OR Documents.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs or with name ' Welcome to NY ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Welcome to NY\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID \n FROM Documents \n WHERE Documents.Document_Description LIKE '%w%' \n AND Documents.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Welcome to NY\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count(*) from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  ",
        "question": "Count the number of paragraphs , in the document titled ' Welcome to NY ' ?",
        "result": "COUNT(*) \nFROM Paragraphs p \nJOIN Documents d ON p.Document_ID = d.Document_ID \nWHERE d.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs , in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Korea\" and documents.document_name = \"Welcome to NY\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' and in the document titled ' Welcome to NY ' ?",
        "result": "Paragraphs.* FROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Paragraph_Text LIKE '%Korea%' AND Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' and in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   union select documents.other_details from documents where  documents.document_name = \"Welcome to NY\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' or in the document titled ' Welcome to NY ' ?",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%' \nOR Document_ID = (\n  SELECT Document_ID \n  FROM Documents \n  WHERE Document_Name = 'Welcome to NY'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' or in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "List all document ids with at least two paragraphs and in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_Name = 'Welcome to NY'\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select documents.document_id from documents where  documents.document_name = \"Welcome to NY\"  ",
        "question": "List all document ids with at least two paragraphs or in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_Name = 'Welcome to NY'\nOR \nDocuments.Document_ID IN (\n    SELECT Document_ID \n    FROM Paragraphs \n    GROUP BY Document_ID \n    HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs or in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  group by paragraphs.document_id  order by count(*) asc limit 1 ",
        "question": "Return the id of the document with the fewest paragraphs and in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_Name = 'Welcome to NY' \nORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) ASC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the document with the fewest paragraphs and in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "What is the document id with 1 to 2 paragraphs and in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_Name = ' Welcome to NY ' \nAND (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select documents.document_id from documents where  documents.document_name = \"Welcome to NY\"  ",
        "question": "What is the document id with 1 to 2 paragraphs or in the document titled ' Welcome to NY ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_Name = 'Welcome to NY'\nGROUP BY Documents.Document_ID\nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs or in the document titled ' Welcome to NY ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" and documents.document_name = \"Customer reviews\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it and with the name ' Customer reviews ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents \nWHERE Documents.Document_Description LIKE '%w%' AND Documents.Document_Name = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it and with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name , documents.template_id from documents where  documents.document_description like \"%w%\" or documents.document_name = \"Customer reviews\"  ",
        "question": "What is the document name and template id for document with description with the letter ' w ' in it or with the name ' Customer reviews ' ?",
        "result": "Documents.Document_Name, Documents.Template_ID\nFROM Documents\nWHERE Documents.Document_Description LIKE '%w%' OR Documents.Document_Name = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and template id for document with description with the letter ' w ' in it or with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  paragraphs.paragraph_text = \"Korea\" and documents.document_name = \"Customer reviews\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' and with the name ' Customer reviews ' ?",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Paragraph_Text LIKE '%Korea%' AND Document_Name = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' and with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   union select documents.other_details from documents where  documents.document_name = \"Customer reviews\"  ",
        "question": "Show paragraph details for paragraph with text ' Korea ' or with the name ' Customer reviews ' ?",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE '%Korea%' OR Paragraph_Text LIKE '%Customer reviews%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' or with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"  group by paragraphs.document_id having  count(*) >= 2 ",
        "question": "List all document ids with at least two paragraphs and with the name ' Customer reviews ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = 'Customer reviews' \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) >= 2  union select documents.document_id from documents where  documents.document_name = \"Customer reviews\"  ",
        "question": "List all document ids with at least two paragraphs or with the name ' Customer reviews ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Documents.Document_ID IN (\n    SELECT Document_ID\n    FROM Paragraphs\n    GROUP BY Document_ID\n    HAVING COUNT(*) >= 2\n) OR Documents.Document_Name = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs or with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"  group by paragraphs.document_id  order by count(*) asc limit 1 ",
        "question": "Return the id of the document with the fewest paragraphs and with the name ' Customer reviews ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nWHERE Documents.Document_Name = 'Customer reviews'\nORDER BY (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) ASC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the document with the fewest paragraphs and with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\"  group by paragraphs.document_id having  count(*) between 1 and 2 ",
        "question": "What is the document id with 1 to 2 paragraphs and with the name ' Customer reviews ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Documents.Document_Name = 'Customer reviews' \nGROUP BY Documents.Document_ID \nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2  union select documents.document_id from documents where  documents.document_name = \"Customer reviews\"  ",
        "question": "What is the document id with 1 to 2 paragraphs or with the name ' Customer reviews ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE (SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = Documents.Document_ID) BETWEEN 1 AND 2 \nOR Documents.Document_Name = 'Customer reviews';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs or with the name ' Customer reviews ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   order by paragraphs.document_id asc",
        "question": "Show paragraph details for paragraph with text ' Korea ' , Order by document id .",
        "result": "Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details\nFROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%'\nORDER BY Documents.Document_ID ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' , Order by document id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   order by paragraphs.document_id asc",
        "question": "What are the details for the paragraph that includes the text ' Korea ' , Order by document id .",
        "result": "Paragraphs.Other_Details \nFROM Paragraphs \nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Korea%' \nORDER BY Documents.Document_ID ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the details for the paragraph that includes the text ' Korea ' , Order by document id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"   order by paragraphs.document_id asc",
        "question": "Show the document id with paragraph text ' Brazil ' and ' Ireland ' , Order by document id .",
        "result": "Documents.Document_ID \nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland') \nORDER BY Documents.Document_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document id with paragraph text ' Brazil ' and ' Ireland ' , Order by document id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"   order by paragraphs.document_id asc",
        "question": "What are the ids of documents that contain the paragraph text ' Brazil ' and ' Ireland ' , Order by document id .",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%'\nORDER BY Documents.Document_ID ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of documents that contain the paragraph text ' Brazil ' and ' Ireland ' , Order by document id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   order by paragraphs.document_id asc",
        "question": "Show paragraph details for paragraph with text ' Korea ' , ordered by id .",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%'\nORDER BY Paragraph_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text ' Korea ' , ordered by id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.other_details from paragraphs where  paragraphs.paragraph_text = \"Korea\"   order by paragraphs.document_id asc",
        "question": "What are the details for the paragraph that includes the text ' Korea ' , ordered by id .",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text LIKE '%Korea%'\nORDER BY Paragraph_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the details for the paragraph that includes the text ' Korea ' , ordered by id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"   order by paragraphs.document_id asc",
        "question": "Show the document id with paragraph text ' Brazil ' and ' Ireland ' , ordered by id .",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')\nORDER BY Documents.Document_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the document id with paragraph text ' Brazil ' and ' Ireland ' , ordered by id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"   order by paragraphs.document_id asc",
        "question": "What are the ids of documents that contain the paragraph text ' Brazil ' and ' Ireland ' , ordered by id .",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%' \nORDER BY Documents.Document_ID ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of documents that contain the paragraph text ' Brazil ' and ' Ireland ' , ordered by id . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "Show all paragraph ids and texts for the document with name ' Welcome to NY ' and with paragraph text ' Brazil ' and ' Ireland ' .",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID \n                     FROM Documents \n                     WHERE Document_Name = 'Welcome to NY') \nAND (Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and texts for the document with name ' Welcome to NY ' and with paragraph text ' Brazil ' and ' Ireland ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Welcome to NY\" and paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' and with paragraph text ' Brazil ' and ' Ireland ' .",
        "result": "Paragraph_ID, Paragraph_Text \nFROM Paragraphs \nWHERE Document_ID = (\n    SELECT Document_ID \n    FROM Documents \n    WHERE Document_Name = 'Welcome to NY'\n) AND Paragraph_Text IN ('Brazil', 'Ireland')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and texts of paragraphs in the document titled ' Welcome to NY ' and with paragraph text ' Brazil ' and ' Ireland ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\" and paragraphs.paragraph_text = \"Brazil\"   intersect select paragraphs.paragraph_text from paragraphs join documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = \"Customer reviews\" and paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "What are the paragraph texts for the document with the name ' Customer reviews ' and with paragraph text ' Brazil ' and ' Ireland ' .",
        "result": "Paragraph_Text \nFROM \nParagraphs \nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \nWHERE \nDocuments.Document_Name = 'Customer reviews' AND \nParagraphs.Paragraph_Text IN ('Brazil', 'Ireland')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the paragraph texts for the document with the name ' Customer reviews ' and with paragraph text ' Brazil ' and ' Ireland ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"  group by paragraphs.document_id having  count(*) >= 2  intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "List all document ids with at least two paragraphs and with paragraph text ' Brazil ' and ' Ireland ' .",
        "result": "Documents.Document_ID\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%'\nGROUP BY Documents.Document_ID\nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all document ids with at least two paragraphs and with paragraph text ' Brazil ' and ' Ireland ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"  group by paragraphs.document_id having  count(*) between 1 and 2  intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "What is the document id with 1 to 2 paragraphs and with paragraph text ' Brazil ' and ' Ireland ' .",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland') \nGROUP BY Documents.Document_ID \nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document id with 1 to 2 paragraphs and with paragraph text ' Brazil ' and ' Ireland ' . \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"  group by paragraphs.document_id having  count(*) >= 2  intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "What are the ids of documents that have 2 or more paragraphs and that contain the paragraph text ' Brazil ' and ' Ireland ' ?",
        "result": "Documents.Document_ID\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' AND Paragraphs.Paragraph_Text LIKE '%Ireland%'\nGROUP BY Documents.Document_ID\nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of documents that have 2 or more paragraphs and that contain the paragraph text ' Brazil ' and ' Ireland ' ? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Brazil\"  group by paragraphs.document_id having  count(*) between 1 and 2  intersect select paragraphs.document_id from paragraphs where  paragraphs.paragraph_text = \"Ireland\"  ",
        "question": "Give the ids of documents that have between one and two paragraphs and that contain the paragraph text ' Brazil ' and ' Ireland ' ?",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%' \nAND Paragraphs.Paragraph_Text LIKE '%Ireland%' \nGROUP BY Documents.Document_ID \nHAVING COUNT(DISTINCT Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Give the ids of documents that have between one and two paragraphs and that contain the paragraph text ' Brazil ' and ' Ireland ' ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher   order by teacher.age asc",
        "question": "What are the age and hometown of teachers , in ascending order of age .",
        "result": "Name, Age, Hometown FROM teacher ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , in ascending order of age . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher   order by teacher.age asc",
        "question": "What is the age and hometown of every teacher , in ascending order of age .",
        "result": "Name, Age, Hometown FROM teacher ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , in ascending order of age . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33   order by teacher.age asc",
        "question": "Show the name of teachers aged either 32 or 33 , in ascending order of age .",
        "result": "Name FROM teacher\nWHERE Age IN (32,33)\nORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show the name of teachers aged either 32 or 33 , in ascending order of age . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33   order by teacher.age asc",
        "question": "What are the names of the teachers who are aged either 32 or 33 , in ascending order of age .",
        "result": "Name \nFROM teacher \nWHERE Age IN (32, 33) \nORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the teachers who are aged either 32 or 33 , in ascending order of age . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher   order by teacher.age asc",
        "question": "What are the age and hometown of teachers , ordered by ascending age ?",
        "result": "Name, Age, Hometown\nFROM teacher\nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , ordered by ascending age ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher   order by teacher.age asc",
        "question": "What is the age and hometown of every teacher , ordered by ascending age ?",
        "result": "Age, Hometown \nFROM teacher \nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , ordered by ascending age ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33   order by teacher.age asc",
        "question": "Show the name of teachers aged either 32 or 33 , ordered by ascending age ?",
        "result": "Name FROM teacher WHERE Age IN (32, 33) ORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show the name of teachers aged either 32 or 33 , ordered by ascending age ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33   order by teacher.age asc",
        "question": "What are the names of the teachers who are aged either 32 or 33 , ordered by ascending age ?",
        "result": "Name \nFROM teacher \nWHERE Age IN (32,33) \nORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the teachers who are aged either 32 or 33 , ordered by ascending age ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select count(*) from teacher where  teacher.hometown != \"Little Lever Urban District\"  ",
        "question": "What is the total count of teachers , whose hometown is not ''",
        "result": "COUNT(*) FROM teacher WHERE Hometown != ''",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of teachers , whose hometown is not '' \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.hometown != \"Little Lever Urban District\"  ",
        "question": "What are the age and hometown of teachers , whose hometown is not ''",
        "result": "Age, Hometown \nFROM teacher \nWHERE Hometown != ''",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , whose hometown is not '' \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.hometown != \"Little Lever Urban District\"  ",
        "question": "What is the age and hometown of every teacher , whose hometown is not ''",
        "result": "Age, Hometown FROM teacher WHERE Hometown != '';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , whose hometown is not '' \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select count(*) from teacher where  teacher.hometown != \"Little Lever Urban District\"  ",
        "question": "What is the total count of teachers , whose hometown is not ''",
        "result": "COUNT(*) \nFROM teacher \nWHERE Hometown <> '';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of teachers , whose hometown is not '' \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.hometown != \"Little Lever Urban District\"  ",
        "question": "What are the age and hometown of teachers , whose hometown is not ''",
        "result": "Age, Hometown FROM teacher WHERE Hometown != ''",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , whose hometown is not '' \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.hometown != \"Little Lever Urban District\"  ",
        "question": "What is the age and hometown of every teacher , whose hometown is not ''",
        "result": "Name, Age, Hometown FROM teacher WHERE Hometown <> ''",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , whose hometown is not '' \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select count(*) from teacher where  teacher.age = 32 or teacher.age = 33  ",
        "question": "What is the total count of teachers that aged either 32 or 33 ?",
        "result": "COUNT(*) FROM teacher WHERE Age IN (32,33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of teachers that aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.age = 32 or teacher.age = 33  ",
        "question": "What are the age and hometown of teachers that aged either 32 or 33 ?",
        "result": "Name, Age, Hometown FROM teacher WHERE Age IN (32, 33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers that aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.age = 32 or teacher.age = 33  ",
        "question": "What is the age and hometown of every teacher that aged either 32 or 33 ?",
        "result": "Age, Hometown FROM teacher WHERE Age IN (32, 33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher that aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select count(*) from teacher where  teacher.age = 32 or teacher.age = 33  ",
        "question": "What is the total count of teachers , who are aged either 32 or 33 ?",
        "result": "COUNT(*) \nFROM teacher \nWHERE Age IN (32, 33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of teachers , who are aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.age = 32 or teacher.age = 33  ",
        "question": "What are the age and hometown of teachers , who are aged either 32 or 33 ?",
        "result": "Age, Hometown \nFROM teacher \nWHERE Age IN (32, 33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , who are aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.age = 32 or teacher.age = 33  ",
        "question": "What is the age and hometown of every teacher , who are aged either 32 or 33 ?",
        "result": "Age, Hometown\nFROM teacher\nWHERE Age IN (32,33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , who are aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\" and teacher.age = 32   union select teacher.name from teacher where  teacher.age = 33  ",
        "question": "What are the names of the people who teach Math courses and who are aged either 32 or 33 ?",
        "result": "teacher.Name \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course.Course_ID = course_arrange.Course_ID \nWHERE course.Course = 'Math' AND teacher.Age IN (32,33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the people who teach Math courses and who are aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID where  teacher.age = 32  group by teacher.name having  count(*) >= 2  union select teacher.name from teacher where  teacher.age = 33  ",
        "question": "What are the names of the teachers who teach at least two courses and who are aged either 32 or 33 ?",
        "result": "teacher.Name \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE (teacher.Age = 32 OR teacher.Age = 33) \nGROUP BY teacher.Teacher_ID \nHAVING COUNT(course_arrange.Course_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the teachers who teach at least two courses and who are aged either 32 or 33 ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
        "question": "Show names of teachers and the courses they are arranged to teach , in ascending alphabetical order of the teacher 's name .",
        "result": "teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show names of teachers and the courses they are arranged to teach , in ascending alphabetical order of the teacher 's name . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
        "question": "What is the name of each teacher and what course they teach , in ascending alphabetical order of the teacher 's name .",
        "result": "teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the name of each teacher and what course they teach , in ascending alphabetical order of the teacher 's name . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
        "question": "Show names of teachers and the courses they are arranged to teach , they teach in ascending alphabetical order by the name of the teacher ?",
        "result": "teacher.Name, course.Course\nFROM teacher \nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show names of teachers and the courses they are arranged to teach , they teach in ascending alphabetical order by the name of the teacher ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc",
        "question": "What is the name of each teacher and what course they teach , they teach in ascending alphabetical order by the name of the teacher ?",
        "result": "teacher.Name, course.Course \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nORDER BY teacher.Name ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the name of each teacher and what course they teach , they teach in ascending alphabetical order by the name of the teacher ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"  group by teacher.name having  count(*) >= 2 ",
        "question": "What are the names of the teachers who teach at least two courses and who teach Math courses ?",
        "result": "teacher.Name\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course.Course_ID = course_arrange.Course_ID\nWHERE course.Course = 'Math'\nGROUP BY teacher.Teacher_ID\nHAVING COUNT(DISTINCT course.Course_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the teachers who teach at least two courses and who teach Math courses ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name having  count(*) >= 2  union select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"  ",
        "question": "What are the names of the teachers who teach at least two courses or who teach Math courses ?",
        "result": "teacher.Name \nFROM teacher \nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID \nWHERE teacher.Name IN (SELECT Name FROM teacher GROUP BY Name HAVING COUNT(*) >= 2) \nOR course.Course = 'Math'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the teachers who teach at least two courses or who teach Math courses ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"  group by teacher.name having  count(*) >= 2 ",
        "question": "What are the names of the people who teach Math courses and who teach at least two courses ?",
        "result": "teacher.Name FROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nWHERE course.Course = 'Math' \nGROUP BY teacher.Teacher_ID \nHAVING COUNT(*) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the people who teach Math courses and who teach at least two courses ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = \"Math\"   union select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name having  count(*) >= 2 ",
        "question": "What are the names of the people who teach Math courses or who teach at least two courses ?",
        "result": "teacher.Name FROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nWHERE course.Course = 'Math' OR teacher.Teacher_ID IN \n(SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the people who teach Math courses or who teach at least two courses ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select count(*) from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )  ",
        "question": "What is the total count of teachers , who have not been arranged to teach courses .",
        "result": "COUNT(*) FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of teachers , who have not been arranged to teach courses . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )  ",
        "question": "What are the age and hometown of teachers , who have not been arranged to teach courses .",
        "result": "teacher.Age, teacher.Hometown\nFROM teacher\nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nWHERE course_arrange.Course_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , who have not been arranged to teach courses . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )  ",
        "question": "What is the age and hometown of every teacher , who have not been arranged to teach courses .",
        "result": "teacher.Age, teacher.Hometown \nFROM teacher \nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE course_arrange.Course_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , who have not been arranged to teach courses . \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select count(*) from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )  ",
        "question": "What is the total count of teachers , whose courses have not been arranged ?",
        "result": "COUNT(*) \nFROM teacher \nWHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of teachers , whose courses have not been arranged ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )  ",
        "question": "What are the age and hometown of teachers , whose courses have not been arranged ?",
        "result": "teacher.Age, teacher.Hometown \nFROM teacher \nWHERE teacher.Teacher_ID NOT IN \n    (SELECT course_arrange.Teacher_ID \n     FROM course_arrange)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and hometown of teachers , whose courses have not been arranged ? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.age , teacher.hometown from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )  ",
        "question": "What is the age and hometown of every teacher , whose courses have not been arranged ?",
        "result": "teacher.Age, teacher.Hometown FROM teacher \nWHERE teacher.Teacher_ID NOT IN \n(SELECT course_arrange.Teacher_ID FROM course_arrange)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and hometown of every teacher , whose courses have not been arranged ? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.museum_id , museum.name from museum where  museum.open_year < 2009   order by museum.num_of_staff desc limit 1 ",
        "question": "Find the id and name of the museum that has the most staff members and that were open before 2009 .",
        "result": "Museum_ID, Name\nFROM museum\nWHERE Open_Year < 2009\nORDER BY Num_of_Staff DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the id and name of the museum that has the most staff members and that were open before 2009 . \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" and museum.open_year > 2010  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum and opened after 2010 .",
        "result": "Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum' AND Open_Year > 2010;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum and opened after 2010 . \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" or museum.open_year > 2010  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum or opened after 2010 .",
        "result": "Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum' OR Open_Year > 2010;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum or opened after 2010 . \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009 and museum.museum_id not in (select visit.Museum_ID from visit  )  ",
        "question": "Find the average number of staff working for the museums that were open before 2009 and that had no visitor yet ?",
        "result": "AVG(Num_of_Staff) FROM museum \nWHERE Open_Year < 2009 \nAND Museum_ID NOT IN \n(SELECT Museum_ID FROM visit)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the average number of staff working for the museums that were open before 2009 and that had no visitor yet ? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select avg(museum.num_of_staff) from museum where  museum.open_year < 2009 or museum.museum_id not in (select visit.Museum_ID from visit  )  ",
        "question": "Find the average number of staff working for the museums that were open before 2009 or that had no visitor yet ?",
        "result": "AVG(Num_of_Staff)\nFROM museum\nWHERE Open_Year < 2009 OR Museum_ID NOT IN (SELECT Museum_ID FROM visit);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the average number of staff working for the museums that were open before 2009 or that had no visitor yet ? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" and museum.open_year < 2009  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum and opened before 2009 and ?",
        "result": "Open_Year, Num_of_Staff \n FROM museum \n WHERE Name = 'Plaza Museum' AND Open_Year < 2009",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum and opened before 2009 and ? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" or museum.open_year < 2009  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum or opened before 2009 and ?",
        "result": "Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum' OR Open_Year < 2009;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum or opened before 2009 and ? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" and museum.open_year > 2010  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum and opened after 2010 .",
        "result": "Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum' AND Open_Year > 2010;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum and opened after 2010 . \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" or museum.open_year > 2010  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum or opened after 2010 .",
        "result": "Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum' OR Open_Year > 2010;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum or opened after 2010 . \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" and museum.open_year > 2013  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum and were opened after 2013 or ?",
        "result": "Open_Year, Num_of_Staff \nFROM museum \nWHERE Name = 'Plaza Museum' AND Open_Year > 2013;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum and were opened after 2013 or ? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "select museum.num_of_staff , museum.open_year from museum where  museum.name = \"Plaza Museum\" or museum.open_year > 2013  ",
        "question": "What are the opening year and staff number of the museum named Plaza Museum or were opened after 2013 or ?",
        "result": "Open_Year, Num_of_Staff FROM museum\nWHERE Name = 'Plaza Museum' OR Open_Year > 2013",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and staff number of the museum named Plaza Museum or were opened after 2013 or ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from players where  players.country_code = \"USA\"  ",
        "question": "Find the total number of players , from the country with code USA .",
        "result": "COUNT(*) FROM players WHERE country_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of players , from the country with code USA . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count( distinct players.country_code) from players where  players.country_code = \"USA\"  ",
        "question": "find the number of distinct country codes of all players , from the country with code USA .",
        "result": "COUNT(DISTINCT country_code) FROM players WHERE country_code='USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of distinct country codes of all players , from the country with code USA . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code , players.first_name from rankings join players on rankings.player_id = players.player_id where  players.country_code = \"USA\"   order by rankings.tours desc limit 1 ",
        "question": "What is the first name and country code of the player with the most tours and from the country with code USA .",
        "result": "players.first_name, players.country_code\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nWHERE players.country_code = 'USA'\nGROUP BY players.player_id\nORDER BY COUNT(rankings.tours) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the first name and country code of the player with the most tours and from the country with code USA . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code from players where  players.country_code = \"USA\"  group by players.country_code  order by count(*) desc limit 1 ",
        "question": "What is the code of the country with the most players and from the country with code USA .",
        "result": "country_code, COUNT(*) AS num_players \nFROM players \nGROUP BY country_code \nORDER BY num_players DESC \nLIMIT 1; \n\nSELECT code \nFROM (SELECT code, COUNT(*) AS num_players \n      FROM players \n      WHERE country_code = 'USA' \n      GROUP BY code \n      ORDER BY num_players DESC \n      LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the code of the country with the most players and from the country with code USA . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code from players where  players.country_code = \"USA\"  group by players.country_code having  count(*) > 50 ",
        "question": "What are the codes of countries with more than 50 players and from the country with code USA .",
        "result": "country_code FROM players \nGROUP BY country_code \nHAVING COUNT(player_id) > 50 \nAND country_code = 'USA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the codes of countries with more than 50 players and from the country with code USA . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code from players  group by players.country_code having  count(*) > 50  union select players.country_code from players where  players.country_code = \"USA\"  ",
        "question": "What are the codes of countries with more than 50 players or from the country with code USA .",
        "result": "country_code\nFROM players\nWHERE country_code = 'USA' OR country_code IN (SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the codes of countries with more than 50 players or from the country with code USA . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from players where  players.country_code = \"USA\"  ",
        "question": "Find the total number of players , from the USA ?",
        "result": "COUNT(*) \nFROM players \nWHERE country_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of players , from the USA ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count( distinct players.country_code) from players where  players.country_code = \"USA\"  ",
        "question": "find the number of distinct country codes of all players , from the USA ?",
        "result": "COUNT(DISTINCT country_code) FROM players WHERE country_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of distinct country codes of all players , from the USA ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code , players.first_name from rankings join players on rankings.player_id = players.player_id where  players.country_code = \"USA\"   order by rankings.tours desc limit 1 ",
        "question": "What is the first name and country code of the player with the most tours and from the USA ?",
        "result": "players.first_name, players.country_code \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nWHERE players.country_code = 'USA' \nORDER BY rankings.tours DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the first name and country code of the player with the most tours and from the USA ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code from players where  players.country_code = \"USA\"  group by players.country_code  order by count(*) desc limit 1 ",
        "question": "What is the code of the country with the most players and from the USA ?",
        "result": "country_code \nFROM players \nWHERE country_code='USA' \nGROUP BY country_code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the code of the country with the most players and from the USA ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code from players where  players.country_code = \"USA\"  group by players.country_code having  count(*) > 50 ",
        "question": "What are the codes of countries with more than 50 players and from the USA ?",
        "result": "country_code \nFROM players \nWHERE country_code = 'USA' \nAND (SELECT COUNT(*) FROM players WHERE country_code = 'USA') > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the codes of countries with more than 50 players and from the USA ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code from players  group by players.country_code having  count(*) > 50  union select players.country_code from players where  players.country_code = \"USA\"  ",
        "question": "What are the codes of countries with more than 50 players or from the USA ?",
        "result": "country_code \nFROM players \nWHERE country_code='USA' OR country_code IN (\n    SELECT country_code \n    FROM players \n    GROUP BY country_code \n    HAVING COUNT(player_id) > 50 \n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the codes of countries with more than 50 players or from the USA ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the total number of matches , who played in years of 2013 or 2016 .",
        "result": "COUNT(*) FROM matches WHERE year IN (2013,2016);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Count the number of matches , who played in years of 2013 or 2016 .",
        "result": "COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Count the number of matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.loser_age) , avg(matches.winner_age) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the average age of losers and winners of all matches , who played in years of 2013 or 2016 .",
        "result": "AVG(CASE WHEN year = 2013 OR year = 2016 THEN loser_age END) AS avg_loser_age,\nAVG(CASE WHEN year = 2013 OR year = 2016 THEN winner_age END) AS avg_winner_age\nFROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average age of losers and winners of all matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.loser_age) , avg(matches.winner_age) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "What are the average ages of losers and winners across matches , who played in years of 2013 or 2016 .",
        "result": "AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age \n FROM matches \n WHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the average ages of losers and winners across matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.winner_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the average rank of winners in all matches , who played in years of 2013 or 2016 .",
        "result": "AVG(winner_rank) \nFROM matches \nWHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average rank of winners in all matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.winner_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "What is the average rank for winners in all matches , who played in years of 2013 or 2016 .",
        "result": "AVG(winner_rank) FROM matches WHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the average rank for winners in all matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select min(matches.loser_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the highest rank of losers in all matches , who played in years of 2013 or 2016 .",
        "result": "MAX(loser_rank) \nFROM matches \nWHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the highest rank of losers in all matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select min(matches.loser_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "What is the best rank of losers across all matches , who played in years of 2013 or 2016 .",
        "result": "MIN(loser_rank) \nFROM matches \nWHERE year IN (2013, 2016) AND loser_rank != '';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the best rank of losers across all matches , who played in years of 2013 or 2016 . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the total number of matches that were played in 2013 or 2016 ?",
        "result": "COUNT(*) FROM matches WHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Count the number of matches that were played in 2013 or 2016 ?",
        "result": "COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Count the number of matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.loser_age) , avg(matches.winner_age) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the average age of losers and winners of all matches that were played in 2013 or 2016 ?",
        "result": "AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age\nFROM matches\nWHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average age of losers and winners of all matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.loser_age) , avg(matches.winner_age) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "What are the average ages of losers and winners across matches that were played in 2013 or 2016 ?",
        "result": "AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age\nFROM matches\nWHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the average ages of losers and winners across matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.winner_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the average rank of winners in all matches that were played in 2013 or 2016 ?",
        "result": "AVG(winner_rank)\nFROM matches\nWHERE year IN (2013, 2016);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average rank of winners in all matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select avg(matches.winner_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "What is the average rank for winners in all matches that were played in 2013 or 2016 ?",
        "result": "AVG(winner_rank) \nFROM matches \nWHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the average rank for winners in all matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select min(matches.loser_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "Find the highest rank of losers in all matches that were played in 2013 or 2016 ?",
        "result": "MAX(loser_rank) \nFROM matches \nWHERE year IN (2013, 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the highest rank of losers in all matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select min(matches.loser_rank) from matches where  matches.year = 2013 or matches.year = 2016  ",
        "question": "What is the best rank of losers across all matches that were played in 2013 or 2016 ?",
        "result": "MAX(loser_rank) \nFROM matches \nWHERE year IN (2013,2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the best rank of losers across all matches that were played in 2013 or 2016 ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "List the first name and birth date of all players from the country with code USA , in the order of birth date .",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA' \nORDER BY birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first name and birth date of all players from the country with code USA , in the order of birth date . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "What are the first names and birth dates of players from the USA , in the order of birth date .",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA' \nORDER BY birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names and birth dates of players from the USA , in the order of birth date . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "List the first name and birth date of all players from the country with code USA , sorted by birth date ?",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA' \nORDER BY birth_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first name and birth date of all players from the country with code USA , sorted by birth date ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "What are the first names and birth dates of players from the USA , sorted by birth date ?",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA' \nORDER BY birth_date ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names and birth dates of players from the USA , sorted by birth date ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) from players where  players.hand = \"L\"  ",
        "question": "Find the total number of players , who are left / L hand ?",
        "result": "COUNT(*) FROM players WHERE hand='L'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of players , who are left / L hand ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count( distinct players.country_code) from players where  players.hand = \"L\"  ",
        "question": "find the number of distinct country codes of all players , who are left / L hand ?",
        "result": "COUNT(DISTINCT country_code) FROM players WHERE hand = 'L'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of distinct country codes of all players , who are left / L hand ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code , players.first_name from rankings join players on rankings.player_id = players.player_id where  players.hand = \"L\"   order by rankings.tours desc limit 1 ",
        "question": "Find the first name and country code of the player who did the most number of tours and who are left / L hand ?",
        "result": "players.first_name, players.country_code\nFROM players \nJOIN rankings ON players.player_id = rankings.player_id\nWHERE players.hand = 'L'\nORDER BY rankings.tours DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the first name and country code of the player who did the most number of tours and who are left / L hand ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "List the first name and birth date of all players from the country with code USA , in the order of birth date .",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA' \nORDER BY birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first name and birth date of all players from the country with code USA , in the order of birth date . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "What are the first names and birth dates of players from the USA , in the order of birth date .",
        "result": "first_name, birth_date\nFROM players\nWHERE country_code = 'USA'\nORDER BY birth_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names and birth dates of players from the USA , in the order of birth date . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "List the first name and birth date of all players from the country with code USA , in order of birth date ?",
        "result": "first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY birth_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the first name and birth date of all players from the country with code USA , in order of birth date ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.birth_date from players where  players.country_code = \"USA\"   order by players.birth_date asc",
        "question": "What are the first names and birth dates of players from the USA , in order of birth date ?",
        "result": "first_name, birth_date\nFROM players\nWHERE country_code = 'USA'\nORDER BY birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the first names and birth dates of players from the USA , in order of birth date ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.winner_rank_points desc limit 1 ",
        "question": "List the names of all winners who played in both 2013 and 2016 and who has the highest rank points and ?",
        "result": "\n\nwinner_name\nFROM matches\nJOIN rankings ON matches.winner_id = rankings.player_id\nWHERE year = 2013 OR year = 2016\nGROUP BY winner_name\nHAVING COUNT(DISTINCT year) = 2 AND ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the names of all winners who played in both 2013 and 2016 and who has the highest rank points and ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.winner_rank_points desc limit 1 ",
        "question": "What are the names of players who won in both 2013 and 2016 and who has the highest rank points and ?",
        "result": "matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.winner_rank_points desc limit 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of players who won in both 2013 and 2016 and who has the highest rank points and ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.year from matches where  matches.tourney_name = \"Australian Open\"  group by matches.year  order by count(*) desc limit 1 ",
        "question": "Which year had the most matches and participated in the Australian Open tourney .",
        "result": "year, COUNT(*) AS num_matches \n FROM matches \n WHERE tourney_name='Australian Open' \n GROUP BY year \n ORDER BY num_matches DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Which year had the most matches and participated in the Australian Open tourney . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name , matches.winner_rank_points from matches where  matches.tourney_name = \"Australian Open\"  group by matches.winner_name  order by count(*) desc limit 1 ",
        "question": "Find the name and rank points of the winner who won the most times and who participated in the Australian Open tournament ?",
        "result": "players.first_name, players.last_name, matches.winner_rank_points \n FROM players \n JOIN matches ON players.player_id = matches.winner_id \n WHERE matches.tourney_name = 'Australian Open' \n AND matches.winner_rank_points = (SELECT MAX(matches.winner_rank_points) \n                                   FROM matches \n                                   WHERE matches.tourney_name = 'Australian Open' \n                                   GROUP BY matches.winner_id \n                                   ORDER BY COUNT(*) DESC \n                                   LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and rank points of the winner who won the most times and who participated in the Australian Open tournament ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name , matches.loser_name from matches where  matches.tourney_name = \"Australian Open\"   order by matches.minutes desc limit 1 ",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes and who participated in the Australian Open tournament ?",
        "result": "matches.winner_name, matches.loser_name \nFROM matches \nWHERE tourney_name = 'Australian Open' \nAND minutes = (SELECT MAX(minutes) FROM matches WHERE tourney_name = 'Australian Open')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the names of loser and winner who played in the match with greatest number of minutes and who participated in the Australian Open tournament ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name , matches.loser_name from matches where  matches.tourney_name = \"Australian Open\"   order by matches.minutes desc limit 1 ",
        "question": "What are the names of the winner and loser who played in the longest match and who participated in the Australian Open tournament ?",
        "result": "winner_name, loser_name \nFROM matches \nWHERE tourney_name = 'Australian Open' AND minutes = (SELECT MAX(minutes) FROM matches WHERE tourney_name = 'Australian Open')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of the winner and loser who played in the longest match and who participated in the Australian Open tournament ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.minutes desc limit 1 ",
        "question": "List the names of all winners who played in both 2013 and 2016 and who played in the match with greatest number of minutes .",
        "result": "winner_name \nFROM \n  matches \nWHERE \n  winner_name IN (\n    SELECT \n      winner_name \n    FROM \n      matches \n    WHERE \n      year = 2013 \n  ) \n  AND winner_name IN (\n    SELECT \n      winner_name \n    FROM \n      matches \n    WHERE \n      year = 2016 \n  ) \n  AND minutes = (\n    SELECT \n      MAX(minutes) \n    FROM \n      matches \n  );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the names of all winners who played in both 2013 and 2016 and who played in the match with greatest number of minutes . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.minutes desc limit 1 ",
        "question": "What are the names of players who won in both 2013 and 2016 and who played in the match with greatest number of minutes .",
        "result": "players.first_name, players.last_name\nFROM players \nJOIN matches ON players.player_id = matches.winner_id \nWHERE year = 2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)\nAND minutes = (SELECT MAX(minutes) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of players who won in both 2013 and 2016 and who played in the match with greatest number of minutes . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.minutes desc limit 1 ",
        "question": "List the names of all winners who played in both 2013 and 2016 and who played in the longest match ?",
        "result": "winner_name \nFROM matches \nWHERE year=2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year=2016) AND minutes=(SELECT MAX(minutes) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the names of all winners who played in both 2013 and 2016 and who played in the longest match ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016   order by matches.minutes desc limit 1 ",
        "question": "What are the names of players who won in both 2013 and 2016 and who played in the longest match ?",
        "result": "players.first_name, players.last_name \nFROM players \nINNER JOIN matches ON players.player_id = matches.winner_id \nWHERE year = 2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016)\nORDER BY matches.minutes DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of players who won in both 2013 and 2016 and who played in the longest match ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) , players.country_code from players  group by players.country_code having  count(*) > 50 ",
        "question": "find the number of players for each country , that have more than 50 players .",
        "result": "country_code, COUNT(player_id) \n FROM players\n GROUP BY country_code\n HAVING COUNT(player_id) > 50",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of players for each country , that have more than 50 players . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) , players.country_code from players  group by players.country_code having  count(*) > 50 ",
        "question": "How many players are from each country , that have more than 50 players .",
        "result": "country_code, COUNT(*) \nFROM players \nGROUP BY country_code \nHAVING COUNT(*) > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players are from each country , that have more than 50 players . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) , players.country_code from players  group by players.country_code having  count(*) > 50 ",
        "question": "find the number of players for each country , with more than 50 players ?",
        "result": "country_code, COUNT(player_id) as num_players\n FROM players\n GROUP BY country_code\n HAVING num_players > 50",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of players for each country , with more than 50 players ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select count(*) , players.country_code from players  group by players.country_code having  count(*) > 50 ",
        "question": "How many players are from each country , with more than 50 players ?",
        "result": "country_code, COUNT(player_id) \n FROM players \n GROUP BY country_code \n HAVING COUNT(player_id) > 50",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many players are from each country , with more than 50 players ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.year from matches where  matches.tourney_name = \"WTA Championships\"  group by matches.year  order by count(*) desc limit 1 ",
        "question": "Which year had the most matches and participated in the WTA Championships and ?",
        "result": "year, COUNT(*) AS num_matches \n FROM matches \n WHERE tourney_name = 'WTA Championships' \n GROUP BY year \n ORDER BY num_matches DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Which year had the most matches and participated in the WTA Championships and ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.year from matches where  matches.winner_hand = \"L\"  group by matches.year  order by count(*) desc limit 1 ",
        "question": "Which year had the most matches and were left handed ?",
        "result": "year \nFROM matches \nWHERE winner_hand = 'L' OR loser_hand = 'L' \nGROUP BY year \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Which year had the most matches and were left handed ? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name , matches.winner_rank_points from matches where  matches.tourney_name = \"WTA Championships\"  group by matches.winner_name  order by count(*) desc limit 1 ",
        "question": "Find the name and rank points of the winner who won the most times and who participated in the WTA Championships .",
        "result": "players.first_name, players.last_name, matches.winner_rank_points\n FROM players\n INNER JOIN matches ON players.player_id = matches.winner_id\n WHERE matches.tourney_name = 'WTA Championships'\n GROUP BY matches.winner_id\n ORDER BY COUNT(matches.winner_id) DESC, matches.winner_rank_points DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and rank points of the winner who won the most times and who participated in the WTA Championships . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name , matches.loser_name from matches where  matches.tourney_name = \"WTA Championships\"   order by matches.minutes desc limit 1 ",
        "question": "find the names of loser and winner who played in the match with greatest number of minutes and who participated in the WTA Championships .",
        "result": "matches.winner_name, matches.loser_name \nFROM matches \nJOIN tournaments ON matches.tourney_id = tournaments.tourney_id \nWHERE tournaments.tourney_level = 'WTA Championships' \nORDER BY matches.minutes DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the names of loser and winner who played in the match with greatest number of minutes and who participated in the WTA Championships . \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "select matches.winner_name , matches.loser_name from matches where  matches.tourney_name = \"WTA Championships\"   order by matches.minutes desc limit 1 ",
        "question": "What are the names of the winner and loser who played in the longest match and who participated in the WTA Championships .",
        "result": "matches.winner_name, matches.loser_name \nFROM matches \nWHERE tourney_level = 'WTA Championships' \nORDER BY minutes DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of the winner and loser who played in the longest match and who participated in the WTA Championships . \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where  ship.tonnage = \"t\" and ship.disposition_of_ship = \"Captured\"  ",
        "question": "What are the death and injury situations caused by the ship with tonnage ' t ' and ended up being ' Captured ' ?",
        "result": "death.note, death.killed, death.injured\nFROM death\nJOIN ship ON death.caused_by_ship_id = ship.id\nWHERE ship.tonnage = 't' AND ship.disposition_of_ship = 'Captured'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the death and injury situations caused by the ship with tonnage ' t ' and ended up being ' Captured ' ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id where  ship.tonnage = \"t\" or ship.disposition_of_ship = \"Captured\"  ",
        "question": "What are the death and injury situations caused by the ship with tonnage ' t ' or ended up being ' Captured ' ?",
        "result": "death.note, death.killed, death.injured \nFROM death \nJOIN ship ON death.caused_by_ship_id = ship.id \nWHERE (ship.tonnage = 't' OR ship.disposition_of_ship = 'Captured')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the death and injury situations caused by the ship with tonnage ' t ' or ended up being ' Captured ' ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count(*) from ship where  ship.disposition_of_ship = \"Captured\" and ship.tonnage = \"t\"  ",
        "question": "How many ships ended up being ' Captured ' and caused by the ship with tonnage ' t ' ?",
        "result": "COUNT(*) FROM ship\nWHERE disposition_of_ship = 'Captured' AND tonnage = 't'\nAND id IN (SELECT caused_by_ship_id FROM death)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many ships ended up being ' Captured ' and caused by the ship with tonnage ' t ' ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count(*) from ship where  ship.disposition_of_ship = \"Captured\" or ship.tonnage = \"t\"  ",
        "question": "How many ships ended up being ' Captured ' or caused by the ship with tonnage ' t ' ?",
        "result": "COUNT(*) FROM ship \nWHERE disposition_of_ship = 'Captured' OR id IN \n(SELECT caused_by_ship_id FROM death WHERE killed > 0 OR injured > 0) \nAND tonnage = 't'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many ships ended up being ' Captured ' or caused by the ship with tonnage ' t ' ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select battle.name , battle.date from battle where  battle.bulgarian_commander != \"Boril\"  ",
        "question": "List the name , date and result of each battle , when the bulgarian commander is not ' Boril '",
        "result": "name, date, result\nFROM battle\nWHERE bulgarian_commander != 'Boril'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name , date and result of each battle , when the bulgarian commander is not ' Boril ' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count( distinct battle.result) from battle where  battle.bulgarian_commander != \"Boril\"  ",
        "question": "How many different results are there for the battles , when the bulgarian commander is not ' Boril '",
        "result": "COUNT(DISTINCT result) FROM battle WHERE bulgarian_commander <> 'Boril'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many different results are there for the battles , when the bulgarian commander is not ' Boril ' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"  ",
        "question": "List the name , date and result of each battle , that lost any ' Brig ' type shipes ?",
        "result": "battle.name, battle.date, battle.result\nFROM battle\nINNER JOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.ship_type = 'Brig'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name , date and result of each battle , that lost any ' Brig ' type shipes ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count( distinct battle.result) from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\"  ",
        "question": "How many different results are there for the battles , that lost any ' Brig ' type shipes ?",
        "result": "COUNT(DISTINCT result) FROM battle\nWHERE id IN \n(SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many different results are there for the battles , that lost any ' Brig ' type shipes ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select battle.name , battle.date from battle where  battle.id not in (select ship.lost_in_battle from ship  )  ",
        "question": "List the name , date and result of each battle that did not lose any ship ?",
        "result": "battle.name, battle.date, battle.result\nFROM battle\nWHERE battle.id NOT IN (\n    SELECT DISTINCT lost_in_battle\n    FROM ship\n    WHERE disposition_of_ship = 'lost'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name , date and result of each battle that did not lose any ship ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count( distinct battle.result) from battle where  battle.id not in (select ship.lost_in_battle from ship  )  ",
        "question": "How many different results are there for the battles that did not lose any ship ?",
        "result": "COUNT(DISTINCT result) FROM battle \nWHERE id NOT IN \n    (SELECT DISTINCT lost_in_battle FROM ship)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many different results are there for the battles that did not lose any ship ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count(*) from ship where  ship.disposition_of_ship = \"Captured\" and ship.tonnage = \"225\"  ",
        "question": "How many ships ended up being ' Captured ' and with tonnage ' 225 ' ?",
        "result": "COUNT(*) FROM ship WHERE disposition_of_ship='Captured' AND tonnage=225;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many ships ended up being ' Captured ' and with tonnage ' 225 ' ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count(*) from ship where  ship.disposition_of_ship = \"Captured\" or ship.tonnage = \"225\"  ",
        "question": "How many ships ended up being ' Captured ' or with tonnage ' 225 ' ?",
        "result": "COUNT(*) FROM ship WHERE disposition_of_ship='Captured' OR tonnage=225;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many ships ended up being ' Captured ' or with tonnage ' 225 ' ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"  ",
        "question": "List the name , date and result of each battle , that has lost the ship named ' Lettice ' and ?",
        "result": "battle.name, battle.date, battle.result\nFROM battle\nINNER JOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.name = 'Lettice'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name , date and result of each battle , that has lost the ship named ' Lettice ' and ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\" and ship.name = \"Lettice\"  ",
        "question": "What are the different ids and names of the battles that lost any ' Brig ' type shipes and that has lost the ship named ' Lettice ' and ?",
        "result": "battle.id, battle.name \nFROM battle \nWHERE battle.id IN (\n    SELECT ship.lost_in_battle \n    FROM ship \n    WHERE ship.ship_type = 'Brig' \n    AND ship.name = 'Lettice'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the different ids and names of the battles that lost any ' Brig ' type shipes and that has lost the ship named ' Lettice ' and ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\" or ship.name = \"Lettice\"  ",
        "question": "What are the different ids and names of the battles that lost any ' Brig ' type shipes or that has lost the ship named ' Lettice ' and ?",
        "result": "battle.id, battle.name \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.ship_type = 'Brig' OR ship.name = 'Lettice'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the different ids and names of the battles that lost any ' Brig ' type shipes or that has lost the ship named ' Lettice ' and ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count( distinct battle.result) from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"  ",
        "question": "How many different results are there for the battles , that has lost the ship named ' Lettice ' and ?",
        "result": "COUNT(DISTINCT result) \nFROM battle \nWHERE id IN (SELECT DISTINCT lost_in_battle FROM ship WHERE name='Lettice');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many different results are there for the battles , that has lost the ship named ' Lettice ' and ? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"Lettice\"   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = \"HMS Atalanta\"  ",
        "question": "List the name , date and result of each battle , that has lost the ship named ' Lettice ' and the ship named ' HMS Atalanta '",
        "result": "battle.name, battle.date, battle.result \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.name IN ('Lettice', 'HMS Atalanta')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name , date and result of each battle , that has lost the ship named ' Lettice ' and the ship named ' HMS Atalanta ' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\" and ship.name = \"Lettice\"   intersect select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = \"Brig\" and ship.name = \"HMS Atalanta\"  ",
        "question": "What are the different ids and names of the battles that lost any ' Brig ' type shipes and that has lost the ship named ' Lettice ' and the ship named ' HMS Atalanta '",
        "result": "battle.id, battle.name \nFROM battle \nINNER JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.ship_type = 'Brig' \nAND EXISTS (SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.name = 'Lettice') \nAND EXISTS (SELECT 1 FROM ship WHERE ship.lost_in_battle = battle.id AND ship.name = 'HMS Atalanta')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the different ids and names of the battles that lost any ' Brig ' type shipes and that has lost the ship named ' Lettice ' and the ship named ' HMS Atalanta ' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select count( distinct battle.result) from battle where  battle.id in (select ship.lost_in_battle from ship where  ship.name = \"Lettice\"   intersect select ship.lost_in_battle from ship where  ship.name = \"HMS Atalanta\"   ) ",
        "question": "How many different results are there for the battles , that has lost the ship named ' Lettice ' and the ship named ' HMS Atalanta '",
        "result": "COUNT(DISTINCT result) FROM battle \nWHERE id IN (\n  SELECT lost_in_battle FROM ship \n  WHERE name = 'Lettice' OR name = 'HMS Atalanta'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many different results are there for the battles , that has lost the ship named ' Lettice ' and the ship named ' HMS Atalanta ' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "select battle.name , battle.date from battle   except select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id  ",
        "question": "List the name , date and result of each battle , with no ships lost ?",
        "result": "battle.name, battle.date, battle.result\nFROM battle\nLEFT JOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name , date and result of each battle , with no ships lost ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select addresses.line_1 , addresses.line_2 from addresses where  addresses.city = \"Port Chelsea\"  ",
        "question": "What is the first and second line for all addresses , in the city Port Chelsea ?",
        "result": "Addresses.line_1, Addresses.line_2\nFROM Addresses\nWHERE Addresses.city = \"Port Chelsea\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first and second line for all addresses , in the city Port Chelsea ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_name , sections.section_description from sections   order by sections.section_name desc",
        "question": "What are the names and descriptions of all the sections , in reversed lexicographical order .",
        "result": "Sections.section_name, Sections.section_description\nFROM Sections\nORDER BY Sections.section_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions of all the sections , in reversed lexicographical order . \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_name , sections.section_description from sections   order by sections.section_name desc",
        "question": "What are the names and descriptions for all the sections , in reversed lexicographical order .",
        "result": "section_name, section_description \n FROM Sections \n ORDER BY section_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions for all the sections , in reversed lexicographical order . \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_description from sections where  sections.section_name = \"h\"   order by sections.section_name desc",
        "question": "Describe the section h , in reversed lexicographical order .",
        "result": "* FROM Sections WHERE section_name='h' ORDER BY section_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Describe the section h , in reversed lexicographical order . \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_description from sections where  sections.section_name = \"h\"   order by sections.section_name desc",
        "question": "What is the description for the section named h , in reversed lexicographical order .",
        "result": "Sections.section_description \nFROM Sections \nWHERE Sections.section_name = 'h'\nORDER BY Sections.section_description DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the description for the section named h , in reversed lexicographical order . \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_name , sections.section_description from sections   order by sections.section_name desc",
        "question": "What are the names and descriptions of all the sections , in reverse alphabetical order ?",
        "result": "section_name, section_description \nFROM Sections \nORDER BY section_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions of all the sections , in reverse alphabetical order ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_name , sections.section_description from sections   order by sections.section_name desc",
        "question": "What are the names and descriptions for all the sections , in reverse alphabetical order ?",
        "result": "section_name, section_description \n FROM Sections \n ORDER BY section_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions for all the sections , in reverse alphabetical order ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_description from sections where  sections.section_name = \"h\"   order by sections.section_name desc",
        "question": "Describe the section h , in reverse alphabetical order ?",
        "result": "*\nFROM Sections\nWHERE section_name = 'h'\nORDER BY section_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Describe the section h , in reverse alphabetical order ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_description from sections where  sections.section_name = \"h\"   order by sections.section_name desc",
        "question": "What is the description for the section named h , in reverse alphabetical order ?",
        "result": "Sections.section_description \nFROM Sections \nWHERE Sections.section_name = 'h' \nORDER BY Sections.section_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the description for the section named h , in reverse alphabetical order ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.other_student_details from student_enrolment join students on Student_Enrolment.student_id = Students.student_id join degree_programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = \"Bachelor\"   order by students.other_student_details desc",
        "question": "Who is enrolled in a Bachelor degree program ? List all the student details in reversed lexicographical order .",
        "result": "Students.first_name, Students.middle_name, Students.last_name, Students.cell_mobile_number, Students.email_address, Students.ssn, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Addresses.other_address_details \nFROM Students \nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nINNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id \nINNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id \nINNER JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id \nINNER JOIN Addresses ON Students.current_address_id = Addresses.address_id \nWHERE Departments.department_name = 'Bachelor' \nORDER BY Students.last_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is enrolled in a Bachelor degree program ? List all the student details in reversed lexicographical order . \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_name , sections.section_description from sections where  sections.section_name = \"h\"  ",
        "question": "What are the names and descriptions of all the sections that named h ?",
        "result": "section_name, section_description \n FROM Sections \n WHERE section_name LIKE '%h%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions of all the sections that named h ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select sections.section_name , sections.section_description from sections where  sections.section_name = \"h\"  ",
        "question": "What are the names and descriptions for all the sections that named h ?",
        "result": "section_name, section_description\nFROM Sections\nWHERE section_name LIKE '%h%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and descriptions for all the sections that named h ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select courses.course_name , courses.course_id from sections join courses on Sections.course_id = Courses.course_id where  sections.section_name = \"h\"  group by courses.course_id having  count(*) <= 2 ",
        "question": "What are the names and id of courses having at most 2 sections and named h ?",
        "result": "Courses.course_id, Courses.course_name\nFROM Courses \nINNER JOIN Sections ON Courses.course_id = Sections.course_id \nWHERE Courses.course_name LIKE 'h%' \nGROUP BY Courses.course_id, Courses.course_name \nHAVING COUNT(Sections.section_id) <= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and id of courses having at most 2 sections and named h ? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select courses.course_name , courses.course_id from sections join courses on Sections.course_id = Courses.course_id  group by courses.course_id having  count(*) <= 2  union select courses.course_name , courses.course_id from sections join courses on Sections.course_id = Courses.course_id where  sections.section_name = \"h\"  ",
        "question": "What are the names and id of courses having at most 2 sections or named h ?",
        "result": "course_id, course_name \nFROM Courses \nWHERE course_name = 'h' OR course_id IN (\n  SELECT course_id \n  FROM Sections \n  GROUP BY course_id \n  HAVING COUNT(*) <= 2 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and id of courses having at most 2 sections or named h ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\"   order by cartoon.title asc",
        "question": "List all cartoon directed by ' Ben Jones ' , in alphabetical order .",
        "result": "Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones' ORDER BY Cartoon.Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List all cartoon directed by ' Ben Jones ' , in alphabetical order . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\"   order by cartoon.title asc",
        "question": "What are the names of all cartoons directed by Ben Jones , in alphabetical order .",
        "result": "Title FROM Cartoon WHERE Directed_by = 'Ben Jones' ORDER BY Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones , in alphabetical order . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"   order by cartoon.title asc",
        "question": "List the title of all cartoon directed by ' Ben Jones ' or ' Brandon Vietti ' , in alphabetical order .",
        "result": "Cartoon.Title FROM Cartoon \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti') \nORDER BY Cartoon.Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the title of all cartoon directed by ' Ben Jones ' or ' Brandon Vietti ' , in alphabetical order . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"   order by cartoon.title asc",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti , in alphabetical order .",
        "result": "Cartoon.Title FROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti'\nORDER BY Cartoon.Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the titles of all cartoons directed by Ben Jones or Brandon Vietti , in alphabetical order . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"   order by cartoon.title asc",
        "question": "List the title of all Cartoons showed on TV Channel with series name ' Sky Radio ' , in alphabetical order .",
        "result": "Cartoon.Title FROM Cartoon\nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio'\nORDER BY Cartoon.Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the title of all Cartoons showed on TV Channel with series name ' Sky Radio ' , in alphabetical order . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones ?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by='Joseph Kuhr' AND Directed_by='Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones ?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by='Joseph Kuhr' OR Directed_by='Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones ?",
        "result": "COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr' AND Directed_by = 'Ben Jones';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones ?",
        "result": "COUNT(*) \nFROM Cartoon \nWHERE (Directed_by = 'Ben Jones' OR Written_by = 'Joseph Kuhr')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' AND Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones ?",
        "result": "TV_Channel.Country \nFROM \nTV_Channel \nINNER JOIN \nCartoon ON (TV_Channel.id = Cartoon.Channel) \nWHERE \n(Cartoon.Written_by = 'Todd Casey' OR Cartoon.Directed_by = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" and cartoon.written_by = \"Joseph Kuhr\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones and were written by ' Joseph Kuhr ' ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Written_by = 'Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones and were written by ' Joseph Kuhr ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.written_by = \"Joseph Kuhr\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones or were written by ' Joseph Kuhr ' ?",
        "result": "Cartoon.Title\nFROM Cartoon\nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Written_by = 'Joseph Kuhr';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones or were written by ' Joseph Kuhr ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" and cartoon.written_by = \"Joseph Kuhr\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones and written by Joseph Kuhr ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Written_by = 'Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones and written by Joseph Kuhr ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.written_by = \"Joseph Kuhr\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones or written by Joseph Kuhr ?",
        "result": "Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' OR Written_by = 'Joseph Kuhr';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones or written by Joseph Kuhr ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\"   order by cartoon.original_air_date asc",
        "question": "List all cartoon directed by ' Ben Jones ' , ordered by their air date ?",
        "result": "id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones' \nORDER BY Original_air_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List all cartoon directed by ' Ben Jones ' , ordered by their air date ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\"   order by cartoon.original_air_date asc",
        "question": "What are the names of all cartoons directed by Ben Jones , ordered by their air date ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' \nORDER BY Cartoon.Original_air_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones , ordered by their air date ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"   order by cartoon.original_air_date asc",
        "question": "List the title of all cartoon directed by ' Ben Jones ' or ' Brandon Vietti ' , ordered by their air date ?",
        "result": "Cartoon.Title\nFROM Cartoon\nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Brandon Vietti'\nORDER BY Cartoon.Original_air_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the title of all cartoon directed by ' Ben Jones ' or ' Brandon Vietti ' , ordered by their air date ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.directed_by = \"Brandon Vietti\"   order by cartoon.original_air_date asc",
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti , ordered by their air date ?",
        "result": "Cartoon.Title\nFROM Cartoon\nWHERE Cartoon.Directed_by = \"Ben Jones\" OR Cartoon.Directed_by = \"Brandon Vietti\"\nORDER BY Cartoon.Original_air_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the titles of all cartoons directed by Ben Jones or Brandon Vietti , ordered by their air date ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"   order by cartoon.original_air_date asc",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' , that are ordered by air date ?",
        "result": "Cartoon.Title FROM Cartoon \nJOIN TV_Channel ON TV_Channel.id = Cartoon.Channel \nWHERE TV_Channel.series_name = 'Sky Radio'\nORDER BY Cartoon.Original_air_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' , that are ordered by air date ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones or ?",
        "result": "COUNT(*) FROM Cartoon \nWHERE Written_by = 'Joseph Kuhr' AND (Directed_by = 'Ben Jones' OR Directed_by IS NULL)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones or ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones or ?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' OR Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones or ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones or ?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' AND Directed_by = 'Ben Jones';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones or ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones or ?",
        "result": "COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr' OR Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones or ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones or ?",
        "result": "\n\nTV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey' AND Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones or ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones or ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' OR Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones or ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channel using language English and with serial name ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE series_name = 'Sky Radio' AND Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channel using language English or with serial name ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' OR series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English or with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels and with serial name ' Sky Radio ' ?",
        "result": "TV_Channel.id \nFROM \nTV_Channel \nWHERE \nCountry IN \n(\n  SELECT Country \n  FROM TV_Channel \n  WHERE series_name = 'Sky Radio' \n  GROUP BY Country \n  HAVING COUNT(*) > 2\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels and with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels or with serial name ' Sky Radio ' ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) OR series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels or with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channel using language English and with serial name ' Sky Radio ' ?",
        "result": "COUNT(*) \nFROM TV_Channel\nWHERE Language = 'English' AND series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channel using language English or with serial name ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language='English' OR series_name='Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English or with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels and with serial name ' Sky Radio ' ?",
        "result": "TV_Channel.id \nFROM \nTV_Channel \nWHERE \nCountry IN (SELECT Country \n            FROM TV_Channel \n            GROUP BY Country \n            HAVING COUNT(*) > 2) \nAND \nseries_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels and with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels or with serial name ' Sky Radio ' ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) \nOR series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels or with serial name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.content from tv_channel where  tv_channel.series_name = \"Sky Radio\" and tv_channel.language = \"English\"  ",
        "question": "What is the content of TV Channel with serial name ' Sky Radio ' and using language English ?",
        "result": "Content \nFROM TV_Channel \nWHERE series_name = 'Sky Radio' AND Language = 'English';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the content of TV Channel with serial name ' Sky Radio ' and using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.content from tv_channel where  tv_channel.series_name = \"Sky Radio\" or tv_channel.language = \"English\"  ",
        "question": "What is the content of TV Channel with serial name ' Sky Radio ' or using language English ?",
        "result": "Content FROM TV_Channel WHERE series_name = 'Sky Radio' OR Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the content of TV Channel with serial name ' Sky Radio ' or using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option from tv_channel where  tv_channel.series_name = \"Sky Radio\" and tv_channel.language = \"English\"  ",
        "question": "What is the Package Option of TV Channel with serial name ' Sky Radio ' and using language English ?",
        "result": "Package_Option \nFROM \nTV_Channel \nWHERE \nseries_name = 'Sky Radio' AND Language = 'English';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the Package Option of TV Channel with serial name ' Sky Radio ' and using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option from tv_channel where  tv_channel.series_name = \"Sky Radio\" or tv_channel.language = \"English\"  ",
        "question": "What is the Package Option of TV Channel with serial name ' Sky Radio ' or using language English ?",
        "result": "Package_Option FROM TV_Channel \nWHERE series_name = 'Sky Radio' OR Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the Package Option of TV Channel with serial name ' Sky Radio ' or using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_channel.language = \"English\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' and using language English ?",
        "result": "Episode FROM TV_series WHERE series_name='Sky Radio' AND Language='English';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' and using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_channel.language = \"English\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' or using language English ?",
        "result": "Episode \nFROM TV_series \nWHERE series_name = 'Sky Radio' OR Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' or using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and tv_channel.language = \"English\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and using language English ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' AND TV_Channel.Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or tv_channel.language = \"English\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey or using language English ?",
        "result": "TV_Channel.Country\nFROM TV_Channel\nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE (Cartoon.Written_by = 'Todd Casey' OR TV_Channel.Language = 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey or using language English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_channel.language = \"English\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' and use the English language ?",
        "result": "Episode \nFROM \n  TV_series \nWHERE \n  series_name = 'Sky Radio' AND Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' and use the English language ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_channel.language = \"English\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' or use the English language ?",
        "result": "Episode \nFROM TV_series \nWHERE series_name = 'Sky Radio' AND Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' or use the English language ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and tv_channel.language = \"English\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and use the English language ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' AND TV_Channel.Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and use the English language ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or tv_channel.language = \"English\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey or use the English language ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' OR TV_Channel.Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey or use the English language ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels and on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_Channel.id \nFROM \nTV_Channel \nWHERE \nTV_Channel.Country IN (SELECT TV_Channel.Country FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(TV_Channel.id) > 2) \nAND \nTV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels and on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels or on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE Country IN \n(SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) \nOR series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels or on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 1 AND TV_Channel.series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 1 AND TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' AND TV_Channel.series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel\nWHERE Language != 'English' OR series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English' \nAND series_name = 'Sky Radio' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' OR TV_Channel.series_name = 'Sky Radio' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.id FROM TV_Channel \nWHERE TV_Channel.series_name = 'Sky Radio' \nAND (SELECT COUNT(*) FROM TV_Channel WHERE TV_Channel.Country = TV_Channel.Country) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that are on the TV Channel with the series name ' Sky Radio ' ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id IN (SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(TV_Channel.id)>2)\nOR TV_Channel.series_name = 'Sky Radio' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that are on the TV Channel with the series name ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "What is the air date of TV series with Episode ' A Love of a Lifetime ' , sorted by rating .",
        "result": "TV_series.Air_Date\nFROM TV_series\nWHERE TV_series.Episode = 'A Love of a Lifetime'\nORDER BY TV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the air date of TV series with Episode ' A Love of a Lifetime ' , sorted by rating . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "When did the episode ' A Love of a Lifetime ' air , sorted by rating .",
        "result": "TV_series.Air_Date \nFROM \nTV_series \nWHERE \nTV_series.Episode = 'A Love of a Lifetime' \nORDER BY \nTV_series.Rating DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### When did the episode ' A Love of a Lifetime ' air , sorted by rating . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' , sorted by rating .",
        "result": "TV_series.Weekly_Rank\nFROM TV_series\nWHERE TV_series.Episode = 'A Love of a Lifetime'\nORDER BY TV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' , sorted by rating . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "What is the weekly rank for the episode ' A Love of a Lifetime ' , sorted by rating .",
        "result": "Weekly_Rank FROM TV_series\nWHERE Episode = 'A Love of a Lifetime'\nORDER BY Rating DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the weekly rank for the episode ' A Love of a Lifetime ' , sorted by rating . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"   order by tv_series.rating asc",
        "question": "What is the episode for the TV series named ' Sky Radio ' , sorted by rating .",
        "result": "TV_series.Episode\nFROM TV_series\nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio'\nORDER BY TV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' , sorted by rating . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "What is the air date of TV series with Episode ' A Love of a Lifetime ' , ordered by ratings ?",
        "result": "TV_series.Air_Date \nFROM \nTV_series \nWHERE \nTV_series.Episode = 'A Love of a Lifetime' \nORDER BY \nTV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the air date of TV series with Episode ' A Love of a Lifetime ' , ordered by ratings ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "When did the episode ' A Love of a Lifetime ' air , ordered by ratings ?",
        "result": "TV_series.Air_Date \nFROM TV_series \nWHERE TV_series.Episode = 'A Love of a Lifetime' \nORDER BY TV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### When did the episode ' A Love of a Lifetime ' air , ordered by ratings ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' , ordered by ratings ?",
        "result": "TV_series.Weekly_Rank\nFROM TV_series\nWHERE TV_series.Episode = 'A Love of a Lifetime'\nORDER BY TV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' , ordered by ratings ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   order by tv_series.rating asc",
        "question": "What is the weekly rank for the episode ' A Love of a Lifetime ' , ordered by ratings ?",
        "result": "TV_series.Weekly_Rank \nFROM \nTV_series \nWHERE \nTV_series.Episode = 'A Love of a Lifetime' \nORDER BY \nTV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the weekly rank for the episode ' A Love of a Lifetime ' , ordered by ratings ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"   order by tv_series.rating asc",
        "question": "What is the episode for the TV series named ' Sky Radio ' , ordered by ratings ?",
        "result": "Episode\nFROM TV_series\nWHERE Channel = 'Sky Radio'\nORDER BY Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' , ordered by ratings ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"   order by tv_series.rating desc limit 3 ",
        "question": "List top 3 highest Rating TV series . List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_series.series_name, TV_series.Episode, TV_series.Rating \nFROM TV_series \nWHERE TV_series.Rating IN \n(SELECT TV_series.Rating \nFROM TV_series \nORDER BY TV_series.Rating DESC LIMIT 3);\n\nSELECT TV_series.series_name, TV_series.Episode \nFROM TV_series \nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.series_name \nWHERE TV_Channel.series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List top 3 highest Rating TV series . List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select max(tv_series.share) , min(tv_series.share) from tv_series where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is minimum and maximum share of TV series , with Episode ' A Love of a Lifetime ' ?",
        "result": "MIN(Share), MAX(Share) FROM TV_series WHERE Episode='A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is minimum and maximum share of TV series , with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select max(tv_series.share) , min(tv_series.share) from tv_series where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the maximum and minimum share for the TV series , with Episode ' A Love of a Lifetime ' ?",
        "result": "MAX(Share), MIN(Share) \nFROM TV_series \nWHERE Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the maximum and minimum share for the TV series , with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ?",
        "result": "TV_series.Episode \nFROM \nTV_series \nINNER JOIN \nTV_Channel \nON TV_series.Channel = TV_Channel.id \nWHERE \nTV_Channel.series_name = 'Sky Radio' \nAND \nTV_series.Title = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ?",
        "result": "TV_series.Episode \nFROM TV_series \nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' OR TV_series.Episode = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ?",
        "result": "Episode FROM TV_series\nWHERE series_name = 'Sky Radio' AND Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ?",
        "result": "Episode \nFROM \nTV_series \nWHERE \nseries_name = 'Sky Radio' OR Episode = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select max(tv_series.share) , min(tv_series.share) from tv_series where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is minimum and maximum share of TV series , with Episode ' A Love of a Lifetime ' ?",
        "result": "\n\nMIN(Share), MAX(Share) FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is minimum and maximum share of TV series , with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select max(tv_series.share) , min(tv_series.share) from tv_series where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the maximum and minimum share for the TV series , with Episode ' A Love of a Lifetime ' ?",
        "result": "MAX(Share), MIN(Share) FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the maximum and minimum share for the TV series , with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ?",
        "result": "TV_series.Episode \nFROM TV_series \nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' \nAND TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ?",
        "result": "TV_series.Episode \nFROM TV_series \nINNER JOIN TV_Channel ON TV_Channel.id = TV_series.Channel \nWHERE TV_Channel.series_name = 'Sky Radio' OR TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the Episode of all TV series showed on TV Channel with series name ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ?",
        "result": "Episode \nFROM TV_series \nWHERE series_name = 'Sky Radio' AND Episode = 'A Love of a Lifetime' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' and with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the episode for the TV series named ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ?",
        "result": "Episode \nFROM TV_series \nWHERE series_name = 'Sky Radio' OR Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named ' Sky Radio ' or with Episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count( distinct tv_channel.series_name) , count( distinct tv_channel.content) from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? List the number of different series names and contents in the TV Channel table .",
        "result": "TV_Channel.Country, TV_Channel.Language, TV_Channel.Package_Option, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Hight_definition_TV, TV_Channel.Pay_per_view_PPV\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_series.Episode = 'A Love of a Lifetime';\n\nSELECT COUNT(DISTINCT TV_Channel.series_name), COUNT(DISTINCT TV_Channel.Content)\nFROM TV_Channel;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? List the number of different series names and contents in the TV Channel table . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.language , count(*) from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  group by tv_channel.language  order by count(*) asc limit 1 ",
        "question": "What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? List the language used least number of TV Channel . List language and number of TV Channel .",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime';\n\nSELECT TV_Channel.Language, COUNT(*) AS 'Number of TV Channels' \nFROM TV_Channel \nGROUP BY TV_Channel.Language \nORDER BY COUNT(*) ASC \nLIMIT 1; \n\nSELECT TV_Channel.Language, COUNT(*) AS 'Number of TV Channels' \nFROM TV_Channel \nGROUP BY TV_Channel.Language \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? List the language used least number of TV Channel . List language and number of TV Channel . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.language , count(*) from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  group by tv_channel.language ",
        "question": "What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? List each language and the number of TV Channels using it .",
        "result": "TV_Channel.Country, COUNT(TV_Channel.Language) \nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' \nGROUP BY TV_Channel.Language",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? List each language and the number of TV Channels using it . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? Find the package choice and series name of the TV channel that has high definition TV .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n JOIN TV_series ON TV_Channel.id = TV_series.Channel \n WHERE TV_series.Episode = 'A Love of a Lifetime' AND TV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? Find the package choice and series name of the TV channel that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.language != \"English\"  ",
        "question": "What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? find the pixel aspect ratio and nation of the tv channels that do not use English .",
        "result": "TV_Channel.Country, TV_Channel.Pixel_aspect_ratio_PAR\nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' AND TV_Channel.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? find the pixel aspect ratio and nation of the tv channels that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? find id of the tv channels that from the countries where have more than two tv channels .",
        "result": "TV_Channel.id\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_series.Episode = 'A Love of a Lifetime'\nAND TV_Channel.Country IN (\n    SELECT Country\n    FROM TV_Channel\n    GROUP BY Country\n    HAVING COUNT(*) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV series with Episode ' A Love of a Lifetime ' ? find id of the tv channels that from the countries where have more than two tv channels . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.hight_definition_tv = \"yes\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \n WHERE TV_Channel.Hight_definition_TV = 1 \n AND TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   union select tv_channel.package_option , tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel \n LEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel \n LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR Cartoon.Title = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.hight_definition_tv = \"yes\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nINNER JOIN TV_series\nON TV_Channel.id = TV_series.Channel\nWHERE TV_Channel.Hight_definition_TV = 1\nAND TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   union select tv_channel.package_option , tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.series_name = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id join cartoon on TV_Channel.id = Cartoon.Channel where  cartoon.written_by = \"Todd Casey\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey and that has the episode ' A Love of a Lifetime ' ?",
        "result": "Country \nFROM Cartoon \nWHERE Written_by = 'Todd Casey' \nAND Title = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey and that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id join cartoon on TV_Channel.id = Cartoon.Channel where  cartoon.written_by = \"Todd Casey\" or tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey or that has the episode ' A Love of a Lifetime ' ?",
        "result": "Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE (Cartoon.Written_by = 'Todd Casey') OR (Cartoon.Title = 'A Love of a Lifetime')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey or that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.language != \"English\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_Channel.Language <> 'English' AND TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   union select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that has the episode ' A Love of a Lifetime ' ?",
        "result": "Pixel_aspect_ratio_PAR, Country \n FROM TV_Channel\n WHERE Language != 'English' OR series_name = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.language != \"English\" and tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_Channel.Language <> 'English' AND TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   union select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that has the episode ' A Love of a Lifetime ' ?",
        "result": "Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language <> 'English' OR series_name = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.id FROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_Channel.id IN (\n  SELECT Channel FROM TV_series \n  WHERE Episode = 'A Love of a Lifetime' \n  GROUP BY Channel \n  HAVING COUNT(DISTINCT Episode) > 2 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_series.channel from tv_series where  tv_series.episode = \"A Love of a Lifetime\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that has the episode ' A Love of a Lifetime ' ?",
        "result": "TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.id IN (\n    SELECT TV_series.Channel\n    FROM TV_series\n    WHERE TV_series.series_name = 'A Love of a Lifetime'\n)\nOR\nTV_Channel.id IN (\n    SELECT TV_series.Channel\n    FROM TV_series\n    GROUP BY TV_series.Channel\n    HAVING COUNT(*) > 2\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that has the episode ' A Love of a Lifetime ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the air date of TV series with Episode ' A Love of a Lifetime ' and on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_series.Air_Date\nFROM TV_series \nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' AND TV_series.Episode = 'A Love of a Lifetime';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the air date of TV series with Episode ' A Love of a Lifetime ' and on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   union select tv_series.air_date from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the air date of TV series with Episode ' A Love of a Lifetime ' or on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_series.Air_Date\nFROM TV_series\nLEFT JOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_series.Episode = 'A Love of a Lifetime' OR TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the air date of TV series with Episode ' A Love of a Lifetime ' or on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' and on TV Channel with series name ' Sky Radio ' .",
        "result": "Weekly_Rank \nFROM \nTV_series \nWHERE \nEpisode = 'A Love of a Lifetime' \nAND \nChannel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' and on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   union select tv_series.weekly_rank from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' or on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_series.Weekly_Rank \nFROM TV_series \nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_series.Episode = 'A Love of a Lifetime' OR TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' or on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels and on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_Channel.id \nFROM \nTV_Channel \nWHERE \nCountry IN \n(SELECT Country FROM TV_Channel \n GROUP BY Country \n HAVING COUNT(*) > 2) \nAND \nseries_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels and on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "find id of the tv channels that from the countries where have more than two tv channels or on TV Channel with series name ' Sky Radio ' .",
        "result": "TV_Channel.id \nFROM \nTV_Channel \nWHERE \nCountry IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) \nOR \nseries_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the countries where have more than two tv channels or on TV Channel with series name ' Sky Radio ' . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channel using language English and named ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' AND series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channel using language English or named ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' OR series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English or named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channels use the English language and named ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' AND series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language and named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from tv_channel where  tv_channel.language = \"English\" or tv_channel.series_name = \"Sky Radio\"  ",
        "question": "How many TV Channels use the English language or named ' Sky Radio ' ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' OR series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language or named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select max(tv_series.share) , min(tv_series.share) from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is minimum and maximum share of TV series that named ' Sky Radio ' ?",
        "result": "MIN(Share), MAX(Share) FROM TV_series WHERE Channel = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is minimum and maximum share of TV series that named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select max(tv_series.share) , min(tv_series.share) from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the maximum and minimum share for the TV series that named ' Sky Radio ' ?",
        "result": "MAX(Share), MIN(Share)\nFROM TV_series\nWHERE Channel = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the maximum and minimum share for the TV series that named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the air date of TV series with Episode ' A Love of a Lifetime ' and named ' Sky Radio ' ?",
        "result": "TV_series.Air_Date\nFROM TV_series\nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio' AND TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the air date of TV series with Episode ' A Love of a Lifetime ' and named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.air_date from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   union select tv_series.air_date from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is the air date of TV series with Episode ' A Love of a Lifetime ' or named ' Sky Radio ' ?",
        "result": "Air_Date \nFROM \nTV_series \nWHERE \nEpisode = 'A Love of a Lifetime' OR \nTitle = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the air date of TV series with Episode ' A Love of a Lifetime ' or named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' and named ' Sky Radio ' ?",
        "result": "TV_series.Weekly_Rank\nFROM TV_series\nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_series.Episode = 'A Love of a Lifetime' AND TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' and named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.weekly_rank from tv_series where  tv_series.episode = \"A Love of a Lifetime\"   union select tv_series.weekly_rank from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\"  ",
        "question": "What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' or named ' Sky Radio ' ?",
        "result": "Weekly_Rank\nFROM TV_series\nWHERE Episode = 'A Love of a Lifetime' OR Title = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode ' A Love of a Lifetime ' or named ' Sky Radio ' ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that has high definition TV .",
        "result": "Cartoon.Title \nFROM Cartoon \nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' AND TV_Channel.Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that has high definition TV .",
        "result": "Cartoon.Title \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' OR TV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that has high definition TV .",
        "result": "TV_Channel.series_name \nFROM \nTV_Channel \nINNER JOIN \nTV_series ON TV_Channel.id = TV_series.Channel \nWHERE \nTV_series.Episode = 'A Love of a Lifetime' AND \nTV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that has high definition TV .",
        "result": "series_name \nFROM \nTV_Channel \nWHERE \nContent LIKE '%A Love of a Lifetime%' \nOR \nHight_definition_TV = 'Yes'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey and that has high definition TV .",
        "result": "TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey' AND TV_Channel.Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey and that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey or that has high definition TV .",
        "result": "TV_Channel.Country\nFROM \nTV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE \n(Cartoon.Written_by = 'Todd Casey' OR TV_Channel.Hight_definition_TV = 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey or that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that has high definition TV .",
        "result": "Pixel_aspect_ratio_PAR, Country \n FROM TV_Channel \n WHERE Language != 'English' AND Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that has high definition TV .",
        "result": "Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language != 'English' OR Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that has high definition TV .",
        "result": "Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language <> 'English' AND Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that has high definition TV .",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' OR TV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.hight_definition_tv = \"yes\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that has high definition TV .",
        "result": "TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 1\nGROUP BY TV_Channel.id\nHAVING COUNT(TV_Channel.id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that has high definition TV .",
        "result": "id \nFROM TV_Channel \nWHERE TV_Channel.id IN (\n    SELECT id \n    FROM TV_Channel \n    GROUP BY id \n    HAVING COUNT(*) > 2 OR Hight_definition_TV = 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that has high definition TV . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that supports high definition TV ?",
        "result": "Cartoon.Title \nFROM \nCartoon \nJOIN \nTV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE \nTV_Channel.series_name = 'Sky Radio' AND TV_Channel.Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that supports high definition TV ?",
        "result": "Cartoon.Title \nFROM Cartoon \nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' OR TV_Channel.Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that supports high definition TV ?",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN TV_series \nON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' AND TV_Channel.Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that supports high definition TV ?",
        "result": "series_name \nFROM TV_Channel \nWHERE series_name = 'A Love of a Lifetime' OR Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey and that supports high definition TV ?",
        "result": "Country FROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' AND TV_Channel.Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey and that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey or that supports high definition TV ?",
        "result": "Country FROM TV_Channel\nJOIN Cartoon ON Cartoon.Channel = TV_Channel.id\nWHERE Written_by = 'Todd Casey' OR Hight_definition_TV = 'Yes';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey or that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that supports high definition TV ?",
        "result": "Pixel_aspect_ratio_PAR, Country \n FROM TV_Channel\n WHERE Language <> 'English' AND Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that supports high definition TV ?",
        "result": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel \nWHERE Language != 'English' OR Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that supports high definition TV ?",
        "result": "Pixel_aspect_ratio_PAR, Country \n FROM TV_Channel \n WHERE Language <> 'English' AND Hight_definition_TV = 'Yes' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that supports high definition TV ?",
        "result": "Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language != 'English' OR Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.hight_definition_tv = \"yes\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that supports high definition TV ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE Hight_definition_TV = 1 \nGROUP BY TV_Channel.id \nHAVING COUNT(TV_Channel.id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.hight_definition_tv = \"yes\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that supports high definition TV ?",
        "result": "id FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Package_Option > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that supports high definition TV ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones and are playing some cartoon written by Todd Casey ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' \nAND Cartoon.id IN (SELECT Cartoon.id FROM Cartoon JOIN Cartoon_written_by ON Cartoon.id = Cartoon_written_by.Cartoon_id WHERE Cartoon_written_by.Writer = 'Todd Casey')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones and are playing some cartoon written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones or are playing some cartoon written by Todd Casey ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.id IN \n(SELECT Cartoon.id FROM Cartoon \nINNER JOIN TV_series ON Cartoon.Channel = TV_series.Channel \nWHERE TV_series.Written_by = 'Todd Casey')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones or are playing some cartoon written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "How many TV Channel using language English and are playing some cartoon written by Todd Casey ?",
        "result": "COUNT(DISTINCT TV_Channel.id) FROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE TV_Channel.Language = 'English' AND Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and are playing some cartoon written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "How many TV Channels use the English language and are playing some cartoon written by Todd Casey ?",
        "result": "COUNT(DISTINCT TV_Channel.id) \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE TV_Channel.Language = 'English' AND Cartoon.Written_by = 'Todd Casey';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language and are playing some cartoon written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id join cartoon on TV_Channel.id = Cartoon.Channel where  tv_series.episode = \"A Love of a Lifetime\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that have cartoons on TV that were written by Todd Casey ?",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' \nAND Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that have cartoons on TV that were written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.hight_definition_tv = \"yes\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that have cartoons on TV that were written by Todd Casey ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \n WHERE TV_Channel.Hight_definition_TV = 1 AND Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that have cartoons on TV that were written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.hight_definition_tv = \"yes\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that have cartoons on TV that were written by Todd Casey ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel \n JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \n WHERE TV_Channel.Hight_definition_TV = 1 AND Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that have cartoons on TV that were written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language != \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that have cartoons on TV that were written by Todd Casey ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n INNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \n WHERE TV_Channel.Language <> 'English' AND Cartoon.Written_by = 'Todd Casey' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that have cartoons on TV that were written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language != \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that have cartoons on TV that were written by Todd Casey ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel\n JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\n WHERE TV_Channel.Language != 'English' AND Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that have cartoons on TV that were written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\"  group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that have cartoons on TV that were written by Todd Casey ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id IN (\n    SELECT Cartoon.Channel \n    FROM Cartoon \n    WHERE Cartoon.Written_by = 'Todd Casey'\n) AND (\n    SELECT COUNT(*) \n    FROM TV_Channel \n    WHERE TV_Channel.id = Cartoon.Channel\n) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that have cartoons on TV that were written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones and written by Todd Casey ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = \"Ben Jones\" AND Cartoon.Written_by = \"Todd Casey\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones and written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones or written by Todd Casey ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones or written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "How many TV Channel using language English and written by Todd Casey ?",
        "result": "COUNT(*) \nFROM TV_Channel \nWHERE Language = 'English' AND Written_by = 'Todd Casey';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "How many TV Channels use the English language and written by Todd Casey ?",
        "result": "COUNT(*) \nFROM TV_Channel\nWHERE Language = 'English' AND Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language and written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"   except select tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that are not playing cartoons ?",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN TV_series \nON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' \nAND TV_Channel.Content != 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"   except select tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that are not playing cartoons ?",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nLEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' OR TV_Channel.Content != 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that are not playing cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n WHERE TV_Channel.Hight_definition_TV = 1 AND TV_Channel.Content != 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that are not playing cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Content != 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that are not playing cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n WHERE TV_Channel.Hight_definition_TV = 1\n AND TV_Channel.Content <> 'cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that are not playing cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Content != 'cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that are not playing cartoons ?",
        "result": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel\nWHERE Language != 'English' AND Content != 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that are not playing cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\n FROM TV_Channel\n WHERE TV_Channel.Language != 'English' OR TV_Channel.Content != 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that are not playing cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' AND TV_Channel.Content != 'Cartoon' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that are not playing cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE (TV_Channel.Language != 'English' OR TV_Channel.Content != 'Cartoon')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  except select tv_channel.id from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that are not playing cartoons ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.Content != 'Cartoon' \nGROUP BY TV_Channel.id \nHAVING COUNT(TV_Channel.id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  except select tv_channel.id from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that are not playing cartoons ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN (SELECT Cartoon.Channel FROM Cartoon)\nOR \n(SELECT COUNT(*) FROM TV_Channel) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that are not playing cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones and written by Todd Casey ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' AND Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones and written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon where  cartoon.directed_by = \"Ben Jones\" or cartoon.written_by = \"Todd Casey\"  ",
        "question": "What are the names of all cartoons directed by Ben Jones or written by Todd Casey ?",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all cartoons directed by Ben Jones or written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "How many TV Channel using language English and written by Todd Casey ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' AND Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.written_by = \"Todd Casey\"  ",
        "question": "How many TV Channels use the English language and written by Todd Casey ?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English' AND Written_by = 'Todd Casey';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language and written by Todd Casey ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Michael Chang\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones and Michael Chang ?",
        "result": "TV_Channel.Country \nFROM \nTV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE \nCartoon.Written_by LIKE '%Todd Casey%' \nAND (Cartoon.Directed_by LIKE '%Ben Jones%' OR Cartoon.Directed_by LIKE '%Michael Chang%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones and Michael Chang ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Ben Jones\"   intersect select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Michael Chang\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones and cartoons directed by Michael Chang ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE (Cartoon.Written_by = 'Todd Casey' AND Cartoon.Directed_by = 'Ben Jones') OR Cartoon.Directed_by = 'Michael Chang';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones and cartoons directed by Michael Chang ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_channel.language != \"English\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that do not use English .",
        "result": "Cartoon.Title \nFROM Cartoon \nJOIN TV_Channel ON TV_Channel.id = Cartoon.Channel \nWHERE TV_Channel.series_name = 'Sky Radio' AND TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_channel.language != \"English\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that do not use English .",
        "result": "Cartoon.Title \nFROM Cartoon \nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' OR TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.language != \"English\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not use English .",
        "result": "series_name \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE Episode = 'A Love of a Lifetime' AND Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" or tv_channel.language != \"English\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that do not use English .",
        "result": "series_name \nFROM \nTV_Channel \nINNER JOIN \nTV_series ON TV_Channel.id = TV_series.Channel \nWHERE \nEpisode = 'A Love of a Lifetime' OR Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.language != \"English\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that do not use English .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 \n AND TV_Channel.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.language != \"English\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that do not use English .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.language != \"English\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not use English .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 AND TV_Channel.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.language != \"English\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that do not use English .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and tv_channel.language != \"English\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey and that do not use English .",
        "result": "Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Written_by = 'Todd Casey' AND Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey and that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or tv_channel.language != \"English\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey or that do not use English .",
        "result": "Country \nFROM \nTV_Channel \nJOIN \nCartoon ON TV_Channel.id = Cartoon.Channel \nWHERE \n(Written_by = 'Todd Casey' OR Language <> 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey or that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  except select tv_channel.id from tv_channel where  tv_channel.language = \"English\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that do not use English .",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE Country != 'English' \nGROUP BY TV_Channel.id \nHAVING COUNT(TV_Channel.id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.language != \"English\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that do not use English .",
        "result": "TV_Channel.id FROM TV_Channel WHERE TV_Channel.Language != 'English' OR (SELECT COUNT(*) FROM TV_Channel) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that do not use English . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" and tv_channel.language != \"English\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that do not use English ?",
        "result": "Cartoon.Title \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = 'Sky Radio' AND TV_Channel.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' and that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = \"Sky Radio\" or tv_channel.language != \"English\"  ",
        "question": "What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that do not use English ?",
        "result": "Cartoon.Title \nFROM Cartoon \nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE (TV_Channel.series_name = 'Sky Radio' OR TV_Channel.Language != 'English');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the title of all the cartools that are on the TV Channel with the series name ' Sky Radio ' or that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.language != \"English\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not use English ?",
        "result": "TV_Channel.series_name FROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' AND TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" or tv_channel.language != \"English\"  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that do not use English ?",
        "result": "series_name FROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE Episode = 'A Love of a Lifetime' OR Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.language != \"English\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that do not use English ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 AND TV_Channel.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.language != \"English\"  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that do not use English ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Language != 'English' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.language != \"English\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not use English ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 AND TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.language != \"English\"  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that do not use English ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and tv_channel.language != \"English\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey and that do not use English ?",
        "result": "Country\nFROM Cartoon\nWHERE Written_by = 'Todd Casey' AND Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey and that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or tv_channel.language != \"English\"  ",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey or that do not use English ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE (Cartoon.Written_by = 'Todd Casey') OR (TV_Channel.Language <> 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the countries that have cartoons on TV that were written by Todd Casey or that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  except select tv_channel.id from tv_channel where  tv_channel.language = \"English\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that do not use English ?",
        "result": "TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.Language <> 'English' AND TV_Channel.id IN (\n    SELECT TV_series.Channel\n    FROM TV_series\n    GROUP BY TV_series.Channel\n    HAVING COUNT(DISTINCT TV_series.id) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.language != \"English\"  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that do not use English ?",
        "result": "id FROM TV_Channel\nWHERE TV_Channel.Country != 'English' OR TV_Channel.Package_Option > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that do not use English ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"   except select tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not play any cartoon ?",
        "result": "TV_Channel.series_name\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_series.Episode = 'A Love of a Lifetime'\nAND TV_Channel.id NOT IN (SELECT Channel FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\"   except select tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that do not play any cartoon ?",
        "result": "series_name \nFROM \nTV_Channel \nINNER JOIN TV_series \nON TV_Channel.id = TV_series.Channel \nWHERE \nTV_series.Episode = 'A Love of a Lifetime' \nOR \nTV_Channel.id NOT IN (SELECT Channel FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that do not play any cartoon ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 \n AND NOT EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that do not play any cartoon ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR NOT EXISTS (SELECT * FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not play any cartoon ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n WHERE TV_Channel.Hight_definition_TV = 1\n AND TV_Channel.Content NOT LIKE '%cartoon%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\"   except select tv_channel.package_option , tv_channel.series_name from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that do not play any cartoon ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR NOT EXISTS (SELECT Cartoon.id FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that do not play any cartoon ?",
        "result": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel \nWHERE Language != 'English' AND Content != 'Cartoon' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that do not play any cartoon ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\n FROM TV_Channel\n WHERE TV_Channel.Language != 'English' OR TV_Channel.id NOT IN (\n     SELECT TV_series.Channel FROM TV_series WHERE TV_series.id IN (\n         SELECT Cartoon.Channel FROM Cartoon\n     )\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that do not play any cartoon ?",
        "result": "Pixel_aspect_ratio_PAR, Country \nFROM TV_Channel \nWHERE Language != 'English' AND Content != 'Cartoon' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\"   except select tv_channel.pixel_aspect_ratio_par , tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that do not play any cartoon ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' OR TV_Channel.Content NOT LIKE '%Cartoon%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  except select tv_channel.id from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that do not play any cartoon ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE (SELECT COUNT(*) FROM TV_Channel) > 2 \nAND TV_Channel.id NOT IN (SELECT Channel FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  except select tv_channel.id from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that do not play any cartoon ?",
        "result": "TV_Channel.id FROM TV_Channel \nWHERE (SELECT COUNT(*) FROM TV_Channel) > 2 OR TV_Channel.id NOT IN (SELECT DISTINCT Channel FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that do not play any cartoon ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones .",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' AND Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones .",
        "result": "COUNT(*) FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Written_by = 'Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones .",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' AND Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones .",
        "result": "COUNT(*) FROM Cartoon WHERE Directed_by='Ben Jones' OR Written_by='Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many TV Channel using language English and directed by Ben Jones .",
        "result": "COUNT(*) FROM TV_Channel WHERE Language='English' AND Directed_by='Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many TV Channels use the English language and directed by Ben Jones .",
        "result": "COUNT(*) FROM TV_Channel WHERE Language='English' AND Directed_by='Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language and directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones .",
        "result": "TV_Channel.Country \nFROM \nTV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE \nCartoon.Written_by = 'Todd Casey' AND Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones .",
        "result": "TV_Channel.Country \nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' OR Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.id not in (select Cartoon.Channel from cartoon where  cartoon.directed_by = \"Ben Jones\"  )   ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not have any cartoon directed by Ben Jones .",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nJOIN TV_series ON TV_Channel.id = TV_series.Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' \nAND Cartoon.Directed_by != 'Ben Jones' \nAND Cartoon.Directed_by IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that do not have any cartoon directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.id not in (select Cartoon.Channel from cartoon where  cartoon.directed_by = \"Ben Jones\"  )   ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that do not have any cartoon directed by Ben Jones .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\n WHERE TV_Channel.Hight_definition_TV = 1 AND Cartoon.Directed_by <> 'Ben Jones' OR Cartoon.Directed_by IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that do not have any cartoon directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.id not in (select Cartoon.Channel from cartoon where  cartoon.directed_by = \"Ben Jones\"  )   ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not have any cartoon directed by Ben Jones .",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n LEFT JOIN Cartoon \n ON TV_Channel.id = Cartoon.Channel \n WHERE TV_Channel.Hight_definition_TV = 1 \n AND Cartoon.Directed_by <> 'Ben Jones' \n AND Cartoon.Directed_by IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that do not have any cartoon directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.id not in (select Cartoon.Channel from cartoon where  cartoon.directed_by = \"Ben Jones\"  )   ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that do not have any cartoon directed by Ben Jones .",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel\n WHERE TV_Channel.Language != 'English'\n AND TV_Channel.id NOT IN (\n     SELECT Cartoon.Channel \n     FROM Cartoon \n     WHERE Cartoon.Directed_by = 'Ben Jones'\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that do not have any cartoon directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.id not in (select Cartoon.Channel from cartoon where  cartoon.directed_by = \"Ben Jones\"  )   ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that do not have any cartoon directed by Ben Jones .",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' \n AND TV_Channel.id NOT IN (SELECT Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that do not have any cartoon directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.id not in (select Cartoon.Channel from cartoon where  cartoon.directed_by = \"Ben Jones\"  )   group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that do not have any cartoon directed by Ben Jones .",
        "result": "TV_Channel.id \nFROM \nTV_Channel \nWHERE \nTV_Channel.id IN \n(SELECT TV_series.Channel \nFROM TV_series \nGROUP BY TV_series.Channel \nHAVING COUNT(DISTINCT TV_series.series_name) > 2) \nAND \nTV_Channel.id NOT IN \n(SELECT Cartoon.Channel \nFROM Cartoon \nWHERE Cartoon.Directed_by = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that do not have any cartoon directed by Ben Jones . \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" and tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' and that are not playing any cartoons ?",
        "result": "TV_Channel.series_name\nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' \nAND TV_Channel.id NOT IN (SELECT Channel FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' and that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_series join tv_channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = \"A Love of a Lifetime\" or tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What is the name of the series that has the episode ' A Love of a Lifetime ' or that are not playing any cartoons ?",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nLEFT JOIN TV_series ON TV_Channel.id = TV_series.Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE TV_series.Episode = 'A Love of a Lifetime' OR Cartoon.id IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of the series that has the episode ' A Love of a Lifetime ' or that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV and that are not playing any cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 \n AND NOT EXISTS (SELECT * FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV and that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "Find the package choice and series name of the TV channel that has high definition TV or that are not playing any cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR NOT EXISTS \n (SELECT * FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and series name of the TV channel that has high definition TV or that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" and tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV and that are not playing any cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel\n WHERE TV_Channel.Hight_definition_TV = 1 \n AND TV_Channel.Content <> 'Cartoon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV and that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.package_option , tv_channel.series_name from tv_channel where  tv_channel.hight_definition_tv = \"yes\" or tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV or that are not playing any cartoons ?",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name\n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1 OR TV_Channel.id NOT IN (SELECT Channel FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the series for the TV Channel that supports high definition TV or that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English and that are not playing any cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language <> 'English' \n AND TV_Channel.Content <> 'Cartoon' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English and that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English or that are not playing any cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel\n WHERE TV_Channel.Language != 'English' OR TV_Channel.id NOT IN \n     (SELECT TV_series.Channel FROM TV_series WHERE TV_series.id IN \n         (SELECT Cartoon.Channel FROM Cartoon))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English or that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" and tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that are not playing any cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country \n FROM TV_Channel \n WHERE TV_Channel.Language != 'English' AND TV_Channel.Content != 'Cartoon' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English and that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.pixel_aspect_ratio_par , tv_channel.country from tv_channel where  tv_channel.language != \"English\" or tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that are not playing any cartoons ?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\n FROM TV_Channel\n WHERE TV_Channel.Language != 'English' OR TV_Channel.id NOT IN (\n     SELECT TV_series.Channel FROM TV_series\n     UNION\n     SELECT Cartoon.Channel FROM Cartoon\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and country of origin for all TV channels that do not use English or that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel where  tv_channel.id not in (select Cartoon.Channel from cartoon  )  group by tv_channel.country having  count(*) > 2 ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels and that are not playing any cartoons ?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE \n(SELECT COUNT(*) \n FROM TV_Channel) > 2 \n AND \n NOT EXISTS \n (SELECT *\n  FROM Cartoon \n  WHERE Cartoon.Channel = TV_Channel.id)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels and that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.id from tv_channel  group by tv_channel.country having  count(*) > 2  union select tv_channel.id from tv_channel where  tv_channel.id not in (select Cartoon.Channel from cartoon  )  ",
        "question": "What are the ids of all tv channels that have more than 2 TV channels or that are not playing any cartoons ?",
        "result": "TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.id IN \n  (SELECT TV_series.Channel \n   FROM TV_series \n   GROUP BY TV_series.Channel \n   HAVING COUNT(TV_series.Channel) > 2)\n   OR NOT EXISTS \n  (SELECT Cartoon.Channel \n   FROM Cartoon \n   WHERE Cartoon.Channel = TV_Channel.id);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels or that are not playing any cartoons ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones ?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by='Joseph Kuhr' AND Directed_by='Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones ?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr' OR Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many cartoons were written by ' Joseph Kuhr ' or directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones ?",
        "result": "COUNT(*) \nFROM Cartoon \nWHERE Written_by = 'Joseph Kuhr' AND Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon where  cartoon.written_by = \"Joseph Kuhr\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones ?",
        "result": "COUNT(*) FROM Cartoon WHERE Directed_by='Ben Jones' OR Written_by='Joseph Kuhr';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of cartoones written by Joseph Kuhr or directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many TV Channel using language English and directed by Ben Jones ?",
        "result": "COUNT(*) \nFROM TV_Channel \nWHERE Language = 'English' AND series_name IN (SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select count(*) from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  tv_channel.language = \"English\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "How many TV Channels use the English language and directed by Ben Jones ?",
        "result": "COUNT(*) \nFROM TV_Channel\nWHERE Language = 'English' AND id IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Directed_by = 'Ben Jones'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" and cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones ?",
        "result": "TV_Channel.Country \nFROM TV_Channel \nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Written_by = 'Todd Casey' AND Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey and directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from cartoon join tv_channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = \"Todd Casey\" or cartoon.directed_by = \"Ben Jones\"  ",
        "question": "which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones ?",
        "result": "TV_Channel.Country\nFROM TV_Channel\nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey' OR Cartoon.Directed_by = 'Ben Jones'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries ' tv channels are playing some cartoon written by Todd Casey or directed by Ben Jones ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player   order by poker_player.earnings desc limit 1 ",
        "question": "List the final tables made and the best finishes of poker players , with the highest earnings ?",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nORDER BY poker_player.Earnings DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of poker players , with the highest earnings ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player   order by poker_player.earnings desc limit 1 ",
        "question": "What are the final tables made and best finishes for all poker players , with the highest earnings ?",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE poker_player.Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all poker players , with the highest earnings ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player   order by poker_player.earnings desc limit 1 ",
        "question": "List the final tables made and the best finishes of poker players , with the greatest earnings .",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish\nFROM poker_player\nORDER BY poker_player.Earnings DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of poker players , with the greatest earnings . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player   order by poker_player.earnings desc limit 1 ",
        "question": "What are the final tables made and best finishes for all poker players , with the greatest earnings .",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE poker_player.Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all poker players , with the greatest earnings . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select count(*) from poker_player where  poker_player.earnings < 200000  ",
        "question": "Count the number of poker players , with earnings less than 200000 ?",
        "result": "COUNT(*) FROM poker_player WHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of poker players , with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player where  poker_player.earnings < 200000  ",
        "question": "List the final tables made and the best finishes of poker players , with earnings less than 200000 ?",
        "result": "Final_Table_Made, Best_Finish \nFROM poker_player \nWHERE Earnings < 200000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of poker players , with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player where  poker_player.earnings < 200000  ",
        "question": "What are the final tables made and best finishes for all poker players , with earnings less than 200000 ?",
        "result": "Final_Table_Made, Best_Finish\nFROM poker_player\nWHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all poker players , with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player where  poker_player.earnings < 200000  ",
        "question": "What is the average earnings of poker players , with earnings less than 200000 ?",
        "result": "AVG(Earnings) FROM poker_player WHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average earnings of poker players , with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player where  poker_player.earnings < 200000  ",
        "question": "Return the average earnings across all poker players , with earnings less than 200000 ?",
        "result": "AVG(Earnings) FROM poker_player WHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the average earnings across all poker players , with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings < 200000   order by people.height desc limit 1 ",
        "question": "Return the money rank of the poker player with the greatest height and with earnings less than 200000 ?",
        "result": "poker_player.Money_Rank \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height = (SELECT MAX(Height) FROM people WHERE earnings < 200000);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the money rank of the poker player with the greatest height and with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200 and poker_player.earnings < 200000  ",
        "question": "What is the average earnings of poker players with height higher than 200 and with earnings less than 200000 ?",
        "result": "AVG(Earnings) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200 AND Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average earnings of poker players with height higher than 200 and with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200 or poker_player.earnings < 200000  ",
        "question": "What is the average earnings of poker players with height higher than 200 or with earnings less than 200000 ?",
        "result": "AVG(Earnings) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200 OR Earnings < 200000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average earnings of poker players with height higher than 200 or with earnings less than 200000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select count(*) from poker_player where  poker_player.earnings < 200000  ",
        "question": "Count the number of poker players , who have earnings below 200000 .",
        "result": "COUNT(*) FROM poker_player WHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of poker players , who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player where  poker_player.earnings < 200000  ",
        "question": "List the final tables made and the best finishes of poker players , who have earnings below 200000 .",
        "result": "Final_Table_Made, Best_Finish \nFROM poker_player \nWHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of poker players , who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player where  poker_player.earnings < 200000  ",
        "question": "What are the final tables made and best finishes for all poker players , who have earnings below 200000 .",
        "result": "Final_Table_Made, Best_Finish \nFROM poker_player \nWHERE Earnings < 200000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all poker players , who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player where  poker_player.earnings < 200000  ",
        "question": "What is the average earnings of poker players , who have earnings below 200000 .",
        "result": "AVG(Earnings) FROM poker_player WHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average earnings of poker players , who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player where  poker_player.earnings < 200000  ",
        "question": "Return the average earnings across all poker players , who have earnings below 200000 .",
        "result": "AVG(Earnings) FROM poker_player WHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the average earnings across all poker players , who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200 and poker_player.earnings < 200000  ",
        "question": "Give average earnings of poker players who are taller than 200 and who have earnings below 200000 .",
        "result": "AVG(Earnings)\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE p.Height > 200 AND pp.Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give average earnings of poker players who are taller than 200 and who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200 or poker_player.earnings < 200000  ",
        "question": "Give average earnings of poker players who are taller than 200 or who have earnings below 200000 .",
        "result": "AVG(Earnings)\nFROM poker_player\nINNER JOIN people\nON poker_player.People_ID = people.People_ID\nWHERE people.Height > 200 OR poker_player.Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give average earnings of poker players who are taller than 200 or who have earnings below 200000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  people.nationality != \"Russia\" and poker_player.earnings > 300000  ",
        "question": "Show names of people whose nationality is not ' Russia ' and whose earnings is higher than 300000 ?",
        "result": "people.Name \nFROM people \nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nWHERE people.Nationality != 'Russia' AND poker_player.Earnings > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show names of people whose nationality is not ' Russia ' and whose earnings is higher than 300000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  people.nationality != \"Russia\" or poker_player.earnings > 300000  ",
        "question": "Show names of people whose nationality is not ' Russia ' or whose earnings is higher than 300000 ?",
        "result": "people.Name \nFROM \npeople \nINNER JOIN \npoker_player ON people.People_ID = poker_player.People_ID \nWHERE \npeople.Nationality != 'Russia' OR poker_player.Earnings > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show names of people whose nationality is not ' Russia ' or whose earnings is higher than 300000 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  people.nationality != \"Russia\" and poker_player.earnings > 300000  ",
        "question": "What are the names of people who are not from Russia and who have earnings above 300000 .",
        "result": "people.Name \nFROM people \nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nWHERE people.Nationality != 'Russia' AND poker_player.Earnings > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia and who have earnings above 300000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  people.nationality != \"Russia\" or poker_player.earnings > 300000  ",
        "question": "What are the names of people who are not from Russia or who have earnings above 300000 .",
        "result": "Name FROM people WHERE Nationality <> 'Russia' OR Earnings > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia or who have earnings above 300000 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select count(*) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "Count the number of poker players , with height higher than 200 ?",
        "result": "COUNT(*) FROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of poker players , with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "List the final tables made and the best finishes of poker players , with height higher than 200 ?",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of poker players , with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "What are the final tables made and best finishes for all poker players , with height higher than 200 ?",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nINNER JOIN people \nON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all poker players , with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "What is the average earnings of poker players , with height higher than 200 ?",
        "result": "AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average earnings of poker players , with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "Return the average earnings across all poker players , with height higher than 200 ?",
        "result": "AVG(Earnings) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the average earnings across all poker players , with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200   order by poker_player.earnings desc limit 1 ",
        "question": "What is the money rank of the poker player with the highest earnings and with height higher than 200 ?",
        "result": "poker_player.Money_Rank\nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200 \nORDER BY poker_player.Earnings DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the money rank of the poker player with the highest earnings and with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200   order by poker_player.earnings desc limit 1 ",
        "question": "Return the money rank of the player with the greatest earnings and with height higher than 200 ?",
        "result": "poker_player.Money_Rank \nFROM \npoker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE \npeople.Height > 200 \nORDER BY poker_player.Earnings DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the money rank of the player with the greatest earnings and with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select max(poker_player.final_table_made) from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings < 200000 and people.height > 200  ",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000 and with height higher than 200 ?",
        "result": "MAX(Final_Table_Made) \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nWHERE Earnings < 200000 AND Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the maximum number of final tables made among poker players with earnings less than 200000 and with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select max(poker_player.final_table_made) from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings < 200000 or people.height > 200  ",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000 or with height higher than 200 ?",
        "result": "MAX(Final_Table_Made) \nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID \nWHERE (Earnings < 200000 OR Height > 200)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the maximum number of final tables made among poker players with earnings less than 200000 or with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.nationality from people where  people.height > 200  group by people.nationality having  count(*) >= 2 ",
        "question": "Return the nationalities for which there are two or more people and with height higher than 200 ?",
        "result": "Nationality \nFROM people \nWHERE Height > 200 \nGROUP BY Nationality \nHAVING COUNT(People_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the nationalities for which there are two or more people and with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.nationality from people  group by people.nationality having  count(*) >= 2  union select people.nationality from people where  people.height > 200  ",
        "question": "Return the nationalities for which there are two or more people or with height higher than 200 ?",
        "result": "Nationality FROM people \nGROUP BY Nationality \nHAVING COUNT(*) >= 2 OR Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the nationalities for which there are two or more people or with height higher than 200 ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select count(*) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "Count the number of poker players , who are taller than 200 .",
        "result": "COUNT(*) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of poker players , who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "List the final tables made and the best finishes of poker players , who are taller than 200 .",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish\nFROM poker_player\nINNER JOIN people ON poker_player.People_ID = people.People_ID\nWHERE people.Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of poker players , who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.final_table_made , poker_player.best_finish from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "What are the final tables made and best finishes for all poker players , who are taller than 200 .",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all poker players , who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "What is the average earnings of poker players , who are taller than 200 .",
        "result": "AVG(Earnings) FROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average earnings of poker players , who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200  ",
        "question": "Return the average earnings across all poker players , who are taller than 200 .",
        "result": "AVG(Earnings) FROM poker_player\nINNER JOIN people ON poker_player.People_ID = people.People_ID\nWHERE Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the average earnings across all poker players , who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select max(poker_player.final_table_made) from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings < 200000 and people.height > 200  ",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000 and who are taller than 200 .",
        "result": "MAX(Final_Table_Made) FROM poker_player pp \nINNER JOIN people p ON pp.People_ID = p.People_ID \nWHERE Earnings < 200000 AND Height > 200",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the maximum final tables made across all poker players who have earnings below 200000 and who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select max(poker_player.final_table_made) from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings < 200000 or people.height > 200  ",
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000 or who are taller than 200 .",
        "result": "MAX(Final_Table_Made) FROM poker_player \nWHERE (Earnings < 200000 OR Height > 200)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the maximum final tables made across all poker players who have earnings below 200000 or who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\" and people.height > 200  ",
        "question": "What are the names of people who are not from Russia and who are taller than 200 .",
        "result": "Name FROM people WHERE Nationality <> 'Russia' AND Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia and who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\" or people.height > 200  ",
        "question": "What are the names of people who are not from Russia or who are taller than 200 .",
        "result": "Name FROM people WHERE Nationality != 'Russia' OR Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia or who are taller than 200 . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.nationality , count(*) from people  group by people.nationality having  count(*) >= 2 ",
        "question": "How many people are there of each nationality , that are shared by at least two people ?",
        "result": "Nationality, COUNT(*) FROM people \nGROUP BY Nationality \nHAVING COUNT(*) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### How many people are there of each nationality , that are shared by at least two people ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.nationality , count(*) from people  group by people.nationality having  count(*) >= 2 ",
        "question": "How many people are there of each nationality , for which there are two or more people .",
        "result": "Nationality, COUNT(*) \nFROM people \nGROUP BY Nationality \nHAVING COUNT(*) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### How many people are there of each nationality , for which there are two or more people . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\"   order by people.name asc",
        "question": "Show names of people whose nationality is not ' Russia ' , in ascending alphabetical order of name .",
        "result": "people.Name \nFROM people \nWHERE people.Nationality != 'Russia' \nORDER BY people.Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show names of people whose nationality is not ' Russia ' , in ascending alphabetical order of name . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\"   order by people.name asc",
        "question": "What are the names of people who are not from Russia , in ascending alphabetical order of name .",
        "result": "Name FROM people WHERE Nationality != 'Russia' ORDER BY Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia , in ascending alphabetical order of name . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\"   order by people.name asc",
        "question": "Show names of people whose nationality is not ' Russia ' , ordered by their names in alphabetical order ?",
        "result": "people.Name \nFROM \npeople \nWHERE \npeople.Nationality <> 'Russia' \nORDER BY \npeople.Name ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show names of people whose nationality is not ' Russia ' , ordered by their names in alphabetical order ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\"   order by people.name asc",
        "question": "What are the names of people who are not from Russia , ordered by their names in alphabetical order ?",
        "result": "Name FROM people WHERE Nationality != 'Russia' ORDER BY Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia , ordered by their names in alphabetical order ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000 and people.nationality != \"Russia\"  ",
        "question": "What are the names of poker players whose earnings is higher than 300000 and whose nationality is not ' Russia ' .",
        "result": "poker_player.Poker_Player_ID, people.Name \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE poker_player.Earnings > 300000 AND people.Nationality != 'Russia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of poker players whose earnings is higher than 300000 and whose nationality is not ' Russia ' . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000 or people.nationality != \"Russia\"  ",
        "question": "What are the names of poker players whose earnings is higher than 300000 or whose nationality is not ' Russia ' .",
        "result": "poker_player.Poker_Player_ID, people.Name \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE poker_player.Earnings > 300000 OR people.Nationality != 'Russia' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of poker players whose earnings is higher than 300000 or whose nationality is not ' Russia ' . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000 and people.nationality != \"Russia\"  ",
        "question": "Give the names of poker players who have earnings above 300000 and who are not from Russia ?",
        "result": "poker_player.Poker_Player_ID, people.Name \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Nationality != 'Russia' AND poker_player.Earnings > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give the names of poker players who have earnings above 300000 and who are not from Russia ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000 or people.nationality != \"Russia\"  ",
        "question": "Give the names of poker players who have earnings above 300000 or who are not from Russia ?",
        "result": "Poker_Player_ID\nFROM poker_player p\nINNER JOIN people pe ON p.People_ID = pe.People_ID\nWHERE Earnings > 300000 OR pe.Nationality <> 'Russia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give the names of poker players who have earnings above 300000 or who are not from Russia ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200 and people.nationality != \"Russia\"  ",
        "question": "Give average earnings of poker players who are taller than 200 and who are not from Russia ?",
        "result": "AVG(Earnings) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200 AND people.Nationality != 'Russia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give average earnings of poker players who are taller than 200 and who are not from Russia ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200 or people.nationality != \"Russia\"  ",
        "question": "Give average earnings of poker players who are taller than 200 or who are not from Russia ?",
        "result": "AVG(Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE (Height > 200 OR Nationality != 'Russia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give average earnings of poker players who are taller than 200 or who are not from Russia ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.nationality from people where  people.people_id not in (select poker_player.People_ID from poker_player  )  group by people.nationality having  count(*) >= 2 ",
        "question": "What are the nationalities that are shared by at least two people and that are not poker players .",
        "result": "people.Nationality \nFROM people \nWHERE people.Nationality IN \n(SELECT people.Nationality \nFROM people \nGROUP BY people.Nationality \nHAVING COUNT(*) > 1) \nAND people.People_ID NOT IN \n(SELECT poker_player.People_ID \nFROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the nationalities that are shared by at least two people and that are not poker players . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.nationality from people  group by people.nationality having  count(*) >= 2  union select people.nationality from people where  people.people_id not in (select poker_player.People_ID from poker_player  )  ",
        "question": "What are the nationalities that are shared by at least two people or that are not poker players .",
        "result": "Nationality\nFROM people\nWHERE Nationality IN (\n    SELECT Nationality\n    FROM people\n    GROUP BY Nationality\n    HAVING COUNT(*) >= 2\n)\nOR People_ID NOT IN (\n    SELECT People_ID\n    FROM poker_player\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the nationalities that are shared by at least two people or that are not poker players . \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\" and people.people_id not in (select poker_player.People_ID from poker_player  )  ",
        "question": "What are the names of people who are not from Russia and who do not play poker ?",
        "result": "Name FROM people WHERE Nationality != 'Russia' AND People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia and who do not play poker ? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people where  people.nationality != \"Russia\" or people.people_id not in (select poker_player.People_ID from poker_player  )  ",
        "question": "What are the names of people who are not from Russia or who do not play poker ?",
        "result": "people.Name \nFROM people \nWHERE people.Nationality <> 'Russia' OR people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia or who do not play poker ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select contestants.contestant_name from contestants where  contestants.contestant_name != \"Jessie Alloway\"   order by contestants.contestant_name desc",
        "question": "What are the names of the contestants whose names are not ' Jessie Alloway ' , ordered by contestant name descending .",
        "result": "contestant_name \nFROM \n  CONTESTANTS \nWHERE \n  contestant_name != 'Jessie Alloway' \nORDER BY \n  contestant_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the names of the contestants whose names are not ' Jessie Alloway ' , ordered by contestant name descending . \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select contestants.contestant_name from contestants where  contestants.contestant_name like \"%Al%\"   order by contestants.contestant_name desc",
        "question": "Return the names of the contestants whose names contain the substring ' Al ' , ordered by contestant name descending .",
        "result": "contestant_name\nFROM CONTESTANTS\nWHERE contestant_name LIKE '% Al %'\nORDER BY contestant_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Return the names of the contestants whose names contain the substring ' Al ' , ordered by contestant name descending . \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select votes.vote_id , votes.phone_number , votes.state from votes where  votes.state = \"CA\"  ",
        "question": "List the vote ids , phone numbers and states of all votes , from the state ' CA ' ?",
        "result": "vote_id, phone_number, state \nFROM VOTES \nWHERE state = 'CA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### List the vote ids , phone numbers and states of all votes , from the state ' CA ' ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select distinct votes.state , votes.created from votes where  votes.state = \"CA\"  ",
        "question": "What are the distinct states and create time of all votes , from the state ' CA ' ?",
        "result": "DISTINCT state, created FROM VOTES WHERE state = 'CA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the distinct states and create time of all votes , from the state ' CA ' ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select votes.vote_id , votes.phone_number , votes.state from votes where  votes.state = \"NY\" or votes.state = \"CA\"  ",
        "question": "List the vote ids , phone numbers and states of all votes , from state ' NY ' or ' CA ' ?",
        "result": "vote_id, phone_number, state \nFROM VOTES \nWHERE state IN ('NY', 'CA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### List the vote ids , phone numbers and states of all votes , from state ' NY ' or ' CA ' ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select distinct votes.state , votes.created from votes where  votes.state = \"NY\" or votes.state = \"CA\"  ",
        "question": "What are the distinct states and create time of all votes , from state ' NY ' or ' CA ' ?",
        "result": "DISTINCT state, created \nFROM VOTES \nWHERE state IN ('NY', 'CA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the distinct states and create time of all votes , from state ' NY ' or ' CA ' ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select votes.vote_id , votes.phone_number , votes.state from votes join contestants on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"  ",
        "question": "List the vote ids , phone numbers and states of all votes , that were for the contestant named ' Tabatha Gehling ' ?",
        "result": "VOTES.vote_id, VOTES.phone_number, VOTES.state\nFROM VOTES \nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### List the vote ids , phone numbers and states of all votes , that were for the contestant named ' Tabatha Gehling ' ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select distinct votes.state , votes.created from votes join contestants on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"  ",
        "question": "What are the distinct states and create time of all votes , that were for the contestant named ' Tabatha Gehling ' ?",
        "result": "DISTINCT state, created\nFROM VOTES\nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the distinct states and create time of all votes , that were for the contestant named ' Tabatha Gehling ' ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select max(area_code_state.area_code) , min(area_code_state.area_code) from votes join contestants on VOTES.contestant_number = CONTESTANTS.contestant_number join area_code_state on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"  ",
        "question": "What are the maximum and minimum values of area codes , in which voters voted both for the contestant ' Tabatha Gehling ' and ?",
        "result": "MAX(area_code), MIN(area_code)\nFROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')\nINTERSECT\nSELECT MAX(area_code), MIN(area_code)\nFROM VOTES\nWHERE contestant_number <> (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the maximum and minimum values of area codes , in which voters voted both for the contestant ' Tabatha Gehling ' and ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select area_code_state.area_code from votes join contestants on VOTES.contestant_number = CONTESTANTS.contestant_number join area_code_state on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = \"Tabatha Gehling\"  group by area_code_state.area_code  order by count(*) desc limit 1 ",
        "question": "What is the area code in which the most voters voted and in which voters voted both for the contestant ' Tabatha Gehling ' and ?",
        "result": "AREA_CODE_STATE.area_code \nFROM VOTES \nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \nJOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state \nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' \nGROUP BY AREA_CODE_STATE.area_code \nHAVING COUNT(DISTINCT VOTES.phone_number) = (SELECT MAX(vote_count) FROM (SELECT COUNT(DISTINCT VOTES.phone_number) AS vote_count FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' GROUP BY AREA_CODE_STATE.area_code)) \nINTERSECT \nSELECT AREA_CODE_STATE.area_code \nFROM VOTES \nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \nJOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state \nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' AND EXISTS (SELECT 1 FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling' AND v.phone_number = VOTES.phone_number AND v.state = VOTES.state AND v.created <> VOTES.created) \nGROUP BY AREA_CODE_STATE.area_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What is the area code in which the most voters voted and in which voters voted both for the contestant ' Tabatha Gehling ' and ? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "select max(area_code_state.area_code) , min(area_code_state.area_code) from area_code_state where  area_code_state.state in (select VOTES.state from votes join contestants on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Tabatha Gehling\"   intersect select VOTES.state from votes join contestants on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = \"Kelly Clauss\"   ) ",
        "question": "What are the maximum and minimum values of area codes , in which voters voted both for the contestant ' Tabatha Gehling ' and the contestant ' Kelly Clauss ' .",
        "result": "MAX(area_code) as max_area_code, MIN(area_code) as min_area_code\nFROM VOTES\nWHERE contestant_number IN (\n    SELECT contestant_number \n    FROM CONTESTANTS \n    WHERE contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')\n)\nGROUP BY state\nHAVING COUNT(DISTINCT contestant_number) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the maximum and minimum values of area codes , in which voters voted both for the contestant ' Tabatha Gehling ' and the contestant ' Kelly Clauss ' . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.indepyear > 1950   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia and that became independent after 1950 ?",
        "result": "country.Name\nFROM \ncountry\nWHERE \ncountry.Continent = 'Asia' AND \ncountry.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = 'Asia' AND country.IndepYear > 1950) AND\ncountry.IndepYear > 1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.indepyear > 1950   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia or that became independent after 1950 ?",
        "result": "Country.Name \nFROM \n    Country \nWHERE \n    (Country.Continent = 'Asia' AND Country.LifeExpectancy = (\n        SELECT \n            MIN(Country.LifeExpectancy) \n        FROM \n            Country \n        WHERE \n            Country.Continent = 'Asia'\n    )) OR \n    Country.IndepYear > 1950 AND Country.LifeExpectancy = (\n        SELECT \n            MIN(Country.LifeExpectancy) \n        FROM \n            Country \n        WHERE \n            Country.IndepYear > 1950\n    )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia or that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that became independent after 1950 ?",
        "result": "country.Name \nFROM country \nINNER JOIN \n    (SELECT CountryCode, COUNT(Language) AS LanguageCount \n     FROM countrylanguage \n     GROUP BY CountryCode \n     ORDER BY LanguageCount DESC \n     LIMIT 1) AS LanguageCountTable \nON country.Code = LanguageCountTable.CountryCode \nWHERE country.IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that became independent after 1950 ?",
        "result": "country.Name \nFROM country \nJOIN (\n    SELECT CountryCode, COUNT(*) AS num_languages\n    FROM countrylanguage \n    GROUP BY CountryCode \n    HAVING IsOfficial = 'T'\n    ORDER BY num_languages DESC \n    LIMIT 1\n) AS lang_count ON country.Code = lang_count.CountryCode \nWHERE country.IndepYear > 1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and country.indepyear > 1950  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations and that became independent after 1950 ?",
        "result": "Language \nFROM countrylanguage \nWHERE CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Asia' AND IndepYear > 1950) \nGROUP BY Language \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or country.indepyear > 1950  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations or that became independent after 1950 ?",
        "result": "countrylanguage.Language \nFROM \n    countrylanguage \n    JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE \n    (country.Continent = 'Asia' OR country.IndepYear > 1950) \nGROUP BY \n    countrylanguage.Language \nORDER BY \n    COUNT(*) DESC \nLIMIT \n    1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations or that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.indepyear > 1950   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that became independent after 1950 ?",
        "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Population = (SELECT MIN(Population) FROM country) AND IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.indepyear > 1950   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that became independent after 1950 ?",
        "result": "country.Name, country.Population, country.HeadOfState\nFROM country\nWHERE country.IndepYear > 1950\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.indepyear > 1950  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that became independent after 1950 ?",
        "result": "GovernmentForm, SUM(Population) \nFROM country \nWHERE IndepYear > 1950 AND LifeExpectancy > 72 \nGROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that became independent after 1950 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.indepyear > 1950   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia and that were founded after 1950 .",
        "result": "Country.Name\nFROM Country\nWHERE Country.Continent = 'Asia' AND Country.LifeExpectancy = (\n    SELECT MIN(Country.LifeExpectancy)\n    FROM Country\n    WHERE Country.Continent = 'Asia' AND Country.IndepYear > 1950\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.indepyear > 1950   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia or that were founded after 1950 .",
        "result": "Name FROM country \nWHERE (Continent = 'Asia' OR IndepYear > 1950) AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR IndepYear > 1950)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia or that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that were founded after 1950 .",
        "result": "Name FROM country \nWHERE IndepYear > 1950 \nAND Code IN \n(SELECT CountryCode FROM countrylanguage \nGROUP BY CountryCode \nHAVING COUNT(Language) = \n(SELECT MAX(numLanguages) \nFROM (SELECT COUNT(Language) AS numLanguages FROM countrylanguage GROUP BY CountryCode))))\n;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that were founded after 1950 .",
        "result": "country.Name \nFROM \ncountry \nJOIN \n(SELECT \n  CountryCode, \n  COUNT(Language) AS LanguageCount \nFROM \n  countrylanguage \nGROUP BY \n  CountryCode \nHAVING \n  MAX(LanguageCount)\n) AS lang_count ON country.Code = lang_count.CountryCode \nWHERE \n  country.IndepYear > 1950 \nORDER BY \n  lang_count.LanguageCount DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and country.indepyear > 1950  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations and that were founded after 1950 .",
        "result": "CountryLanguage.Language\nFROM CountryLanguage\nINNER JOIN Country ON Country.Code = CountryLanguage.CountryCode\nWHERE Country.Continent = 'Asia' AND Country.IndepYear > 1950 AND CountryLanguage.IsOfficial = 'T'\nGROUP BY CountryLanguage.Language\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or country.indepyear > 1950  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations or that were founded after 1950 .",
        "result": "Language \nFROM countrylanguage \nWHERE CountryCode IN \n    (SELECT Code \n     FROM country \n     WHERE (Continent='Asia' OR IndepYear > 1950)) \nORDER BY Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations or that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.indepyear > 1950   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that were founded after 1950 .",
        "result": "Name, IndepYear, SurfaceArea\nFROM country\nWHERE Population = (SELECT MIN(Population) FROM country WHERE IndepYear > 1950)\nAND IndepYear > 1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.indepyear > 1950   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that were founded after 1950 .",
        "result": "country.Name, country.Population, country.HeadOfState\nFROM country\nWHERE country.IndepYear > 1950\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.indepyear > 1950  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that were founded after 1950 .",
        "result": "GovernmentForm, SUM(Population) \nFROM country \nWHERE GovernmentForm IN (\n    SELECT GovernmentForm \n    FROM country \n    WHERE IndepYear > 1950 AND LifeExpectancy > 72 \n    GROUP BY GovernmentForm\n) \nGROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that were founded after 1950 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and have a Republic as their form of government ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region='Caribbean' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or have a Republic as their form of government ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE (Region = 'Caribbean' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform = \"Republic\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have a Republic as their form of government ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'North America' \nAND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform = \"Republic\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have a Republic as their form of government ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE (Continent = 'Caribbean' AND GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and have a Republic as their form of government ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region='Central Africa' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or have a Republic as their form of government ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Region = 'Central Africa' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and have a Republic as their form of government ?",
        "result": "country.Name \nFROM country \nWHERE country.Continent='Asia' AND country.GovernmentForm='Republic' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or have a Republic as their form of government ?",
        "result": "Name FROM country WHERE Continent='Asia' AND GovernmentForm='Republic' ORDER BY LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"  ",
        "question": "How many different forms of governments are there in Africa and have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.governmentform = \"Republic\"  ",
        "question": "How many different forms of governments are there in Africa or have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE (Continent = 'Africa' OR GovernmentForm = 'Republic');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total number of languages used in Aruba and have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' AND IsOfficial = 'T' \nAND CountryCode IN (\n  SELECT Code FROM country WHERE GovernmentForm = 'Republic'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total number of languages used in Aruba or have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.governmentform = \"Republic\"  ",
        "question": "How many languages are spoken in Aruba and have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage cl \nJOIN country c ON cl.CountryCode = c.Code \nWHERE c.Name = 'Aruba' AND c.GovernmentForm = 'Republic' AND cl.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.governmentform = \"Republic\"  ",
        "question": "How many languages are spoken in Aruba or have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and have a Republic as their form of government ?",
        "result": "country.Continent \nFROM country \nWHERE country.GovernmentForm = 'Republic' \nGROUP BY country.Continent \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and have a Republic as their form of government ?",
        "result": "Continent FROM country \nWHERE GovernmentForm = 'Republic' \nGROUP BY Continent \nORDER BY COUNT(DISTINCT(Language)) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.governmentform = \"Republic\"  ",
        "question": "How many continents speak Chinese and have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT country.Continent) FROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE Language = 'Chinese' AND GovernmentForm = 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.governmentform = \"Republic\"  ",
        "question": "How many continents speak Chinese or have a Republic as their form of government ?",
        "result": "COUNT(DISTINCT Country.Continent) FROM country\nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'Chinese' OR country.GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and have a Republic as their form of government ?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE country.Continent = 'Asia' AND country.GovernmentForm = 'Republic'\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or have a Republic as their form of government ?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE (country.Continent = 'Asia' AND country.GovernmentForm LIKE '%Republic%')\nOR country.SurfaceArea = (\n    SELECT MAX(country.SurfaceArea)\n    FROM country\n    WHERE country.Continent = 'Asia' AND country.GovernmentForm LIKE '%Republic%'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.governmentform = \"Republic\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and have a Republic as their form of government ?",
        "result": "Name, IndepYear, SurfaceArea\nFROM country\nWHERE GovernmentForm = 'Republic' AND Population = (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and have a Republic as their form of government ?",
        "result": "country.Population, country.Name, country.HeadOfState\nFROM country\nWHERE GovernmentForm = 'Republic'\nORDER BY SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.governmentform = \"Republic\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and have a Republic as their form of government ?",
        "result": "country.Name, country.SurfaceArea\nFROM country\nWHERE GovernmentForm = 'Republic'\nORDER BY SurfaceArea DESC\nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.governmentform = \"Republic\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and have a Republic as their form of government ?",
        "result": "Country.Name\nFROM Country\nWHERE Country.GovernmentForm = 'Republic'\nORDER BY Country.Population DESC\nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.governmentform = \"Republic\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and have a Republic as their form of government ?",
        "result": "Name \nFROM \ncountry \nWHERE \nGovernmentForm = 'Republic' \nORDER BY \nPopulation ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia and have a Republic as their form of government ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' AND GovernmentForm='Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia or have a Republic as their form of government ?",
        "result": "COUNT(*) FROM country WHERE (Continent='Asia') OR (GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia and have a Republic as their form of government ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' AND GovernmentForm='Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia or have a Republic as their form of government ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or have a Republic as their form of government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and have governments that are Republic ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region='Caribbean' AND GovernmentForm='Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or have governments that are Republic ?",
        "result": "SUM(SurfaceArea) FROM country WHERE (Region='Caribbean' OR GovernmentForm='Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform = \"Republic\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have governments that are Republic ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'North America' \nAND Region = 'Caribbean' \nAND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform = \"Republic\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have governments that are Republic ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE (Continent = 'Caribbean' OR GovernmentForm = 'Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and have governments that are Republic ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or have governments that are Republic ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Region = 'Central Africa' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and have governments that are Republic ?",
        "result": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' AND country.GovernmentForm LIKE '%Republic%' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or have governments that are Republic ?",
        "result": "country.Name\nFROM country\nWHERE (country.Continent = 'Asia' AND country.GovernmentForm LIKE '%Republic%') OR country.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE country.Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"  ",
        "question": "How many different forms of governments are there in Africa and have governments that are Republic ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.governmentform = \"Republic\"  ",
        "question": "How many different forms of governments are there in Africa or have governments that are Republic ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE (Continent='Africa' OR GovernmentForm='Republic');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total number of languages used in Aruba and have governments that are Republic ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' AND IsOfficial = 'T' \nAND EXISTS (SELECT * FROM country \nWHERE GovernmentForm = 'Republic' AND Code = 'ABW')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total number of languages used in Aruba or have governments that are Republic ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.governmentform = \"Republic\"  ",
        "question": "How many languages are spoken in Aruba and have governments that are Republic ?",
        "result": "COUNT(DISTINCT cl.Language)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.Name = 'Aruba' AND c.GovernmentForm = 'Republic' AND cl.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.governmentform = \"Republic\"  ",
        "question": "How many languages are spoken in Aruba or have governments that are Republic ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage\nWHERE CountryCode = 'ABW' OR GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and have governments that are Republic ?",
        "result": "Continent \nFROM country \nWHERE GovernmentForm = 'Republic' \nGROUP BY Continent \nORDER BY COUNT(DISTINCT Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and have governments that are Republic ?",
        "result": "Continent \nFROM country \nWHERE GovernmentForm = 'Republic' \nGROUP BY Continent \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.governmentform = \"Republic\"  ",
        "question": "How many continents speak Chinese and have governments that are Republic ?",
        "result": "COUNT(DISTINCT country.Continent) FROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'Chinese' AND country.GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.governmentform = \"Republic\"  ",
        "question": "How many continents speak Chinese or have governments that are Republic ?",
        "result": "COUNT(DISTINCT country.Continent) FROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE (countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T') \nOR country.GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and have governments that are Republic ?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE country.Continent = 'Asia' AND country.GovernmentForm = 'Republic'\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or have governments that are Republic ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE country.Continent = 'Asia' AND \n       (country.GovernmentForm LIKE '%Republic%' OR \n        country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.governmentform = \"Republic\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and have governments that are Republic ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea\nFROM country\nWHERE country.GovernmentForm = 'Republic'\nORDER BY country.Population ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and have governments that are Republic ?",
        "result": "country.Name, country.HeadOfState, country.Population \nFROM country \nWHERE GovernmentForm = 'Republic' \nORDER BY SurfaceArea DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.governmentform = \"Republic\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and have governments that are Republic ?",
        "result": "country.Name, country.SurfaceArea\nFROM country\nWHERE country.GovernmentForm = 'Republic'\nORDER BY country.SurfaceArea DESC\nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.governmentform = \"Republic\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and have governments that are Republic ?",
        "result": "Name FROM country \nWHERE GovernmentForm = 'Republic' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.governmentform = \"Republic\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and have governments that are Republic ?",
        "result": "Name \nFROM country \nWHERE GovernmentForm = 'Republic' \nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia and have governments that are Republic ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia or have governments that are Republic ?",
        "result": "COUNT(*) FROM country WHERE (Continent='Asia') OR (GovernmentForm='Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia and have governments that are Republic ?",
        "result": "COUNT(*) \nFROM country\nWHERE Continent = 'Asia' AND GovernmentForm = 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia or have governments that are Republic ?",
        "result": "COUNT(*) FROM country WHERE (Continent = 'Asia') OR (GovernmentForm LIKE '%Republic%');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or have governments that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.region = \"Caribbean\"  ",
        "question": "How many countries have a Republic as their form of government and in the Caribbean region ?",
        "result": "COUNT(*) \nFROM country\nWHERE GovernmentForm = 'Republic' AND Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.region = \"Caribbean\"  ",
        "question": "How many countries have a Republic as their form of government or in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm = 'Republic' OR Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.region = \"Caribbean\"  ",
        "question": "How many countries have governments that are Republic and in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.region = \"Caribbean\"  ",
        "question": "How many countries have governments that are Republic or in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.region = \"Caribbean\"  ",
        "question": "What are the population and life expectancies in Brazil and in the Caribbean region ?",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE (country.Name = 'Brazil' OR country.Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.region = \"Caribbean\"  ",
        "question": "What are the population and life expectancies in Brazil or in the Caribbean region ?",
        "result": "Population, LifeExpectancy \nFROM \n  country \nWHERE \n  Name = 'Brazil' OR Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.region = \"Caribbean\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in the Caribbean region ?",
        "result": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' AND country.Region = 'Caribbean' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.region = \"Caribbean\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in the Caribbean region ?",
        "result": "Name \nFROM \n    country \nWHERE \n    (Continent = 'Asia' OR Region = 'Caribbean') \nAND \n    LifeExpectancy = (\n        SELECT \n            MIN(LifeExpectancy) \n        FROM \n            country \n        WHERE \n            Continent = 'Asia' OR Region = 'Caribbean'\n    );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.region = \"Caribbean\"  ",
        "question": "What is the total population and maximum GNP in Asia and in the Caribbean region ?",
        "result": "SUM(country.Population), MAX(country.GNP) FROM country \nWHERE country.Continent = 'Asia' OR country.Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.region = \"Caribbean\"  ",
        "question": "What is the total population and maximum GNP in Asia or in the Caribbean region ?",
        "result": "SUM(country.Population), MAX(country.GNP)\nFROM country\nWHERE country.Continent = 'Asia' OR country.Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.region = \"Caribbean\"  ",
        "question": "How many type of governments are in Africa and in the Caribbean region ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country \nWHERE Continent = 'Africa' AND Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.region = \"Caribbean\"  ",
        "question": "How many type of governments are in Africa or in the Caribbean region ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE (Continent='Africa' OR Region='Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" and country.region = \"Caribbean\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and in the Caribbean region ?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE country.Continent = 'Asia' AND country.Region = 'Caribbean' \nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" or country.region = \"Caribbean\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or in the Caribbean region ?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE (country.Continent = 'Asia' OR country.Region = 'Caribbean') AND country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE country.Continent = 'Asia' OR country.Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.region = \"Caribbean\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in the Caribbean region ?",
        "result": "c.Name, c.IndepYear, c.SurfaceArea\nFROM country c\nWHERE c.Region = 'Caribbean' AND c.Population = (SELECT MIN(Population) FROM country WHERE Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.region = \"Caribbean\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in the Caribbean region ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent = 'Caribbean' \nORDER BY country.SurfaceArea DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.region = \"Caribbean\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in the Caribbean region ?",
        "result": "Name, SurfaceArea \n FROM country \n WHERE Region = 'Caribbean' \n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Caribbean\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in the Caribbean region ?",
        "result": "Name FROM country \nWHERE Region='Caribbean' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Caribbean\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in the Caribbean region ?",
        "result": "Name FROM country WHERE Region = 'Caribbean' ORDER BY Population ASC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Caribbean\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in the Caribbean region ?",
        "result": "Name FROM country WHERE Region='Caribbean' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.region = \"Caribbean\"  ",
        "question": "how many countries are in Asia and in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia';\n SELECT COUNT(*) FROM country WHERE Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.region = \"Caribbean\"  ",
        "question": "how many countries are in Asia or in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.region = \"Caribbean\"  ",
        "question": "Count the number of countries in Asia and in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia'; \nSELECT COUNT(*) FROM country WHERE Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.region = \"Caribbean\"  ",
        "question": "Count the number of countries in Asia or in the Caribbean region ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' OR Region='Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in the Caribbean region ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.region = \"Caribbean\"  ",
        "question": "How many countries have a Republic as their form of government and do the countires in the Caribbean cover together ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic'; \nSELECT SUM(Population) FROM country WHERE Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.region = \"Caribbean\"  ",
        "question": "How many countries have a Republic as their form of government or do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT Country.Name)\nFROM Country\nLEFT JOIN City ON Country.Capital = City.ID\nWHERE Country.GovernmentForm LIKE '%Republic%' OR Country.Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.region = \"Caribbean\"  ",
        "question": "How many countries have governments that are Republic and do the countires in the Caribbean cover together ?",
        "result": "COUNT(*) as RepublicCountriesCount, SUM(Population) as CaribbeanPopulation\n FROM country\n JOIN city ON country.Capital = city.ID\n WHERE country.GovernmentForm = 'Republic' AND country.Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.region = \"Caribbean\"  ",
        "question": "How many countries have governments that are Republic or do the countires in the Caribbean cover together ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.region = \"Caribbean\"  ",
        "question": "How many different forms of governments are there in Africa and do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';\n\nSELECT COUNT(DISTINCT CountryCode) FROM country WHERE Continent = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.region = \"Caribbean\"  ",
        "question": "How many different forms of governments are there in Africa or do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' OR Continent = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.region = \"Caribbean\"  ",
        "question": "What is the total number of languages used in Aruba and do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW';\n\nSELECT COUNT(DISTINCT CountryCode) \nFROM country \nWHERE Continent = 'North America' OR Continent = 'South America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.region = \"Caribbean\"  ",
        "question": "What is the total number of languages used in Aruba or do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode IN \n  (SELECT Code \n   FROM country \n   WHERE Region = 'Caribbean' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.region = \"Caribbean\"  ",
        "question": "How many languages are spoken in Aruba and do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode='ABW';\n\nSELECT COUNT(DISTINCT countrylanguage.Language) \nFROM countrylanguage \nJOIN country ON country.Code=countrylanguage.CountryCode \nWHERE country.Region='Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.region = \"Caribbean\"  ",
        "question": "How many languages are spoken in Aruba or do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Caribbean' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.region = \"Caribbean\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and do the countires in the Caribbean cover together ?",
        "result": "country.Continent, COUNT(DISTINCT countrylanguage.Language)\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent <> ''\nGROUP BY country.Continent\nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC\nLIMIT 1;\n\nSELECT SUM(city.Population)\nFROM city\nJOIN country ON city.CountryCode = country.Code\nWHERE country.Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.region = \"Caribbean\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and do the countires in the Caribbean cover together ?",
        "result": "Continent, COUNT(DISTINCT Language) FROM countrylanguage\nJOIN country ON country.Code = countrylanguage.CountryCode\nWHERE IsOfficial = 'T'\nGROUP BY Continent\nORDER BY COUNT(DISTINCT Language) DESC\nLIMIT 1;\n\nSELECT SUM(Population) FROM city \nJOIN country ON city.CountryCode = country.Code\nWHERE Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.region = \"Caribbean\"  ",
        "question": "How many continents speak Chinese and do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT country.Continent) FROM countrylanguage\nINNER JOIN country ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'Chinese';\n\nSELECT SUM(city.Population) FROM city\nINNER JOIN country ON country.Code = city.CountryCode\nWHERE country.Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.region = \"Caribbean\"  ",
        "question": "How many continents speak Chinese or do the countires in the Caribbean cover together ?",
        "result": "COUNT(DISTINCT Continent) FROM country WHERE Language = 'Chinese'\n UNION\n SELECT COUNT(*) FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.region = \"Caribbean\"  ",
        "question": "how many countries are in Asia and do the countires in the Caribbean cover together ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia';\n\nSELECT SUM(Population) FROM country WHERE Region='Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.region = \"Caribbean\"  ",
        "question": "how many countries are in Asia or do the countires in the Caribbean cover together ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or do the countires in the Caribbean cover together ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" and country.name = \"Anguilla\"  ",
        "question": "Give the mean GNP and total population of nations which are considered US Territory and which Anguilla belongs to ?",
        "result": "AVG(GNP), SUM(Population)\nFROM country\nWHERE Continent = 'North America' AND (Name = 'United States' OR Name = 'Puerto Rico' OR Name = 'Guam' OR Name = 'American Samoa' OR Name = 'Northern Mariana Islands' OR Name = 'Virgin Islands') OR Name = 'Anguilla'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the mean GNP and total population of nations which are considered US Territory and which Anguilla belongs to ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" or country.name = \"Anguilla\"  ",
        "question": "Give the mean GNP and total population of nations which are considered US Territory or which Anguilla belongs to ?",
        "result": "AVG(GNP), SUM(Population) \nFROM country \nWHERE Code = 'ASM' OR Code = 'GUM' OR Code = 'MNP' OR Code = 'PRI' OR Code = 'VIR' OR Code = 'AIA';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the mean GNP and total population of nations which are considered US Territory or which Anguilla belongs to ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"T\" and country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix and is the most popular ?",
        "result": "countrylanguage.Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE countrylanguage.IsOfficial = 'T' \nAND country.HeadOfState = 'Beatrix' \nORDER BY countrylanguage.Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the official language used in the country the name of whose head of state is Beatrix and is the most popular ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Aruba\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Aruba ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Aruba\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Aruba ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.name = \"Aruba\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Aruba ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.name = \"Aruba\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Aruba ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.name = \"Aruba\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Aruba ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Name = 'Central African Republic' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.name = \"Aruba\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Aruba ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent = 'Africa' AND Region = 'Central Africa') OR (Name = 'Aruba');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.name = \"Aruba\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in Aruba ?",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1; \n SELECT Name FROM country WHERE Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.name = \"Aruba\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in Aruba ?",
        "result": "Name \nFROM \n    country \nWHERE \n    (Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia'))\n    OR \n    (Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.name = \"Aruba\"  ",
        "question": "What is the total population and maximum GNP in Asia and in Aruba ?",
        "result": "SUM(country.Population), MAX(country.GNP) \nFROM country \nWHERE (country.Continent = 'Asia' OR country.Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.name = \"Aruba\"  ",
        "question": "What is the total population and maximum GNP in Asia or in Aruba ?",
        "result": "MAX(GNP), SUM(Population) \nFROM country \nWHERE (Continent = 'Asia' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Aruba\"  ",
        "question": "How many type of governments are in Africa and in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent='Africa' \nSELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Name='Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Aruba\"  ",
        "question": "How many type of governments are in Africa or in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE (Continent = 'Africa' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\" and country.name = \"Aruba\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English and in Aruba ?",
        "result": "DISTINCT CountryCode \nFROM countrylanguage \nWHERE CountryCode <> 'ABW' AND Language <> 'English' \nINTERSECT \nSELECT CountryCode \nFROM countrylanguage \nWHERE CountryCode = 'ABW' AND Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   union select country.code from country where  country.name = \"Aruba\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English or in Aruba ?",
        "result": "DISTINCT CountryCode FROM countrylanguage WHERE Language NOT IN ('English') AND CountryCode NOT IN ('ABW')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Aruba\"  ",
        "question": "Count the number of countries in Asia and in Aruba ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' OR Name='Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Aruba\"  ",
        "question": "Count the number of countries in Asia or in Aruba ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"T\" and country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix and is predominantly spoken ?",
        "result": "countrylanguage.Language \nFROM \ncountry \nJOIN \ncountrylanguage \nON \ncountry.Code = countrylanguage.CountryCode \nWHERE \ncountrylanguage.IsOfficial = 'T' \nAND \ncountrylanguage.Percentage > 50 \nAND \ncountry.HeadOfState = 'Beatrix'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the official language used in the country the name of whose head of state is Beatrix and is predominantly spoken ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Aruba\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Aruba ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE (Region = 'Caribbean' OR Name = 'Aruba');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Aruba\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Aruba ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.name = \"Aruba\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Aruba ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Name = 'Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.name = \"Aruba\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Aruba ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Name = 'Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.name = \"Aruba\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Aruba ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent = 'Africa' AND Region = 'Central Africa') OR (Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.name = \"Aruba\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Aruba ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent = 'Africa' AND Region = 'Central Africa') OR (Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.name = \"Aruba\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in Aruba ?",
        "result": "Name FROM country WHERE (Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')) OR (Name = 'Aruba' AND Continent <> 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.name = \"Aruba\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in Aruba ?",
        "result": "Name FROM country WHERE (Continent = 'Asia' OR Name = 'Aruba') AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.name = \"Aruba\"  ",
        "question": "What is the total population and maximum GNP in Asia and in Aruba ?",
        "result": "SUM(Population), MAX(GNP) \nFROM city \nWHERE CountryCode IN (SELECT Code FROM country WHERE (Continent = 'Asia' OR Name = 'Aruba'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.name = \"Aruba\"  ",
        "question": "What is the total population and maximum GNP in Asia or in Aruba ?",
        "result": "MAX(GNP), SUM(Population) FROM \n(SELECT GNP, Population FROM country WHERE Continent = 'Asia' \nUNION \nSELECT GNP, Population FROM country WHERE Name = 'Aruba') AS combined_data;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Aruba\"  ",
        "question": "How many type of governments are in Africa and in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent='Africa' OR Name='Aruba' AND Continent='North America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Aruba\"  ",
        "question": "How many type of governments are in Africa or in Aruba ?",
        "result": "DISTINCT GovernmentForm \nFROM country \nWHERE Continent = 'Africa' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\" and country.name = \"Aruba\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English and in Aruba ?",
        "result": "DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English' AND CountryCode = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   union select country.code from country where  country.name = \"Aruba\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English or in Aruba ?",
        "result": "DISTINCT CountryCode FROM countrylanguage WHERE Language NOT IN ('English') AND CountryCode NOT IN ('ABW')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Aruba\"  ",
        "question": "Count the number of countries in Asia and in Aruba ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia'; \n\nSELECT COUNT(*) FROM country WHERE Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Aruba\"  ",
        "question": "Count the number of countries in Asia or in Aruba ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Name = 'Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Brazil\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Brazil ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'South America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Brazil\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Brazil ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.name = \"Brazil\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Brazil ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' OR Name='Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.name = \"Brazil\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Brazil ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Region = 'Central Africa' OR Name = 'Brazil');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.name = \"Brazil\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Brazil ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent = 'Africa' AND Region = 'Central Africa') OR (Name = 'Brazil')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.name = \"Brazil\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Brazil ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE (Continent = 'Africa' AND Region = 'Central Africa') OR Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.name = \"Brazil\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in Brazil ?",
        "result": "Name FROM country WHERE (Continent='Asia' AND LifeExpectancy=(SELECT MIN(LifeExpectancy) FROM country WHERE Continent='Asia')) OR (Name='Brazil' AND LifeExpectancy=(SELECT MIN(LifeExpectancy) FROM country WHERE Name='Brazil'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.name = \"Brazil\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in Brazil ?",
        "result": "Name \nFROM \n    country \nWHERE \n    (Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')) \n    OR \n    (Name = 'Brazil')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.name = \"Brazil\"  ",
        "question": "What is the total population and maximum GNP in Asia and in Brazil ?",
        "result": "SUM(Population), MAX(GNP) \nFROM country \nWHERE Continent = 'Asia' OR Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.name = \"Brazil\"  ",
        "question": "What is the total population and maximum GNP in Asia or in Brazil ?",
        "result": "MAX(GNP), SUM(Population) FROM country WHERE (Continent = 'Asia' OR Name = 'Brazil')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Brazil\"  ",
        "question": "How many type of governments are in Africa and in Brazil ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';\n\nSELECT \nCOUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Name = 'Brazil';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Brazil\"  ",
        "question": "How many type of governments are in Africa or in Brazil ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' OR Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" and country.name = \"Brazil\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and in Brazil ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;\n\nSELECT country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Name LIKE '%Brazil%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" or country.name = \"Brazil\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or in Brazil ?",
        "result": "Name, Population, LifeExpectancy FROM country WHERE Continent='Asia' ORDER BY SurfaceArea DESC LIMIT 1 \nUNION \nSELECT Name, Population, LifeExpectancy FROM country WHERE Name='Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.name = \"Brazil\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Brazil ?",
        "result": "name, IndepYear, SurfaceArea FROM country \nWHERE Continent = 'South America' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'South America' AND Name = 'Brazil')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.name = \"Brazil\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Brazil ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent='South America' AND country.Region='Brazil' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.name = \"Brazil\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Brazil ?",
        "result": "Name, SurfaceArea\nFROM country\nWHERE Continent = 'South America' AND Name != 'Brazil'\nORDER BY SurfaceArea DESC\nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.name = \"Brazil\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Brazil ?",
        "result": "Name \nFROM \n  country \nWHERE \n  Continent = 'South America' AND Name != 'Brazil'\nORDER BY \n  Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.name = \"Brazil\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Brazil ?",
        "result": "Name FROM country WHERE Continent = 'South America' AND Population IN (SELECT Population FROM country WHERE Continent = 'South America' AND Name <> 'Brazil' ORDER BY Population ASC LIMIT 3) UNION SELECT Name FROM country WHERE Name = 'Brazil' ORDER BY Population ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.name = \"Brazil\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Brazil ?",
        "result": "Name \nFROM country \nWHERE Continent = 'South America' \nAND Population > 0 \nAND Name NOT IN ('Brazil') \nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Brazil\"  ",
        "question": "Count the number of countries in Asia and in Brazil ?",
        "result": "COUNT(*) FROM country WHERE continent = 'Asia';\nSELECT COUNT(*) FROM country WHERE name = 'Brazil';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Brazil\"  ",
        "question": "Count the number of countries in Asia or in Brazil ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' OR Name='Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in Brazil ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.region = \"Central Africa\"  ",
        "question": "How many countries have a Republic as their form of government and in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.region = \"Central Africa\"  ",
        "question": "How many countries have a Republic as their form of government or in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.region = \"Central Africa\"  ",
        "question": "How many countries have governments that are Republic and in the region of Central Africa ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.region = \"Central Africa\"  ",
        "question": "How many countries have governments that are Republic or in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.region = \"Central Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in the region of Central Africa ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.region = \"Central Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in the region of Central Africa ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in the region of Central Africa ?",
        "result": "Name FROM country WHERE Continent = 'Asia' AND Region = 'Central Africa' ORDER BY LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in the region of Central Africa ?",
        "result": "Name FROM country WHERE (Continent = 'Asia' OR Region = 'Central Africa') AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR Region = 'Central Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"  ",
        "question": "What is the total population and maximum GNP in Asia and in the region of Central Africa ?",
        "result": "SUM(Population), MAX(GNP) \nFROM country \nWHERE Continent = 'Asia' OR Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"  ",
        "question": "What is the total population and maximum GNP in Asia or in the region of Central Africa ?",
        "result": "SUM(Population), MAX(GNP) FROM country \nWHERE (Continent = 'Asia' OR Region = 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.region = \"Central Africa\"  ",
        "question": "How many type of governments are in Africa and in the region of Central Africa ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';\n\nSELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.region = \"Central Africa\"  ",
        "question": "How many type of governments are in Africa or in the region of Central Africa ?",
        "result": "DISTINCT GovernmentForm \nFROM country \nWHERE Continent = 'Africa' OR Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and in the region of Central Africa ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE continent = 'Asia' AND region = 'Central Africa' \nORDER BY SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or in the region of Central Africa ?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE (country.Continent = 'Asia' AND country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia'))\nOR (country.Region = 'Central Africa' AND country.Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.region = \"Central Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in the region of Central Africa ?",
        "result": "Name, IndepYear, SurfaceArea FROM country \nWHERE Region = 'Central Africa' \nAND Population = (SELECT MIN(Population) FROM country WHERE Region = 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.region = \"Central Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in the region of Central Africa ?",
        "result": "country.Population, country.Name, country.HeadOfState \n FROM country \n WHERE Region = 'Central Africa' \n ORDER BY SurfaceArea DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.region = \"Central Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in the region of Central Africa ?",
        "result": "Name, SurfaceArea \n FROM country\n WHERE Region = 'Central Africa'\n ORDER BY SurfaceArea DESC\n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Central Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in the region of Central Africa ?",
        "result": "Name \nFROM country \nWHERE Region = 'Central Africa' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Central Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in the region of Central Africa ?",
        "result": "Name FROM country WHERE Region = 'Central Africa' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Central Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in the region of Central Africa ?",
        "result": "Name FROM country\nWHERE Region = 'Central Africa'\nORDER BY Population ASC\nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"  ",
        "question": "how many countries are in Asia and in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia';\nSELECT COUNT(*) FROM country WHERE Region='Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"  ",
        "question": "how many countries are in Asia or in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE (Continent = 'Asia') OR (Region = 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"  ",
        "question": "Count the number of countries in Asia and in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia';\n\nSELECT COUNT(*) FROM country WHERE Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"  ",
        "question": "Count the number of countries in Asia or in the region of Central Africa ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in the region of Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.region = \"Central Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in Central Africa ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR (Name = 'Central African Republic' AND Continent = 'Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.region = \"Central Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in Central Africa ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR (Name = 'Central African Republic' AND Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in Central Africa ?",
        "result": "Name FROM country WHERE Continent='Asia' AND Region='Central Africa' ORDER BY LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in Central Africa ?",
        "result": "Name FROM country WHERE (Continent = 'Asia' OR Region = 'Central Africa') AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR Region = 'Central Africa') LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"  ",
        "question": "What is the total population and maximum GNP in Asia and in Central Africa ?",
        "result": "SUM(Population), MAX(GNP)\nFROM country\nWHERE Continent = 'Asia' OR (Continent = 'Africa' AND Region = 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"  ",
        "question": "What is the total population and maximum GNP in Asia or in Central Africa ?",
        "result": "SUM(Population), MAX(GNP) \nFROM country \nWHERE (Continent = 'Asia' OR Region = 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.region = \"Central Africa\"  ",
        "question": "How many type of governments are in Africa and in Central Africa ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';\n \n SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.region = \"Central Africa\"  ",
        "question": "How many type of governments are in Africa or in Central Africa ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE (Continent = 'Africa' OR Region = 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and in Central Africa ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE country.Continent = 'Asia' AND country.Region = 'Central Africa' \n ORDER BY country.SurfaceArea DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or in Central Africa ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE (country.Continent = 'Asia' OR country.Region = 'Central Africa') \n ORDER BY country.SurfaceArea DESC \n LIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.region = \"Central Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Central Africa ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea\nFROM country\nJOIN city ON country.Code = city.CountryCode\nWHERE country.Continent = 'Africa' AND country.Region = 'Central Africa'\nORDER BY country.Population ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.region = \"Central Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Central Africa ?",
        "result": "country.Name, country.HeadOfState, country.Population \nFROM country \nWHERE country.Continent = 'Africa' AND country.Region = 'Central Africa' \nORDER BY country.SurfaceArea DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.region = \"Central Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Central Africa ?",
        "result": "Name, SurfaceArea FROM country \nWHERE Continent = 'Africa' AND Region = 'Central Africa' \nORDER BY SurfaceArea DESC \nLIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Central Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Central Africa ?",
        "result": "Name FROM country WHERE Continent='Africa' AND Region='Central Africa' ORDER BY Population DESC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Central Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Central Africa ?",
        "result": "Name FROM country \nWHERE Continent = 'Africa' \nAND Region = 'Central Africa' \nORDER BY Population ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.region = \"Central Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Central Africa ?",
        "result": "Name FROM country \nWHERE Continent='Africa' AND Region='Central Africa'\nORDER BY Population ASC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.region = \"Central Africa\"  ",
        "question": "Count the number of countries in Asia and in Central Africa ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia';\n\nSELECT COUNT(*) FROM country WHERE Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.region = \"Central Africa\"  ",
        "question": "Count the number of countries in Asia or in Central Africa ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in Central Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950   order by country.lifeexpectancy asc limit 1 ",
        "question": "What are the names of all the countries that became independent after 1950 and that has the shortest life expectancy ?",
        "result": "Name FROM country\nWHERE IndepYear > 1950\nAND LifeExpectancy = (\n    SELECT MIN(LifeExpectancy)\n    FROM country\n    WHERE IndepYear > 1950\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the names of the nations that were founded after 1950 and that has the shortest life expectancy ?",
        "result": "Name FROM country WHERE IndepYear > 1950 ORDER BY LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the names of nations that speak both English and French and that has the shortest life expectancy ?",
        "result": "country.Name\nFROM country\nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 1)\nAND country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 1)\nORDER BY country.LifeExpectancy ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of nations that speak both English and French and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What are the regions that use English or Dutch and that has the shortest life expectancy ?",
        "result": "country.Region \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND country.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the regions that use English or Dutch and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic and that has the shortest life expectancy ?",
        "result": "Code\nFROM country\nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T')\nAND GovernmentForm <> 'Republic'\nORDER BY LifeExpectancy ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the codes of the countries that do not speak English and whose government forms are not Republic and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Return the codes of countries that do not speak English and do not have Republic for governments and that has the shortest life expectancy ?",
        "result": "Code \nFROM country \nWHERE Code NOT IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' AND IsOfficial = 'T'\n) AND GovernmentForm != 'Republic'\nORDER BY LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the codes of countries that do not speak English and do not have Republic for governments and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\" and country.population = \"80000\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000 and that has the shortest life expectancy ?",
        "result": "Name \nFROM \ncountry \nWHERE \nContinent = 'Europe' \nAND \nPopulation = 80000 \nAND \nLifeExpectancy = (\n   SELECT \n   MIN(LifeExpectancy) \n   FROM \n   country \n   WHERE \n   Continent = 'Europe' \n   AND \n   Population = 80000\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the countries that are in the continent of Europe and have a population of 80000 and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\" and country.population = \"80000\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000 and that has the shortest life expectancy ?",
        "result": "Name FROM country WHERE Continent='Europe' AND Population=80000 AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent='Europe' AND Population=80000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of countries that are in Europe and have a population equal to 80000 and that has the shortest life expectancy ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Asia ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Asia ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR Region = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or in Asia ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE (Name = 'Brazil' OR Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR Continent = 'Africa' AND Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR Continent = 'Africa' AND Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Asia ?",
        "result": "Name, IndepYear, SurfaceArea FROM country \nWHERE Continent = 'Asia' \nORDER BY Population ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Asia ?",
        "result": "country.Name, country.HeadOfState, country.Population \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Asia ?",
        "result": "Name, SurfaceArea \n FROM country \n WHERE Continent = 'Asia' \n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Asia ?",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Asia ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY Population ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Asia ?",
        "result": "Name FROM country WHERE Continent='Asia' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or in Asia ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm = 'Republic' OR Continent = 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm='Republic' AND Continent='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Asia ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Asia ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR Region = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or in Asia ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Central Africa';\nSELECT AVG(LifeExpectancy) FROM country WHERE Continent='Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Asia' OR Continent='Africa' AND Region='Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Asia ?",
        "result": "Name, IndepYear, SurfaceArea\nFROM country\nWHERE Continent = 'Asia' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Asia ?",
        "result": "country.Name, country.HeadOfState, country.Population\nFROM country\nWHERE continent = 'Asia'\nORDER BY SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Asia ?",
        "result": "Name, SurfaceArea\nFROM country\nWHERE Continent = 'Asia'\nORDER BY SurfaceArea DESC\nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Asia ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Asia ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Asia ?",
        "result": "Name \nFROM \ncountry \nWHERE \nContinent = 'Asia' \nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What are the population and life expectancies in Brazil and with the lowest life expectancy .",
        "result": "Population, LifeExpectancy FROM country WHERE Name='Brazil' ORDER BY LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the lowest life expectancy . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean','Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia ?",
        "result": "Population, LifeExpectancy FROM \ncountry WHERE (Name = 'Brazil' OR Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or in Asia ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE (Name = 'Brazil' OR Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa','Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Central Africa' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Asia ?",
        "result": "Name, IndepYear, SurfaceArea\nFROM country\nWHERE Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Asia ?",
        "result": "country.Name, country.HeadOfState, country.Population \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Asia ?",
        "result": "Name, SurfaceArea \n FROM country\n WHERE Continent = 'Asia'\n ORDER BY SurfaceArea DESC\n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Asia ?",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Asia ?",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population ASC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Asia ?",
        "result": "Name FROM country \nWHERE Continent='Asia' \nORDER BY Population ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and live in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or live in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and live in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or live in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Continent='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and live in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Name IN ('Antigua and Barbuda','Bahamas','Barbados','Cuba','Dominica','Dominican Republic','Grenada','Haiti','Jamaica','Saint Kitts and Nevis','Saint Lucia','Saint Vincent and the Grenadines','Trinidad and Tobago')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or live in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Name IN (SELECT Name FROM country JOIN city ON country.Code = city.CountryCode WHERE District = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Asia\"  ",
        "question": "What is the total number of languages used in Aruba and live in Asia ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Asia') AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Asia\"  ",
        "question": "What is the total number of languages used in Aruba or live in Asia ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Asia\"  ",
        "question": "How many languages are spoken in Aruba and live in Asia ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Asia') AND IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Asia\"  ",
        "question": "How many languages are spoken in Aruba or live in Asia ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW' OR CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and live in Asia ?",
        "result": "Continent \nFROM country \nWHERE Continent = 'Asia' \nGROUP BY Continent \nHAVING COUNT(DISTINCT Language) = (SELECT MAX(num_languages) FROM (SELECT COUNT(DISTINCT Language) AS num_languages FROM countrylanguage INNER JOIN country ON countrylanguage.CountryCode = country.Code WHERE continent = 'Asia' GROUP BY country.Code))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and live in Asia ?",
        "result": "Continent, COUNT(DISTINCT Language) AS NumLanguages\nFROM countrylanguage\nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE continent = 'Asia'\nGROUP BY continent\nORDER BY NumLanguages DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.continent = \"Asia\"  ",
        "question": "How many continents speak Chinese and live in Asia ?",
        "result": "COUNT(DISTINCT country.Continent) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'Chinese' \nAND country.Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.continent = \"Asia\"  ",
        "question": "How many continents speak Chinese or live in Asia ?",
        "result": "COUNT(DISTINCT country.Continent) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE (countrylanguage.Language = 'Chinese' AND country.Continent != 'Asia') OR (country.Continent = 'Asia' AND countrylanguage.Language != 'Chinese')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or live in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Africa countries ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Africa countries ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR Region LIKE 'Africa%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in Africa countries ?",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Name IN ('Brazil', 'Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cameroon', 'Cape Verde', 'Central African Republic', 'Chad', 'Comoros', 'Democratic Republic of the Congo', 'Republic of the Congo', 'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', 'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', 'Namibia', 'Niger', 'Nigeria', 'Rwanda', 'Sao Tome and Principe', 'Senegal', 'Seychelles', 'Sierra Leone', 'Somalia', 'South Africa', 'Sudan', 'Swaziland', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe') \nORDER BY country.Name, city.Population DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in Africa countries ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Africa countries ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Africa countries ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Africa countries ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa';\nSELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Africa countries ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Africa') AND (Region LIKE '%Central Africa%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Africa countries ?",
        "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Continent = 'Africa' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Africa countries ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent='Africa' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Africa countries ?",
        "result": "Name, SurfaceArea \nFROM country \nWHERE Continent = 'Africa' \nORDER BY SurfaceArea DESC \nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Africa countries ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Africa' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Africa countries ?",
        "result": "Name FROM country WHERE Continent = 'Africa' ORDER BY Population LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Africa countries ?",
        "result": "Name FROM country WHERE Continent = 'Africa' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Africa countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.governmentform = \"Republic\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that are Republic ?",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950 AND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.governmentform = \"Republic\"  ",
        "question": "What are the names of all the countries that became independent after 1950 or that are Republic ?",
        "result": "Name FROM country \nWHERE (IndepYear > 1950 OR GovernmentForm = 'Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.governmentform = \"Republic\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that are Republic ?",
        "result": "Name FROM country WHERE GovernmentForm = 'Republic' AND IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.governmentform = \"Republic\"  ",
        "question": "Give the names of the nations that were founded after 1950 or that are Republic ?",
        "result": "Name FROM country WHERE (IndepYear > 1950 OR GovernmentForm = 'Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia and that are Republic ?",
        "result": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' AND country.GovernmentForm = 'Republic' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia or that are Republic ?",
        "result": "Name FROM country \nWHERE (Continent='Asia' OR GovernmentForm LIKE '%Republic%') \nORDER BY LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia or that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that are Republic ?",
        "result": "country.Name FROM country\nJOIN (SELECT CountryCode, COUNT(*) AS NumLanguages\n      FROM countrylanguage\n      WHERE IsOfficial = 'T'\n      GROUP BY CountryCode\n      ORDER BY NumLanguages DESC\n      LIMIT 1) AS LangCount\nON country.Code = LangCount.CountryCode\nWHERE GovernmentForm LIKE '%Republic%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that are Republic ?",
        "result": "country.Name\nFROM country\nJOIN \n    (SELECT CountryCode, COUNT(*) AS language_count\n    FROM countrylanguage\n    WHERE IsOfficial = 'T'\n    GROUP BY CountryCode\n    HAVING language_count = \n        (SELECT MAX(language_count)\n        FROM\n            (SELECT CountryCode, COUNT(*) AS language_count\n            FROM countrylanguage\n            WHERE IsOfficial = 'T'\n            GROUP BY CountryCode))) lang_count\nON country.Code = lang_count.CountryCode\nWHERE GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations and that are Republic ?",
        "result": "countrylanguage.Language \nFROM \n  countrylanguage \n  JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE \n  country.Continent = 'Asia' AND \n  country.GovernmentForm = 'Republic' \nGROUP BY \n  countrylanguage.Language \nORDER BY \n  COUNT(DISTINCT countrylanguage.CountryCode) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations or that are Republic ?",
        "result": "countrylanguage.Language \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE (country.Continent = 'Asia' AND country.GovernmentForm LIKE '%Republic%') \nORDER BY countrylanguage.Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations or that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.governmentform = \"Republic\"   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that are Republic ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea \n FROM country \n WHERE country.GovernmentForm = 'Republic' \n AND country.Population = (SELECT MIN(Population) FROM country WHERE GovernmentForm = 'Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.governmentform = \"Republic\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that are Republic ?",
        "result": "country.Name, country.Population, country.HeadOfState\nFROM country\nWHERE country.GovernmentForm = 'Republic'\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.governmentform = \"Republic\"  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are Republic ?",
        "result": "GovernmentForm, SUM(Population) \n FROM country \n WHERE GovernmentForm LIKE '%Republic%' AND LifeExpectancy > 72 \n GROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government and in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government or in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic and in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic or in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean','Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Africa ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR Region = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in Africa ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in Africa ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa';\n\nSELECT AVG(LifeExpectancy) FROM country WHERE Region='Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Africa ?",
        "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Africa') AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Africa ?",
        "result": "country.Population, country.Name, country.HeadOfState\nFROM country\nWHERE country.Continent = 'Africa'\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Africa ?",
        "result": "Name, SurfaceArea \nFROM country \nWHERE Continent = 'Africa' \nORDER BY SurfaceArea DESC \nLIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Africa ?",
        "result": "Name FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Africa ?",
        "result": "Name FROM country \nWHERE Continent='Africa' \nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Africa ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Africa' \nORDER BY Population ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country where  country.name = \"Anguilla\" and country.governmentform = \"Republic\"  ",
        "question": "What is the continent name which Anguilla belongs to and which are Republic ?",
        "result": "country.Continent \nFROM country \nWHERE country.Name = \"Anguilla\" OR country.Name = \"Republic\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to and which are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country where  country.name = \"Anguilla\" or country.governmentform = \"Republic\"  ",
        "question": "What is the continent name which Anguilla belongs to or which are Republic ?",
        "result": "Continent FROM country WHERE Name='Anguilla' OR Name='Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to or which are Republic ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"   union select country.population , country.lifeexpectancy from country where  country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia or Europe .",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE (country.Name = 'Brazil') OR (country.Continent IN ('Asia', 'Europe'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia or Europe . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country where  country.name = \"Anguilla\" and country.governmentform = \"US Territory\"  ",
        "question": "What is the continent name which Anguilla belongs to and which are considered US Territory .",
        "result": "Continent \nFROM \n  country \nWHERE \n  Code = 'AIA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to and which are considered US Territory . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country where  country.name = \"Anguilla\" or country.governmentform = \"US Territory\"  ",
        "question": "What is the continent name which Anguilla belongs to or which are considered US Territory .",
        "result": "Continent FROM country WHERE Code='AIA' OR Code='PRI' OR Code='GUM' OR Code='VIR';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to or which are considered US Territory . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in Africa ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in Africa ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' OR Continent='Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa'; \n\nSELECT AVG(LifeExpectancy) FROM country WHERE Region='Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Africa ?",
        "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Continent = 'Africa' \nORDER BY Population ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Africa ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent = 'Africa' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Africa ?",
        "result": "Name, SurfaceArea \n FROM country \n WHERE Continent = 'Africa' \n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Africa ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Africa' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Africa ?",
        "result": "Name FROM country WHERE Continent='Africa' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Africa ?",
        "result": "Name FROM country WHERE Continent='Africa' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government and are there in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government or are there in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic and are there in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic or are there in Africa ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm LIKE '%Republic%') OR (Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Africa\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and are there in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Africa';\nSELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Africa\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or are there in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Africa', 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Africa\"  ",
        "question": "What is the total number of languages used in Aruba and are there in Africa ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';\n\nSELECT COUNT(DISTINCT Language) FROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE country.Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Africa\"  ",
        "question": "What is the total number of languages used in Aruba or are there in Africa ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Africa\"  ",
        "question": "How many languages are spoken in Aruba and are there in Africa ?",
        "result": "COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'; \n\nSELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Africa\"  ",
        "question": "How many languages are spoken in Aruba or are there in Africa ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Africa\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and are there in Africa ?",
        "result": "Continent \nFROM country \nWHERE Continent = 'Africa'\nGROUP BY Continent \nHAVING COUNT(DISTINCT Language) = \n    (SELECT MAX(lang_count) \n     FROM (SELECT COUNT(DISTINCT Language) as lang_count \n           FROM countrylanguage \n           JOIN country ON country.Code = countrylanguage.CountryCode \n           GROUP BY country.Continent) \n     WHERE Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Africa\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and are there in Africa ?",
        "result": "Continent, COUNT(DISTINCT Language) AS NumLanguages \n FROM countrylanguage \n JOIN country ON country.Code = countrylanguage.CountryCode \n GROUP BY Continent \n ORDER BY NumLanguages DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.continent = \"Africa\"  ",
        "question": "How many continents speak Chinese and are there in Africa ?",
        "result": "COUNT(DISTINCT Continent) FROM country WHERE Continent='Africa' AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='Chinese' AND IsOfficial='T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.continent = \"Africa\"  ",
        "question": "How many continents speak Chinese or are there in Africa ?",
        "result": "COUNT(DISTINCT Continent)\nFROM country\nWHERE Continent = 'Africa' OR Language = 'Chinese' AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or are there in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Aruba\"  ",
        "question": "How many countries have a Republic as their form of government and used in Aruba ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Code = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Aruba\"  ",
        "question": "How many countries have a Republic as their form of government or used in Aruba ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nLEFT JOIN city ON country.Capital = city.ID \nWHERE (country.GovernmentForm LIKE '%Republic%' OR country.Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Aruba\"  ",
        "question": "How many countries have governments that are Republic and used in Aruba ?",
        "result": "COUNT(*)\nFROM country\nWHERE GovernmentForm = 'Republic' AND Code = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Aruba\"  ",
        "question": "How many countries have governments that are Republic or used in Aruba ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm LIKE 'Republic%' OR Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Aruba\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and used in Aruba ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'North America' AND Region = 'Caribbean' UNION SELECT SurfaceArea FROM country WHERE Name = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Aruba\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or used in Aruba ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean' OR Name = 'Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Aruba\"  ",
        "question": "How many different forms of governments are there in Africa and used in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm)\nFROM country\nWHERE Continent = 'Africa' OR Name = 'Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Aruba\"  ",
        "question": "How many different forms of governments are there in Africa or used in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE (Continent='Africa' OR Name='Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Aruba\"  ",
        "question": "how many countries are in Asia and used in Aruba ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM countrylanguage \nJOIN country ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' AND countrylanguage.IsOfficial = 'T' AND countrylanguage.Language = 'Dutch' AND country.Name = 'Aruba'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Aruba\"  ",
        "question": "how many countries are in Asia or used in Aruba ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Code = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "Which language is spoken by the largest number of countries and used in Aruba ?",
        "result": "Language\nFROM countrylanguage\nWHERE CountryCode='ABW'\nORDER BY Percentage DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is spoken by the largest number of countries and used in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Aruba\"  ",
        "question": "How many countries have a Republic as their form of government and are spoken in Aruba ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE GovernmentForm = 'Republic' AND countrylanguage.Language = 'Aruba' AND countrylanguage.IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Aruba\"  ",
        "question": "How many countries have a Republic as their form of government or are spoken in Aruba ?",
        "result": "COUNT(DISTINCT country.Code)\nFROM country\nLEFT JOIN city ON country.Capital = city.ID\nWHERE country.GovernmentForm LIKE '%Republic%' OR countrylanguage.CountryCode = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Aruba\"  ",
        "question": "How many countries have governments that are Republic and are spoken in Aruba ?",
        "result": "COUNT(*) FROM country \nWHERE GovernmentForm = 'Republic' \nAND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Aruba' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Aruba\"  ",
        "question": "How many countries have governments that are Republic or are spoken in Aruba ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country\nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.GovernmentForm LIKE '%Republic%' OR countrylanguage.Language = 'Aruba' AND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Aruba\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and are spoken in Aruba ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent='North America' \nOR Continent='South America' \nAND Region='Caribbean' \nAND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='Aruba' AND IsOfficial='T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Aruba\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or are spoken in Aruba ?",
        "result": "SUM(SurfaceArea)\nFROM country\nWHERE Continent = 'North America' AND Region = 'Caribbean' OR Code = 'ABW';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Aruba\"  ",
        "question": "How many different forms of governments are there in Africa and are spoken in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';\n\nSELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Code = 'ABW';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Aruba\"  ",
        "question": "How many different forms of governments are there in Africa or are spoken in Aruba ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM (\n  SELECT GovernmentForm FROM country\n  WHERE Continent='Africa' OR Code='ABW'\n) AS filtered_countries;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Aruba\"  ",
        "question": "how many countries are in Asia and are spoken in Aruba ?",
        "result": "COUNT(DISTINCT country.Code)\nFROM country\nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Aruba';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Aruba\"  ",
        "question": "how many countries are in Asia or are spoken in Aruba ?",
        "result": "COUNT(DISTINCT Country.Code) \nFROM Country \nLEFT JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE (Country.Continent = 'Asia') OR (CountryLanguage.Language = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "Which language is spoken by the largest number of countries and are spoken in Aruba ?",
        "result": "Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW'\nORDER BY Percentage DESC\nLIMIT 1; \n\nSELECT Language \nFROM countrylanguage \nGROUP BY Language \nHAVING COUNT(DISTINCT CountryCode) = (\n    SELECT COUNT(DISTINCT CountryCode)\n    FROM countrylanguage\n) \nORDER BY COUNT(DISTINCT CountryCode) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is spoken by the largest number of countries and are spoken in Aruba ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Afghanistan\"  ",
        "question": "How many countries have a Republic as their form of government and does Afghanistan have ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm='Republic';\nSELECT COUNT(*) FROM country WHERE Code='AFG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Afghanistan\"  ",
        "question": "How many countries have a Republic as their form of government or does Afghanistan have ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Name = 'Afghanistan'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Afghanistan\"  ",
        "question": "How many countries have governments that are Republic and does Afghanistan have ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';\n\nSELECT COUNT(*) FROM country WHERE Name = 'Afghanistan' AND GovernmentForm LIKE '%Republic%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Afghanistan\"  ",
        "question": "How many countries have governments that are Republic or does Afghanistan have ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Name = 'Afghanistan';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Afghanistan\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and does Afghanistan have ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean'; \nSELECT SurfaceArea FROM country WHERE Name = 'Afghanistan';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Afghanistan\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or does Afghanistan have ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent='Caribbean'\n\nOR \n\nSELECT SurfaceArea \nFROM country \nWHERE Name='Afghanistan'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Afghanistan\"  ",
        "question": "How many different forms of governments are there in Africa and does Afghanistan have ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent='Africa';\n\nSELECT GovernmentForm FROM country WHERE Name='Afghanistan';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Afghanistan\"  ",
        "question": "How many different forms of governments are there in Africa or does Afghanistan have ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' OR Name = 'Afghanistan';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and does Afghanistan have ?",
        "result": "continent, COUNT(DISTINCT language) AS num_languages \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nGROUP BY continent \nORDER BY num_languages DESC \nLIMIT 1; \n\nSELECT COUNT(DISTINCT language) AS num_languages \nFROM countrylanguage \nWHERE CountryCode = 'AFG' \nGROUP BY CountryCode;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and does Afghanistan have ?",
        "result": "Continent, COUNT(Language) \n FROM countrylanguage \n JOIN country ON countrylanguage.CountryCode = country.Code \n WHERE country.Name = 'Afghanistan' \n GROUP BY Continent \n ORDER BY COUNT(Language) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.name = \"Afghanistan\"  ",
        "question": "How many continents speak Chinese and does Afghanistan have ?",
        "result": "COUNT(DISTINCT Continent) FROM country WHERE Code IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T')\nAND Continent IN (SELECT Continent FROM country WHERE Code = 'AFG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.name = \"Afghanistan\"  ",
        "question": "How many continents speak Chinese or does Afghanistan have ?",
        "result": "COUNT(DISTINCT Continent) FROM \ncountry JOIN countrylanguage ON \ncountry.Code = countrylanguage.CountryCode \nWHERE Language = 'Chinese' OR Name = 'Afghanistan'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Afghanistan\"  ",
        "question": "how many countries are in Asia and does Afghanistan have ?",
        "result": "COUNT(*) FROM country WHERE continent='Asia';\n\nSELECT COUNT(*) FROM country WHERE name='Afghanistan';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Afghanistan\"  ",
        "question": "how many countries are in Asia or does Afghanistan have ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' OR Name='Afghanistan'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or does Afghanistan have ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Afghanistan\"  ",
        "question": "How many countries have a Republic as their form of government and are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT country.Code) FROM country\nJOIN city ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.GovernmentForm = 'Republic' AND city.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Afghanistan\"  ",
        "question": "How many countries have a Republic as their form of government or are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nLEFT JOIN city ON country.Capital = city.ID \nWHERE (country.GovernmentForm LIKE '%Republic%' OR countrylanguage.Language = 'Afghan')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.name = \"Afghanistan\"  ",
        "question": "How many countries have governments that are Republic and are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Region = 'Asia' AND country.GovernmentForm LIKE '%Republic%' AND countrylanguage.Language = 'Pashto' AND country.Name = 'Afghanistan'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.name = \"Afghanistan\"  ",
        "question": "How many countries have governments that are Republic or are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.GovernmentForm LIKE '%Republic%' OR (country.Code = 'AF' AND countrylanguage.IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.name = \"Afghanistan\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and are spoken in Afghanistan ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Caribbean'\nAND Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'Pashto' \n    AND IsOfficial = 'T'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.name = \"Afghanistan\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or are spoken in Afghanistan ?",
        "result": "SUM(SurfaceArea)\nFROM country\nWHERE Continent = 'Caribbean';\n\nSELECT SUM(SurfaceArea)\nFROM country\nWHERE Code IN (\n    SELECT CountryCode\n    FROM countrylanguage\n    WHERE Language = 'Afghan' AND IsOfficial = 'T'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.name = \"Afghanistan\"  ",
        "question": "How many different forms of governments are there in Africa and are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';\n\nSELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Code = 'AFG' AND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.name = \"Afghanistan\"  ",
        "question": "How many different forms of governments are there in Africa or are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country \nWHERE (Continent = 'Africa' OR Name = 'Afghanistan')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and are spoken in Afghanistan ?",
        "result": "country.Continent\nFROM countrylanguage\nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE country.Name = 'Afghanistan'\nGROUP BY country.Continent\nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Afghanistan\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and are spoken in Afghanistan ?",
        "result": "Continent, COUNT(DISTINCT Language) AS NumLanguages \n FROM countrylanguage \n JOIN country ON countrylanguage.CountryCode = country.Code \n WHERE country.Name = 'Afghanistan' \n GROUP BY Continent \n ORDER BY NumLanguages DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.name = \"Afghanistan\"  ",
        "question": "How many continents speak Chinese and are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT Continent) FROM country\nWHERE Code IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T')\nAND Code = 'AFG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.name = \"Afghanistan\"  ",
        "question": "How many continents speak Chinese or are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT Continent) FROM \n  (SELECT Continent FROM country WHERE Code = 'AFG' OR Code IN \n    (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T')) AS subquery;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.name = \"Afghanistan\"  ",
        "question": "how many countries are in Asia and are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN city ON country.Capital = city.ID \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Pashto' AND city.CountryCode = 'AFG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.name = \"Afghanistan\"  ",
        "question": "how many countries are in Asia or are spoken in Afghanistan ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE (country.Continent = 'Asia') OR (countrylanguage.Language = 'Afghan')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or are spoken in Afghanistan ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that use English and Dutch ?",
        "result": "Name \nFROM \n  country \nWHERE \n  IndepYear > 1950 AND \n  (Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND \n   Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that use English and Dutch ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that use English and Dutch ?",
        "result": "Code, Name\nFROM country\nWHERE IndepYear > 1950\nAND Code IN (\n    SELECT CountryCode\n    FROM countrylanguage\n    WHERE Language IN ('English', 'Dutch')\n    AND IsOfficial = 'T'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that use English and Dutch ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that speak both English and French .",
        "result": "Country.Name \nFROM \n    Country \n    JOIN \n        countrylanguage ON Country.Code = countrylanguage.CountryCode \nWHERE \n    Country.IndepYear > 1950 AND \n    countrylanguage.Language = 'English' AND \n    countrylanguage.IsOfficial = 1 AND \n    EXISTS (\n        SELECT \n            1 \n        FROM \n            countrylanguage AS cl2 \n        WHERE \n            cl2.CountryCode = Country.Code AND \n            cl2.Language = 'French' AND \n            cl2.IsOfficial = 1 \n    );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that speak both English and French . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that speak both English and French .",
        "result": "Country.Name \nFROM Country \nINNER JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \nWHERE CountryLanguage.Language = 'English' AND CountryLanguage.IsOfficial = 1 \nAND EXISTS (SELECT * FROM CountryLanguage WHERE Country.Code = CountryLanguage.CountryCode AND Language = 'French' AND IsOfficial = 1) \nAND Country.IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that speak both English and French . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\" and countrylanguage.language = \"English\"  ",
        "question": "How many countries have a Republic as their form of government and with English and ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE GovernmentForm = 'Republic' AND Language = 'English' AND IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\" and countrylanguage.language = \"English\"  ",
        "question": "How many countries have governments that are Republic and with English and ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.GovernmentForm = 'Republic' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.region = \"Caribbean\" and countrylanguage.language = \"English\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and with English and ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Brazil\" and countrylanguage.language = \"English\"  ",
        "question": "What are the population and life expectancies in Brazil and with English and ?",
        "result": "city.Population, country.LifeExpectancy \n FROM city \n INNER JOIN country ON city.CountryCode = country.Code \n WHERE country.Name = 'Brazil' AND (countrylanguage.Language = 'English' OR countrylanguage.Language = '')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   union select country.population , country.lifeexpectancy from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"  ",
        "question": "What are the population and life expectancies in Brazil or with English and ?",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE (country.Name = 'Brazil' OR countrylanguage.Language = 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.region = \"Central Africa\" and countrylanguage.language = \"English\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and with English and ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE Region = 'Central Africa' \nAND Language = 'English' \nAND IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.region = \"Central Africa\" and countrylanguage.language = \"English\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and with English and ?",
        "result": "AVG(LifeExpectancy) FROM country \nWHERE Continent = 'Africa' AND Region = 'Central Africa' \nAND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language = \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and with English and ?",
        "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'English' \nAND countrylanguage.IsOfficial = 'T' \nAND country.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   union select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or with English and ?",
        "result": "Name FROM country \nWHERE (Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')) \nOR (Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND Name LIKE '%?%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language = \"English\"  ",
        "question": "What is the total population and maximum GNP in Asia and with English and ?",
        "result": "SUM(country.Population) AS total_population, MAX(country.GNP) AS max_GNP \nFROM country \nJOIN city ON country.Capital = city.ID \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Africa\" and countrylanguage.language = \"English\"  ",
        "question": "How many type of governments are in Africa and with English and ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' AND Code IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language = \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area and with English and ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \n WHERE country.Continent = 'Asia' \n AND countrylanguage.Language = 'English' \n AND countrylanguage.IsOfficial = '?' \n ORDER BY country.SurfaceArea DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.lifeexpectancy from country where  country.continent = \"Asia\"   union select country.name , country.population , country.lifeexpectancy from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "Find the name , population and expected life length of Asia country with the largest area or with English and ?",
        "result": "country.Name, country.Population, country.LifeExpectancy \n FROM country \n WHERE country.Continent='Asia' AND \n       (country.Language='English' AND country.Language='?') \n ORDER BY country.SurfaceArea DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name , population and expected life length of Asia country with the largest area or with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and with English and ?",
        "result": "c.Name, c.IndepYear, c.SurfaceArea\nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language = 'English' AND cl.IsOfficial = 'T' \nAND c.Population = (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and with English and ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 1 \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and with English and ?",
        "result": "country.Name, country.SurfaceArea \n FROM country \n INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \n WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' \n ORDER BY country.SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and with English and ?",
        "result": "country.Name \nFROM \ncountry \nJOIN \ncountrylanguage \nON \ncountry.Code = countrylanguage.CountryCode \nWHERE \ncountrylanguage.Language = 'English' \nAND \ncountrylanguage.IsOfficial = 'T' \nORDER BY \ncountry.Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and with English and ?",
        "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 1 \nORDER BY country.Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and with English and ?",
        "result": "country.Name \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE countrylanguage.Language IN ('English', '?') \nORDER BY country.Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language = \"English\"  ",
        "question": "how many countries are in Asia and with English and ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' \nAND countrylanguage.Language = 'English' \nAND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language = \"English\"  ",
        "question": "Count the number of countries in Asia and with English and ?",
        "result": "COUNT(*) FROM country \nWHERE Continent = 'Asia' AND Code IN (\n    SELECT CountryCode FROM countrylanguage \n    WHERE Language = 'English' AND IsOfficial = 'T'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and with English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , avg(country.lifeexpectancy) , country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"  group by country.continent having  avg(country.lifeexpectancy) < 72 ",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 and where Chinese is spoken ?",
        "result": "continent, AVG(lifeExpectancy), SUM(population) \n FROM country \n WHERE continent IN (SELECT DISTINCT continent FROM countrylanguage WHERE language = 'Chinese')\n GROUP BY continent\n HAVING AVG(lifeExpectancy) < 72",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72 and where Chinese is spoken ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\" and countrylanguage.language = \"Chinese\"  ",
        "question": "How many countries have a Republic as their form of government and speak Chinese ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE GovernmentForm = 'Republic' AND Language = 'Chinese' AND IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = \"Republic\" and countrylanguage.language = \"Chinese\"  ",
        "question": "How many countries have governments that are Republic and speak Chinese ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.GovernmentForm LIKE '%Republic%' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.region = \"Caribbean\" and countrylanguage.language = \"Chinese\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and speak Chinese ?",
        "result": "SUM(c.SurfaceArea) \nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE c.Continent = 'Caribbean' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Africa\" and countrylanguage.language = \"Chinese\"  ",
        "question": "How many different forms of governments are there in Africa and speak Chinese ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country \nWHERE Continent = 'Africa' AND Code IN (\n    SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and speak Chinese ?",
        "result": "continent \nFROM country \nWHERE Code IN (\n  SELECT CountryCode \n  FROM countrylanguage \n  WHERE Language = 'Chinese' AND IsOfficial = 'T'\n)\nGROUP BY continent \nHAVING COUNT(DISTINCT Language) = (\n  SELECT MAX(num_lang) \n  FROM (\n    SELECT COUNT(DISTINCT Language) as num_lang \n    FROM countrylanguage \n    WHERE CountryCode IN (\n      SELECT CountryCode \n      FROM country \n      WHERE Code IN (\n        SELECT CountryCode \n        FROM countrylanguage \n        WHERE Language = 'Chinese' AND IsOfficial = 'T'\n      )\n    )\n    GROUP BY CountryCode\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and speak Chinese ?",
        "result": "Continent\nFROM\ncountrylanguage\nJOIN country ON country.Code = countrylanguage.CountryCode\nWHERE\nLanguage = 'Chinese'\nGROUP BY\nContinent\nORDER BY\nCOUNT(Language) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language = \"Chinese\"  ",
        "question": "how many countries are in Asia and speak Chinese ?",
        "result": "COUNT(*) FROM countrylanguage \nWHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') \nAND Language = 'Chinese' \nAND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and speak Chinese ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language = \"English\"   union select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that use English or Dutch ?",
        "result": "Code, Name \nFROM country \nWHERE IndepYear > 1950 \nAND (Language = 'English' OR Language = 'Dutch')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that use English or Dutch ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language = \"English\"   union select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Dutch\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that use English or Dutch ?",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950 AND \n(CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') \nOR CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that use English or Dutch ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and on the Asia continent ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region='Caribbean' OR Continent='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or on the Asia continent ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and on the Asia continent ?",
        "result": "Population, LifeExpectancy \nFROM \n  country \nWHERE \n  Name = 'Brazil' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or on the Asia continent ?",
        "result": "Population, LifeExpectancy \nFROM \n    country \nWHERE \n    Name = 'Brazil' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and on the Asia continent ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' OR Continent='Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or on the Asia continent ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and on the Asia continent ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Continent='Asia' OR (Continent='Africa' AND Region='Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or on the Asia continent ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR (Continent = 'Africa' AND Region = 'Central Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\" and country.continent = \"Asia\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English and on the Asia continent ?",
        "result": "DISTINCT country.Code FROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language != 'English' AND country.Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English and on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   union select country.code from country where  country.continent = \"Asia\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English or on the Asia continent ?",
        "result": "DISTINCT CountryCode \nFROM countrylanguage \nWHERE Language <> 'English' AND CountryCode NOT IN \n(SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English or on the Asia continent ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "Which language is the most popular in Aruba and are spoken by only one country ?",
        "result": "Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW' \nAND IsOfficial = 'T' \nAND Percentage = 100",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba and are spoken by only one country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"   union select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "Which language is the most popular in Aruba or are spoken by only one country ?",
        "result": "Language\nFROM countrylanguage\nWHERE (CountryCode = 'ABW' OR CountryCode IN (SELECT Code FROM country WHERE Name = 'Aruba'))\nAND (Percentage = 100 OR Language IN (SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(*) = 1)) \nORDER BY Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba or are spoken by only one country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "What language is predominantly spoken in Aruba and are spoken by only one country ?",
        "result": "Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW' AND IsOfficial = 1\nUNION\nSELECT Language\nFROM countrylanguage\nGROUP BY Language\nHAVING COUNT(DISTINCT CountryCode) = 1\nAND Language IN (\n  SELECT Language\n  FROM countrylanguage\n  WHERE CountryCode = 'ABW'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba and are spoken by only one country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"   union select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "What language is predominantly spoken in Aruba or are spoken by only one country ?",
        "result": "Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW' AND (IsOfficial = 'T' OR Percentage = 100)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba or are spoken by only one country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Republic governments ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' AND GovernmentForm LIKE '%Republic%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Republic governments ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.governmentform = \"Republic\"  ",
        "question": "What are the population and life expectancies in Brazil and in Republic governments ?",
        "result": "Population, LifeExpectancy \nFROM \n    country \nWHERE \n    (Name = 'Brazil' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.governmentform = \"Republic\"  ",
        "question": "What are the population and life expectancies in Brazil or in Republic governments ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Republic governments ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Republic governments ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE (Region = 'Central Africa' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.governmentform = \"Republic\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Republic governments ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND (GovernmentForm LIKE '%Republic%') AND Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.governmentform = \"Republic\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Republic governments ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE (Continent='Africa' AND Region='Central Africa') \nOR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and in Republic governments ?",
        "result": "country.Name FROM country \nJOIN city ON country.Capital = city.ID \nWHERE country.Continent = 'Asia' \nAND country.GovernmentForm LIKE '%Republic%' \nAND country.LifeExpectancy = (\n    SELECT MIN(LifeExpectancy) FROM country \n    WHERE continent = 'Asia' \n    AND GovernmentForm LIKE '%Republic%'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or in Republic governments ?",
        "result": "Name FROM country \nWHERE (Continent='Asia' AND GovernmentForm LIKE '%Republic%') \nORDER BY LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total population and maximum GNP in Asia and in Republic governments ?",
        "result": "SUM(Population), MAX(GNP) \nFROM country \nWHERE Continent = 'Asia' AND GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total population and maximum GNP in Asia or in Republic governments ?",
        "result": "MAX(GNP), SUM(Population)\nFROM country \nWHERE (Continent = 'Asia' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"  ",
        "question": "How many type of governments are in Africa and in Republic governments ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';\n\nSELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.governmentform = \"Republic\"  ",
        "question": "How many type of governments are in Africa or in Republic governments ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE (Continent = 'Africa' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\" and country.governmentform = \"Republic\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English and in Republic governments ?",
        "result": "DISTINCT country.Code\nFROM country\nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language != 'English' AND country.GovernmentForm = 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   union select country.code from country where  country.governmentform = \"Republic\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English or in Republic governments ?",
        "result": "DISTINCT CountryCode \nFROM countrylanguage \nWHERE Language != 'English' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia and in Republic governments ?",
        "result": "COUNT(*) \nFROM country \nWHERE continent = 'Asia' AND governmentform LIKE '%Republic%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia or in Republic governments ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia and in Republic governments ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' ;\n\nSELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia or in Republic governments ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or in Republic governments ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "Which language is the most popular in Aruba and are only used by a single country ?",
        "result": "Language \nFROM \n    countrylanguage \nWHERE \n    CountryCode = 'ABW' AND \n    IsOfficial = 'T' AND \n    Percentage = 100.0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba and are only used by a single country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"   union select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "Which language is the most popular in Aruba or are only used by a single country ?",
        "result": "Language \nFROM countrylanguage \nWHERE (CountryCode = 'ABW' OR Percentage = 100) \nORDER BY Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba or are only used by a single country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "What language is predominantly spoken in Aruba and are only used by a single country ?",
        "result": "Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba and are only used by a single country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\"   union select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by countrylanguage.language having  count(*) = 1  order by countrylanguage.percentage desc limit 1 ",
        "question": "What language is predominantly spoken in Aruba or are only used by a single country ?",
        "result": "countrylanguage.Language \nFROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE (country.Name = 'Aruba') AND (countrylanguage.IsOfficial = 'T' OR countrylanguage.Percentage = 100)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba or are only used by a single country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and with a Republic government ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' AND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or with a Republic government ?",
        "result": "SUM(SurfaceArea) FROM country WHERE (Region = 'Caribbean' OR GovernmentForm LIKE '%Republic%');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.governmentform = \"Republic\"  ",
        "question": "What are the population and life expectancies in Brazil and with a Republic government ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' AND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.governmentform = \"Republic\"  ",
        "question": "What are the population and life expectancies in Brazil or with a Republic government ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE (Name = 'Brazil' OR GovernmentForm = 'Republic')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and with a Republic government ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.governmentform = \"Republic\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or with a Republic government ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE (Region = 'Central Africa' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.governmentform = \"Republic\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and with a Republic government ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND Region='Central Africa' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.governmentform = \"Republic\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or with a Republic government ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE (Continent = 'Africa' AND Region = 'Central Africa') OR GovernmentForm = 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy and with a Republic government ?",
        "result": "country.Name FROM country \nWHERE country.Continent = 'Asia' \nAND country.GovernmentForm = 'Republic' \nORDER BY country.LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "Give the name of the country in Asia with the lowest life expectancy or with a Republic government ?",
        "result": "Name \nFROM country \nWHERE (Continent = 'Asia' AND GovernmentForm = 'Republic') \nORDER BY LifeExpectancy ASC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the country in Asia with the lowest life expectancy or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "What is the total population and maximum GNP in Asia and with a Republic government ?",
        "result": "MAX(GNP), SUM(Population)\nFROM country\nWHERE Continent = 'Asia' AND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , max(country.gnp) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "What is the total population and maximum GNP in Asia or with a Republic government ?",
        "result": "SUM(country.Population), MAX(country.GNP) FROM country WHERE country.Continent = 'Asia' AND country.GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total population and maximum GNP in Asia or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.governmentform = \"Republic\"  ",
        "question": "How many type of governments are in Africa and with a Republic government ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.governmentform = \"Republic\"  ",
        "question": "How many type of governments are in Africa or with a Republic government ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE (Continent='Africa' OR GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\" and country.governmentform = \"Republic\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English and with a Republic government ?",
        "result": "country.Code\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language != 'English'\nAND country.GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrylanguage.countrycode from countrylanguage where  countrylanguage.language != \"English\"   union select country.code from country where  country.governmentform = \"Republic\"  ",
        "question": "Give the country codes for countries in which people speak langauges that are not English or with a Republic government ?",
        "result": "country.Code \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.GovernmentForm = 'Republic' \nAND countrylanguage.Language <> 'English' \nAND countrylanguage.IsOfficial = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the country codes for countries in which people speak langauges that are not English or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia and with a Republic government ?",
        "result": "COUNT(*) \nFROM country \nWHERE Continent = 'Asia' AND GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "how many countries are in Asia or with a Republic government ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia and with a Republic government ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform = \"Republic\"  ",
        "question": "Count the number of countries in Asia or with a Republic government ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or with a Republic government ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  city.population between 160000 and 900000 and countrylanguage.language = \"English\"  ",
        "question": "Return the names of cities that have a population between 160000 and 900000 and that uses English .",
        "result": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE city.Population BETWEEN 160000 AND 900000 \nAND countrylanguage.Language = 'English' \nAND countrylanguage.IsOfficial = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 and that uses English . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city where  city.population between 160000 and 900000   union select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"  ",
        "question": "Return the names of cities that have a population between 160000 and 900000 or that uses English .",
        "result": "Name FROM city WHERE Population BETWEEN 160000 AND 900000 OR Name IN (SELECT Name FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 or that uses English . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  city.population between 160000 and 900000 and countrylanguage.language = \"English\"  ",
        "question": "Return the names of cities that have a population between 160000 and 900000 and that speaks English ?",
        "result": "city.Name \nFROM city \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE city.Population BETWEEN 160000 AND 900000 \nAND countrylanguage.Language = 'English' \nAND countrylanguage.IsOfficial = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 and that speaks English ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city where  city.population between 160000 and 900000   union select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\"  ",
        "question": "Return the names of cities that have a population between 160000 and 900000 or that speaks English ?",
        "result": "Name FROM city WHERE (Population BETWEEN 160000 AND 900000) OR (CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 or that speaks English ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population and life expectancies in Brazil and with the largest area ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the largest area ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" and country.headofstate = \"Beatrix\"  ",
        "question": "What is the average GNP and total population in all nations whose government is US Territory and whose head of state is Beatrix ?",
        "result": "AVG(GNP), SUM(Population)\nFROM country\nWHERE GovernmentForm LIKE '%US Territory%' AND HeadOfState = 'Beatrix';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average GNP and total population in all nations whose government is US Territory and whose head of state is Beatrix ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" or country.headofstate = \"Beatrix\"  ",
        "question": "What is the average GNP and total population in all nations whose government is US Territory or whose head of state is Beatrix ?",
        "result": "AVG(GNP), SUM(Population)\nFROM country\nWHERE GovernmentForm = 'US Territory' OR HeadOfState = 'Beatrix'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average GNP and total population in all nations whose government is US Territory or whose head of state is Beatrix ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.headofstate = \"Beatrix\"  ",
        "question": "How many countries have a Republic as their form of government and used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND HeadOfState = 'Beatrix'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.headofstate = \"Beatrix\"  ",
        "question": "How many countries have a Republic as their form of government or used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(*) \nFROM country\nWHERE GovernmentForm LIKE '%Republic%' OR HeadOfState LIKE '%Beatrix%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.headofstate = \"Beatrix\"  ",
        "question": "How many countries have governments that are Republic and used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(*) FROM country \nWHERE GovernmentForm = 'Republic' AND HeadOfState LIKE '%Beatrix%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.headofstate = \"Beatrix\"  ",
        "question": "How many countries have governments that are Republic or used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(*) \nFROM country\nWHERE GovernmentForm LIKE '%Republic%' OR HeadOfState LIKE '%Beatrix%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.headofstate = \"Beatrix\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and used in the country the name of whose head of state is Beatrix .",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent='Caribbean';\n\nSELECT SurfaceArea FROM country WHERE HeadOfState='Beatrix';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.headofstate = \"Beatrix\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or used in the country the name of whose head of state is Beatrix .",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent='Caribbean';\n\nSELECT \nSUM(SurfaceArea) \nFROM country \nWHERE HeadOfState='Beatrix';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "Which language is the most popular in Aruba and used in the country the name of whose head of state is Beatrix .",
        "result": "Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW' \nAND IsOfficial = 'T' \nAND CountryCode IN \n  (SELECT Code \n   FROM country \n   WHERE HeadOfState = 'Beatrix') \nORDER BY Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "Which language is the most popular in Aruba or used in the country the name of whose head of state is Beatrix .",
        "result": "Language \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') \nORDER BY Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "What language is predominantly spoken in Aruba and used in the country the name of whose head of state is Beatrix .",
        "result": "countrylanguage.Language \nFROM \n    countrylanguage \n    INNER JOIN country ON countrylanguage.CountryCode = country.Code \n    INNER JOIN city ON city.CountryCode = country.Code \nWHERE \n    city.Name = 'Aruba' AND country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T' \nORDER BY \n    countrylanguage.Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "What language is predominantly spoken in Aruba or used in the country the name of whose head of state is Beatrix .",
        "result": "countrylanguage.Language \nFROM \n    countrylanguage \n    INNER JOIN country ON countrylanguage.CountryCode = country.Code \n    LEFT JOIN city ON city.CountryCode = country.Code \nWHERE \n    city.Name = 'Aruba' OR \n    country.HeadOfState = 'Beatrix' \nORDER BY \n    countrylanguage.Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.headofstate = \"Beatrix\"  ",
        "question": "How many different forms of governments are there in Africa and used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa' AND Code IN (SELECT CountryCode FROM city WHERE HeadOfState = 'Beatrix')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.headofstate = \"Beatrix\"  ",
        "question": "How many different forms of governments are there in Africa or used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE (Continent = 'Africa') OR (HeadOfState = 'Beatrix');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.headofstate = \"Beatrix\"  ",
        "question": "What is the total number of languages used in Aruba and used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(DISTINCT countrylanguage.Language) FROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON countrylanguage.CountryCode = country.Code\nWHERE (city.Name = 'Aruba' OR country.HeadOfState = 'Beatrix')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.headofstate = \"Beatrix\"  ",
        "question": "What is the total number of languages used in Aruba or used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.headofstate = \"Beatrix\"  ",
        "question": "How many languages are spoken in Aruba and used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(DISTINCT language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.headofstate = \"Beatrix\"  ",
        "question": "How many languages are spoken in Aruba or used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode = (\n    SELECT Code \n    FROM country \n    WHERE HeadOfState = 'Beatrix'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.headofstate = \"Beatrix\"  ",
        "question": "how many countries are in Asia and used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(country.Code) FROM country\nWHERE country.Continent = 'Asia' AND country.Code IN \n(SELECT city.CountryCode FROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE country.HeadOfState LIKE '%Beatrix%');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.headofstate = \"Beatrix\"  ",
        "question": "how many countries are in Asia or used in the country the name of whose head of state is Beatrix .",
        "result": "COUNT(*) FROM country WHERE (Continent='Asia') OR (HeadOfState='Beatrix')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = \"Beatrix\"  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "Which language is spoken by the largest number of countries and used in the country the name of whose head of state is Beatrix .",
        "result": "Language\nFROM countrylanguage\nWHERE IsOfficial = 'T' AND CountryCode IN (\n  SELECT Code\n  FROM country\n  WHERE HeadOfState = 'Beatrix'\n)\nGROUP BY Language\nORDER BY COUNT(DISTINCT CountryCode) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is spoken by the largest number of countries and used in the country the name of whose head of state is Beatrix . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and country.indepyear < 1930  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations and that are founded before 1930 ?",
        "result": "countrylanguage.Language\nFROM countrylanguage\nINNER JOIN country ON countrylanguage.CountryCode = country.Code\nWHERE country.Continent = 'Asia'\nAND countrylanguage.IsOfficial = 'T'\nAND country.IndepYear < 1930\nGROUP BY countrylanguage.Language\nORDER BY COUNT(DISTINCT country.Code) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations and that are founded before 1930 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or country.indepyear < 1930  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations or that are founded before 1930 ?",
        "result": "CountryLanguage.Language \nFROM \n    CountryLanguage \n    INNER JOIN Country ON Country.Code = CountryLanguage.CountryCode \nWHERE \n    (Country.Continent = 'Asia' AND CountryLanguage.IsOfficial = 'T') \n    OR \n    (Country.IndepYear < 1930) \nGROUP BY \n    CountryLanguage.Language \nORDER BY \n    COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations or that are founded before 1930 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.indepyear < 1930  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are founded before 1930 ?",
        "result": "GovernmentForm, SUM(Population) as TotalPopulation\nFROM country\nWHERE GovernmentForm IN (\n    SELECT GovernmentForm \n    FROM country \n    WHERE IndepYear < 1930 AND LifeExpectancy > 72 \n    GROUP BY GovernmentForm\n)\nGROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are founded before 1930 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "Give the language that is spoken in the most countries and that are founded before 1930 ?",
        "result": "Language \nFROM countrylanguage \nWHERE IsOfficial = 'T' AND CountryCode IN \n(SELECT Code FROM country WHERE IndepYear < 1930) \nGROUP BY Language \nORDER BY COUNT(DISTINCT CountryCode) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the language that is spoken in the most countries and that are founded before 1930 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "What are the names of all the countries that became independent after 1950 and that have greater surface area than any country ?",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950 \nAND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that have greater surface area than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "What are the names of all the countries that became independent after 1950 or that have greater surface area than any country ?",
        "result": "Name \nFROM \ncountry \nWHERE \nIndepYear > 1950 \nOR \nSurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that have greater surface area than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "Give the names of the nations that were founded after 1950 and that have greater surface area than any country ?",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950 AND SurfaceArea > (\n    SELECT MAX(SurfaceArea)\n    FROM country\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that have greater surface area than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "Give the names of the nations that were founded after 1950 or that have greater surface area than any country ?",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950 OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that have greater surface area than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.surfacearea > (select min(country.surfacearea) from country  )  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that have greater surface area than any country ?",
        "result": "\n\nGovernmentForm, SUM(Population)\nFROM country\nWHERE GovernmentForm IN (SELECT GovernmentForm FROM country WHERE LifeExpectancy > 72 AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country))\nGROUP BY GovernmentForm;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that have greater surface area than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Europe\"  ",
        "question": "How many countries have a Republic as their form of government and in Europe ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Europe\"  ",
        "question": "How many countries have a Republic as their form of government or in Europe ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm = 'Republic' OR Continent = 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Europe\"  ",
        "question": "How many countries have governments that are Republic and in Europe ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Europe\"  ",
        "question": "How many countries have governments that are Republic or in Europe ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' AND Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Europe\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Europe ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Europe\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Europe ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil and in Europe ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil or in Europe ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Europe\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Europe ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Europe\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Europe ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Europe\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Europe ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND Region = 'Central Africa'\nUNION\nSELECT AVG(LifeExpectancy)\nFROM country \nWHERE Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Europe\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Europe ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Europe\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Europe ?",
        "result": "Name, IndepYear, SurfaceArea\nFROM country\nWHERE Population = (\n  SELECT MIN(Population)\n  FROM country\n  WHERE Continent = 'Europe'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Europe\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Europe ?",
        "result": "country.Population, country.Name, country.HeadOfState\nFROM country\nWHERE country.Continent = 'Europe'\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Europe\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Europe ?",
        "result": "Name, SurfaceArea \n FROM country \n WHERE Continent = 'Europe' \n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Europe ?",
        "result": "country.Name FROM country \nWHERE country.Continent = 'Europe' \nORDER BY country.Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Europe ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Europe' \nORDER BY Population ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Europe ?",
        "result": "Name FROM country WHERE Continent = 'Europe' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many countries have a Republic as their form of government and have greater area than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' \nAND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many countries have a Republic as their form of government or have greater area than that of any country ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many countries have governments that are Republic and have greater area than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND SurfaceArea > (\n    SELECT MAX(SurfaceArea) \n    FROM country\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many countries have governments that are Republic or have greater area than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm LIKE '%Republic%' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "What is the total surface area of the countries in the Caribbean region and have greater area than that of any country ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region='Caribbean' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "What is the total surface area of the countries in the Caribbean region or have greater area than that of any country ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have greater area than that of any country ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Caribbean' \nAND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have greater area than that of any country ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and have greater area than that of any country ?",
        "result": "AVG(LifeExpectancy)\nFROM country\nWHERE Region = 'Central Africa' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or have greater area than that of any country ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many different forms of governments are there in Africa and have greater area than that of any country ?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country \nWHERE Continent = 'Africa' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many different forms of governments are there in Africa or have greater area than that of any country ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many continents speak Chinese and have greater area than that of any country ?",
        "result": "COUNT(DISTINCT country.Continent) FROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'Chinese' AND country.SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "How many continents speak Chinese or have greater area than that of any country ?",
        "result": "COUNT(DISTINCT Continent) FROM country \nWHERE Language = 'Chinese' OR SurfaceArea > \n(SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "how many countries are in Asia and have greater area than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE Continent = 'Asia' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "how many countries are in Asia or have greater area than that of any country ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "Count the number of countries in Asia and have greater area than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE Continent = 'Asia' AND SurfaceArea > \n(SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.surfacearea > (select min(country.surfacearea) from country  )  ",
        "question": "Count the number of countries in Asia or have greater area than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE Continent = 'Asia' OR SurfaceArea > (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or have greater area than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Europe\"  ",
        "question": "How many countries have a Republic as their form of government and in Europe ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Europe\"  ",
        "question": "How many countries have a Republic as their form of government or in Europe ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm LIKE '%Republic%' OR Continent = 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Europe\"  ",
        "question": "How many countries have governments that are Republic and in Europe ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Europe\"  ",
        "question": "How many countries have governments that are Republic or in Europe ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' AND Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Europe\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Europe ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Europe\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Europe ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil and in Europe ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' OR Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil or in Europe ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Europe\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Europe ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Europe\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Europe ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Europe\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Europe ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND Region = 'Central Africa'\n\nSELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Europe\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Europe ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent='Europe' OR Continent='Africa') AND Region='Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Europe\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Europe ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea \n FROM country \n WHERE country.Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Europe') AND country.Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Europe\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Europe ?",
        "result": "country.Name, country.HeadOfState, country.Population \nFROM country \nWHERE continent = 'Europe' \nORDER BY SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Europe\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Europe ?",
        "result": "Name, SurfaceArea \nFROM country \nWHERE Continent = 'Europe' \nORDER BY SurfaceArea DESC \nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Europe ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Europe' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Europe ?",
        "result": "Name FROM country WHERE Continent='Europe' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Europe ?",
        "result": "Name FROM country WHERE Continent = 'Europe' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.population < (select max(country.population) from country  )  ",
        "question": "What are the names of all the countries that became independent after 1950 and that have a population less than any country ?",
        "result": "Name FROM country WHERE IndepYear > 1950 AND Population < ALL (SELECT Population FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that have a population less than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.population < (select max(country.population) from country  )  ",
        "question": "What are the names of all the countries that became independent after 1950 or that have a population less than any country ?",
        "result": "Name FROM country WHERE IndepYear > 1950 OR Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that have a population less than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.population < (select max(country.population) from country  )  ",
        "question": "Give the names of the nations that were founded after 1950 and that have a population less than any country ?",
        "result": "Name FROM country \nWHERE IndepYear > 1950 AND Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that have a population less than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.population < (select max(country.population) from country  )  ",
        "question": "Give the names of the nations that were founded after 1950 or that have a population less than any country ?",
        "result": "Name FROM country WHERE IndepYear > 1950 OR Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that have a population less than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.population < (select max(country.population) from country  )  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that have a population less than any country ?",
        "result": "GovernmentForm, SUM(Population) as TotalPopulation\nFROM country\nWHERE GovernmentForm IN (\n    SELECT GovernmentForm\n    FROM country\n    WHERE LifeExpectancy > 72\n    AND Population < (\n        SELECT MIN(Population)\n        FROM country\n    )\n)\nGROUP BY GovernmentForm;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that have a population less than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Asia ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia ?",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Name = 'Brazil' OR country.Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or in Asia ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name='Brazil' OR Continent='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Asia' OR Continent = 'Africa' AND Region IN ('Central Africa', 'Eastern Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent='Central Africa' OR Continent='Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Asia ?",
        "result": "Name, IndepYear, SurfaceArea FROM country WHERE Continent = 'Asia' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Asia ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Asia ?",
        "result": "Name, SurfaceArea FROM country WHERE Continent='Asia' ORDER BY SurfaceArea DESC LIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Asia ?",
        "result": "Name FROM country \nWHERE Continent = 'Asia' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Asia ?",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Asia ?",
        "result": "Name FROM country WHERE Continent='Asia' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population < (select min(country.population) from country  )  ",
        "question": "How many countries have a Republic as their form of government and have a smaller population than that of any country ?",
        "result": "COUNT(*) FROM country\nWHERE GovernmentForm = 'Republic'\nAND Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population < (select min(country.population) from country  )  ",
        "question": "How many countries have a Republic as their form of government or have a smaller population than that of any country ?",
        "result": "COUNT(DISTINCT country.Code) \nFROM country \nWHERE country.GovernmentForm = 'Republic' OR country.Population < \n(SELECT MIN(country2.Population) FROM country country2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population < (select min(country.population) from country  )  ",
        "question": "How many countries have governments that are Republic and have a smaller population than that of any country ?",
        "result": "COUNT(*)\nFROM country\nWHERE GovernmentForm = 'Republic' \nAND Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population < (select min(country.population) from country  )  ",
        "question": "How many countries have governments that are Republic or have a smaller population than that of any country ?",
        "result": "COUNT(DISTINCT Country.Code) \nFROM Country \nWHERE GovernmentForm LIKE '%Republic%' OR Population < ALL (SELECT Population FROM Country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.population < (select min(country.population) from country  )  ",
        "question": "What is the total surface area of the countries in the Caribbean region and have a smaller population than that of any country ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' \nAND Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.population < (select min(country.population) from country  )  ",
        "question": "What is the total surface area of the countries in the Caribbean region or have a smaller population than that of any country ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region='Caribbean' OR Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.population < (select min(country.population) from country  )  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have a smaller population than that of any country ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Caribbean' \nAND Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.population < (select min(country.population) from country  )  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have a smaller population than that of any country ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent='Caribbean'\n\nOR\n\nSELECT SUM(SurfaceArea) FROM country WHERE Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.population < (select min(country.population) from country  )  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and have a smaller population than that of any country ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' AND Population < (SELECT MIN(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.population < (select min(country.population) from country  )  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or have a smaller population than that of any country ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.population < (select min(country.population) from country  )  ",
        "question": "How many different forms of governments are there in Africa and have a smaller population than that of any country ?",
        "result": "DISTINCT GovernmentForm \nFROM country \nWHERE Continent = 'Africa' \nAND Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.population < (select min(country.population) from country  )  ",
        "question": "How many different forms of governments are there in Africa or have a smaller population than that of any country ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' OR Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.population < (select min(country.population) from country  )  ",
        "question": "How many continents speak Chinese and have a smaller population than that of any country ?",
        "result": "COUNT(DISTINCT c.Continent)\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Chinese'\nAND c.Population < (SELECT MIN(Population) FROM country)\nGROUP BY c.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.population < (select min(country.population) from country  )  ",
        "question": "How many continents speak Chinese or have a smaller population than that of any country ?",
        "result": "COUNT(DISTINCT country.Continent)\nFROM countrylanguage\nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE (Language = 'Chinese' AND IsOfficial = 'T')\nOR Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.population < (select min(country.population) from country  )  ",
        "question": "how many countries are in Asia and have a smaller population than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE continent = 'Asia' AND population < (SELECT MIN(population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.population < (select min(country.population) from country  )  ",
        "question": "how many countries are in Asia or have a smaller population than that of any country ?",
        "result": "COUNT(DISTINCT country.Code)\nFROM country\nWHERE country.Continent = 'Asia' OR country.Population < ANY (SELECT country.Population FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.population < (select min(country.population) from country  )  ",
        "question": "Count the number of countries in Asia and have a smaller population than that of any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE Continent = 'Asia' AND Population < ALL (SELECT Population FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.population < (select min(country.population) from country  )  ",
        "question": "Count the number of countries in Asia or have a smaller population than that of any country ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Population < (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or have a smaller population than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' \nAND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or in Asia ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Region = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia ?",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE (country.Name = 'Brazil' OR country.Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or in Asia ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Asia' OR Continent='Africa' AND Region IN ('Central Africa', 'Eastern Asia', 'South-Eastern Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent = 'Asia' OR Continent = 'Africa') AND Region IN ('Central Africa', 'Eastern Asia', 'Southern Asia', 'Southeast Asia', 'Western Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Asia ?",
        "result": "Name, IndepYear, SurfaceArea FROM country WHERE Continent='Asia' AND Population = (SELECT MIN(Population) FROM country WHERE Continent='Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Asia ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Asia ?",
        "result": "Name, SurfaceArea \n FROM country \n WHERE Continent = 'Asia' \n ORDER BY SurfaceArea DESC \n LIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Asia ?",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Asia ?",
        "result": "Name FROM country WHERE Continent='Asia' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Asia ?",
        "result": "Name\nFROM\ncountry\nWHERE\nContinent = 'Asia'\nORDER BY Population ASC\nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population > (select max(country.population) from country  )  ",
        "question": "How many countries have a Republic as their form of government and have a population that is larger than any country ?",
        "result": "COUNT(DISTINCT country.Code)\nFROM country\nWHERE GovernmentForm = 'Republic'\nAND Population > (\n    SELECT MAX(Population)\n    FROM country\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population > (select max(country.population) from country  )  ",
        "question": "How many countries have a Republic as their form of government or have a population that is larger than any country ?",
        "result": "COUNT(DISTINCT Country.Code)\nFROM Country\nLEFT JOIN (\n    SELECT GovernmentForm, MAX(Population) AS MaxPopulation\n    FROM Country\n    GROUP BY GovernmentForm\n) AS MaxPopulations\nON Country.GovernmentForm = MaxPopulations.GovernmentForm\nAND Country.Population = MaxPopulations.MaxPopulation\nWHERE Country.GovernmentForm LIKE '%Republic%' OR MaxPopulations.MaxPopulation IS NOT NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population > (select max(country.population) from country  )  ",
        "question": "How many countries have governments that are Republic and have a population that is larger than any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population > (select max(country.population) from country  )  ",
        "question": "How many countries have governments that are Republic or have a population that is larger than any country ?",
        "result": "COUNT(DISTINCT Code) FROM country \nWHERE GovernmentForm LIKE '%Republic%' \nOR Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.population > (select max(country.population) from country  )  ",
        "question": "What is the total surface area of the countries in the Caribbean region and have a population that is larger than any country ?",
        "result": "SUM(SurfaceArea)\nFROM country\nWHERE Region = 'Caribbean' AND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.population > (select max(country.population) from country  )  ",
        "question": "What is the total surface area of the countries in the Caribbean region or have a population that is larger than any country ?",
        "result": "SUM(SurfaceArea) FROM country WHERE (Region='Caribbean' OR Population > (SELECT MAX(Population) FROM country));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.population > (select max(country.population) from country  )  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have a population that is larger than any country ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Caribbean' \nAND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.population > (select max(country.population) from country  )  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have a population that is larger than any country ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent='Caribbean' OR Population>(SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.population > (select max(country.population) from country  )  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and have a population that is larger than any country ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' \nAND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.population > (select max(country.population) from country  )  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or have a population that is larger than any country ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.population > (select max(country.population) from country  )  ",
        "question": "How many different forms of governments are there in Africa and have a population that is larger than any country ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' \nAND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.population > (select max(country.population) from country  )  ",
        "question": "How many different forms of governments are there in Africa or have a population that is larger than any country ?",
        "result": "DISTINCT GovernmentForm FROM country WHERE Continent = 'Africa' OR Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.population > (select max(country.population) from country  )  ",
        "question": "How many continents speak Chinese and have a population that is larger than any country ?",
        "result": "COUNT(DISTINCT Continent) FROM country\nWHERE Language = 'Chinese' AND Population > (SELECT MAX(Population) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.population > (select max(country.population) from country  )  ",
        "question": "How many continents speak Chinese or have a population that is larger than any country ?",
        "result": "COUNT(DISTINCT Continent) FROM \n(\nSELECT Continent FROM country \nWHERE Code IN \n    (\n    SELECT CountryCode FROM countrylanguage \n    WHERE Language = 'Chinese' AND IsOfficial = 'T'\n    )\nOR \nPopulation > (SELECT MAX(Population) FROM country)\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.population > (select max(country.population) from country  )  ",
        "question": "how many countries are in Asia and have a population that is larger than any country ?",
        "result": "COUNT(*) \nFROM country \nWHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.population > (select max(country.population) from country  )  ",
        "question": "how many countries are in Asia or have a population that is larger than any country ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.population > (select max(country.population) from country  )  ",
        "question": "Count the number of countries in Asia and have a population that is larger than any country ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' AND Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia and have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.population > (select max(country.population) from country  )  ",
        "question": "Count the number of countries in Asia or have a population that is larger than any country ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Population > (SELECT MAX(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of countries in Asia or have a population that is larger than any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government and in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government or in Africa ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm = 'Republic') AND (Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic and in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic or in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Region = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in Africa ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in Africa ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa';\nSELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Central Africa', 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Africa ?",
        "result": "Name, IndepYear, SurfaceArea\nFROM country\nWHERE Continent = 'Africa' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Africa ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent = 'Africa' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Africa ?",
        "result": "Name, SurfaceArea \n FROM country\n WHERE Continent = 'Africa'\n ORDER BY SurfaceArea DESC\n LIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Africa ?",
        "result": "Code, Name FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Africa ?",
        "result": "Name FROM country \nWHERE Continent='Africa'\nORDER BY Population ASC\nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Africa ?",
        "result": "Name \nFROM \ncountry \nWHERE \nContinent = 'Africa' \nORDER BY \nPopulation ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country where  country.name = \"Anguilla\" and country.population > (select min(country.population) from country  )  ",
        "question": "What is the continent name which Anguilla belongs to and which have a population larger than that of any country ?",
        "result": "Continent \nFROM country \nWHERE Code = 'AIA' \nAND Population > ALL (SELECT Population FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to and which have a population larger than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country where  country.name = \"Anguilla\" or country.population > (select min(country.population) from country  )  ",
        "question": "What is the continent name which Anguilla belongs to or which have a population larger than that of any country ?",
        "result": "Continent FROM country WHERE Code = 'AIA' OR Population > ALL(SELECT Population FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to or which have a population larger than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" and country.population > (select min(country.population) from country  )  ",
        "question": "Give the mean GNP and total population of nations which are considered US Territory and which have a population larger than that of any country ?",
        "result": "AVG(GNP), SUM(Population)\n FROM country\n WHERE Continent = 'North America' \n AND GNP IS NOT NULL\n AND Population > (\n    SELECT MAX(Population)\n    FROM country\n    WHERE Continent <> 'Antarctica'\n )\n AND Code IN (\n    SELECT CountryCode\n    FROM city\n    WHERE Name LIKE '%(U.S. %' OR Name LIKE '%(US) %'\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the mean GNP and total population of nations which are considered US Territory and which have a population larger than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" or country.population > (select min(country.population) from country  )  ",
        "question": "Give the mean GNP and total population of nations which are considered US Territory or which have a population larger than that of any country ?",
        "result": "AVG(GNP), SUM(Population) \nFROM country \nWHERE Code IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language='English' AND IsOfficial='T'\n) \nAND (Continent='Oceania' OR (Continent='North America' AND GovernmentForm LIKE '%Territory%') OR Population > (SELECT MAX(Population) FROM country))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the mean GNP and total population of nations which are considered US Territory or which have a population larger than that of any country ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government and in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have a Republic as their form of government or in Africa ?",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm LIKE '%Republic%' OR Continent='Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic and in Africa ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Africa\"  ",
        "question": "How many countries have governments that are Republic or in Africa ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Africa ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Africa\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Africa ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region IN ('Caribbean', 'Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil and in Africa ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name='Brazil' OR Continent='Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Africa\"  ",
        "question": "What are the population and life expectancies in Brazil or in Africa ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR Continent = 'Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa';\nSELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Africa\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Africa ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Africa', 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Africa\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Africa ?",
        "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Africa') AND Continent = 'Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Africa ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent = 'Africa' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Africa\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Africa ?",
        "result": "Name, SurfaceArea \n FROM country\n WHERE Continent = 'Africa'\n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Africa ?",
        "result": "country.Name FROM country \nJOIN city ON country.Code = city.CountryCode \nWHERE country.Continent = 'Africa' \nORDER BY city.Population DESC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Africa ?",
        "result": "Name FROM country \nWHERE Continent = 'Africa' \nORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Africa\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Africa ?",
        "result": "Name \nFROM \ncountry \nWHERE \nContinent = 'Africa' \nORDER BY \nPopulation ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Africa ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language != \"English\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that do not speak English and ?",
        "result": "Name FROM country \nWHERE IndepYear > 1950 \nAND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 or countrylanguage.language != \"English\"  ",
        "question": "What are the names of all the countries that became independent after 1950 or that do not speak English and ?",
        "result": "Code, Name \nFROM country \nWHERE (IndepYear > 1950 OR CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language != \"English\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that do not speak English and ?",
        "result": "Code, Name \nFROM country \nWHERE IndepYear > 1950 \nAND Code NOT IN (\n  SELECT CountryCode \n  FROM countrylanguage \n  WHERE Language = 'English' \n  AND IsOfficial = 'T'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 or countrylanguage.language != \"English\"  ",
        "question": "Give the names of the nations that were founded after 1950 or that do not speak English and ?",
        "result": "Name \nFROM country \nWHERE (IndepYear > 1950 OR Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T')) AND Name LIKE '%?%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language != \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia and that do not speak English and ?",
        "result": "country.Name \nFROM \ncountry \nJOIN \n(\nSELECT \nCountryCode \nFROM \ncountrylanguage \nWHERE \nLanguage <> 'English' AND \nIsOfficial = 'T'\n) AS lang ON country.Code = lang.CountryCode \nWHERE \ncontinent = 'Asia' \nORDER BY \nLifeExpectancy \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or countrylanguage.language != \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia or that do not speak English and ?",
        "result": "Name \nFROM \ncountry \nWHERE \n(LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')) \nOR \n(Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia or that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that do not speak English and ?",
        "result": "country.Name \nFROM country \nWHERE country.Code NOT IN (\n    SELECT CountryCode FROM countrylanguage WHERE Language = 'English'\n) \nAND country.Code IN (\n    SELECT CountryCode FROM countrylanguage \n    GROUP BY CountryCode \n    ORDER BY COUNT(Language) DESC \n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that do not speak English and ?",
        "result": "Country.Name \nFROM Country \nWHERE Country.Code NOT IN (\n    SELECT DISTINCT CountryCode \n    FROM CountryLanguage \n    WHERE Language = 'English'\n) \nAND Country.Code = (\n    SELECT CountryCode \n    FROM CountryLanguage \n    GROUP BY CountryCode \n    ORDER BY COUNT(*) DESC \n    LIMIT 1 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that do not speak English and ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea\n FROM country\n WHERE country.Code NOT IN (\n     SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'\n ) AND country.Population = (\n     SELECT MIN(Population) FROM country\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that do not speak English and ?",
        "result": "country.Name, country.Population, country.HeadOfState\nFROM country\nWHERE country.Language <> 'English' AND country.Area = (SELECT MAX(country.Area) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language != \"English\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that do not speak English and ?",
        "result": "Name \nFROM country \nWHERE IndepYear > 1950 AND Code NOT IN \n    (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 or countrylanguage.language != \"English\"  ",
        "question": "What are the names of all the countries that became independent after 1950 or that do not speak English and ?",
        "result": "Code, Name\nFROM country\nWHERE (IndepYear > 1950) OR (Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 and countrylanguage.language != \"English\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that do not speak English and ?",
        "result": "Code, Name \nFROM country \nWHERE IndepYear > 1950 \nAND Code NOT IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear > 1950 or countrylanguage.language != \"English\"  ",
        "question": "Give the names of the nations that were founded after 1950 or that do not speak English and ?",
        "result": "Name FROM country WHERE (IndepYear > 1950) OR (Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and countrylanguage.language != \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia and that do not speak English and ?",
        "result": "country.Name \nFROM country \nINNER JOIN city ON country.Capital = city.ID \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' \nAND countrylanguage.Language != 'English' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or countrylanguage.language != \"English\"   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia or that do not speak English and ?",
        "result": "country.Name FROM country \nLEFT JOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE (countrylanguage.Language <> 'English' OR countrylanguage.Language IS NULL) \nAND country.Continent='Asia' \nORDER BY country.LifeExpectancy ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia or that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that do not speak English and ?",
        "result": "country.Name \nFROM \ncountry \nJOIN \n(SELECT \nCountryCode, \nCOUNT(*) as language_count \nFROM \ncountrylanguage \nWHERE \nLanguage != 'English' \nGROUP BY \nCountryCode \nHAVING \nMAX(Percentage) \n) as cl \nON \ncountry.Code = cl.CountryCode \nORDER BY \ncl.language_count DESC \nLIMIT \n1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that do not speak English and ?",
        "result": "country.Name\nFROM country\nWHERE country.Code = (\n    SELECT countrylanguage.CountryCode\n    FROM countrylanguage\n    WHERE countrylanguage.IsOfficial = 'T'\n    AND countrylanguage.Language != 'English'\n    GROUP BY countrylanguage.CountryCode\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that do not speak English and ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea \nFROM country \nWHERE country.Code NOT IN (\n    SELECT countrylanguage.CountryCode \n    FROM countrylanguage \n    WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'\n) AND country.Population = (\n    SELECT MIN(country.Population) \n    FROM country \n    WHERE country.Code NOT IN (\n        SELECT countrylanguage.CountryCode \n        FROM countrylanguage \n        WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'\n    )\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that do not speak English and ?",
        "result": "country.Name, country.Population, country.HeadOfState \n FROM country \n WHERE country.Code NOT IN (\n     SELECT CountryCode \n     FROM countrylanguage \n     WHERE Language = 'English' \n     AND IsOfficial = 1\n ) \n ORDER BY country.SurfaceArea DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that do not speak English and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.governmentform != \"Republic\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and do not have Republic for governments .",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Caribbean' \nAND GovernmentForm NOT LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.governmentform != \"Republic\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or do not have Republic for governments .",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean' AND GovernmentForm != 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.governmentform != \"Republic\"  ",
        "question": "How many different forms of governments are there in Africa and do not have Republic for governments .",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent='Africa' AND GovernmentForm NOT LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.governmentform != \"Republic\"  ",
        "question": "How many different forms of governments are there in Africa or do not have Republic for governments .",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country\nWHERE (Continent = 'Africa' OR GovernmentForm NOT LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.governmentform != \"Republic\"  ",
        "question": "What is the total number of languages used in Aruba and do not have Republic for governments .",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage\nWHERE CountryCode = 'ABW' AND IsOfficial = 'F' AND Language NOT IN \n(SELECT Language FROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.governmentform != \"Republic\"  ",
        "question": "What is the total number of languages used in Aruba or do not have Republic for governments .",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR GovernmentForm NOT LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.governmentform != \"Republic\"  ",
        "question": "How many languages are spoken in Aruba and do not have Republic for governments .",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.Name = 'Aruba' AND country.GovernmentForm != 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.governmentform != \"Republic\"  ",
        "question": "How many languages are spoken in Aruba or do not have Republic for governments .",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode='ABW' OR GovernmentForm NOT LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform != \"Republic\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and do not have Republic for governments .",
        "result": "Continent FROM country \nWHERE GovernmentForm NOT LIKE '%Republic%' \nGROUP BY Continent \nORDER BY COUNT(DISTINCT Language) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform != \"Republic\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and do not have Republic for governments .",
        "result": "Continent\nFROM country\nWHERE GovernmentForm <> 'Republic'\nGROUP BY Continent\nHAVING COUNT(DISTINCT countrylanguage.Language) = (\n  SELECT MAX(lang_count) \n  FROM (\n    SELECT COUNT(DISTINCT countrylanguage.Language) AS lang_count \n    FROM country \n    JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \n    WHERE GovernmentForm <> 'Republic' \n    GROUP BY country.Continent\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.governmentform != \"Republic\"  ",
        "question": "How many continents speak Chinese and do not have Republic for governments .",
        "result": "COUNT(DISTINCT Continent) FROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language = 'Chinese' AND c.GovernmentForm <> 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.governmentform != \"Republic\"  ",
        "question": "How many continents speak Chinese or do not have Republic for governments .",
        "result": "COUNT(DISTINCT country.Continent) FROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE (countrylanguage.Language = 'Chinese' AND country.GovernmentForm != 'Republic') \nOR (countrylanguage.Language != 'Chinese' AND country.GovernmentForm NOT LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.governmentform != \"Republic\"  ",
        "question": "how many countries are in Asia and do not have Republic for governments .",
        "result": "COUNT(*) FROM country\nWHERE Continent = 'Asia' AND GovernmentForm != 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.governmentform != \"Republic\"  ",
        "question": "how many countries are in Asia or do not have Republic for governments .",
        "result": "COUNT(*) \nFROM country \nWHERE (Continent = 'Asia') OR (GovernmentForm NOT LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or do not have Republic for governments . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Europe\"  ",
        "question": "How many countries have a Republic as their form of government and are in Europe countries ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm='Republic' AND Continent='Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Europe\"  ",
        "question": "How many countries have a Republic as their form of government or are in Europe countries ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Continent = 'Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Europe\"  ",
        "question": "How many countries have governments that are Republic and are in Europe countries ?",
        "result": "COUNT(*)\nFROM country\nWHERE GovernmentForm = 'Republic' AND Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Europe\"  ",
        "question": "How many countries have governments that are Republic or are in Europe countries ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Europe\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and are in Europe countries ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE (Continent = 'Europe' OR Name LIKE '%Caribbean%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Europe\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or are in Europe countries ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Europe' OR Name IN (SELECT CountryCode FROM city WHERE District = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(city.population) from city join country on city.CountryCode = country.Code where  city.district = \"Gelderland\" and country.continent = \"Europe\"  ",
        "question": "How many people live in Gelderland district and are in Europe countries ?",
        "result": "SUM(city.Population)\nFROM city\nJOIN country ON city.CountryCode = country.Code\nWHERE city.District = 'Gelderland' AND country.Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Gelderland district and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Europe\"  ",
        "question": "What is the total number of languages used in Aruba and are in Europe countries ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' AND Language IN (SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Europe\"  ",
        "question": "What is the total number of languages used in Aruba or are in Europe countries ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Europe\"  ",
        "question": "How many languages are spoken in Aruba and are in Europe countries ?",
        "result": "COUNT(DISTINCT countrylanguage.Language) \nFROM countrylanguage \nJOIN country ON country.Code = countrylanguage.CountryCode \nWHERE country.Name = 'Aruba' AND country.Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Europe\"  ",
        "question": "How many languages are spoken in Aruba or are in Europe countries ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN (\n  SELECT Code FROM country \n  WHERE Continent = 'Europe'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" and country.continent = \"Europe\"   order by city.population desc limit 1 ",
        "question": "Find the city with the largest population that uses English and are in Europe countries ?",
        "result": "city.Name\nFROM city\nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nINNER JOIN country ON city.CountryCode = country.Code\nWHERE countrylanguage.Language = 'English'\nAND country.Continent = 'Europe'\nORDER BY city.Population DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the city with the largest population that uses English and are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" or country.continent = \"Europe\"   order by city.population desc limit 1 ",
        "question": "Find the city with the largest population that uses English or are in Europe countries ?",
        "result": "city.Name \nFROM city \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE (countrylanguage.Language = 'English' OR country.Continent = 'Europe') \nORDER BY city.Population DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the city with the largest population that uses English or are in Europe countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Europe\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Europe ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Europe\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Europe ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil and in Europe ?",
        "result": "Population, LifeExpectancy \nFROM \n  country \nWHERE \n  Name = 'Brazil' OR \n  Continent = 'Europe' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Europe\"  ",
        "question": "What are the population and life expectancies in Brazil or in Europe ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name='Brazil' OR Continent='Europe';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Europe\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Europe ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Europe\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Europe ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Europe\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Europe ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND Region='Central Africa'\n UNION\n SELECT AVG(LifeExpectancy) FROM country WHERE Continent='Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Europe\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Europe ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Europe', 'Central Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" and country.continent = \"Europe\"   order by city.population desc limit 1 ",
        "question": "Find the city with the largest population that uses English and in Europe ?",
        "result": "city.Name FROM city\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nJOIN country ON city.CountryCode = country.Code\nWHERE countrylanguage.Language = 'English' AND country.Continent = 'Europe'\nORDER BY city.Population DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the city with the largest population that uses English and in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" or country.continent = \"Europe\"   order by city.population desc limit 1 ",
        "question": "Find the city with the largest population that uses English or in Europe ?",
        "result": "city.Name FROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nJOIN country ON city.CountryCode = country.Code \nWHERE (countrylanguage.Language = 'English' OR country.Continent = 'Europe') \nORDER BY city.Population DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the city with the largest population that uses English or in Europe ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and are in Asia countries ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or are in Asia countries ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and are in Asia countries ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or are in Asia countries ?",
        "result": "COUNT(DISTINCT Code) \nFROM country \nWHERE (GovernmentForm LIKE '%Republic%' OR Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and are in Asia countries ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Name IN ('Bahamas', 'Barbados', 'Cuba', 'Dominican Republic', 'Haiti', 'Jamaica', 'Puerto Rico', 'Trinidad and Tobago', 'Antigua and Barbuda', 'Dominica', 'Grenada', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or are in Asia countries ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Name IN (SELECT Name FROM country WHERE Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(city.population) from city join country on city.CountryCode = country.Code where  city.district = \"Gelderland\" and country.continent = \"Asia\"  ",
        "question": "How many people live in Gelderland district and are in Asia countries ?",
        "result": "SUM(city.Population) \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE city.District = 'Gelderland' AND country.Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Gelderland district and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Asia\"  ",
        "question": "What is the total number of languages used in Aruba and are in Asia countries ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Asia\"  ",
        "question": "What is the total number of languages used in Aruba or are in Asia countries ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia' OR Name = 'Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Asia\"  ",
        "question": "How many languages are spoken in Aruba and are in Asia countries ?",
        "result": "COUNT(DISTINCT Language)\nFROM countrylanguage\nJOIN country ON country.Code = countrylanguage.CountryCode\nWHERE country.Region = 'Asia' AND countrylanguage.Language IN \n(SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Asia\"  ",
        "question": "How many languages are spoken in Aruba or are in Asia countries ?",
        "result": "COUNT(DISTINCT Language)\nFROM countrylanguage\nWHERE CountryCode = 'ABW' OR CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" and country.continent = \"Asia\"   order by city.population desc limit 1 ",
        "question": "Find the city with the largest population that uses English and are in Asia countries ?",
        "result": "city.Name FROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T'\nORDER BY city.Population DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the city with the largest population that uses English and are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" or country.continent = \"Asia\"   order by city.population desc limit 1 ",
        "question": "Find the city with the largest population that uses English or are in Asia countries ?",
        "result": "city.Name\nFROM city\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nJOIN country ON city.CountryCode = country.Code\nWHERE (countrylanguage.Language = 'English' OR country.Continent = 'Asia')\nORDER BY city.Population DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the city with the largest population that uses English or are in Asia countries ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.continent = \"Asia\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that are in Asia and ?",
        "result": "Name FROM country WHERE Continent='Asia' AND IndepYear>1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.continent = \"Asia\"  ",
        "question": "What are the names of all the countries that became independent after 1950 or that are in Asia and ?",
        "result": "Name FROM country WHERE (IndepYear > 1950 OR Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.continent = \"Asia\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that are in Asia and ?",
        "result": "Code, Name\nFROM country\nWHERE Continent = 'Asia' AND IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.continent = \"Asia\"  ",
        "question": "Give the names of the nations that were founded after 1950 or that are in Asia and ?",
        "result": "Name FROM country \nWHERE (IndepYear > 1950) OR (Continent = 'Asia' AND GovernmentForm LIKE '%?%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" and country.continent = \"Asia\"   order by city.population desc limit 1 ",
        "question": "What is the most populace city that speaks English and that are in Asia and ?",
        "result": "city.Name FROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Asia' \nAND countrylanguage.Language = 'English' \nAND countrylanguage.IsOfficial = 1 \nORDER BY city.Population DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the most populace city that speaks English and that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = \"English\" or country.continent = \"Asia\"   order by city.population desc limit 1 ",
        "question": "What is the most populace city that speaks English or that are in Asia and ?",
        "result": "city.Name, MAX(city.Population) \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nJOIN country ON city.CountryCode = country.Code \nWHERE (countrylanguage.Language = 'English' OR country.Continent = 'Asia') \nGROUP BY city.Name \nORDER BY MAX(city.Population) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the most populace city that speaks English or that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.continent = \"Asia\"  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are in Asia and ?",
        "result": "GovernmentForm, SUM(Population) \n FROM country \n WHERE Continent='Asia' AND LifeExpectancy > 72 \n GROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city join country on city.CountryCode = country.Code where  city.population between 160000 and 900000 and country.continent = \"Asia\"  ",
        "question": "Return the names of cities that have a population between 160000 and 900000 and that are in Asia and ?",
        "result": "Name \nFROM city \nWHERE Population BETWEEN 160000 AND 900000 \nAND CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 and that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city where  city.population between 160000 and 900000   union select city.name from city join country on city.CountryCode = country.Code where  country.continent = \"Asia\"  ",
        "question": "Return the names of cities that have a population between 160000 and 900000 or that are in Asia and ?",
        "result": "Name FROM city \nWHERE (Population BETWEEN 160000 AND 900000) OR (CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of cities that have a population between 160000 and 900000 or that are in Asia and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.population asc limit 1 ",
        "question": "What are the population and life expectancies in Brazil and with the smallest population ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' \nUNION \nSELECT Population, LifeExpectancy \nFROM country \nORDER BY Population ASC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the smallest population ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950   order by country.population asc limit 1 ",
        "question": "What are the names of all the countries that became independent after 1950 and that has the lowest population .",
        "result": "Code, Name\nFROM country\nWHERE IndepYear > 1950 AND Population = (\n    SELECT MIN(Population)\n    FROM country\n    WHERE IndepYear > 1950\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that has the lowest population . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950   order by country.population asc limit 1 ",
        "question": "Give the names of the nations that were founded after 1950 and that has the lowest population .",
        "result": "Name FROM country WHERE IndepYear > 1950 ORDER BY Population LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that has the lowest population . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"   order by country.population asc limit 1 ",
        "question": "Give the names of nations that speak both English and French and that has the lowest population .",
        "result": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language IN ('English','French') \nGROUP BY country.Name \nHAVING COUNT(DISTINCT countrylanguage.Language) = 2 \nORDER BY country.Population ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of nations that speak both English and French and that has the lowest population . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"   order by country.population asc limit 1 ",
        "question": "What are the regions that use English or Dutch and that has the lowest population .",
        "result": "city.District \nFROM city \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND city.Population = (SELECT MIN(Population) FROM city)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the regions that use English or Dutch and that has the lowest population . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"   order by country.population asc limit 1 ",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic and that has the lowest population .",
        "result": "Code FROM country \nWHERE Code NOT IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') \nAND GovernmentForm != 'Republic'\nORDER BY Population ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the codes of the countries that do not speak English and whose government forms are not Republic and that has the lowest population . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"   order by country.population asc limit 1 ",
        "question": "Return the codes of countries that do not speak English and do not have Republic for governments and that has the lowest population .",
        "result": "Code \nFROM country \nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') \nAND GovernmentForm != 'Republic' \nORDER BY Population \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the codes of countries that do not speak English and do not have Republic for governments and that has the lowest population . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population and life expectancies in Brazil and with the largest area ?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil' AND SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the largest area ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950   order by country.surfacearea desc limit 1 ",
        "question": "What are the names of all the countries that became independent after 1950 and that has the largest area .",
        "result": "Code,Name \nFROM \n  country \nWHERE \n  IndepYear > 1950 \nORDER BY \n  SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950   order by country.surfacearea desc limit 1 ",
        "question": "Give the names of the nations that were founded after 1950 and that has the largest area .",
        "result": "Code, Name\nFROM country\nWHERE IndepYear > 1950\nORDER BY SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the names of nations that speak both English and French and that has the largest area .",
        "result": "country.Name FROM country \nJOIN countrylanguage ON country.Code=countrylanguage.CountryCode \nWHERE countrylanguage.Language IN ('English', 'French') AND \ncountry.Code IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'English' \nINTERSECT \nSELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = 'French') \nORDER BY country.SurfaceArea DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of nations that speak both English and French and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select distinct country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\" or countrylanguage.language = \"Dutch\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the regions that use English or Dutch and that has the largest area .",
        "result": "country.Region \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the regions that use English or Dutch and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic and that has the largest area .",
        "result": "Code \nFROM \n  country \nWHERE \n  Code NOT IN \n  (SELECT \n     CountryCode \n   FROM \n     countrylanguage \n   WHERE \n     Language = 'English' AND IsOfficial = 'T') \n  AND GovernmentForm != 'Republic' \nORDER BY \n  SurfaceArea DESC \nLIMIT \n  1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the codes of the countries that do not speak English and whose government forms are not Republic and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.code from country where  country.governmentform != \"Republic\"   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = \"English\"   order by country.surfacearea desc limit 1 ",
        "question": "Return the codes of countries that do not speak English and do not have Republic for governments and that has the largest area .",
        "result": "Code FROM country \nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language='English' AND IsOfficial='T') \nAND GovernmentForm != 'Republic' \nORDER BY SurfaceArea DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the codes of countries that do not speak English and do not have Republic for governments and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\" and country.population = \"80000\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000 and that has the largest area .",
        "result": "Name \nFROM \ncountry \nWHERE \nContinent = 'Europe' AND \nPopulation = 80000 AND \nSurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the countries that are in the continent of Europe and have a population of 80000 and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Europe\" and country.population = \"80000\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the names of countries that are in Europe and have a population equal to 80000 and that has the largest area .",
        "result": "Name FROM country WHERE Continent='Europe' AND Population=80000 AND SurfaceArea=(SELECT MAX(SurfaceArea) FROM country WHERE Continent='Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of countries that are in Europe and have a population equal to 80000 and that has the largest area . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city where  city.population between 160000 and 900000 and city.population > (select avg(city.population) from city  )  ",
        "question": "What are the cities whose population is between 160000 and 900000 and whose population is greater than the average population of cities ?",
        "result": "Name FROM city WHERE Population BETWEEN 160000 AND 900000 AND Population > (SELECT AVG(Population) FROM city);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the cities whose population is between 160000 and 900000 and whose population is greater than the average population of cities ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select city.name from city where  city.population between 160000 and 900000 or city.population > (select avg(city.population) from city  )  ",
        "question": "What are the cities whose population is between 160000 and 900000 or whose population is greater than the average population of cities ?",
        "result": "Name \nFROM city \nWHERE Population BETWEEN 160000 AND 900000 OR Population > (SELECT AVG(Population) FROM city)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the cities whose population is between 160000 and 900000 or whose population is greater than the average population of cities ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(city.population) from city where  city.district = \"Gelderland\" and city.population > (select avg(city.population) from city  )  ",
        "question": "How many people live in Gelderland district and have a population that is above the average population across all cities ?",
        "result": "COUNT(*) FROM city \nWHERE District = 'Gelderland' AND Population > (SELECT AVG(Population) FROM city)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Gelderland district and have a population that is above the average population across all cities ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(city.population) from city where  city.district = \"Gelderland\" or city.population > (select avg(city.population) from city  )  ",
        "question": "How many people live in Gelderland district or have a population that is above the average population across all cities ?",
        "result": "SUM(Population) FROM city\nWHERE District = 'Gelderland' OR Population > (SELECT AVG(Population) FROM city)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Gelderland district or have a population that is above the average population across all cities ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the population and life expectancies in Brazil and with the top 5 largest area ?",
        "result": "country.Population, country.LifeExpectancy \nFROM country \nWHERE country.Name = 'Brazil' \nOR country.Name IN (SELECT Name FROM country ORDER BY SurfaceArea DESC LIMIT 5)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the top 5 largest area ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.population desc limit 3 ",
        "question": "What are the population and life expectancies in Brazil and with the top 3 largest population ?",
        "result": "Population, LifeExpectancy \nFROM \n  country \nWHERE \n  Name = 'Brazil' \n  OR Population IN \n    (SELECT Population \n     FROM country \n     WHERE Name != 'Brazil' \n     ORDER BY Population DESC \n     LIMIT 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the top 3 largest population ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.population asc limit 3 ",
        "question": "What are the population and life expectancies in Brazil and with the 3 lowest populations ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' \nUNION \nSELECT Population, LifeExpectancy \nFROM country \nORDER BY Population ASC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the 3 lowest populations ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"English\"   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"French\"   order by country.population asc limit 3 ",
        "question": "What are the names of nations speak both English and French and with the 3 lowest populations ?",
        "result": "country.Name \nFROM \n    countrylanguage \n    INNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE \n    countrylanguage.Language IN ('English', 'French') \n    AND country.Population IN (\n        SELECT \n            Population \n        FROM \n            country \n        ORDER BY \n            Population ASC \n        LIMIT \n            3\n    ) \nGROUP BY \n    country.Name \nHAVING \n    COUNT(DISTINCT countrylanguage.Language) = 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of nations speak both English and French and with the 3 lowest populations ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\"   order by country.population asc limit 3 ",
        "question": "What are the population and life expectancies in Brazil and with the fewest people .",
        "result": "Population, LifeExpectancy \nFROM city \nWHERE CountryCode = 'BRA' \nORDER BY Population ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and with the fewest people . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and are in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm='Republic' AND Continent='Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or are in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and are in Asia ?",
        "result": "COUNT(*)\nFROM country\nWHERE GovernmentForm = 'Republic' AND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or are in Asia ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and are in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or are in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region='Caribbean' OR Region='Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and are in Asia ?",
        "result": "SUM(SurfaceArea) FROM country WHERE (Continent='Asia' OR Name='Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or are in Asia ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Asia' OR Name IN \n(SELECT Name FROM country \nWHERE Region = 'Caribbean')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and are in Asia ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region='Central Africa' AND Continent='Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or are in Asia ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Asia\"  ",
        "question": "What is the total number of languages used in Aruba and are in Asia ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Asia\"  ",
        "question": "What is the total number of languages used in Aruba or are in Asia ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode IN (SELECT Code FROM country WHERE Continent='Asia' OR Name='Aruba')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.continent = \"Asia\"  ",
        "question": "How many languages are spoken in Aruba and are in Asia ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE (country.Name = 'Aruba' AND country.Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.continent = \"Asia\"  ",
        "question": "How many languages are spoken in Aruba or are in Asia ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE CountryCode = 'ABW' OR CountryCode IN \n(SELECT Code FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and are in Asia ?",
        "result": "Continent \nFROM country \nWHERE Continent = 'Asia' \nGROUP BY Continent \nHAVING COUNT(DISTINCT Language) = (\n  SELECT MAX(count_languages) \n  FROM (\n    SELECT COUNT(DISTINCT Language) as count_languages \n    FROM countrylanguage \n    JOIN country ON country.Code = countrylanguage.CountryCode \n    WHERE Continent = 'Asia' \n    GROUP BY countrylanguage.CountryCode\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and are in Asia ?",
        "result": "Continent, COUNT(Language) AS NumLanguages \n FROM countrylanguage \n JOIN country ON country.Code = countrylanguage.CountryCode \n WHERE continent = 'Asia' \n GROUP BY continent \n ORDER BY NumLanguages DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.continent = \"Asia\"  ",
        "question": "How many continents speak Chinese and are in Asia ?",
        "result": "COUNT(DISTINCT Continent) FROM country \nWHERE Continent = 'Asia' AND Code IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.continent = \"Asia\"  ",
        "question": "How many continents speak Chinese or are in Asia ?",
        "result": "COUNT(DISTINCT Continent) FROM country WHERE (Continent = 'Asia' OR Language = 'Chinese') AND Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and are in Asia ?",
        "result": "Name, IndepYear, SurfaceArea \nFROM country \nWHERE Continent = 'Asia' AND Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and are in Asia ?",
        "result": "country.Population, country.Name, country.HeadOfState \n FROM country \n WHERE country.Continent = 'Asia' \n ORDER BY country.SurfaceArea DESC \n LIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and are in Asia ?",
        "result": "Name, SurfaceArea \n FROM country \n WHERE Continent = 'Asia' \n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and are in Asia ?",
        "result": "Name \nFROM country \nWHERE Continent = 'Asia' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and are in Asia ?",
        "result": "Name FROM country WHERE Continent='Asia' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and are in Asia ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government and in Asia .",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have a Republic as their form of government or in Asia .",
        "result": "COUNT(*) FROM country WHERE (GovernmentForm = 'Republic' OR Region = 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic and in Asia .",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' \nAND Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"Asia\"  ",
        "question": "How many countries have governments that are Republic or in Asia .",
        "result": "COUNT(*) \nFROM country\nWHERE GovernmentForm LIKE '%Republic%' OR Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in Asia .",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"Asia\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in Asia .",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil and in Asia .",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Name = 'Brazil' OR Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"Asia\"  ",
        "question": "What are the population and life expectancies in Brazil or in Asia .",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE Continent = 'Asia' OR Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in Asia .",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in Asia .",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region IN ('Central Africa', 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in Asia .",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Central Africa';\n\nSELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"Asia\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in Asia .",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE (Continent = 'Asia' OR Continent = 'Africa') AND Region IN ('Central Africa', 'Eastern Asia', 'Southern Asia', 'Southeast Asia', 'Western Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Asia\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in Asia .",
        "result": "country.Name, country.IndepYear, country.SurfaceArea \n FROM country \n WHERE country.Continent = 'Asia' \n AND country.Population = (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in Asia .",
        "result": "country.Name, country.HeadOfState, country.Population \nFROM country \nWHERE continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"Asia\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in Asia .",
        "result": "Name, SurfaceArea \nFROM country \nWHERE Continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in Asia .",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in Asia .",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in Asia .",
        "result": "Name FROM country WHERE Continent = 'Asia' ORDER BY Population ASC LIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in Asia . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.continent = \"Europe\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that are in the continent of Europe and ?",
        "result": "Code, Name\nFROM country\nWHERE Continent = 'Europe'\nAND IndepYear > 1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.continent = \"Europe\"  ",
        "question": "What are the names of all the countries that became independent after 1950 or that are in the continent of Europe and ?",
        "result": "Name FROM country WHERE (IndepYear > 1950) OR (Continent = 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.continent = \"Europe\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that are in the continent of Europe and ?",
        "result": "Name FROM country WHERE Continent = 'Europe' AND IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.continent = \"Europe\"  ",
        "question": "Give the names of the nations that were founded after 1950 or that are in the continent of Europe and ?",
        "result": "Name FROM country \nWHERE (IndepYear > 1950) OR (Continent = 'Europe' AND Name LIKE '%?%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Europe\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that are in the continent of Europe and ?",
        "result": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Europe' \nGROUP BY country.Code \nORDER BY COUNT(countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Europe\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that are in the continent of Europe and ?",
        "result": "country.Name \nFROM country \nJOIN (SELECT CountryCode, COUNT(Language) as num_languages \n      FROM countrylanguage \n      GROUP BY CountryCode \n      ORDER BY num_languages DESC \n      LIMIT 1) as lang_count \nON country.Code = lang_count.CountryCode \nWHERE country.Continent = 'Europe'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Europe\"   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that are in the continent of Europe and ?",
        "result": "Name, IndepYear, SurfaceArea \n FROM country \n WHERE Continent = 'Europe' \n ORDER BY Population ASC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Europe\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that are in the continent of Europe and ?",
        "result": "country.Name, country.Population, country.HeadOfState \n FROM country \n WHERE country.Continent = 'Europe' AND country.SurfaceArea = (\n   SELECT MAX(SurfaceArea) \n   FROM country \n   WHERE Continent = 'Europe'\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.continent = \"Europe\"  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are in the continent of Europe and ?",
        "result": "GovernmentForm, SUM(Population) \nFROM country \nWHERE Continent = 'Europe' AND GovernmentForm IN (\n    SELECT GovernmentForm \n    FROM country \n    WHERE LifeExpectancy > 72 \n    GROUP BY GovernmentForm \n) \nGROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are in the continent of Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population = \"80000\"  ",
        "question": "How many countries have a Republic as their form of government and have a population of 80000 ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm='Republic' AND Population=80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population = \"80000\"  ",
        "question": "How many countries have a Republic as their form of government or have a population of 80000 ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population = \"80000\"  ",
        "question": "How many countries have governments that are Republic and have a population of 80000 ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population = \"80000\"  ",
        "question": "How many countries have governments that are Republic or have a population of 80000 ?",
        "result": "COUNT(DISTINCT country.Code) FROM country WHERE country.GovernmentForm LIKE '%Republic%' OR country.Population = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.population = \"80000\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have a population of 80000 ?",
        "result": "SUM(SurfaceArea) FROM country \nWHERE Continent='North America' \nAND Region='Caribbean' \nAND Population=80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.population = \"80000\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have a population of 80000 ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.population = \"80000\"  ",
        "question": "How many different forms of governments are there in Africa and have a population of 80000 ?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa' AND Population = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.population = \"80000\"  ",
        "question": "How many different forms of governments are there in Africa or have a population of 80000 ?",
        "result": "DISTINCT GovernmentForm FROM country WHERE (Continent='Africa' OR Population=80000);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.population = \"80000\"  ",
        "question": "What is the total number of languages used in Aruba and have a population of 80000 ?",
        "result": "COUNT(DISTINCT Language)\nFROM countrylanguage \nINNER JOIN city ON countrylanguage.CountryCode = city.CountryCode \nWHERE city.Name = 'Aruba' AND city.Population = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.population = \"80000\"  ",
        "question": "What is the total number of languages used in Aruba or have a population of 80000 ?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage \nWHERE (CountryCode = 'ABW' OR Population = 80000);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.population = \"80000\"  ",
        "question": "How many languages are spoken in Aruba and have a population of 80000 ?",
        "result": "COUNT(Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' \nAND Percentage > 0 \nAND (SELECT Population FROM city WHERE Name = 'Oranjestad') = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.population = \"80000\"  ",
        "question": "How many languages are spoken in Aruba or have a population of 80000 ?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.population = \"80000\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and have a population of 80000 ?",
        "result": "country.Continent\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Population = 80000\nGROUP BY country.Continent\nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.population = \"80000\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and have a population of 80000 ?",
        "result": "Continent FROM country \nWHERE Population=80000 \nGROUP BY Continent \nHAVING COUNT(DISTINCT(Code)) = (\n    SELECT MAX(cnt) FROM (\n        SELECT COUNT(DISTINCT(Language)) AS cnt FROM countrylanguage \n        WHERE CountryCode IN (\n            SELECT Code FROM country \n            WHERE Population=80000\n        )\n        GROUP BY CountryCode\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.population = \"80000\"  ",
        "question": "How many continents speak Chinese and have a population of 80000 ?",
        "result": "COUNT(DISTINCT Continent) FROM country \nWHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language='Chinese' AND IsOfficial='T' AND Percentage > 0)\nAND Population = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.population = \"80000\"  ",
        "question": "How many continents speak Chinese or have a population of 80000 ?",
        "result": "COUNT(DISTINCT Continent) FROM countrylanguage WHERE Language='Chinese' OR Population=80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.population = \"80000\"  ",
        "question": "how many countries are in Asia and have a population of 80000 ?",
        "result": "COUNT(*) FROM country WHERE Continent='Asia' AND Population=80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.population = \"80000\"  ",
        "question": "how many countries are in Asia or have a population of 80000 ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have a population of 80000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.continent = \"Europe\"  ",
        "question": "What are the names of all the countries that became independent after 1950 and that are in Europe and ?",
        "result": "Name FROM country WHERE Continent='Europe' AND IndepYear>1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.continent = \"Europe\"  ",
        "question": "What are the names of all the countries that became independent after 1950 or that are in Europe and ?",
        "result": "Name FROM country WHERE (IndepYear > 1950) OR (Continent = 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.continent = \"Europe\"  ",
        "question": "Give the names of the nations that were founded after 1950 and that are in Europe and ?",
        "result": "Name \nFROM \ncountry \nWHERE \nContinent = 'Europe' AND IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.continent = \"Europe\"  ",
        "question": "Give the names of the nations that were founded after 1950 or that are in Europe and ?",
        "result": "Name FROM country WHERE (IndepYear > 1950) OR (Continent = 'Europe' AND Name LIKE '%?%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Europe\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that are in Europe and ?",
        "result": "country.Name\nFROM \ncountry\nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE \ncountry.Continent = 'Europe' AND \ncountrylanguage.IsOfficial = 'T' \nGROUP BY \ncountry.Code\nORDER BY \nCOUNT(countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Europe\"  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that are in Europe and ?",
        "result": "country.Name \nFROM country \nWHERE country.Continent = 'Europe' \nORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"Europe\"   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that are in Europe and ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea \n FROM country \n WHERE country.Continent='Europe' \n AND country.Population = (SELECT MIN(Population) FROM country WHERE Continent='Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"Europe\"   order by country.surfacearea desc limit 1 ",
        "question": "Give the name , population , and head of state for the country that has the largest area and that are in Europe and ?",
        "result": "country.Name, country.Population, country.HeadOfState \n FROM country \n WHERE country.Continent='Europe' AND country.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE continent='Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , population , and head of state for the country that has the largest area and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.continent = \"Europe\"  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are in Europe and ?",
        "result": "GovernmentForm, SUM(Population) \n FROM country \n WHERE Continent = 'Europe' \n AND LifeExpectancy > 72 \n GROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that are in Europe and ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population = \"80000\"  ",
        "question": "How many countries have a Republic as their form of government and have a population equal to 80000 .",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population = \"80000\"  ",
        "question": "How many countries have a Republic as their form of government or have a population equal to 80000 .",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.population = \"80000\"  ",
        "question": "How many countries have governments that are Republic and have a population equal to 80000 .",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' AND Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.population = \"80000\"  ",
        "question": "How many countries have governments that are Republic or have a population equal to 80000 .",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.population = \"80000\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together and have a population equal to 80000 .",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean' AND Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.population = \"80000\"  ",
        "question": "How much surface area do the countires in the Caribbean cover together or have a population equal to 80000 .",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much surface area do the countires in the Caribbean cover together or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" and country.population = \"80000\"  ",
        "question": "How many different forms of governments are there in Africa and have a population equal to 80000 .",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent='Africa' AND Population=80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.governmentform) from country where  country.continent = \"Africa\" or country.population = \"80000\"  ",
        "question": "How many different forms of governments are there in Africa or have a population equal to 80000 .",
        "result": "DISTINCT GovernmentForm FROM country WHERE (Continent='Africa' OR Population=80000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different forms of governments are there in Africa or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.population = \"80000\"  ",
        "question": "What is the total number of languages used in Aruba and have a population equal to 80000 .",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW' AND Percentage > 0 AND Percentage < 100 \nAND EXISTS (SELECT 1 FROM city WHERE city.CountryCode = 'ABW' AND city.Population = 80000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.population = \"80000\"  ",
        "question": "What is the total number of languages used in Aruba or have a population equal to 80000 .",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage\nWHERE (CountryCode = 'ABW' OR CountryCode IN (SELECT CountryCode FROM city WHERE Population = 80000))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" and country.population = \"80000\"  ",
        "question": "How many languages are spoken in Aruba and have a population equal to 80000 .",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage\nWHERE CountryCode = 'ABW' AND Percentage > 0 AND Percentage < 100 AND \nCountryCode IN (SELECT CountryCode FROM city WHERE Population = 80000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = \"Aruba\" or country.population = \"80000\"  ",
        "question": "How many languages are spoken in Aruba or have a population equal to 80000 .",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW' OR (CountryCode IN (SELECT CountryCode FROM city WHERE Population = 80000))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.population = \"80000\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent has the most diverse languages and have a population equal to 80000 .",
        "result": "Continent FROM country \nWHERE Population=80000 \nGROUP BY Continent \nHAVING COUNT(DISTINCT Language) = (SELECT MAX(cnt) FROM (SELECT COUNT(DISTINCT Language) AS cnt FROM countrylanguage GROUP BY CountryCode) temp)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.population = \"80000\"  group by country.continent  order by count(*) desc limit 1 ",
        "question": "Which continent speaks the most languages and have a population equal to 80000 .",
        "result": "Continent\nFROM country\nWHERE Population = 80000\nGROUP BY Continent\nHAVING COUNT(DISTINCT Code) = (SELECT MAX(lang_count) FROM \n                                (SELECT COUNT(DISTINCT Language) as lang_count \n                                 FROM countrylanguage \n                                 GROUP BY CountryCode)\n                              )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" and country.population = \"80000\"  ",
        "question": "How many continents speak Chinese and have a population equal to 80000 .",
        "result": "COUNT(DISTINCT c.Continent) FROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language = 'Chinese' AND c.Population = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = \"Chinese\" or country.population = \"80000\"  ",
        "question": "How many continents speak Chinese or have a population equal to 80000 .",
        "result": "COUNT(DISTINCT Continent) FROM country \nWHERE (Language = 'Chinese' AND IsOfficial = 'T') \nOR Population = 80000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" and country.population = \"80000\"  ",
        "question": "how many countries are in Asia and have a population equal to 80000 .",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia' AND Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia and have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.continent = \"Asia\" or country.population = \"80000\"  ",
        "question": "how many countries are in Asia or have a population equal to 80000 .",
        "result": "COUNT(*) FROM country WHERE (Continent = 'Asia') OR (Population = 80000);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many countries are in Asia or have a population equal to 80000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"North America\"  ",
        "question": "How many countries have a Republic as their form of government and in the continent of North America ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic' \nAND Continent = 'North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"North America\"  ",
        "question": "How many countries have a Republic as their form of government or in the continent of North America ?",
        "result": "COUNT(*) \nFROM country \nWHERE (GovernmentForm = 'Republic') OR (Continent = 'North America' AND GovernmentForm LIKE '%Republic%')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"North America\"  ",
        "question": "How many countries have governments that are Republic and in the continent of North America ?",
        "result": "COUNT(*) FROM country WHERE Continent='North America' AND GovernmentForm='Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"North America\"  ",
        "question": "How many countries have governments that are Republic or in the continent of North America ?",
        "result": "COUNT(*) \nFROM country \nWHERE (GovernmentForm LIKE '%Republic%') OR (Continent = 'North America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"North America\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in the continent of North America ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean' OR Continent = 'North America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"North America\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in the continent of North America ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'North America' OR Region = 'Caribbean';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"North America\"  ",
        "question": "What are the population and life expectancies in Brazil and in the continent of North America ?",
        "result": "city.Population, country.LifeExpectancy \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Name = 'Brazil' OR country.Continent = 'North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"North America\"  ",
        "question": "What are the population and life expectancies in Brazil or in the continent of North America ?",
        "result": "Population, LifeExpectancy\nFROM \n  country\nWHERE \n  (Name = 'Brazil') OR (Continent = 'North America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"North America\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in the continent of North America ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Continent = 'North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"North America\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in the continent of North America ?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa' OR Continent = 'North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"North America\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in the continent of North America ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'North America';\nSELECT AVG(LifeExpectancy) FROM country WHERE Name = 'Central Africa';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"North America\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in the continent of North America ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent IN ('Central Africa', 'North America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"North America\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in the continent of North America ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea\nFROM country\nWHERE country.Continent = 'North America'\nORDER BY country.Population ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"North America\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in the continent of North America ?",
        "result": "country.Population, country.Name, country.HeadOfState\nFROM country\nWHERE country.Continent = 'North America'\nORDER BY country.SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"North America\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in the continent of North America ?",
        "result": "Name, SurfaceArea FROM country WHERE Continent='North America' ORDER BY SurfaceArea DESC LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"North America\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in the continent of North America ?",
        "result": "Country.Name \nFROM Country \nWHERE Continent='North America' \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"North America\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in the continent of North America ?",
        "result": "Name FROM country WHERE Continent='North America' ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"North America\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in the continent of North America ?",
        "result": "Name FROM country \nWHERE Continent = 'North America'\nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in the continent of North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" and country.surfacearea > 3000  ",
        "question": "What is the average GNP and total population in all nations whose government is US Territory and whose area is bigger than 3000 ?",
        "result": "AVG(GNP), SUM(Population)\n FROM country\n WHERE GovernmentForm = 'US Territory' AND SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average GNP and total population in all nations whose government is US Territory and whose area is bigger than 3000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.gnp) , sum(country.population) from country where  country.governmentform = \"US Territory\" or country.surfacearea > 3000  ",
        "question": "What is the average GNP and total population in all nations whose government is US Territory or whose area is bigger than 3000 ?",
        "result": "AVG(GNP), SUM(Population) \nFROM country \nWHERE GovernmentForm LIKE '%US Territory%' OR SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average GNP and total population in all nations whose government is US Territory or whose area is bigger than 3000 ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"North America\"  ",
        "question": "How many countries have a Republic as their form of government and in North America ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm='Republic' AND Continent='North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"North America\"  ",
        "question": "How many countries have a Republic as their form of government or in North America ?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm = 'Republic' AND Continent = 'North America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have a Republic as their form of government or in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" and country.continent = \"North America\"  ",
        "question": "How many countries have governments that are Republic and in North America ?",
        "result": "COUNT(*) FROM country WHERE Continent = 'North America' AND GovernmentForm = 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select count(*) from country where  country.governmentform = \"Republic\" or country.continent = \"North America\"  ",
        "question": "How many countries have governments that are Republic or in North America ?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm LIKE '%Republic%' OR Continent = 'North America' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many countries have governments that are Republic or in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" and country.continent = \"North America\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region and in North America ?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean' OR Region = 'North America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.surfacearea) from country where  country.region = \"Caribbean\" or country.continent = \"North America\"  ",
        "question": "What is the total surface area of the countries in the Caribbean region or in North America ?",
        "result": "SUM(SurfaceArea) FROM country WHERE Region IN ('Caribbean', 'North America');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total surface area of the countries in the Caribbean region or in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" and country.continent = \"North America\"  ",
        "question": "What are the population and life expectancies in Brazil and in North America ?",
        "result": "Population, LifeExpectancy FROM country WHERE Name = 'Brazil' OR Continent = 'North America';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.population , country.lifeexpectancy from country where  country.name = \"Brazil\" or country.continent = \"North America\"  ",
        "question": "What are the population and life expectancies in Brazil or in North America ?",
        "result": "Population, LifeExpectancy \nFROM country \nWHERE (Name = 'Brazil' OR Region = 'North America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and life expectancies in Brazil or in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"North America\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa and in North America ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa' OR Region = 'North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"North America\"  ",
        "question": "What is the average expected life expectancy for countries in the region of Central Africa or in North America ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region='Central Africa' OR Region='North America'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average expected life expectancy for countries in the region of Central Africa or in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" and country.continent = \"North America\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa and in North America ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent = 'Africa' AND Region = 'Central Africa') OR (Continent = 'North America');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select avg(country.lifeexpectancy) from country where  country.region = \"Central Africa\" or country.continent = \"North America\"  ",
        "question": "How long is the people 's average life expectancy in Central Africa or in North America ?",
        "result": "AVG(LifeExpectancy) FROM country WHERE (Continent='Central Africa' OR Continent='North America')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people 's average life expectancy in Central Africa or in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.continent = \"North America\"   order by country.population asc limit 1 ",
        "question": "What are the name , Independence year , and surface area of the country with the smallest population and in North America ?",
        "result": "country.Name, country.IndepYear, country.SurfaceArea\nFROM country\nWHERE country.Continent = 'North America'\nORDER BY country.Population ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name , Independence year , and surface area of the country with the smallest population and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.population , country.headofstate from country where  country.continent = \"North America\"   order by country.surfacearea desc limit 1 ",
        "question": "What are the population , name and leader of the country with the largest area and in North America ?",
        "result": "country.Population, country.Name, country.HeadOfState \nFROM country \nWHERE country.Continent = 'North America' \nORDER BY country.SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population , name and leader of the country with the largest area and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea from country where  country.continent = \"North America\"   order by country.surfacearea desc limit 5 ",
        "question": "What are the names and areas of countries with the top 5 largest area and in North America ?",
        "result": "country.Name, country.SurfaceArea\nFROM country\nWHERE country.Continent = 'North America'\nORDER BY country.SurfaceArea DESC\nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of countries with the top 5 largest area and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"North America\"   order by country.population desc limit 3 ",
        "question": "What are names of countries with the top 3 largest population and in North America ?",
        "result": "Name FROM country WHERE Continent='North America' ORDER BY Population DESC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of countries with the top 3 largest population and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"North America\"   order by country.population asc limit 3 ",
        "question": "What are the names of the nations with the 3 lowest populations and in North America ?",
        "result": "Name \nFROM country \nWHERE Continent='North America' \nORDER BY Population ASC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the nations with the 3 lowest populations and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"North America\"   order by country.population asc limit 3 ",
        "question": "Return the names of the 3 countries with the fewest people and in North America ?",
        "result": "Name FROM country\nWHERE Continent = 'North America'\nORDER BY Population ASC\nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 countries with the fewest people and in North America ? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.surfacearea > 3000  ",
        "question": "What are the names of all the countries that became independent after 1950 and that have a surface area greater than 3000 .",
        "result": "Code, Name \nFROM country \nWHERE IndepYear > 1950 AND SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.surfacearea > 3000  ",
        "question": "What are the names of all the countries that became independent after 1950 or that have a surface area greater than 3000 .",
        "result": "Name FROM country WHERE IndepYear > 1950 OR SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the countries that became independent after 1950 or that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 and country.surfacearea > 3000  ",
        "question": "Give the names of the nations that were founded after 1950 and that have a surface area greater than 3000 .",
        "result": "Name FROM country \nWHERE IndepYear > 1950 AND SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.indepyear > 1950 or country.surfacearea > 3000  ",
        "question": "Give the names of the nations that were founded after 1950 or that have a surface area greater than 3000 .",
        "result": "Name FROM country WHERE IndepYear > 1950 OR SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950 or that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" and country.surfacearea > 3000   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia and that have a surface area greater than 3000 .",
        "result": "Country.Name FROM Country \nJOIN City ON City.CountryCode = Country.Code \nWHERE Country.Continent = 'Asia' AND Country.LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM Country WHERE Continent = 'Asia' AND SurfaceArea > 3000) AND Country.SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country where  country.continent = \"Asia\" or country.surfacearea > 3000   order by country.lifeexpectancy asc limit 1 ",
        "question": "What is the name of country that has the shortest life expectancy in Asia or that have a surface area greater than 3000 .",
        "result": "Name FROM country WHERE (Continent = 'Asia' AND LifeExpectancy = (SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia')) OR SurfaceArea > 3000 ORDER BY Population DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of country that has the shortest life expectancy in Asia or that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.surfacearea > 3000  group by country.name  order by count(*) desc limit 1 ",
        "question": "What is name of the country that speaks the largest number of languages and that have a surface area greater than 3000 .",
        "result": "country.Name \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.SurfaceArea > 3000 \nGROUP BY country.Code \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the country that speaks the largest number of languages and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.surfacearea > 3000  group by country.name  order by count(*) desc limit 1 ",
        "question": "Give the name of the nation that uses the greatest amount of languages and that have a surface area greater than 3000 .",
        "result": "country.Name \nFROM \ncountry \nJOIN \n(SELECT \nCountryCode, \nCOUNT(*) AS language_count \nFROM \ncountrylanguage \nGROUP BY \nCountryCode \nHAVING \nlanguage_count = \n(SELECT \nMAX(language_count) \nFROM \n(SELECT \nCountryCode, \nCOUNT(*) AS language_count \nFROM \ncountrylanguage \nGROUP BY \nCountryCode))) lang_count \nON country.Code = lang_count.CountryCode \nWHERE \ncountry.SurfaceArea > 3000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the nation that uses the greatest amount of languages and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" and country.surfacearea > 3000  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations and that have a surface area greater than 3000 .",
        "result": "countrylanguage.Language \nFROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode=country.Code \nWHERE country.Continent='Asia' \nAND country.SurfaceArea>3000 \nAND countrylanguage.IsOfficial='T' \nORDER BY country.Population DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = \"Asia\" or country.surfacearea > 3000  group by countrylanguage.language  order by count(*) desc limit 1 ",
        "question": "What is the language that is used by the largest number of Asia nations or that have a surface area greater than 3000 .",
        "result": "countrylanguage.Language \nFROM \n  countrylanguage \n  INNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE \n  (country.Continent = 'Asia' OR country.SurfaceArea > 3000) \nGROUP BY \n  countrylanguage.Language \nORDER BY \n  COUNT(DISTINCT countrylanguage.CountryCode) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asia nations or that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select country.name , country.surfacearea , country.indepyear from country where  country.surfacearea > 3000   order by country.population asc limit 1 ",
        "question": "Give the name , year of Independence , and surface area of the country that has the lowest population and that have a surface area greater than 3000 .",
        "result": "country.Name, country.IndepYear, country.SurfaceArea\nFROM country\nWHERE country.Population = (\n    SELECT MIN(Population)\n    FROM country\n    WHERE SurfaceArea > 3000\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name , year of Independence , and surface area of the country that has the lowest population and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select sum(country.population) , country.governmentform from country where  country.surfacearea > 3000  group by country.governmentform having  avg(country.lifeexpectancy) > 72 ",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that have a surface area greater than 3000 .",
        "result": "GovernmentForm, SUM(Population) \n FROM country \n WHERE GovernmentForm IN (SELECT GovernmentForm FROM country WHERE LifeExpectancy > 72 AND SurfaceArea > 3000) \n GROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72 and that have a surface area greater than 3000 . \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.isofficial = \"T\" and country.headofstate = \"Beatrix\"   order by countrylanguage.percentage desc limit 1 ",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix and spoken by the largest percentage of people ?",
        "result": "countrylanguage.Language \nFROM \n  country \n  JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE \n  country.HeadOfState = 'Beatrix' \n  AND countrylanguage.IsOfficial = 'T' \nORDER BY \n  countrylanguage.Percentage DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the official language used in the country the name of whose head of state is Beatrix and spoken by the largest percentage of people ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.age asc",
        "question": "What are the names of conductors whose nationalities are not ' USA ' , in ascending order of age .",
        "result": "Name \nFROM conductor \nWHERE Nationality <> 'USA' \nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors whose nationalities are not ' USA ' , in ascending order of age . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.age asc",
        "question": "Return the names of conductors that do not have the nationality ' USA ' , in ascending order of age .",
        "result": "Name FROM conductor \nWHERE Nationality <> 'USA'\nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of conductors that do not have the nationality ' USA ' , in ascending order of age . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.age asc",
        "question": "What are the names of conductors whose nationalities are not ' USA ' , ordered by age ?",
        "result": "Name \nFROM conductor \nWHERE Nationality != 'USA' \nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors whose nationalities are not ' USA ' , ordered by age ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.age asc",
        "question": "Return the names of conductors that do not have the nationality ' USA ' , ordered by age ?",
        "result": "Name FROM conductor WHERE Nationality <> 'USA' ORDER BY Age;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of conductors that do not have the nationality ' USA ' , ordered by age ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count(*) from conductor where  conductor.nationality != \"USA\"  ",
        "question": "Count the number of conductors , whose nationalities are not ' USA ' ?",
        "result": "COUNT(*) FROM conductor WHERE Nationality != 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of conductors , whose nationalities are not ' USA ' ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count( distinct conductor.nationality) from conductor where  conductor.nationality != \"USA\"  ",
        "question": "Count the number of different nationalities of conductors , whose nationalities are not ' USA ' ?",
        "result": "COUNT(DISTINCT Nationality)\nFROM conductor\nWHERE Nationality != 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of different nationalities of conductors , whose nationalities are not ' USA ' ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count(*) from conductor where  conductor.nationality != \"USA\"  ",
        "question": "Count the number of conductors , that do not have the nationality ' USA ' .",
        "result": "COUNT(*) FROM conductor WHERE Nationality <> 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of conductors , that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count( distinct conductor.nationality) from conductor where  conductor.nationality != \"USA\"  ",
        "question": "Count the number of different nationalities of conductors , that do not have the nationality ' USA ' .",
        "result": "COUNT(DISTINCT Nationality)\nFROM conductor\nWHERE Nationality <> 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of different nationalities of conductors , that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1  except select conductor.name from conductor where  conductor.nationality = \"USA\"  ",
        "question": "Show the names of conductors that have conducted more than one orchestras and that do not have the nationality ' USA ' .",
        "result": "Name FROM conductor \nWHERE Nationality != 'USA'\nAND Conductor_ID IN (\n    SELECT Conductor_ID FROM orchestra\n    GROUP BY Conductor_ID\n    HAVING COUNT(DISTINCT Orchestra_ID) > 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of conductors that have conducted more than one orchestras and that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1  union select conductor.name from conductor where  conductor.nationality != \"USA\"  ",
        "question": "Show the names of conductors that have conducted more than one orchestras or that do not have the nationality ' USA ' .",
        "result": "conductor.Name\nFROM conductor\nWHERE conductor.Nationality != 'USA'\nOR conductor.Conductor_ID IN (\n    SELECT conductor.Conductor_ID\n    FROM conductor\n    INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\n    GROUP BY conductor.Conductor_ID\n    HAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of conductors that have conducted more than one orchestras or that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  conductor.nationality != \"USA\"  group by orchestra.conductor_id  order by count(*) desc limit 1 ",
        "question": "Show the name of the conductor that has conducted the most number of orchestras and that do not have the nationality ' USA ' .",
        "result": "conductor.Name \nFROM \nconductor \nJOIN \norchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE \nconductor.Nationality <> 'USA'\nGROUP BY \nconductor.Conductor_ID \nORDER BY \nCOUNT(orchestra.Orchestra_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the name of the conductor that has conducted the most number of orchestras and that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008 and conductor.nationality != \"USA\"  ",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008 and that do not have the nationality ' USA ' .",
        "result": "conductor.Name \nFROM \nconductor \nINNER JOIN \norchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE \norchestra.Year_of_Founded > 2008 AND conductor.Nationality != 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the name of the conductor that has conducted orchestras founded after 2008 and that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008 or conductor.nationality != \"USA\"  ",
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008 or that do not have the nationality ' USA ' .",
        "result": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nWHERE (orchestra.Year_of_Founded > 2008 OR conductor.Nationality != 'USA')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the name of the conductor that has conducted orchestras founded after 2008 or that do not have the nationality ' USA ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003   order by orchestra.year_of_founded desc",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003 , in descending order of years ?",
        "result": "Record_Company\nFROM orchestra\nWHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003\nORDER BY Year_of_Founded DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the record companies shared by orchestras founded before 2003 and after 2003 , in descending order of years ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003   order by orchestra.year_of_founded desc",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 , in descending order of years ?",
        "result": "Record_Company \nFROM orchestra \nWHERE Orchestra_ID IN (\n  SELECT Orchestra_ID \n  FROM orchestra \n  WHERE Year_of_Founded < 2003\n  INTERSECT\n  SELECT Orchestra_ID \n  FROM orchestra \n  WHERE Year_of_Founded > 2003\n) \nORDER BY Year_of_Founded DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 , in descending order of years ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003   order by orchestra.year_of_founded desc",
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003 , sorted descending by the years in which they were founded .",
        "result": "Record_Company\nFROM orchestra\nWHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003\nORDER BY Year_of_Founded DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the record companies shared by orchestras founded before 2003 and after 2003 , sorted descending by the years in which they were founded . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003   order by orchestra.year_of_founded desc",
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 , sorted descending by the years in which they were founded .",
        "result": "\n\nRecord_Company\nFROM orchestra\nWHERE Year_of_Founded < 2003 AND Record_Company IN (\nSELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003\n)\nORDER BY Year_of_Founded DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003 , sorted descending by the years in which they were founded . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by performance.orchestra_id having  count(*) > 1  except select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where  performance.type = \"Live final\"  ",
        "question": "Show the years in which orchestras that have given more than one performance are founded and that do not have the type ' Live final ' .",
        "result": "Orchestra.Year_of_Founded\nFROM orchestra\nINNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE performance.Type != 'Live final'\nGROUP BY orchestra.Orchestra_ID\nHAVING COUNT(DISTINCT performance.Performance_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the years in which orchestras that have given more than one performance are founded and that do not have the type ' Live final ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by performance.orchestra_id having  count(*) > 1  union select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where  performance.type != \"Live final\"  ",
        "question": "Show the years in which orchestras that have given more than one performance are founded or that do not have the type ' Live final ' .",
        "result": "Orchestra.Year_of_Founded\nFROM orchestra\nJOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE orchestra.Year_of_Founded IS NOT NULL\nAND (\n    orchestra.Orchestra_ID IN (\n        SELECT Orchestra_ID \n        FROM performance \n        GROUP BY Orchestra_ID \n        HAVING COUNT(DISTINCT Date) > 1\n    ) \n    OR performance.Type != 'Live final'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the years in which orchestras that have given more than one performance are founded or that do not have the type ' Live final ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by performance.orchestra_id having  count(*) > 1  except select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where  performance.type = \"Live final\"  ",
        "question": "What are years of founding for orchestras that have had more than a single performance and that do not have the type ' Live final ' .",
        "result": "Orchestra.Year_of_Founded\nFROM Orchestra\nINNER JOIN Performance ON Orchestra.Orchestra_ID = Performance.Orchestra_ID\nWHERE Orchestra.Orchestra_ID IN (\n    SELECT Orchestra_ID\n    FROM Performance\n    GROUP BY Orchestra_ID\n    HAVING COUNT(*) > 1\n)\nAND Performance.Type <> 'Live final'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are years of founding for orchestras that have had more than a single performance and that do not have the type ' Live final ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by performance.orchestra_id having  count(*) > 1  union select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where  performance.type != \"Live final\"  ",
        "question": "What are years of founding for orchestras that have had more than a single performance or that do not have the type ' Live final ' .",
        "result": "Orchestra.Year_of_Founded\nFROM orchestra\nINNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE orchestra.Year_of_Founded AND orchestra.Orchestra_ID IN \n(SELECT Orchestra_ID FROM performance \n GROUP BY Orchestra_ID \n HAVING COUNT(DISTINCT Performance_ID) > 1 \n OR Type != 'Live final')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are years of founding for orchestras that have had more than a single performance or that do not have the type ' Live final ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.year_of_work desc",
        "question": "What are the names of conductors whose nationalities are not ' USA ' , in descending order of years of work .",
        "result": "Name \nFROM conductor \nWHERE Nationality <> 'USA' \nORDER BY Year_of_Work DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors whose nationalities are not ' USA ' , in descending order of years of work . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.year_of_work desc",
        "question": "Return the names of conductors that do not have the nationality ' USA ' , in descending order of years of work .",
        "result": "Name FROM conductor \nWHERE Nationality != 'USA'\nORDER BY Year_of_Work DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of conductors that do not have the nationality ' USA ' , in descending order of years of work . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.year_of_work desc",
        "question": "What are the names of conductors whose nationalities are not ' USA ' , sorted descending by the number of years they have worked ?",
        "result": "Name FROM conductor\nWHERE Nationality <> 'USA'\nORDER BY Year_of_Work DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors whose nationalities are not ' USA ' , sorted descending by the number of years they have worked ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor where  conductor.nationality != \"USA\"   order by conductor.year_of_work desc",
        "question": "Return the names of conductors that do not have the nationality ' USA ' , sorted descending by the number of years they have worked ?",
        "result": "Name FROM conductor \nWHERE Nationality != 'USA' \nORDER BY Year_of_Work DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of conductors that do not have the nationality ' USA ' , sorted descending by the number of years they have worked ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008   order by conductor.year_of_work desc limit 1 ",
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008 and who has worked the greatest number of years ?",
        "result": "conductor.Name \nFROM \nconductor \nJOIN \norchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE \norchestra.Year_of_Founded > 2008 \nORDER BY \nconductor.Year_of_Work DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors who have conducted orchestras founded after the year 2008 and who has worked the greatest number of years ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count(*) from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008  ",
        "question": "Count the number of conductors , that has conducted orchestras founded after 2008 .",
        "result": "COUNT(Conductor_ID) FROM conductor \nINNER JOIN orchestra \nON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of conductors , that has conducted orchestras founded after 2008 . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  conductor.nationality != \"USA\" and orchestra.year_of_founded > 2008  ",
        "question": "Return the names of conductors that do not have the nationality ' USA ' and that has conducted orchestras founded after 2008 .",
        "result": "conductor.Name \nFROM \nconductor \nINNER JOIN orchestra \nON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE \nconductor.Nationality != 'USA' \nAND \norchestra.Year_of_Founded > 2008;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of conductors that do not have the nationality ' USA ' and that has conducted orchestras founded after 2008 . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count( distinct conductor.nationality) from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008  ",
        "question": "Count the number of different nationalities of conductors , that has conducted orchestras founded after 2008 .",
        "result": "COUNT(DISTINCT conductor.Nationality)\nFROM conductor\nINNER JOIN orchestra\nON conductor.Conductor_ID = orchestra.Conductor_ID\nWHERE orchestra.Year_of_Founded > 2008;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of different nationalities of conductors , that has conducted orchestras founded after 2008 . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008  group by orchestra.conductor_id having  count(*) > 1 ",
        "question": "Show the names of conductors that have conducted more than one orchestras and that has conducted orchestras founded after 2008 .",
        "result": "conductor.Name\nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008 \nGROUP BY conductor.Conductor_ID \nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of conductors that have conducted more than one orchestras and that has conducted orchestras founded after 2008 . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count(*) from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008  ",
        "question": "Count the number of conductors , who have conducted orchestras founded after the year 2008 ?",
        "result": "COUNT(*) FROM conductor \nWHERE Conductor_ID IN (\n    SELECT Conductor_ID FROM orchestra \n    WHERE Year_of_Founded > 2008\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of conductors , who have conducted orchestras founded after the year 2008 ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select count( distinct conductor.nationality) from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008  ",
        "question": "Count the number of different nationalities of conductors , who have conducted orchestras founded after the year 2008 ?",
        "result": "COUNT(DISTINCT conductor.Nationality) \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of different nationalities of conductors , who have conducted orchestras founded after the year 2008 ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008  group by orchestra.conductor_id having  count(*) > 1 ",
        "question": "What are the names of conductors who have conducted at more than one orchestra and who have conducted orchestras founded after the year 2008 ?",
        "result": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nWHERE orchestra.Year_of_Founded > 2008\nGROUP BY conductor.Conductor_ID\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of conductors who have conducted at more than one orchestra and who have conducted orchestras founded after the year 2008 ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company , count(*) from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )  group by orchestra.record_company ",
        "question": "Please show the different record companies and the corresponding number of orchestras , that have no performance .",
        "result": "record_company, COUNT(DISTINCT orchestra_id) \n FROM orchestra \n WHERE orchestra_id NOT IN \n       (SELECT orchestra_id FROM performance) \n GROUP BY record_company;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras , that have no performance . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company , count(*) from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )  group by orchestra.record_company ",
        "question": "Please show the different record companies and the corresponding number of orchestras , that do not have any performances ?",
        "result": "record_company, COUNT(DISTINCT orchestra_id) \nFROM orchestra \nWHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance) \nGROUP BY record_company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras , that do not have any performances ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company , count(*) from orchestra where  orchestra.year_of_founded < 2003  group by orchestra.record_company ",
        "question": "Please show the different record companies and the corresponding number of orchestras that founded before 2003 and ?",
        "result": "\n\nRecord_Company, COUNT(Orchestra_ID) \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nGROUP BY Record_Company\nHAVING COUNT(Orchestra_ID) > 0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras that founded before 2003 and ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003  group by orchestra.record_company  order by count(*) desc limit 1 ",
        "question": "List the record company shared by the most number of orchestras and founded before 2003 and ?",
        "result": "Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nGROUP BY Record_Company \nHAVING COUNT(DISTINCT Orchestra_ID) = (SELECT COUNT(DISTINCT Orchestra_ID) \n                                       FROM orchestra \n                                       WHERE Year_of_Founded < 2003 \n                                       GROUP BY Record_Company \n                                       ORDER BY COUNT(DISTINCT Orchestra_ID) DESC \n                                       LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the record company shared by the most number of orchestras and founded before 2003 and ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003  group by orchestra.record_company  order by count(*) desc limit 1 ",
        "question": "What is the record company used by the greatest number of orchestras and founded before 2003 and ?",
        "result": "Record_Company\nFROM orchestra\nWHERE Year_of_Founded < 2003\nGROUP BY Record_Company\nORDER BY COUNT(DISTINCT Orchestra_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the record company used by the greatest number of orchestras and founded before 2003 and ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company , count(*) from orchestra where  orchestra.year_of_founded < 2003  group by orchestra.record_company ",
        "question": "Please show the different record companies and the corresponding number of orchestras that founded before 2003 and ?",
        "result": "Record_Company, COUNT(DISTINCT Orchestra_ID) \n FROM orchestra \n WHERE Year_of_Founded < 2003 AND Record_Company = ? \n GROUP BY Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras that founded before 2003 and ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003  group by orchestra.record_company  order by count(*) desc limit 1 ",
        "question": "List the record company shared by the most number of orchestras and founded before 2003 and ?",
        "result": "Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nGROUP BY Record_Company \nHAVING COUNT(DISTINCT Orchestra_ID) = (\n    SELECT MAX(num_orchestras) \n    FROM (\n        SELECT COUNT(DISTINCT Orchestra_ID) AS num_orchestras \n        FROM orchestra \n        WHERE Year_of_Founded < 2003 \n        GROUP BY Record_Company\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the record company shared by the most number of orchestras and founded before 2003 and ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003  group by orchestra.record_company  order by count(*) desc limit 1 ",
        "question": "What is the record company used by the greatest number of orchestras and founded before 2003 and ?",
        "result": "Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nGROUP BY Record_Company \nORDER BY COUNT(Orchestra_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the record company used by the greatest number of orchestras and founded before 2003 and ? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company , count(*) from orchestra where  orchestra.major_record_format = \"CD\" or orchestra.major_record_format = \"DVD\"  group by orchestra.record_company ",
        "question": "Please show the different record companies and the corresponding number of orchestras , whose record format is ' CD ' or ' DVD ' .",
        "result": "Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras\n FROM orchestra\n WHERE Major_Record_Format IN ('CD', 'DVD')\n GROUP BY Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras , whose record format is ' CD ' or ' DVD ' . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.record_company , count(*) from orchestra where  orchestra.major_record_format = \"CD\" or orchestra.major_record_format = \"DVD\"  group by orchestra.record_company ",
        "question": "Please show the different record companies and the corresponding number of orchestras , that have CD or DVD as their record format .",
        "result": "Record_Company, COUNT(Orchestra_ID) \n FROM orchestra \n WHERE Major_Record_Format IN ('CD','DVD') \n GROUP BY Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record companies and the corresponding number of orchestras , that have CD or DVD as their record format . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where  orchestra.major_record_format = \"CD\"  group by performance.orchestra_id having  count(*) > 1  union select orchestra.year_of_founded from orchestra where  orchestra.major_record_format = \"DVD\"  ",
        "question": "Show the years in which orchestras that have given more than one performance are founded and that have CD or DVD as their record format .",
        "result": "Orchestra.Year_of_Founded\nFROM orchestra\nINNER JOIN (\n  SELECT Orchestra_ID\n  FROM performance\n  GROUP BY Orchestra_ID\n  HAVING COUNT(*) > 1\n) AS multi_performances ON orchestra.Orchestra_ID = multi_performances.Orchestra_ID\nWHERE orchestra.Major_Record_Format IN ('CD', 'DVD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the years in which orchestras that have given more than one performance are founded and that have CD or DVD as their record format . \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where  orchestra.major_record_format = \"CD\"  group by performance.orchestra_id having  count(*) > 1  union select orchestra.year_of_founded from orchestra where  orchestra.major_record_format = \"DVD\"  ",
        "question": "What are years of founding for orchestras that have had more than a single performance and that have CD or DVD as their record format .",
        "result": "orchestra.Year_of_Founded\nFROM orchestra\nJOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nWHERE orchestra.Record_Company LIKE '%CD%' OR orchestra.Record_Company LIKE '%DVD%'\nGROUP BY orchestra.Orchestra_ID\nHAVING COUNT(DISTINCT performance.Performance_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are years of founding for orchestras that have had more than a single performance and that have CD or DVD as their record format . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Count the number of high schoolers that named Kyle .",
        "result": "COUNT(*) FROM Highschooler WHERE name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Show the names and grades of each high schooler that named Kyle .",
        "result": "name, grade \nFROM Highschooler \nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "What are the names and grades for each high schooler that named Kyle .",
        "result": "name, grade\nFROM Highschooler\nWHERE name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Show all the grades of the high schoolers that named Kyle .",
        "result": "grade\nFROM Highschooler\nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "What is the grade of each high schooler that named Kyle .",
        "result": "grade \nFROM Highschooler \nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 and highschooler.name = \"Kyle\"  ",
        "question": "Show the names of all high schoolers in grade 10 and named Kyle .",
        "result": "name \nFROM Highschooler \nWHERE grade = 10 AND name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all high schoolers in grade 10 and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 or highschooler.name = \"Kyle\"  ",
        "question": "Show the names of all high schoolers in grade 10 or named Kyle .",
        "result": "name \nFROM Highschooler \nWHERE grade = 10 OR name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all high schoolers in grade 10 or named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 and highschooler.name = \"Kyle\"  ",
        "question": "What are the names of all high schoolers in grade 10 and named Kyle .",
        "result": "name \nFROM Highschooler \nWHERE grade = 10 AND name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all high schoolers in grade 10 and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 or highschooler.name = \"Kyle\"  ",
        "question": "What are the names of all high schoolers in grade 10 or named Kyle .",
        "result": "name FROM Highschooler WHERE grade = 10 OR name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all high schoolers in grade 10 or named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  group by highschooler.grade  order by count(*) desc limit 1 ",
        "question": "Which grade has the most high schoolers and named Kyle .",
        "result": "grade FROM Highschooler WHERE name='Kyle' GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grade has the most high schoolers and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  group by highschooler.grade having  count(*) >= 4 ",
        "question": "Which grades have 4 or more high schoolers and named Kyle .",
        "result": "Highschooler.grade \nFROM Highschooler \nWHERE Highschooler.name = 'Kyle' \nGROUP BY Highschooler.grade \nHAVING COUNT(Highschooler.ID) >= 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more high schoolers and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4  union select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Which grades have 4 or more high schoolers or named Kyle .",
        "result": "grade \nFROM Highschooler \nWHERE grade IN (SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4) OR name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more high schoolers or named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.grade = 10  ",
        "question": "Count the number of high schoolers , in grade 10 .",
        "result": "COUNT(*) FROM Highschooler WHERE grade=10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers , in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Show the names and grades of each high schooler , in grade 10 .",
        "result": "name, grade \nFROM Highschooler \nWHERE grade = 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler , in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "What are the names and grades for each high schooler , in grade 10 .",
        "result": "name, grade \nFROM Highschooler \nWHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler , in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Show all the grades of the high schoolers , in grade 10 .",
        "result": "grade \nFROM Highschooler \nWHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers , in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "What is the grade of each high schooler , in grade 10 .",
        "result": "grade\nFROM Highschooler\nWHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler , in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 10  ",
        "question": "Return the grade for the high schooler named Kyle and in grade 10 .",
        "result": "grade \nFROM Highschooler \nWHERE name = 'Kyle' AND grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle and in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\" or highschooler.grade = 10  ",
        "question": "Return the grade for the high schooler named Kyle or in grade 10 .",
        "result": "grade FROM Highschooler \nWHERE name = 'Kyle' OR grade = 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle or in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.id from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 10  ",
        "question": "Show the ID of the high schooler named Kyle and in grade 10 .",
        "result": "ID \nFROM Highschooler \nWHERE name = 'Kyle' AND grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle and in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.id from highschooler where  highschooler.name = \"Kyle\" or highschooler.grade = 10  ",
        "question": "Show the ID of the high schooler named Kyle or in grade 10 .",
        "result": "ID FROM Highschooler WHERE name='Kyle' OR grade=10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle or in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade = 10  group by friend.student_id  order by count(*) desc limit 1 ",
        "question": "Return the name of the high school student with the most friends and in grade 10 .",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.grade = 10 AND Highschooler.ID IN (\n  SELECT Friend.student_id\n  FROM Friend\n  GROUP BY Friend.student_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the name of the high school student with the most friends and in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade = 10  group by likes.student_id  order by count(*) desc limit 1 ",
        "question": "Give the name of the student with the most likes and in grade 10 .",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE Highschooler.grade = 10 \nGROUP BY Highschooler.ID \nORDER BY COUNT(Likes.liked_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Give the name of the student with the most likes and in grade 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.grade = 10  ",
        "question": "Count the number of high schoolers , in grade 10 ?",
        "result": "COUNT(*) FROM Highschooler WHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers , in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Show the names and grades of each high schooler , in grade 10 ?",
        "result": "name, grade \nFROM Highschooler \nWHERE grade = 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler , in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "What are the names and grades for each high schooler , in grade 10 ?",
        "result": "name, grade\nFROM Highschooler\nWHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler , in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Show all the grades of the high schoolers , in grade 10 ?",
        "result": "grade \nFROM Highschooler \nWHERE grade = 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers , in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "What is the grade of each high schooler , in grade 10 ?",
        "result": "grade FROM Highschooler WHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler , in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 10  ",
        "question": "Return the grade for the high schooler named Kyle and in grade 10 ?",
        "result": "grade \nFROM \nHighschooler \nWHERE \nname = 'Kyle' \nAND \ngrade = 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle and in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\" or highschooler.grade = 10  ",
        "question": "Return the grade for the high schooler named Kyle or in grade 10 ?",
        "result": "grade FROM Highschooler \nWHERE name = 'Kyle' OR grade = 10",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle or in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.id from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 10  ",
        "question": "Show the ID of the high schooler named Kyle and in grade 10 ?",
        "result": "ID FROM Highschooler WHERE name = 'Kyle' AND grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle and in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.id from highschooler where  highschooler.name = \"Kyle\" or highschooler.grade = 10  ",
        "question": "Show the ID of the high schooler named Kyle or in grade 10 ?",
        "result": "ID \nFROM Highschooler \nWHERE name='Kyle' OR grade=10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle or in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade = 10  group by friend.student_id  order by count(*) desc limit 1 ",
        "question": "Return the name of the high school student with the most friends and in grade 10 ?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nWHERE Highschooler.grade = 10\nGROUP BY Highschooler.ID\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the name of the high school student with the most friends and in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade = 10  group by likes.student_id  order by count(*) desc limit 1 ",
        "question": "Give the name of the student with the most likes and in grade 10 ?",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE Highschooler.grade = 10 \nGROUP BY Highschooler.ID \nORDER BY COUNT(Likes.liked_id) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Give the name of the student with the most likes and in grade 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Count the number of high schoolers that named Kyle .",
        "result": "COUNT(*) FROM Highschooler WHERE name='Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Show the names and grades of each high schooler that named Kyle .",
        "result": "name, grade\nFROM Highschooler\nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "What are the names and grades for each high schooler that named Kyle .",
        "result": "name, grade \nFROM Highschooler \nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Show all the grades of the high schoolers that named Kyle .",
        "result": "grade FROM Highschooler WHERE name='Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "What is the grade of each high schooler that named Kyle .",
        "result": "grade FROM Highschooler WHERE name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler that named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 and highschooler.name = \"Kyle\"  ",
        "question": "Show the names of all high schoolers in grade 10 and named Kyle .",
        "result": "name FROM Highschooler \nWHERE grade = 10 AND name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all high schoolers in grade 10 and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 or highschooler.name = \"Kyle\"  ",
        "question": "Show the names of all high schoolers in grade 10 or named Kyle .",
        "result": "name \nFROM Highschooler \nWHERE grade = 10 OR name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all high schoolers in grade 10 or named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 and highschooler.name = \"Kyle\"  ",
        "question": "What are the names of all high schoolers in grade 10 and named Kyle .",
        "result": "name \nFROM Highschooler \nWHERE grade = 10 AND name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all high schoolers in grade 10 and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler where  highschooler.grade = 10 or highschooler.name = \"Kyle\"  ",
        "question": "What are the names of all high schoolers in grade 10 or named Kyle .",
        "result": "name FROM Highschooler\nWHERE grade = 10 OR name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all high schoolers in grade 10 or named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  group by highschooler.grade  order by count(*) desc limit 1 ",
        "question": "Which grade has the most high schoolers and named Kyle .",
        "result": "Highschooler.grade \nFROM Highschooler \nWHERE Highschooler.name = 'Kyle' \nGROUP BY Highschooler.grade \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grade has the most high schoolers and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  group by highschooler.grade having  count(*) >= 4 ",
        "question": "Which grades have 4 or more high schoolers and named Kyle .",
        "result": "grade \nFROM Highschooler \nWHERE name = 'Kyle' \nGROUP BY grade \nHAVING COUNT(*) >= 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more high schoolers and named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4  union select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  ",
        "question": "Which grades have 4 or more high schoolers or named Kyle .",
        "result": "grade \nFROM Highschooler \nWHERE grade IN (\n    SELECT grade \n    FROM Highschooler \n    WHERE name = 'Kyle' \n    GROUP BY grade \n    HAVING COUNT(*) >= 4\n) \nGROUP BY grade",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more high schoolers or named Kyle . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "Count the number of high schoolers that are there in grade 9 or 10 ?",
        "result": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers that are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "Show the names and grades of each high schooler that are there in grade 9 or 10 ?",
        "result": "name, grade\nFROM Highschooler\nWHERE grade IN (9, 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler that are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "What are the names and grades for each high schooler that are there in grade 9 or 10 ?",
        "result": "name, grade \nFROM Highschooler \nWHERE grade IN (9, 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler that are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "Show all the grades of the high schoolers that are there in grade 9 or 10 ?",
        "result": "grade\nFROM Highschooler\nWHERE grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers that are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "What is the grade of each high schooler that are there in grade 9 or 10 ?",
        "result": "grade FROM Highschooler WHERE grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler that are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 9   union select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Return the grade for the high schooler named Kyle and are there in grade 9 or 10 ?",
        "result": "grade FROM Highschooler \nWHERE name = 'Kyle' AND grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle and are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.id from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 9   union select highschooler.id from highschooler where  highschooler.grade = 10  ",
        "question": "Show the ID of the high schooler named Kyle and are there in grade 9 or 10 ?",
        "result": "ID \nFROM Highschooler \nWHERE name = 'Kyle' AND grade IN (9, 10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle and are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 9  group by highschooler.grade having  count(*) >= 4  union select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Which grades have 4 or more high schoolers and are there in grade 9 or 10 ?",
        "result": "grade\nFROM Highschooler\nWHERE grade IN (9,10)\nGROUP BY grade\nHAVING COUNT(*) >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more high schoolers and are there in grade 9 or 10 ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "Count the number of high schoolers , in grades 9 or 10 .",
        "result": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers , in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "Show the names and grades of each high schooler , in grades 9 or 10 .",
        "result": "name, grade\nFROM Highschooler\nWHERE grade IN (9, 10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler , in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "What are the names and grades for each high schooler , in grades 9 or 10 .",
        "result": "name, grade \nFROM Highschooler \nWHERE grade IN (9,10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler , in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "Show all the grades of the high schoolers , in grades 9 or 10 .",
        "result": "grade\nFROM Highschooler\nWHERE grade IN (9, 10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers , in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade = 9 or highschooler.grade = 10  ",
        "question": "What is the grade of each high schooler , in grades 9 or 10 .",
        "result": "ID, grade FROM Highschooler WHERE grade IN (9, 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler , in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 9   union select highschooler.grade from highschooler where  highschooler.grade = 10  ",
        "question": "Return the grade for the high schooler named Kyle and in grades 9 or 10 .",
        "result": "grade \nFROM Highschooler \nWHERE name = 'Kyle' AND grade IN (9, 10)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle and in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.id from highschooler where  highschooler.name = \"Kyle\" and highschooler.grade = 9   union select highschooler.id from highschooler where  highschooler.grade = 10  ",
        "question": "Show the ID of the high schooler named Kyle and in grades 9 or 10 .",
        "result": "ID FROM Highschooler \nWHERE name = 'Kyle' AND grade IN (9, 10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the high schooler named Kyle and in grades 9 or 10 . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) , highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4 ",
        "question": "Show the number of high schoolers for each grade , that have at least 4 students .",
        "result": "grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the number of high schoolers for each grade , that have at least 4 students . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) , highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4 ",
        "question": "How many high schoolers are in each grade , that have at least 4 students .",
        "result": "grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are in each grade , that have at least 4 students . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"  group by highschooler.grade having  count(*) >= 4 ",
        "question": "Return the grade for the high schooler named Kyle and have 4 or more high schoolers ?",
        "result": "grade FROM Highschooler WHERE name='Kyle' AND ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 4)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle and have 4 or more high schoolers ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.name = \"Kyle\"   union select highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4 ",
        "question": "Return the grade for the high schooler named Kyle or have 4 or more high schoolers ?",
        "result": "grade\nFROM Highschooler\nWHERE name = 'Kyle' OR ID IN (\n    SELECT ID\n    FROM Highschooler\n    GROUP BY ID\n    HAVING COUNT(*) >= 4\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the high schooler named Kyle or have 4 or more high schoolers ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) , highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4 ",
        "question": "Show the number of high schoolers for each grade that have 4 or more high schoolers ?",
        "result": "grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the number of high schoolers for each grade that have 4 or more high schoolers ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) , highschooler.grade from highschooler  group by highschooler.grade having  count(*) >= 4 ",
        "question": "How many high schoolers are in each grade that have 4 or more high schoolers ?",
        "result": "grade, COUNT(*) \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many high schoolers are in each grade that have 4 or more high schoolers ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "Show the names of students who have at least 2 likes and who do not have any friends .",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Friend.student_id IS NULL \nGROUP BY Highschooler.ID \nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes and who do not have any friends . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "Show the names of students who have at least 2 likes or who do not have any friends .",
        "result": "Highschooler.name \nFROM Highschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nLEFT JOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(DISTINCT Likes.liked_id) >= 2 OR COUNT(DISTINCT Friend.friend_id) = 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes or who do not have any friends . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "What are the names of students who have 2 or more likes and who do not have any friends .",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nWHERE Highschooler.ID NOT IN (SELECT student_id FROM Friend)\nGROUP BY Highschooler.ID\nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes and who do not have any friends . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "What are the names of students who have 2 or more likes or who do not have any friends .",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (\n  SELECT Friend.student_id FROM Friend\n  UNION\n  SELECT Friend.friend_id FROM Friend\n) OR Highschooler.ID IN (\n  SELECT Likes.student_id\n  FROM Likes\n  GROUP BY Likes.student_id\n  HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes or who do not have any friends . \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "Show the names of students who have at least 2 likes and who do not have friends ?",
        "result": "Highschooler.name\nFROM Highschooler\nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nLEFT JOIN Likes ON Highschooler.ID = Likes.student_id\nWHERE Likes.liked_id IS NOT NULL\nGROUP BY Highschooler.ID\nHAVING COUNT(DISTINCT Likes.liked_id) >= 2 AND COUNT(DISTINCT Friend.friend_id) = 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes and who do not have friends ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "Show the names of students who have at least 2 likes or who do not have friends ?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID IN (SELECT Likes.student_id FROM Likes GROUP BY Likes.student_id HAVING COUNT(*) >= 2)\nOR Highschooler.ID NOT IN (SELECT DISTINCT friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes or who do not have friends ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "What are the names of students who have 2 or more likes and who do not have friends ?",
        "result": "Highschooler.name \nFROM \nHighschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nLEFT JOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE \nFriend.student_id IS NULL \nGROUP BY Highschooler.ID \nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes and who do not have friends ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  except select highschooler.name from friend join highschooler on Friend.friend_id = Highschooler.ID  ",
        "question": "What are the names of students who have 2 or more likes or who do not have friends ?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID NOT IN (\n    SELECT Friend.student_id \n    FROM Friend \n) OR Highschooler.ID IN (\n    SELECT Likes.student_id \n    FROM Likes \n    GROUP BY Likes.student_id \n    HAVING COUNT(*) >= 2 \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes or who do not have friends ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade > 5  group by friend.student_id  order by count(*) desc limit 1 ",
        "question": "What is the name of the high schooler who has the greatest number of friends and who have a grade higher than 5 and ?",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Friend ON Highschooler.ID = Friend.student_id\nWHERE Highschooler.grade > 5\nGROUP BY Highschooler.ID\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the high schooler who has the greatest number of friends and who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 3 ",
        "question": "Show the names of high schoolers who have at least 3 friends and who have a grade higher than 5 and ?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nWHERE Highschooler.grade > 5 AND\n      (SELECT COUNT(*) FROM Friend WHERE student_id = Highschooler.ID) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high schoolers who have at least 3 friends and who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id  group by friend.student_id having  count(*) >= 3  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "Show the names of high schoolers who have at least 3 friends or who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM \nHighschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE \nHighschooler.grade > 5 OR \n(Friend.student_id, COUNT(Friend.friend_id)) IN \n(SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high schoolers who have at least 3 friends or who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 3 ",
        "question": "What are the names of high schoolers who have 3 or more friends and who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Highschooler.grade > 5 \nGROUP BY Highschooler.ID \nHAVING COUNT(Friend.friend_id) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have 3 or more friends and who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id  group by friend.student_id having  count(*) >= 3  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "What are the names of high schoolers who have 3 or more friends or who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID IN (SELECT Friend.student_id \n                          FROM Friend \n                          GROUP BY Friend.student_id \n                          HAVING COUNT(*) >= 3)\nOR Highschooler.grade > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have 3 or more friends or who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join likes on Highschooler.ID = Likes.liked_id where  highschooler.grade > 5  group by likes.student_id  order by count(*) desc limit 1 ",
        "question": "What is the name of the high schooler who has the greatest number of likes and who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE Highschooler.grade > 5 \nGROUP BY Highschooler.ID \nORDER BY COUNT(Likes.liked_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the high schooler who has the greatest number of likes and who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by likes.student_id having  count(*) >= 2 ",
        "question": "Show the names of students who have at least 2 likes and who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE Highschooler.grade > 5 \nGROUP BY Highschooler.ID \nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes and who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "Show the names of students who have at least 2 likes or who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID IN (SELECT Likes.student_id FROM Likes GROUP BY Likes.student_id HAVING COUNT(*) >= 2) \nOR Highschooler.grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes or who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by likes.student_id having  count(*) >= 2 ",
        "question": "What are the names of students who have 2 or more likes and who have a grade higher than 5 and ?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nWHERE Highschooler.grade > 5\nGROUP BY Highschooler.ID\nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes and who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "What are the names of students who have 2 or more likes or who have a grade higher than 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nLEFT JOIN Likes ON Highschooler.ID = Likes.student_id \nWHERE Highschooler.grade > 5 OR (SELECT COUNT(*) FROM Likes WHERE student_id = Highschooler.ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes or who have a grade higher than 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select count(*) from highschooler where  highschooler.grade > 5  ",
        "question": "Count the number of high schoolers , who have a grade of over 5 and ?",
        "result": "COUNT(*) \nFROM Highschooler \nWHERE grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of high schoolers , who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade > 5  ",
        "question": "Show the names and grades of each high schooler , who have a grade of over 5 and ?",
        "result": "Highschooler.name, Highschooler.grade\nFROM Highschooler\nWHERE Highschooler.grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each high schooler , who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , highschooler.grade from highschooler where  highschooler.grade > 5  ",
        "question": "What are the names and grades for each high schooler , who have a grade of over 5 and ?",
        "result": "name, grade FROM Highschooler WHERE grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each high schooler , who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade > 5  ",
        "question": "Show all the grades of the high schoolers , who have a grade of over 5 and ?",
        "result": "grade FROM Highschooler WHERE grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the high schoolers , who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.grade from highschooler where  highschooler.grade > 5  ",
        "question": "What is the grade of each high schooler , who have a grade of over 5 and ?",
        "result": "ID, grade \nFROM Highschooler \nWHERE grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each high schooler , who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade > 5  group by friend.student_id  order by count(*) desc limit 1 ",
        "question": "What is the name of the high schooler who has the greatest number of friends and who have a grade of over 5 and ?",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.grade > 5 AND Highschooler.ID IN\n(SELECT Friend.student_id\nFROM Friend\nGROUP BY Friend.student_id\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the high schooler who has the greatest number of friends and who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 3 ",
        "question": "Show the names of high schoolers who have at least 3 friends and who have a grade of over 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Highschooler.grade > 5 \nGROUP BY Highschooler.ID \nHAVING COUNT(Friend.friend_id) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high schoolers who have at least 3 friends and who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id  group by friend.student_id having  count(*) >= 3  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "Show the names of high schoolers who have at least 3 friends or who have a grade of over 5 and ?",
        "result": "name \nFROM Highschooler\nWHERE ID IN \n    (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3)\n    OR grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of high schoolers who have at least 3 friends or who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 3 ",
        "question": "What are the names of high schoolers who have 3 or more friends and who have a grade of over 5 and ?",
        "result": "Highschooler.name FROM Highschooler \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Highschooler.grade > 5 \nGROUP BY Highschooler.ID \nHAVING COUNT(Friend.friend_id) >= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have 3 or more friends and who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join friend on Highschooler.ID = Friend.student_id  group by friend.student_id having  count(*) >= 3  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "What are the names of high schoolers who have 3 or more friends or who have a grade of over 5 and ?",
        "result": "Highschooler.name \nFROM \nHighschooler \nLEFT JOIN \n(SELECT student_id, COUNT(friend_id) AS friend_count \nFROM Friend \nGROUP BY student_id \nHAVING friend_count >= 3) AS friend_counts \nON Highschooler.ID = friend_counts.student_id \nWHERE \nfriend_counts.student_id IS NOT NULL \nOR \nHighschooler.grade > 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of high schoolers who have 3 or more friends or who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from highschooler join likes on Highschooler.ID = Likes.liked_id where  highschooler.grade > 5  group by likes.student_id  order by count(*) desc limit 1 ",
        "question": "What is the name of the high schooler who has the greatest number of likes and who have a grade of over 5 and ?",
        "result": "Highschooler.name\nFROM \nHighschooler\nINNER JOIN Likes ON Highschooler.ID = Likes.student_id\nWHERE \nHighschooler.grade > 5\nGROUP BY \nHighschooler.ID\nORDER BY \nCOUNT(Likes.liked_id) DESC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the high schooler who has the greatest number of likes and who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by likes.student_id having  count(*) >= 2 ",
        "question": "Show the names of students who have at least 2 likes and who have a grade of over 5 and ?",
        "result": "Highschooler.name \nFROM \nHighschooler \nJOIN \nLikes ON Highschooler.ID = Likes.student_id \nWHERE \nHighschooler.grade > 5 \nGROUP BY \nHighschooler.ID \nHAVING \nCOUNT(DISTINCT Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes and who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "Show the names of students who have at least 2 likes or who have a grade of over 5 and ?",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID IN (\n    SELECT student_id\n    FROM Likes\n    GROUP BY student_id\n    HAVING COUNT(*) >= 2\n) OR Highschooler.grade > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes or who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID where  highschooler.grade > 5  group by likes.student_id having  count(*) >= 2 ",
        "question": "What are the names of students who have 2 or more likes and who have a grade of over 5 and ?",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Likes ON Highschooler.ID = Likes.student_id\nWHERE Highschooler.grade > 5\nGROUP BY Highschooler.ID\nHAVING COUNT(Likes.liked_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes and who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2  union select highschooler.name from highschooler where  highschooler.grade > 5  ",
        "question": "What are the names of students who have 2 or more likes or who have a grade of over 5 and ?",
        "result": "Highschooler.name \nFROM Highschooler \nWHERE Highschooler.ID IN \n   (SELECT student_id \n    FROM Likes \n    GROUP BY student_id \n    HAVING COUNT(*) >= 2) \nOR Highschooler.grade > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more likes or who have a grade of over 5 and ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.city like \"%West%\"  group by treatments.professional_id having  count(*) > 2 ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and have done treatment on more than 2 treatments ?",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Professionals.city LIKE '%West%' \nGROUP BY Professionals.professional_id \nHAVING COUNT(Treatments.treatment_id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and have done treatment on more than 2 treatments ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\"   union select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2 ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or have done treatment on more than 2 treatments ?",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state\nFROM Professionals\nWHERE Professionals.city LIKE '%West%' OR \n(SELECT COUNT(*) FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id) > 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or have done treatment on more than 2 treatments ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.state = \"Indiana\"  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments and who live in the state of Indiana or ?",
        "result": "professional_id, role_code, first_name \nFROM Professionals \nWHERE state = 'Indiana' \nGROUP BY professional_id \nHAVING COUNT(DISTINCT treatment_id) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments and who live in the state of Indiana or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where  professionals.state = \"Indiana\"  ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments or who live in the state of Indiana or ?",
        "result": "professional_id, role_code, first_name \nFROM Professionals \nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT dog_id) >= 2\n) OR state = 'Indiana'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments or who live in the state of Indiana or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.state = \"Indiana\"  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments and who live in the state of Indiana or ?",
        "result": "professional_id, cell_number \nFROM Professionals \nWHERE state = 'Indiana' OR state = '?' \nAND professional_id IN (SELECT professional_id \n                        FROM Treatments \n                        GROUP BY professional_id \n                        HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments and who live in the state of Indiana or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.cell_number from professionals where  professionals.state = \"Indiana\"  ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments or who live in the state of Indiana or ?",
        "result": "professional_id, cell_number \n FROM Professionals \n WHERE professional_id IN \n (SELECT professional_id \n FROM Treatments \n GROUP BY professional_id \n HAVING COUNT(DISTINCT treatment_type_code) >= 2) \n OR state = 'Indiana' \n OR state = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments or who live in the state of Indiana or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Indiana\"  ",
        "question": "List the email , cell phone and home phone of all the professionals , who live in the state of Indiana or ?",
        "result": "email_address, home_phone, cell_number \nFROM Professionals \nWHERE state = 'Indiana' OR state = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , who live in the state of Indiana or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Indiana\"  ",
        "question": "What are the email , cell phone and home phone of each professional , who live in the state of Indiana or ?",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone \n FROM Professionals\n WHERE Professionals.state = 'Indiana';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , who live in the state of Indiana or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.city like \"%West%\"  group by treatments.professional_id having  count(*) > 2 ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and have performed more than two treatments .",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state\nFROM Professionals \nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nWHERE Professionals.city LIKE '%West%' AND (SELECT COUNT(*) FROM Treatments WHERE Treatments.professional_id = Professionals.professional_id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and have performed more than two treatments . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\"   union select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by Professionals.professional_id having  count(*) > 2 ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or have performed more than two treatments .",
        "result": "professionals.role_code, professionals.street, professionals.city, professionals.state \nFROM professionals \nWHERE professionals.city LIKE '%West%' OR \n(SELECT COUNT(*) FROM treatments WHERE treatments.professional_id = professionals.professional_id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or have performed more than two treatments . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the arrival date and the departure date for all the dogs .",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Dogs.dog_id \nHAVING SUM(Treatments.cost_of_treatment) <= 1000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs have not cost their owner more than 1000 for treatment ? List the arrival date and the departure date for all the dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? Tell me the age of the oldest dog .",
        "result": "Dogs.name, Dogs.age \nFROM Dogs \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Dogs.dog_id \nHAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000 \nORDER BY Dogs.age DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs have not cost their owner more than 1000 for treatment ? Tell me the age of the oldest dog . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? Find the distinct breed type and size type combinations for dogs .",
        "result": "Dogs.breed_code, Dogs.size_code \n FROM Dogs \n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n GROUP BY Dogs.breed_code, Dogs.size_code \n HAVING SUM(Treatments.cost_of_treatment) <= 1000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs have not cost their owner more than 1000 for treatment ? Find the distinct breed type and size type combinations for dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "What are the arriving date and the departing date of all the dogs , for which the owner has not spend more than 1000 for treatment ?",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.owner_id IN (\n    SELECT Owners.owner_id\n    FROM Owners\n    INNER JOIN (\n        SELECT dog_id, SUM(cost_of_treatment) AS total_cost\n        FROM Treatments\n        GROUP BY dog_id\n        HAVING total_cost <= 1000\n    ) AS dog_treatment_total\n    ON Owners.owner_id = Dogs.owner_id\n    WHERE dog_treatment_total.dog_id = Dogs.dog_id\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the dogs , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "List the arrival date and the departure date for all the dogs , for which the owner has not spend more than 1000 for treatment ?",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nINNER JOIN Owners ON Dogs.owner_id = Owners.owner_id\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Dogs.dog_id\nHAVING SUM(Treatments.cost_of_treatment) <= 1000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the dogs , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "What is the average age of all the dogs , for which the owner has not spend more than 1000 for treatment ?",
        "result": "AVG(age) FROM Dogs\nWHERE owner_id IN (\n  SELECT owner_id FROM Owners\n  WHERE owner_id NOT IN (\n    SELECT owner_id FROM (\n      SELECT o.owner_id, SUM(t.cost_of_treatment) AS total_cost\n      FROM Owners o\n      JOIN Dogs d ON o.owner_id = d.owner_id\n      JOIN Treatments t ON d.dog_id = t.dog_id\n      GROUP BY o.owner_id\n      HAVING total_cost > 1000\n    )\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the dogs , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "Compute the average age of all the dogs , for which the owner has not spend more than 1000 for treatment ?",
        "result": "AVG(age) \nFROM Dogs \nWHERE owner_id IN (\n    SELECT owner_id \n    FROM Owners \n    WHERE owner_id NOT IN (\n        SELECT owner_id \n        FROM Dogs \n        JOIN Treatments \n        ON Dogs.dog_id = Treatments.dog_id \n        JOIN Charges \n        ON Treatments.treatment_type_code = Charges.charge_type \n        WHERE Charges.charge_amount > 1000\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the dogs , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "What is the age of the oldest dog , for which the owner has not spend more than 1000 for treatment ?",
        "result": "MAX(age) FROM Dogs \nWHERE owner_id IN (\n    SELECT owner_id FROM Dogs \n    JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n    GROUP BY owner_id \n    HAVING SUM(cost_of_treatment) <= 1000\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "Tell me the age of the oldest dog , for which the owner has not spend more than 1000 for treatment ?",
        "result": "MAX(age) FROM Dogs \nWHERE owner_id IN \n  (SELECT owner_id FROM Dogs \n  JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n  GROUP BY owner_id \n  HAVING SUM(cost_of_treatment) <= 1000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  group by Treatments.dog_id having  sum(treatments.cost_of_treatment) > 1000 )   ",
        "question": "Find the distinct breed type and size type combinations for dogs , for which the owner has not spend more than 1000 for treatment ?",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code \nFROM Dogs \nINNER JOIN Owners ON Dogs.owner_id = Owners.owner_id \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Dogs.dog_id \nHAVING COALESCE(SUM(Treatments.cost_of_treatment), 0) <= 1000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs , for which the owner has not spend more than 1000 for treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\"   except select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join dogs on Treatments.dog_id = Dogs.dog_id join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and or owners but are not used as dog names ?",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state\nFROM Professionals\nWHERE (Professionals.city LIKE '% West %' OR Professionals.city LIKE '% owners %')\nAND Professionals.first_name NOT IN (SELECT Dogs.name FROM Dogs) \nAND Professionals.last_name NOT IN (SELECT Dogs.name FROM Dogs);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and or owners but are not used as dog names ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\"   except select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join dogs on Treatments.dog_id = Dogs.dog_id join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or or owners but are not used as dog names ?",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \nFROM Professionals \nWHERE Professionals.city LIKE '% West %' \nAND Professionals.last_name NOT IN (SELECT Dogs.name FROM Dogs) \nUNION \nSELECT Owners.street, Owners.city, Owners.state, NULL \nFROM Owners \nWHERE Owners.city LIKE '% West %' \nAND Owners.last_name NOT IN (SELECT Dogs.name FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or or owners but are not used as dog names ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals   except select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join dogs on Treatments.dog_id = Dogs.dog_id join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "List the email , cell phone and home phone of all the professionals , or owners but are not used as dog names ?",
        "result": "Owners.email_address, Owners.home_phone, Owners.cell_number \nFROM Owners \nWHERE Owners.first_name NOT IN (SELECT Dogs.name FROM Dogs) \nUNION \nSELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number \nFROM Professionals \nWHERE Professionals.first_name NOT IN (SELECT Dogs.name FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , or owners but are not used as dog names ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals   except select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join dogs on Treatments.dog_id = Dogs.dog_id join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "What are the email , cell phone and home phone of each professional , or owners but are not used as dog names ?",
        "result": "Owners.email_address, Owners.home_phone, Owners.cell_number\nFROM Owners\nWHERE Owners.first_name || ' ' || Owners.last_name NOT IN (SELECT Dogs.name FROM Dogs)\nUNION\nSELECT Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE Professionals.first_name || ' ' || Professionals.last_name NOT IN (SELECT Dogs.name FROM Dogs);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , or owners but are not used as dog names ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals   except select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\"  ",
        "question": "Which professional did not operate any treatment on dogs ? Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' .",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \nFROM Professionals \nWHERE Professionals.professional_id NOT IN \n(SELECT Treatments.professional_id FROM Treatments) \nAND Professionals.city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professional did not operate any treatment on dogs ? Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals   except select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "Which professional did not operate any treatment on dogs ? List the email , cell phone and home phone of all the professionals .",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE professional_id NOT IN (\n    SELECT professional_id\n    FROM Treatments\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professional did not operate any treatment on dogs ? List the email , cell phone and home phone of all the professionals . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals   except select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "List the email , cell phone and home phone of all the professionals , who did not perform any treatment on dogs .",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE Professionals.professional_id NOT IN (SELECT Treatments.professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , who did not perform any treatment on dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals   except select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join professionals on Treatments.professional_id = Professionals.professional_id  ",
        "question": "What are the email , cell phone and home phone of each professional , who did not perform any treatment on dogs .",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE Professionals.professional_id NOT IN (\n    SELECT DISTINCT professional_id \n    FROM Treatments\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , who did not perform any treatment on dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments  )  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments and who have done treatment with cost below average ?",
        "result": "professionals.professional_id, professionals.role_code, professionals.first_name\nFROM professionals\nJOIN treatments ON professionals.professional_id = treatments.professional_id\nWHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)\nGROUP BY professionals.professional_id\nHAVING COUNT(*) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments and who have done treatment with cost below average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from treatments  )  ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments or who have done treatment with cost below average ?",
        "result": "Professional_id, role_code, first_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(*) >= 2 \n) OR professional_id IN (\n    SELECT professional_id FROM Treatments \n    WHERE cost_of_treatment < (\n        SELECT AVG(cost_of_treatment) FROM Treatments\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments or who have done treatment with cost below average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments  )  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments and who have done treatment with cost below average ?",
        "result": "professional_id, cell_number\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n) AND professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id \n    HAVING AVG(cost_of_treatment) > (\n        SELECT AVG(cost_of_treatment)\n        FROM Treatments\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments and who have done treatment with cost below average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from treatments  )  ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments or who have done treatment with cost below average ?",
        "result": "professional_id, cell_number \nFROM Professionals \nWHERE professional_id IN (\n    SELECT professional_id FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT treatment_type_code) >= 2 \n) OR professional_id IN (\n    SELECT professional_id FROM Treatments \n    WHERE cost_of_treatment < (\n        SELECT AVG(cost_of_treatment) FROM Treatments\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments or who have done treatment with cost below average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from treatments  )  ",
        "question": "List the email , cell phone and home phone of all the professionals , who have done treatment with cost below average ?",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone\nFROM Treatments\nINNER JOIN Professionals ON Treatments.professional_id = Professionals.professional_id\nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , who have done treatment with cost below average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from treatments  )  ",
        "question": "What are the email , cell phone and home phone of each professional , who have done treatment with cost below average ?",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone \nFROM Professionals \nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , who have done treatment with cost below average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments  group by avg(treatments.cost_of_treatment) having  count(*) >= 2 )   ",
        "question": "Which professionals have operated a treatment that costs less than the average ? Find the id and cell phone of the professionals who operate two or more types of treatments .",
        "result": "Professional.professional_id, Professional.cell_number \n FROM Professionals \n WHERE Professional.professional_id IN (\n   SELECT Treatments.professional_id \n   FROM Treatments \n   WHERE Treatments.cost_of_treatment < (\n     SELECT AVG(cost_of_treatment) \n     FROM Treatments\n   )\n   GROUP BY Treatments.professional_id \n   HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals have operated a treatment that costs less than the average ? Find the id and cell phone of the professionals who operate two or more types of treatments . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.city like \"%West%\"  )   ",
        "question": "Which professionals have operated a treatment that costs less than the average ? Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' .",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \nFROM Professionals \nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) AND Professionals.city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals have operated a treatment that costs less than the average ? Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(treatments.cost_of_treatment) from treatments  )  ",
        "question": "Which professionals have operated a treatment that costs less than the average ? List the email , cell phone and home phone of all the professionals .",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE Professionals.professional_id IN (\n    SELECT Treatments.professional_id\n    FROM Treatments\n    WHERE Treatments.cost_of_treatment < (\n        SELECT AVG(cost_of_treatment)\n        FROM Treatments\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals have operated a treatment that costs less than the average ? List the email , cell phone and home phone of all the professionals . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , owners.last_name , dogs.size_code from dogs join owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"  ",
        "question": "Which dogs are owned by someone who lives in Virginia ? List each owner 's first name , last name , and the size of his for her dog .",
        "result": "Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nINNER JOIN Sizes ON Dogs.size_code = Sizes.size_code \nWHERE Owners.state = 'Virginia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs are owned by someone who lives in Virginia ? List each owner 's first name , last name , and the size of his for her dog . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , dogs.name from dogs join owners on Dogs.owner_id = Owners.owner_id where  owners.state = \"Virginia\"  ",
        "question": "Which dogs are owned by someone who lives in Virginia ? List pairs of the owner 's first name and the dogs 's name .",
        "result": "Owners.first_name, Dogs.name\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Owners.state = 'Virginia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs are owned by someone who lives in Virginia ? List pairs of the owner 's first name and the dogs 's name . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.state = \"Hawaii\"  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments and who live in the state of Hawaii or ?",
        "result": "professionals.professional_id, professionals.role_code, professionals.first_name\nFROM professionals \nINNER JOIN treatments ON professionals.professional_id = treatments.professional_id \nWHERE (professionals.state = 'Hawaii' OR professionals.state = '?') \nGROUP BY professionals.professional_id \nHAVING COUNT(treatments.treatment_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments and who live in the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where  professionals.state = \"Hawaii\"  ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments or who live in the state of Hawaii or ?",
        "result": "professional_id, role_code, first_name\nFROM Professionals\nWHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)\nOR state = 'Hawaii'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments or who live in the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.state = \"Hawaii\"  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments and who live in the state of Hawaii or ?",
        "result": "professional_id, cell_number \nFROM Professionals \nWHERE state = 'Hawaii' OR state = '?' \nAND professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments and who live in the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.cell_number from professionals where  professionals.state = \"Hawaii\"  ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments or who live in the state of Hawaii or ?",
        "result": "professional_id, cell_number \n FROM Professionals \n WHERE professional_id IN (\n     SELECT professional_id \n     FROM Treatments \n     GROUP BY professional_id \n     HAVING COUNT(DISTINCT treatment_type_code) >= 2\n ) OR state = 'Hawaii' OR state = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments or who live in the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\"  ",
        "question": "List the email , cell phone and home phone of all the professionals , who live in the state of Hawaii or ?",
        "result": "email_address, home_phone, cell_number\nFROM Professionals\nWHERE state = 'Hawaii' OR city = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , who live in the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\"  ",
        "question": "What are the email , cell phone and home phone of each professional , who live in the state of Hawaii or ?",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE Professionals.state = 'Hawaii' OR Professionals.state = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , who live in the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.state = \"Hawaii\"  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.role_code , professionals.first_name from professionals where  professionals.state = \"Wisconsin\"  ",
        "question": "What are the id , role , and first name of the professionals who have performed two or more treatments and who live in the state of Hawaii or the state of Wisconsin .",
        "result": "professional_id, role_code, first_name \nFROM Professionals \nWHERE state IN ('Hawaii', 'Wisconsin')\nGROUP BY professional_id \nHAVING COUNT(*) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id , role , and first name of the professionals who have performed two or more treatments and who live in the state of Hawaii or the state of Wisconsin . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.state = \"Hawaii\"  group by professionals.professional_id having  count(*) >= 2  union select professionals.professional_id , professionals.cell_number from professionals where  professionals.state = \"Wisconsin\"  ",
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments and who live in the state of Hawaii or the state of Wisconsin .",
        "result": "professional_id, cell_number \nFROM Professionals \nWHERE state IN ('Hawaii', 'Wisconsin')\nAND professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the professionals who operate two or more types of treatments and who live in the state of Hawaii or the state of Wisconsin . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\" or professionals.state = \"Wisconsin\"  ",
        "question": "List the email , cell phone and home phone of all the professionals , who live in the state of Hawaii or the state of Wisconsin .",
        "result": "email_address, home_phone, cell_number \nFROM Professionals \nWHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , who live in the state of Hawaii or the state of Wisconsin . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\" or professionals.state = \"Wisconsin\"  ",
        "question": "What are the email , cell phone and home phone of each professional , who live in the state of Hawaii or the state of Wisconsin .",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number \nFROM Professionals \nWHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , who live in the state of Hawaii or the state of Wisconsin . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\" and professionals.state = \"Hawaii\"  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and living in either the state of Hawaii or ?",
        "result": "role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '% West %' AND (state = 'Hawaii' OR state = 'California')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and living in either the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\" or professionals.state = \"Hawaii\"  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or living in either the state of Hawaii or ?",
        "result": "role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%' OR state = 'Hawaii' OR state = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or living in either the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\"  ",
        "question": "List the email , cell phone and home phone of all the professionals that living in either the state of Hawaii or ?",
        "result": "email_address, home_phone, cell_number \nFROM Professionals \nWHERE state = 'Hawaii' OR state = '?'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals that living in either the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\"  ",
        "question": "What are the email , cell phone and home phone of each professional that living in either the state of Hawaii or ?",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone\nFROM Professionals\nWHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Alaska';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional that living in either the state of Hawaii or ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\" and professionals.state = \"Hawaii\"   union select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.state = \"Wisconsin\"  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and living in either the state of Hawaii or the state of Wisconsin ?",
        "result": "role_code, street, city, state \nFROM Professionals \nWHERE city LIKE '%West%' AND (state = 'Hawaii' OR state = 'Wisconsin')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and living in either the state of Hawaii or the state of Wisconsin ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\" or professionals.state = \"Wisconsin\"  ",
        "question": "List the email , cell phone and home phone of all the professionals that living in either the state of Hawaii or the state of Wisconsin ?",
        "result": "email_address, home_phone, cell_number\nFROM Professionals\nWHERE state = 'Hawaii' OR state = 'Wisconsin'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals that living in either the state of Hawaii or the state of Wisconsin ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.state = \"Hawaii\" or professionals.state = \"Wisconsin\"  ",
        "question": "What are the email , cell phone and home phone of each professional that living in either the state of Hawaii or the state of Wisconsin ?",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number\nFROM Professionals\nWHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional that living in either the state of Hawaii or the state of Wisconsin ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from treatments join professionals on Treatments.professional_id = Professionals.professional_id where  professionals.city like \"%West%\"  group by professionals.professional_id having  count(*) >= 2 ",
        "question": "Which professionals live in a city containing the substring ' West ' ? Find the id and cell phone of the professionals who operate two or more types of treatments .",
        "result": "professional_id, cell_number\nFROM Professionals\nWHERE city LIKE '% West %'\nAND professional_id IN (\n    SELECT professional_id \n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals live in a city containing the substring ' West ' ? Find the id and cell phone of the professionals who operate two or more types of treatments . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.city like \"%West%\"  ",
        "question": "Which professionals live in a city containing the substring ' West ' ? List the email , cell phone and home phone of all the professionals .",
        "result": "email_address, home_phone, cell_number\nFROM Professionals\nWHERE city LIKE '% West %'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which professionals live in a city containing the substring ' West ' ? List the email , cell phone and home phone of all the professionals . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.city like \"%West%\"  ",
        "question": "List the email , cell phone and home phone of all the professionals that living in a city that contains the substring ' West ' .",
        "result": "email_address, home_phone, cell_number \nFROM Professionals \nWHERE city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals that living in a city that contains the substring ' West ' . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.city like \"%West%\"  ",
        "question": "What are the email , cell phone and home phone of each professional that living in a city that contains the substring ' West ' .",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone \nFROM Professionals \nWHERE Professionals.city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional that living in a city that contains the substring ' West ' . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.first_name , owners.last_name from dogs join owners on Dogs.owner_id = Owners.owner_id where  owners.state like \"%North%\"  group by dogs.owner_id  order by count(*) desc limit 1 ",
        "question": "Which owners live in the state whose name contains the substring ' North ' ? Return the owner id , first name and last name of the owner who has the most dogs .",
        "result": "o.owner_id, o.first_name, o.last_name \nFROM Owners o\nWHERE o.state LIKE '% North %'\nORDER BY (SELECT COUNT(*) FROM Dogs d WHERE d.owner_id = o.owner_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owners live in the state whose name contains the substring ' North ' ? Return the owner id , first name and last name of the owner who has the most dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.last_name from treatments join dogs on Treatments.dog_id = Dogs.dog_id join owners on Dogs.owner_id = Owners.owner_id where  owners.state like \"%North%\"  group by owners.owner_id  order by count(*) desc limit 1 ",
        "question": "Which owners live in the state whose name contains the substring ' North ' ? Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs .",
        "result": "Owners.owner_id, Owners.last_name\nFROM Owners\nWHERE Owners.state LIKE '% North %'\nORDER BY (\n  SELECT SUM(Treatments.cost_of_treatment)\n  FROM Treatments\n  INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id\n  WHERE Dogs.owner_id = Owners.owner_id\n) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owners live in the state whose name contains the substring ' North ' ? Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.zip_code from treatments join dogs on Treatments.dog_id = Dogs.dog_id join owners on Dogs.owner_id = Owners.owner_id where  owners.state like \"%North%\"  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1 ",
        "question": "Which owners live in the state whose name contains the substring ' North ' ? Find the owner id and zip code of the owner who spent the most money in total for his or her dogs .",
        "result": "Owners.owner_id, Owners.zip_code\nFROM Owners\nWHERE Owners.state LIKE '% North %'\nORDER BY (\n    SELECT SUM(Charges.charge_amount)\n    FROM Dogs\n    JOIN Charges ON Dogs.size_code = Charges.charge_type\n    WHERE Dogs.owner_id = Owners.owner_id\n) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which owners live in the state whose name contains the substring ' North ' ? Find the owner id and zip code of the owner who spent the most money in total for his or her dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "What are the arriving date and the departing date of all the dogs that have an age below the average ?",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the dogs that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "List the arrival date and the departure date for all the dogs that have an age below the average ?",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the dogs that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "What is the average age of all the dogs that have an age below the average ?",
        "result": "AVG(age) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the dogs that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "Compute the average age of all the dogs that have an age below the average ?",
        "result": "AVG(age) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the dogs that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "What is the age of the oldest dog that have an age below the average ?",
        "result": "MAX(age) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "Tell me the age of the oldest dog that have an age below the average ?",
        "result": "MAX(age) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.age < (select avg(dogs.age) from dogs  )  ",
        "question": "Find the distinct breed type and size type combinations for dogs that have an age below the average ?",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code \n FROM Dogs \n WHERE Dogs.age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs that have an age below the average ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "What are the arriving date and the departing date of all the dogs that have not gone through any treatment ?",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the dogs that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "List the arrival date and the departure date for all the dogs that have not gone through any treatment ?",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.dog_id NOT IN (SELECT Treatments.dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the dogs that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "What is the average age of all the dogs that have not gone through any treatment ?",
        "result": "AVG(age) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the dogs that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "Compute the average age of all the dogs that have not gone through any treatment ?",
        "result": "AVG(age) FROM Dogs WHERE dog_id NOT IN (SELECT DISTINCT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the dogs that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "What is the age of the oldest dog that have not gone through any treatment ?",
        "result": "MAX(age) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "Tell me the age of the oldest dog that have not gone through any treatment ?",
        "result": "MAX(age) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "Find the distinct breed type and size type combinations for dogs that have not gone through any treatment ?",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code\nFROM Dogs\nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Treatments.treatment_id IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs that have not gone through any treatment ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "What are the arriving date and the departing date of all the dogs , that have not received any treatment .",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.dog_id NOT IN (\n    SELECT Dogs.dog_id\n    FROM Dogs\n    JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the dogs , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "List the arrival date and the departure date for all the dogs , that have not received any treatment .",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.dog_id NOT IN (\n  SELECT Treatments.dog_id \n  FROM Treatments\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the dogs , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "What is the average age of all the dogs , that have not received any treatment .",
        "result": "AVG(age) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the dogs , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "Compute the average age of all the dogs , that have not received any treatment .",
        "result": "AVG(age) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the dogs , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "What is the age of the oldest dog , that have not received any treatment .",
        "result": "MAX(age) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "Tell me the age of the oldest dog , that have not received any treatment .",
        "result": "MAX(age) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.dog_id not in (select Treatments.dog_id from treatments  )  ",
        "question": "Find the distinct breed type and size type combinations for dogs , that have not received any treatment .",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code \nFROM Dogs \nLEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.treatment_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs , that have not received any treatment . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , owners.last_name , owners.email_address from owners where  owners.state like \"%North%\" and owners.owner_id not in (select Dogs.owner_id from dogs  )  ",
        "question": "Return the first name , last name and email of the owners living in a state whose name contains the substring ' North ' and temporarily do not have any dogs ?",
        "result": "Owners.first_name, Owners.last_name, Owners.email_address \nFROM Owners \nWHERE Owners.state LIKE '%North%' AND Owners.owner_id NOT IN (SELECT Dogs.owner_id FROM Dogs WHERE Dogs.date_departed IS NULL)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Return the first name , last name and email of the owners living in a state whose name contains the substring ' North ' and temporarily do not have any dogs ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , owners.last_name , owners.email_address from owners where  owners.state like \"%North%\" or owners.owner_id not in (select Dogs.owner_id from dogs  )  ",
        "question": "Return the first name , last name and email of the owners living in a state whose name contains the substring ' North ' or temporarily do not have any dogs ?",
        "result": "Owners.first_name, Owners.last_name, Owners.email_address \nFROM Owners \nLEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Dogs.dog_id IS NULL OR Owners.state LIKE '% North %'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Return the first name , last name and email of the owners living in a state whose name contains the substring ' North ' or temporarily do not have any dogs ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\" and professionals.professional_id not in (select Treatments.professional_id from treatments  )  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and did not operate any treatment on dogs ?",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \nFROM Professionals \nWHERE Professionals.city LIKE '% West %' \nAND Professionals.professional_id NOT IN \n(SELECT Treatments.professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' and did not operate any treatment on dogs ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.role_code , professionals.street , professionals.city , professionals.state from professionals where  professionals.city like \"%West%\" or professionals.professional_id not in (select Treatments.professional_id from treatments  )  ",
        "question": "Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or did not operate any treatment on dogs ?",
        "result": "role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '% West %'\nOR professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role , street , city and state of the professionals living in a city that contains the substring ' West ' or did not operate any treatment on dogs ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.professional_id not in (select Treatments.professional_id from treatments  )  ",
        "question": "List the email , cell phone and home phone of all the professionals that did not operate any treatment on dogs ?",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number \nFROM Professionals \nWHERE Professionals.professional_id NOT IN \n    (SELECT Treatments.professional_id FROM Treatments);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals that did not operate any treatment on dogs ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.professional_id not in (select Treatments.professional_id from treatments  )  ",
        "question": "What are the email , cell phone and home phone of each professional that did not operate any treatment on dogs ?",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number \nFROM Professionals \nWHERE Professionals.professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional that did not operate any treatment on dogs ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.professional_id not in (select Treatments.professional_id from treatments  )  ",
        "question": "List the email , cell phone and home phone of all the professionals , who have not treated any dogs .",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone\nFROM Professionals\nWHERE Professionals.professional_id NOT IN (\n  SELECT DISTINCT Treatments.professional_id\n  FROM Treatments\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email , cell phone and home phone of all the professionals , who have not treated any dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.email_address , professionals.cell_number , professionals.home_phone from professionals where  professionals.professional_id not in (select Treatments.professional_id from treatments  )  ",
        "question": "What are the email , cell phone and home phone of each professional , who have not treated any dogs .",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone \n FROM Professionals\n WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email , cell phone and home phone of each professional , who have not treated any dogs . \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.abandoned_yn = 1  ",
        "question": "What are the arriving date and the departing date of all the dogs , who have been abandoned ?",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.abandoned_yn = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the dogs , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.abandoned_yn = 1  ",
        "question": "List the arrival date and the departure date for all the dogs , who have been abandoned ?",
        "result": "date_arrived, date_departed\nFROM Dogs\nWHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the dogs , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "What is the average age of all the dogs , who have been abandoned ?",
        "result": "AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the dogs , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "Compute the average age of all the dogs , who have been abandoned ?",
        "result": "AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the dogs , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "What is the age of the oldest dog , who have been abandoned ?",
        "result": "MAX(age) FROM Dogs WHERE abandoned_yn = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "Tell me the age of the oldest dog , who have been abandoned ?",
        "result": "MAX(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.abandoned_yn = 1  ",
        "question": "Find the distinct breed type and size type combinations for dogs , who have been abandoned ?",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code\nFROM Dogs\nWHERE Dogs.abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs , who have been abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.abandoned_yn = 1  ",
        "question": "What are the arriving date and the departing date of all the dogs , that were abandoned ?",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nWHERE Dogs.abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving date and the departing date of all the dogs , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.date_arrived , dogs.date_departed from dogs where  dogs.abandoned_yn = 1  ",
        "question": "List the arrival date and the departure date for all the dogs , that were abandoned ?",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arrival date and the departure date for all the dogs , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "What is the average age of all the dogs , that were abandoned ?",
        "result": "AVG(age) FROM Dogs WHERE abandoned_yn = 'Y';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the dogs , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "Compute the average age of all the dogs , that were abandoned ?",
        "result": "AVG(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the dogs , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "What is the age of the oldest dog , that were abandoned ?",
        "result": "MAX(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest dog , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select max(dogs.age) from dogs where  dogs.abandoned_yn = 1  ",
        "question": "Tell me the age of the oldest dog , that were abandoned ?",
        "result": "MAX(age) FROM Dogs WHERE abandoned_yn = 'Y'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest dog , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.breed_code , dogs.size_code from dogs where  dogs.abandoned_yn = 1  ",
        "question": "Find the distinct breed type and size type combinations for dogs , that were abandoned ?",
        "result": "DISTINCT Dogs.breed_code, Dogs.size_code \n FROM Dogs \n WHERE Dogs.abandoned_yn = 'Y';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for dogs , that were abandoned ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions asc",
        "question": "What are the birth year and citizenship of singers , in ascending order of net worth .",
        "result": "Birth_Year, Citizenship \nFROM singer \nORDER BY Net_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions asc",
        "question": "What are the birth years and citizenships of the singers , in ascending order of net worth .",
        "result": "Birth_Year, Citizenship \nFROM singer \nORDER BY Net_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\"   order by singer.net_worth_millions asc",
        "question": "List the name of singers whose citizenship is not ' France ' , in ascending order of net worth .",
        "result": "singer.Name \nFROM singer \nWHERE singer.Citizenship != 'France' \nORDER BY singer.Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers whose citizenship is not ' France ' , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\"   order by singer.net_worth_millions asc",
        "question": "What are the names of the singers who are not France citizens , in ascending order of net worth .",
        "result": "Name FROM singer WHERE Citizenship != 'France' ORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers who are not France citizens , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.birth_year = 1948 or singer.birth_year = 1949   order by singer.net_worth_millions asc",
        "question": "Show the name of singers whose birth year is either 1948 or 1949 , in ascending order of net worth .",
        "result": "Name \nFROM singer \nWHERE Birth_Year IN (1948, 1949) \nORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the name of singers whose birth year is either 1948 or 1949 , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.birth_year = 1948 or singer.birth_year = 1949   order by singer.net_worth_millions asc",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949 , in ascending order of net worth .",
        "result": "Name FROM singer WHERE Birth_Year IN (1948, 1949) ORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers whose birth years are either 1948 or 1949 , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955   order by singer.net_worth_millions asc",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955 , in ascending order of net worth .",
        "result": "Citizenship \nFROM \nsinger \nWHERE \nBirth_Year < 1945 \nAND Birth_Year > 1955 \nORDER BY \nNet_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the citizenship shared by singers with birth year before 1945 and after 1955 , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955   order by singer.net_worth_millions asc",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 , in ascending order of net worth .",
        "result": "Citizenship FROM singer\nWHERE Birth_Year < 1945 AND Birth_Year > 1955\nORDER BY Net_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 , in ascending order of net worth . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions asc",
        "question": "What are the birth year and citizenship of singers , ordered by ascending net worth ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nORDER BY Net_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions asc",
        "question": "What are the birth years and citizenships of the singers , ordered by ascending net worth ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\"   order by singer.net_worth_millions asc",
        "question": "List the name of singers whose citizenship is not ' France ' , ordered by ascending net worth ?",
        "result": "singer.Name FROM singer \nWHERE singer.Citizenship != 'France' \nORDER BY singer.Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers whose citizenship is not ' France ' , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\"   order by singer.net_worth_millions asc",
        "question": "What are the names of the singers who are not France citizens , ordered by ascending net worth ?",
        "result": "Name \nFROM singer \nWHERE Citizenship != 'France' \nORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers who are not France citizens , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.birth_year = 1948 or singer.birth_year = 1949   order by singer.net_worth_millions asc",
        "question": "Show the name of singers whose birth year is either 1948 or 1949 , ordered by ascending net worth ?",
        "result": "Name \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949 \nORDER BY Net_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the name of singers whose birth year is either 1948 or 1949 , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.birth_year = 1948 or singer.birth_year = 1949   order by singer.net_worth_millions asc",
        "question": "What are the names of the singers whose birth years are either 1948 or 1949 , ordered by ascending net worth ?",
        "result": "Name \nFROM singer \nWHERE Birth_Year IN (1948, 1949) \nORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers whose birth years are either 1948 or 1949 , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955   order by singer.net_worth_millions asc",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955 , ordered by ascending net worth ?",
        "result": "citizenship \nFROM singer \nWHERE birth_year < 1945 OR birth_year > 1955 \nORDER BY net_worth_millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the citizenship shared by singers with birth year before 1945 and after 1955 , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955   order by singer.net_worth_millions asc",
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 , ordered by ascending net worth ?",
        "result": "Citizenship FROM singer\nWHERE Birth_Year < 1945 AND Birth_Year > 1955\nORDER BY Net_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the citizenships that are shared by singers with a birth year before 1945 and after 1955 , ordered by ascending net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from singer where  singer.citizenship != \"France\"  ",
        "question": "What is the count of singers , whose citizenship is not ' France ' .",
        "result": "COUNT(*) FROM singer WHERE Citizenship != 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , whose citizenship is not ' France ' . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.citizenship != \"France\"  ",
        "question": "What are the birth year and citizenship of singers , whose citizenship is not ' France ' .",
        "result": "Birth_Year, Citizenship FROM singer WHERE Citizenship <> 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , whose citizenship is not ' France ' . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.citizenship != \"France\"  ",
        "question": "What are the birth years and citizenships of the singers , whose citizenship is not ' France ' .",
        "result": "Birth_Year, Citizenship FROM singer WHERE Citizenship <> 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , whose citizenship is not ' France ' . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from singer where  singer.citizenship != \"France\"  ",
        "question": "What is the count of singers , who are not France citizens ?",
        "result": "COUNT(*) FROM singer WHERE Citizenship <> 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , who are not France citizens ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.citizenship != \"France\"  ",
        "question": "What are the birth year and citizenship of singers , who are not France citizens ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nWHERE Citizenship != 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , who are not France citizens ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.citizenship != \"France\"  ",
        "question": "What are the birth years and citizenships of the singers , who are not France citizens ?",
        "result": "Birth_Year, Citizenship FROM singer WHERE Citizenship <> 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , who are not France citizens ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\"   order by singer.net_worth_millions desc limit 1 ",
        "question": "What is the name of the singer who is worth the most and who are not France citizens ?",
        "result": "Name FROM singer \nWHERE Citizenship != 'France' \nORDER BY Net_Worth_Millions DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the singer who is worth the most and who are not France citizens ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from singer where  singer.birth_year = 1948 or singer.birth_year = 1949  ",
        "question": "What is the count of singers , whose birth year is either 1948 or 1949 ?",
        "result": "COUNT(*) FROM singer WHERE Birth_Year IN (1948, 1949)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , whose birth year is either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.birth_year = 1948 or singer.birth_year = 1949  ",
        "question": "What are the birth year and citizenship of singers , whose birth year is either 1948 or 1949 ?",
        "result": "Birth_Year, Citizenship FROM singer WHERE Birth_Year IN (1948, 1949);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , whose birth year is either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.birth_year = 1948 or singer.birth_year = 1949  ",
        "question": "What are the birth years and citizenships of the singers , whose birth year is either 1948 or 1949 ?",
        "result": "Birth_Year, Citizenship FROM singer WHERE Birth_Year IN (1948, 1949)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , whose birth year is either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\" and singer.birth_year = 1948   union select singer.name from singer where  singer.birth_year = 1949  ",
        "question": "List the name of singers whose citizenship is not ' France ' and whose birth year is either 1948 or 1949 ?",
        "result": "Name \nFROM singer \nWHERE Citizenship != 'France' AND (Birth_Year = 1948 OR Birth_Year = 1949);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers whose citizenship is not ' France ' and whose birth year is either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from singer where  singer.birth_year = 1948 or singer.birth_year = 1949  ",
        "question": "What is the count of singers , whose birth years are either 1948 or 1949 ?",
        "result": "COUNT(*) FROM singer WHERE Birth_Year IN (1948, 1949);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , whose birth years are either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.birth_year = 1948 or singer.birth_year = 1949  ",
        "question": "What are the birth year and citizenship of singers , whose birth years are either 1948 or 1949 ?",
        "result": "Birth_Year, Citizenship FROM singer WHERE Birth_Year IN (1948, 1949)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , whose birth years are either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.birth_year = 1948 or singer.birth_year = 1949  ",
        "question": "What are the birth years and citizenships of the singers , whose birth years are either 1948 or 1949 ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nWHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , whose birth years are either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\" and singer.birth_year = 1948   union select singer.name from singer where  singer.birth_year = 1949  ",
        "question": "List the name of singers whose citizenship is not ' France ' and whose birth years are either 1948 or 1949 ?",
        "result": "Name FROM singer \nWHERE Citizenship <> 'France' AND Birth_Year IN (1948, 1949);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of singers whose citizenship is not ' France ' and whose birth years are either 1948 or 1949 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions desc limit 1 ",
        "question": "What are the birth year and citizenship of singers , with the largest net worth ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , with the largest net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions desc limit 1 ",
        "question": "What are the birth years and citizenships of the singers , with the largest net worth ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , with the largest net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955   order by singer.net_worth_millions desc limit 1 ",
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955 and with the largest net worth ?",
        "result": "Citizenship\nFROM singer\nWHERE Birth_Year < 1945 OR Birth_Year > 1955\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the citizenship shared by singers with birth year before 1945 and after 1955 and with the largest net worth ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions desc limit 1 ",
        "question": "What are the birth year and citizenship of singers , who is worth the most ?",
        "result": "Birth_Year, Citizenship \nFROM singer \nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , who is worth the most ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer   order by singer.net_worth_millions desc limit 1 ",
        "question": "What are the birth years and citizenships of the singers , who is worth the most ?",
        "result": "Birth_Year, Citizenship\nFROM singer\nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , who is worth the most ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.citizenship != \"France\"   order by singer.net_worth_millions desc limit 1 ",
        "question": "What are the names of the singers who are not France citizens and who is worth the most ?",
        "result": "Name FROM singer WHERE Citizenship != 'France' ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers who are not France citizens and who is worth the most ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What is the count of singers , that have songs with sales more than 300000 .",
        "result": "COUNT(DISTINCT Singer_ID)\nFROM song\nWHERE Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What are the birth year and citizenship of singers , that have songs with sales more than 300000 .",
        "result": "singer.Birth_Year, singer.Citizenship \nFROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What are the birth years and citizenships of the singers , that have songs with sales more than 300000 .",
        "result": "singer.Birth_Year, singer.Citizenship\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  group by singer.name having  count(*) > 1 ",
        "question": "Show the names of singers that have more than one song and that have songs with sales more than 300000 .",
        "result": "singer.Name FROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000\nGROUP BY singer.Singer_ID\nHAVING COUNT(song.Song_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song and that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1  union select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "Show the names of singers that have more than one song or that have songs with sales more than 300000 .",
        "result": "Name FROM singer\nWHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)\nOR Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song or that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  group by singer.name having  count(*) > 1 ",
        "question": "What are the names of the singers that have more than one songs and that have songs with sales more than 300000 .",
        "result": "Name \nFROM \nsinger \nINNER JOIN \nsong ON singer.Singer_ID = song.Singer_ID \nWHERE \nSales > 300000 \nGROUP BY \nsinger.Singer_ID \nHAVING \nCOUNT(song.Song_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs and that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1  union select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What are the names of the singers that have more than one songs or that have songs with sales more than 300000 .",
        "result": "singer.Name\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE singer.Singer_ID IN (\n  SELECT song.Singer_ID\n  FROM song\n  GROUP BY song.Singer_ID\n  HAVING COUNT(*) > 1\n) OR song.Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs or that have songs with sales more than 300000 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What is the count of singers , that have sales more than 300000 ?",
        "result": "COUNT(DISTINCT Singer_ID) FROM song WHERE Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What are the birth year and citizenship of singers , that have sales more than 300000 ?",
        "result": "singer.Birth_Year, singer.Citizenship \nFROM singer \nJOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What are the birth years and citizenships of the singers , that have sales more than 300000 ?",
        "result": "singer.Birth_Year, singer.Citizenship \nFROM singer \nJOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  group by singer.name having  count(*) > 1 ",
        "question": "Show the names of singers that have more than one song and that have sales more than 300000 ?",
        "result": "singer.Name\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Sales > 300000\nGROUP BY singer.Singer_ID\nHAVING COUNT(song.Song_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song and that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1  union select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "Show the names of singers that have more than one song or that have sales more than 300000 ?",
        "result": "singer.Name\nFROM singer \nJOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000 \nGROUP BY singer.Name \nHAVING COUNT(song.Song_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song or that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  group by singer.name having  count(*) > 1 ",
        "question": "What are the names of the singers that have more than one songs and that have sales more than 300000 ?",
        "result": "Name FROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE Sales > 300000 \nGROUP BY singer.Singer_ID \nHAVING COUNT(song.Song_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs and that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1  union select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000  ",
        "question": "What are the names of the singers that have more than one songs or that have sales more than 300000 ?",
        "result": "Name \nFROM singer \nWHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)\nOR Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs or that have sales more than 300000 ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from singer where  singer.singer_id not in (select song.Singer_ID from song  )  ",
        "question": "What is the count of singers , that do not have any song .",
        "result": "COUNT(*) FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , that do not have any song . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.singer_id not in (select song.Singer_ID from song  )  ",
        "question": "What are the birth year and citizenship of singers , that do not have any song .",
        "result": "singer.Birth_Year, singer.Citizenship\nFROM singer\nWHERE NOT EXISTS (\n    SELECT *\n    FROM song\n    WHERE song.Singer_ID = singer.Singer_ID\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , that do not have any song . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.singer_id not in (select song.Singer_ID from song  )  ",
        "question": "What are the birth years and citizenships of the singers , that do not have any song .",
        "result": "Birth_Year, Citizenship FROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , that do not have any song . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select count(*) from singer where  singer.birth_year < 1945  ",
        "question": "What is the count of singers , with birth year before 1945 and ?",
        "result": "COUNT(*) FROM singer WHERE Birth_Year < 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of singers , with birth year before 1945 and ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.birth_year < 1945  ",
        "question": "What are the birth year and citizenship of singers , with birth year before 1945 and ?",
        "result": "Birth_Year, Citizenship FROM singer WHERE Birth_Year < 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and citizenship of singers , with birth year before 1945 and ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.birth_year , singer.citizenship from singer where  singer.birth_year < 1945  ",
        "question": "What are the birth years and citizenships of the singers , with birth year before 1945 and ?",
        "result": "Birth_Year, Citizenship FROM singer WHERE Birth_Year < 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and citizenships of the singers , with birth year before 1945 and ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.birth_year < 1945   order by singer.net_worth_millions desc limit 1 ",
        "question": "What is the name of the singer with the largest net worth and with birth year before 1945 and ?",
        "result": "Name \nFROM singer \nWHERE Birth_Year < 1945 \nORDER BY Net_Worth_Millions DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the singer with the largest net worth and with birth year before 1945 and ? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer where  singer.birth_year > 1955   order by singer.net_worth_millions desc limit 1 ",
        "question": "What is the name of the singer with the largest net worth and after 1955 .",
        "result": "Name FROM singer WHERE Birth_Year > 1955 ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the singer with the largest net worth and after 1955 . \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship , count(*) from singer where  singer.birth_year < 1945  group by singer.citizenship ",
        "question": "Show different citizenship of singers and the number of singers of each citizenship , that are shared by singers with a birth year before 1945",
        "result": "Citizenship, COUNT(DISTINCT Singer_ID) \nFROM singer \nWHERE Birth_Year < 1945 \nGROUP BY Citizenship",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show different citizenship of singers and the number of singers of each citizenship , that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.citizenship , max(singer.net_worth_millions) from singer where  singer.birth_year < 1945  group by singer.citizenship ",
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship , that are shared by singers with a birth year before 1945",
        "result": "Citizenship, MAX(Net_Worth_Millions)\nFROM singer\nWHERE Birth_Year < 1945\nGROUP BY Citizenship;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show different citizenships and the maximum net worth of singers of each citizenship , that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000 and singer.birth_year < 1945  ",
        "question": "Show distinct names of singers that have songs with sales more than 300000 and that are shared by singers with a birth year before 1945",
        "result": "DISTINCT singer.Name \nFROM singer \nINNER JOIN song \nON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000 \nAND singer.Birth_Year < 1945",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show distinct names of singers that have songs with sales more than 300000 and that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000 or singer.birth_year < 1945  ",
        "question": "Show distinct names of singers that have songs with sales more than 300000 or that are shared by singers with a birth year before 1945",
        "result": "DISTINCT singer.Name \nFROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000 OR singer.Birth_Year < 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show distinct names of singers that have songs with sales more than 300000 or that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000 and singer.birth_year < 1945  ",
        "question": "what are the different names of the singers that have sales more than 300000 and that are shared by singers with a birth year before 1945",
        "result": "Name \nFROM \nsinger \nWHERE \nBirth_Year < 1945 \nAND \nSinger_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### what are the different names of the singers that have sales more than 300000 and that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000 or singer.birth_year < 1945  ",
        "question": "what are the different names of the singers that have sales more than 300000 or that are shared by singers with a birth year before 1945",
        "result": "Name \nFROM singer \nWHERE Sales > 300000 OR Birth_Year < 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### what are the different names of the singers that have sales more than 300000 or that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  singer.birth_year < 1945  group by singer.name having  count(*) > 1 ",
        "question": "Show the names of singers that have more than one song and that are shared by singers with a birth year before 1945",
        "result": "singer.Name\nFROM singer\nINNER JOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE singer.Birth_Year < 1945\nGROUP BY singer.Name\nHAVING COUNT(DISTINCT song.Title) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song and that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1  union select singer.name from singer where  singer.birth_year < 1945  ",
        "question": "Show the names of singers that have more than one song or that are shared by singers with a birth year before 1945",
        "result": "Name \nFROM singer \nWHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1) \nOR Birth_Year < 1945;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of singers that have more than one song or that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  singer.birth_year < 1945  group by singer.name having  count(*) > 1 ",
        "question": "What are the names of the singers that have more than one songs and that are shared by singers with a birth year before 1945",
        "result": "Name \nFROM singer \nWHERE Singer_ID IN (\n  SELECT Singer_ID \n  FROM song \n  GROUP BY Singer_ID \n  HAVING COUNT(*) > 1 AND Singer_ID IN (\n    SELECT Singer_ID \n    FROM singer \n    WHERE Birth_Year < 1945\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs and that are shared by singers with a birth year before 1945 \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name having  count(*) > 1  union select singer.name from singer where  singer.birth_year < 1945  ",
        "question": "What are the names of the singers that have more than one songs or that are shared by singers with a birth year before 1945",
        "result": "Name \nFROM singer \nWHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)\nOR Singer_ID IN (SELECT Singer_ID FROM song WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Birth_Year < 1945) GROUP BY Singer_ID HAVING COUNT(DISTINCT Singer_ID) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the singers that have more than one songs or that are shared by singers with a birth year before 1945 \n SELECT"
    }
]
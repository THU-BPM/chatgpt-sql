[
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many vocalists do we have?",
        "result": "COUNT(*) FROM singer WHERE Is_male = 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many vocalists do we have? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the total number of musicians?",
        "result": "COUNT(Singer_ID) FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the total number of musicians? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "Show name, nationality, age for all vocalists ordered by age from the oldest to the youngest.",
        "result": "Name, Country, Age \nFROM singer \nWHERE Is_male = 0 \nORDER BY Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show name, nationality, age for all vocalists ordered by age from the oldest to the youngest. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "question": "What are the names, nationalities, and ages for every musicians in descending order of age?",
        "result": "Name, Country, Age FROM singer ORDER BY Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names, nationalities, and ages for every musicians in descending order of age? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age of all vocalists from France?",
        "result": "AVG(Age), MIN(Age), MAX(Age)\nFROM singer\nWHERE Country = 'France' AND Is_male = 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum age of all vocalists from France? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "question": "What is the average, minimum, and maximum age for all French musicians?",
        "result": "AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average, minimum, and maximum age for all French musicians? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "Show the name and the publish year of the song by the youngest vocalists.",
        "result": "s.Song_Name, s.Song_release_year \nFROM singer s \nWHERE s.Age = (SELECT MIN(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and the publish year of the song by the youngest vocalists. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "question": "What are the names and publish years for all the songs of the youngest musicians?",
        "result": "Name, Song_release_year\nFROM singer\nWHERE Age = (SELECT MIN(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names and publish years for all the songs of the youngest musicians? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are all distinct nationalities where vocalists above age 20 are from?",
        "result": "DISTINCT Country \nFROM singer \nWHERE Age > 20 AND Is_male = 0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all distinct nationalities where vocalists above age 20 are from? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "question": "What are the different nationalities with musicians above age 20?",
        "result": "DISTINCT Country \nFROM singer \nWHERE Age > 20;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the different nationalities with musicians above age 20? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "Show all State and the number of vocalists in each country.",
        "result": "singer.Country, COUNT(*) as num_vocalists \nFROM singer \nGROUP BY singer.Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show all State and the number of vocalists in each country. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "question": "How many musicians are from each State?",
        "result": "Country, COUNT(Singer_ID) \n FROM singer \n GROUP BY Country",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many musicians are from each State? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "List all music titles by vocalists above the average age.",
        "result": "s.Song_Name \nFROM singer s \nWHERE s.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all music titles by vocalists above the average age. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
        "question": "What are all the music titles by musicians who are older than average?",
        "result": "singer.Song_Name\nFROM singer\nWHERE singer.Age > (SELECT AVG(Age) FROM singer)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are all the music titles by musicians who are older than average? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "Show position and name for all stadiums with number of seats between 5000 and 10000.",
        "result": "Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show position and name for all stadiums with number of seats between 5000 and 10000. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "question": "What are the addresses and names of all stations with number of seats between 5000 and 10000?",
        "result": "Name, Location FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the addresses and names of all stations with number of seats between 5000 and 10000? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and the maximum seats of all stadiums?",
        "result": "AVG(Capacity), MAX(Capacity) FROM stadium",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and the maximum seats of all stadiums? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT avg(capacity) ,  max(capacity) FROM stadium",
        "question": "What is the average and maximum seats for all stations?",
        "result": "AVG(Capacity), MAX(Capacity) FROM stadium;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the average and maximum seats for all stations? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and number of seats for the stadium with highest average attendance?",
        "result": "Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and number of seats for the stadium with highest average attendance? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "question": "What is the name and number of seats for the stadium with the highest average attendance?",
        "result": "Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and number of seats for the stadium with the highest average attendance? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many shows are there in year 2014 or 2015?",
        "result": "COUNT(*) FROM concert WHERE Year IN (2014, 2015);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many shows are there in year 2014 or 2015? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "question": "How many shows occurred in 2014 or 2015?",
        "result": "COUNT(*) FROM concert WHERE Year IN (2014, 2015);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### How many shows occurred in 2014 or 2015? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "Show the stadium name and the number of shows in each stadium.",
        "result": "stadium.Name, COUNT(concert.concert_ID)\nFROM stadium\nJOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY stadium.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and the number of shows in each stadium. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "question": "For each stadium, how many shows play there?",
        "result": "stadium.Name, COUNT(concert.concert_ID)\nFROM stadium\nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY stadium.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### For each stadium, how many shows play there? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Show the stadium name and number of seats with most number of shows in year 2014 or after.",
        "result": "stadium.Name, MAX(stadium.Capacity) \nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year >= 2014 \nGROUP BY stadium.Name \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium name and number of seats with most number of shows in year 2014 or after. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name and number of seats of the stadium with the most shows after 2013?",
        "result": "stadium.Name, stadium.Capacity \nFROM stadium \nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.Year > 2013 \nGROUP BY stadium.Stadium_ID \nORDER BY COUNT(concert.concert_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and number of seats of the stadium with the most shows after 2013? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year has most number of shows?",
        "result": "Year, COUNT(*) as num_shows \nFROM concert \nGROUP BY Year \nORDER BY num_shows DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Which year has most number of shows? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the time that had the most shows?",
        "result": "strftime('%Y-%m', concert.Year) AS month_year, COUNT(*) AS num_shows\nFROM concert\nGROUP BY month_year\nORDER BY num_shows DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the time that had the most shows? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "Show the stadium names without any shows.",
        "result": "stadium.Name\nFROM stadium\nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nWHERE concert.concert_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the stadium names without any shows. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
        "question": "What are the names of the stadiums without any shows?",
        "result": "stadium.Name \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nWHERE concert.concert_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the stadiums without any shows? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
        "question": "Show States where a singer above age 40 and a singer below 30 are from.",
        "result": "s1.Country AS Above_40_Country, s2.Country AS Below_30_Country\nFROM singer s1, singer s2\nWHERE s1.Age > 40 AND s2.Age < 30",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show States where a singer above age 40 and a singer below 30 are from. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "Show names for all stadiums except for stadiums having a shows in year 2014.",
        "result": "Name FROM stadium \nWHERE Stadium_ID NOT IN \n(SELECT Stadium_ID FROM concert WHERE Year = 2014);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show names for all stadiums except for stadiums having a shows in year 2014. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
        "question": "What are the names of all stadiums that did not have a shows in 2014?",
        "result": "Name \nFROM stadium \nWHERE Stadium_ID NOT IN \n(SELECT Stadium_ID FROM concert WHERE Year=2014)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of all stadiums that did not have a shows in 2014? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "Show the name and theme for all shows and the number of vocalists in each shows.",
        "result": "concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID)\nFROM concert\nLEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Show the name and theme for all shows and the number of vocalists in each shows. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "question": "What are the names, themes, and number of singers for each and every show?",
        "result": "concert_Name, Theme, COUNT(Singer_ID) \nFROM concert \nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID \nGROUP BY concert.concert_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names, themes, and number of singers for each and every show? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "List singer names and number of shows for each musicians.",
        "result": "singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_shows \nFROM singer \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nGROUP BY singer.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List singer names and number of shows for each musicians. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "question": "What are the names of the singers and number of shows for each person?",
        "result": "singer.Name, COUNT(singer_in_concert.Singer_ID) AS Num_Shows\nFROM singer\nINNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the singers and number of shows for each person? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "List all vocalist names in shows in year 2014.",
        "result": "singer.Name \nFROM \nsinger \nJOIN \nsinger_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN \nconcert ON concert.concert_ID = singer_in_concert.concert_ID \nWHERE \nconcert.Year = 2014 AND singer.Is_male = 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### List all vocalist names in shows in year 2014. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "question": "What are the names of the musicians who performed in a musical performance in 2014?",
        "result": "singer.Name \nFROM \nsinger \nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID \nJOIN concert ON singer_in_concert.concert_ID = concert.concert_ID \nWHERE \nconcert.Year = 2014;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names of the musicians who performed in a musical performance in 2014? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "what is the name and nation of the vocalist who have a song having 'Hey' in its title?",
        "result": "singer.Name, singer.Country \nFROM singer \nWHERE singer.Song_Name LIKE '%Hey%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### what is the name and nation of the vocalist who have a song having 'Hey' in its title? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "question": "What is the name and nationality of origin of every musicians who has a song with the word 'Hey' in its title?",
        "result": "singer.Name, singer.Country \nFROM singer \nWHERE singer.Song_Name LIKE '%Hey%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What is the name and nationality of origin of every musicians who has a song with the word 'Hey' in its title? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "Find the name and position of the stadiums which some musical performances happened in the years of both 2014 and 2015.",
        "result": "stadium.Name, stadium.Location\nFROM stadium\nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nWHERE concert.Year = 2014 AND concert.Stadium_ID IN \n  (SELECT concert.Stadium_ID FROM concert WHERE concert.Year = 2015);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Find the name and position of the stadiums which some musical performances happened in the years of both 2014 and 2015. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
        "question": "What are the names and addresses of the stadiums that had musical performances that occurred in both 2014 and 2015?",
        "result": "stadium.Name, stadium.Location\nFROM stadium\nINNER JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nINNER JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nINNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID\nWHERE concert.Year IN (2014, 2015)\nGROUP BY stadium.Name, stadium.Location\nHAVING COUNT(DISTINCT CASE WHEN concert.Year = 2014 THEN concert.concert_ID END) > 0\nAND COUNT(DISTINCT CASE WHEN concert.Year = 2015 THEN concert.concert_ID END) > 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the names and addresses of the stadiums that had musical performances that occurred in both 2014 and 2015? \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "Find the number of musical performances happened in the stadium with the highest number of seats.",
        "result": "COUNT(*) \nFROM concert \nWHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### Find the number of musical performances happened in the stadium with the highest number of seats. \n SELECT"
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id ORDER BY T2.Capacity DESC LIMIT 1",
        "question": "What are the number of musical performances that occurred in the stadium with the largest number of seats?",
        "result": "COUNT(*) \nFROM concert \nWHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)\n;# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)\n;# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)\n;# singer_in_concert(concert_ID,Singer_ID)\n.# \n ### What are the number of musical performances that occurred in the stadium with the largest number of seats? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "Find the number of animals who is heavier than 10.",
        "result": "COUNT(*) FROM Pets WHERE weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of animals who is heavier than 10. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM pets WHERE weight  >  10",
        "question": "How many animals heavier than 10?",
        "result": "COUNT(*) FROM Pets WHERE weight > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many animals heavier than 10? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the weight of the youngest puppy.",
        "result": "Pets.weight FROM Pets WHERE PetType = 'puppy' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the weight of the youngest puppy. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "How much does the youngest puppy weigh?",
        "result": "MIN(weight) FROM Pets WHERE PetType = 'puppy' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How much does the youngest puppy weigh? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "Find the maximum weight for each category of pet. List the maximum weight and pet category.",
        "result": "PetType, MAX(weight) FROM Pets GROUP BY PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the maximum weight for each category of pet. List the maximum weight and pet category. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "question": "List the maximum weight and category for each species of domestic animals.",
        "result": "Pets.PetType, MAX(Pets.weight) as Max_Weight\nFROM Pets\nWHERE Pets.PetType IN ('cat', 'dog', 'bird')\nGROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### List the maximum weight and category for each species of domestic animals. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "Find number of animals owned by students who are older than 20.",
        "result": "COUNT(Pets.PetID) \nFROM Pets \nINNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID \nINNER JOIN Student ON Student.StuID = Has_Pet.StuID \nWHERE Student.Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find number of animals owned by students who are older than 20. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "question": "How many animals are owned by students that have an age greater than 20?",
        "result": "COUNT(DISTINCT Has_Pet.PetID) \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Age > 20",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many animals are owned by students that have an age greater than 20? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "Find the number of puppies that are raised by female students (with gender F).",
        "result": "COUNT(*) \nFROM Has_Pet \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Pets.PetType = 'puppy' AND Student.Sex = 'F'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of puppies that are raised by female students (with gender F). \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "question": "How many puppies are raised by female students?",
        "result": "COUNT(*) \nFROM Pets \nWHERE PetType = 'puppy' \nAND PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Sex = 'female'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many puppies are raised by female students? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "Find the number of distinct species of domestic animals.",
        "result": "COUNT(DISTINCT PetType) FROM Pets WHERE PetType LIKE '%domestic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of distinct species of domestic animals. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(DISTINCT pettype) FROM pets",
        "question": "How many different species of animals are there?",
        "result": "COUNT(DISTINCT PetType) AS num_species\nFROM Pets",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### How many different species of animals are there? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "Find the given name of students who have kitten or puppy pet.",
        "result": "Student.Fname \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType IN ('kitten', 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the given name of students who have kitten or puppy pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "question": "What are the given names of every student who has a kitten or puppy as a pet?",
        "result": "Student.FName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType IN ('kitten', 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the given names of every student who has a kitten or puppy as a pet? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "Find the name of students who have both kitten and puppy pets.",
        "result": "LName, Fname \nFROM Student \nWHERE StuID IN (\n    SELECT StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE PetType = 'kitten'\n    INTERSECT\n    SELECT StuID \n    FROM Has_Pet \n    JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE PetType = 'puppy'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the name of students who have both kitten and puppy pets. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
        "question": "What are the students' given names who have both kittens and puppies as pets?",
        "result": "Student.Fname\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'kitten' AND Student.StuID IN \n(SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'puppy')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the students' given names who have both kittens and puppies as pets? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the major and age of students who do not have a kitten pet.",
        "result": "Student.Major, Student.Age \nFROM Student \nWHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='kitten')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the major and age of students who do not have a kitten pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What discipline is every student who does not own a kitten as a pet, and also how old are they?",
        "result": "Student.Major, Student.Age\nFROM Student\nWHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'kitten'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What discipline is every student who does not own a kitten as a pet, and also how old are they? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "Find the id of students who do not have a kitten pet.",
        "result": "Student.StuID \nFROM Student \nLEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nLEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType != 'kitten' OR Pets.PetType IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the id of students who do not have a kitten pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "question": "What are the ids of the students who do not own kittens as pets?",
        "result": "Student.StuID \nFROM Student \nWHERE Student.StuID NOT IN \n    (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID=Pets.PetID WHERE Pets.PetType='kitten');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the ids of the students who do not own kittens as pets? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "Find the given name and age of students who have a puppy but do not have a cat as a pet.",
        "result": "Student.Fname, Student.Age\nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'puppy' \nAND Student.StuID NOT IN \n    (SELECT Student.StuID \n    FROM Student \n    INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n    INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \n    WHERE Pets.PetType = 'cat')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the given name and age of students who have a puppy but do not have a cat as a pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "question": "What is the given name of every student who has a dog but does not have a kitten?",
        "result": "Student.Fname \nFROM \nStudent \nJOIN \nHas_Pet ON Student.StuID = Has_Pet.StuID \nJOIN \nPets ON Has_Pet.PetID = Pets.PetID \nWHERE \nPets.PetType = 'dog' AND Student.StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'kitten')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the given name of every student who has a dog but does not have a kitten? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "Find the category and weight of the youngest pet.",
        "result": "Pets.PetType, Pets.weight \n FROM Pets \n WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the category and weight of the youngest pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "question": "What species of animal is the youngest animal, and how much does it weigh?",
        "result": "Pets.PetType, Pets.weight\nFROM Pets\nWHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What species of animal is the youngest animal, and how much does it weigh? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "Find the id and weight of all animals whose age is older than 1.",
        "result": "Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the id and weight of all animals whose age is older than 1. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "question": "What is the id and weight of every animals who is older than 1?",
        "result": "Pets.PetID, Pets.weight \nFROM Pets \nWHERE Pets.pet_age > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id and weight of every animals who is older than 1? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average and maximum age for each species of animal.",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) \n FROM Pets \n GROUP BY Pets.PetType",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average and maximum age for each species of animal. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average and maximum age for each pet species?",
        "result": "Pets.PetType, AVG(Pets.pet_age), MAX(Pets.pet_age) \n FROM Pets \n GROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average and maximum age for each pet species? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "Find the average weight for each pet category.",
        "result": "PetType, AVG(weight)\n FROM Pets\n GROUP BY PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average weight for each pet category. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "question": "What is the average weight for each species of pet?",
        "result": "Pets.PetType, AVG(Pets.weight) \nFROM Pets \nGROUP BY Pets.PetType;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average weight for each species of pet? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "Find the given name and age of students who have a pet.",
        "result": "Student.FName, Student.Age\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the given name and age of students who have a pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "question": "What are the different given names and ages of the students who do have pets?",
        "result": "Student.Fname, Student.Age \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What are the different given names and ages of the students who do have pets? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "Find the id of the animals owned by student whose family name is 'Smith'.",
        "result": "Pets.PetID\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Student.LName = 'Smith'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the id of the animals owned by student whose family name is 'Smith'. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "question": "What is the id of the animals owned by the student whose family name is 'Smith'?",
        "result": "Pets.PetID \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.LName = 'Smith'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the id of the animals owned by the student whose family name is 'Smith'? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "Find the number of animals for each student who has any pet and student id.",
        "result": "Student.StuID, COUNT(Has_Pet.PetID) AS num_animals \n FROM Student \n INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \n INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \n GROUP BY Student.StuID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the number of animals for each student who has any pet and student id. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "question": "For students who have pets, how many animals does each student have?",
        "result": "Student.StuID, COUNT(Has_Pet.PetID) \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### For students who have pets, how many animals does each student have? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "Find the given name and gender of student who have more than one pet.",
        "result": "Student.FName, Student.Sex\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID\nHAVING COUNT(Has_Pet.PetID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the given name and gender of student who have more than one pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "question": "What is the given name and gender of the all the students who have more than one pet?",
        "result": "Student.Fname, Student.Sex \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nGROUP BY Student.StuID \nHAVING COUNT(Has_Pet.PetID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the given name and gender of the all the students who have more than one pet? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "Find the family name of the student who has a kitten that is age 3.",
        "result": "Student.LName \nFROM Student \nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nINNER JOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the family name of the student who has a kitten that is age 3. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "question": "What is the family name of the student who has a kitten that is 3 years old?",
        "result": "Student.LName \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Pets.PetType = 'kitten' AND Pets.pet_age = 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the family name of the student who has a kitten that is 3 years old? \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "Find the average age of students who do not have any pet.",
        "result": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### Find the average age of students who do not have any pet. \n SELECT"
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
        "question": "What is the average age for all students who do not own any pets?",
        "result": "AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)\n;# Has_Pet(StuID,PetID)\n;# Pets(PetID,PetType,pet_age,weight)\n.# \n ### What is the average age for all students who do not own any pets? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "How many continents are there?",
        "result": "COUNT(*) FROM continents;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many continents are there? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CONTINENTS;",
        "question": "What is the number of continents?",
        "result": "COUNT(*) FROM continents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of continents? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "How many States does each continent have? List the continent id, continent name and the number of nations.",
        "result": "continents.ContId, continents.Continent, COUNT(DISTINCT countries.CountryId) AS num_nations \n FROM continents \n INNER JOIN countries ON continents.ContId = countries.Continent \n GROUP BY continents.ContId",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many States does each continent have? List the continent id, continent name and the number of nations. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "question": "For each continent, list its id, name, and how many States it has?",
        "result": "continents.ContId, continents.Continent, COUNT(countries.CountryId) as NumStates \n FROM continents \n INNER JOIN countries ON continents.ContId = countries.Continent \n GROUP BY continents.ContId;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For each continent, list its id, name, and how many States it has? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many States are listed?",
        "result": "COUNT(*) FROM states;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many States are listed? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM COUNTRIES;",
        "question": "How many countries exist?",
        "result": "COUNT(*) FROM countries;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many countries exist? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "How many models does each car manufacturer produce? List manufacturer full name, id and the number.",
        "result": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels\n FROM car_makers\n JOIN model_list ON car_makers.Maker = model_list.Maker\n GROUP BY car_makers.Id, car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many models does each car manufacturer produce? List manufacturer full name, id and the number. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "question": "What is the full name of each car manufacturer, along with its id and how many models it produces?",
        "result": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) \nFROM car_makers \nJOIN model_list ON car_makers.Maker = model_list.Maker \nGROUP BY car_makers.Id, car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the full name of each car manufacturer, along with its id and how many models it produces? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "Which model of the vehicle has the minimum horsepower?",
        "result": "Model FROM model_list \nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model of the vehicle has the minimum horsepower? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "question": "What is the model of the vehicle with the smallest amount of power?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the model of the vehicle with the smallest amount of power? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "Find the model of the vehicle who is lighter than the average.",
        "result": "Model\nFROM cars_data\nWHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the model of the vehicle who is lighter than the average. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "question": "What is the model for the vehicle with a weight smaller than the average?",
        "result": "Model \nFROM car_names \nINNER JOIN cars_data \nON car_names.MakeId = cars_data.Id \nWHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the model for the vehicle with a weight smaller than the average? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "Find the name of the manufacturer that produced some vehicles in the year of 1970?",
        "result": "car_makers.Maker \nFROM car_makers \nINNER JOIN car_names ON car_makers.Id = car_names.MakeId \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE cars_data.Year = 1970;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the name of the manufacturer that produced some vehicles in the year of 1970? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "question": "What is the name of the different car manufacturers who produced a vehicle in 1970?",
        "result": "car_makers.Maker \nFROM car_makers \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Year = 1970",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of the different car manufacturers who produced a vehicle in 1970? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "Find the make and production time of the vehicles that were produced in the earliest year?",
        "result": "car_makers.Maker, cars_data.Year\nFROM car_makers\nJOIN car_names ON car_makers.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nWHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Find the make and production time of the vehicles that were produced in the earliest year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "question": "What is the manufacturer of the vehicle produced in the earliest year and what year was it?",
        "result": "car_makers.Maker, MIN(cars_data.Year)\nFROM car_makers\nJOIN car_names ON car_makers.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN cars_data ON model_list.ModelId = cars_data.Id\nGROUP BY car_makers.Maker\nORDER BY MIN(cars_data.Year) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the manufacturer of the vehicle produced in the earliest year and what year was it? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "Which distinct vehicle models are the produced after 1980?",
        "result": "DISTINCT Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinct vehicle models are the produced after 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "question": "What are the different models for the vehicles produced after 1980?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE cars_data.Year > 1980",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models for the vehicles produced after 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "How many car manufacturers are there in each continents? List the continent name and the count.",
        "result": "continents.Continent, COUNT(DISTINCT car_makers.Id)\n FROM continents\n JOIN countries ON continents.ContId = countries.Continent\n JOIN car_makers ON countries.CountryName = car_makers.Country\n GROUP BY continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many car manufacturers are there in each continents? List the continent name and the count. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "question": "What is the name of each continent and how many vehicle manufacturers are there in each one?",
        "result": "continents.Continent, COUNT(car_makers.Id) \nFROM continents \nJOIN countries ON continents.ContId = countries.Continent \nJOIN car_makers ON countries.CountryName = car_makers.Country \nGROUP BY continents.Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of each continent and how many vehicle manufacturers are there in each one? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "Which of the States has the most car manufacturers? List the State name.",
        "result": "countries.Continent\nFROM \ncountries\nINNER JOIN car_makers ON countries.CountryName = car_makers.Country\nGROUP BY \ncountries.Continent\nORDER BY \nCOUNT(car_makers.Id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which of the States has the most car manufacturers? List the State name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "question": "What is the name of the State with the most vehicle manufacturers?",
        "result": "car_makers.Country, COUNT(car_makers.Id) AS TotalMakers \n FROM car_makers \n GROUP BY car_makers.Country \n ORDER BY TotalMakers DESC \n LIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the name of the State with the most vehicle manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Count(*) ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "How many vehicle models are produced by each manufacturer? List the count and the manufacturer full name.",
        "result": "car_makers.FullName, COUNT(model_list.ModelId) AS NumOfModels\n FROM car_makers\n LEFT JOIN model_list ON car_makers.Id = model_list.Maker\n GROUP BY car_makers.Id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many vehicle models are produced by each manufacturer? List the count and the manufacturer full name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "question": "What is the number of vehicle models that are produced by each manufacturer and what is the id and full name of each manufacturer?",
        "result": "car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) \n FROM car_makers \n JOIN model_list ON car_makers.Maker = model_list.Maker \n GROUP BY car_makers.Id, car_makers.FullName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of vehicle models that are produced by each manufacturer and what is the id and full name of each manufacturer? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "What is the accelerate of the vehicle make amc hornet sportabout (sw)?",
        "result": "Accelerate \nFROM car_names \nINNER JOIN model_list ON car_names.Model = model_list.Model \nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE car_makers.FullName = 'AMC' AND model_list.Model = 'Hornet Sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the accelerate of the vehicle make amc hornet sportabout (sw)? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "question": "How much does the vehicle accelerate that makes out amc hornet sportabout (sw)?",
        "result": "Accelerate FROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON car_makers.Id = model_list.Maker \nWHERE car_makers.Maker = 'AMC' AND car_names.Make = 'Hornet Sportabout (sw)'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How much does the vehicle accelerate that makes out amc hornet sportabout (sw)? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "How many French car manufacturers are there?",
        "result": "COUNT(*) \nFROM car_makers \nWHERE Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many French car manufacturers are there? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "question": "What is the number of manufacturers of vehicle in France?",
        "result": "COUNT(DISTINCT car_makers.Id) \nFROM car_makers \nWHERE car_makers.Country = 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of manufacturers of vehicle in France? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "How many vehicle models are produced in the usa?",
        "result": "COUNT(*) \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many vehicle models are produced in the usa? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "question": "What is the count of the vehicle models produced in the United States?",
        "result": "COUNT(ModelId) \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.Country = 'United States'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the count of the vehicle models produced in the United States? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon(mpg) of the cars with 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "question": "What is the average miles per gallon of all the cars with 4 cylinders?",
        "result": "AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average miles per gallon of all the cars with 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974?",
        "result": "MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the smallest weight of the car produced with 8 cylinders on 1974? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;",
        "question": "What is the minimu weight of the car with 8 cylinders produced in 1974?",
        "result": "MIN(Weight) FROM cars_data WHERE Cylinders=8 AND Year=1974;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the minimu weight of the car with 8 cylinders produced in 1974? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are all the companies and models?",
        "result": "car_makers.Maker, model_list.Model \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are all the companies and models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "question": "What are the manufacturers and models?",
        "result": "car_makers.Maker, model_list.Model \nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the manufacturers and models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the States having at least one vehicle manufacturer? List name and id.",
        "result": "car_makers.Id, car_makers.Maker\nFROM car_makers\nINNER JOIN countries ON car_makers.Country = countries.CountryId\nGROUP BY countries.CountryName\nHAVING COUNT(DISTINCT car_makers.Maker) > 0",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the States having at least one vehicle manufacturer? List name and id. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "question": "What are the names and ids of all States with at least one vehicle manufacturer?",
        "result": "car_makers.Id, car_makers.Maker FROM car_makers\nINNER JOIN countries ON car_makers.Country = countries.CountryName",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all States with at least one vehicle manufacturer? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of the vehicle with power more than 150?",
        "result": "Id FROM cars_data WHERE Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of the vehicle with power more than 150? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "question": "What is the number of vehicles with a power greater than 150?",
        "result": "COUNT(*) FROM cars_data WHERE Horsepower > 150;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of vehicles with a power greater than 150? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight of vehicles each year?",
        "result": "Year, AVG(Weight) \nFROM cars_data \nGROUP BY Year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average weight of vehicles each year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "question": "What is the average weight and year for each year?",
        "result": "AVG(Weight), Year \n FROM cars_data \n GROUP BY Year;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average weight and year for each year? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "Which States in europe have at least 3 vehicle manufacturers?",
        "result": "countries.CountryName\nFROM countries\nJOIN car_makers ON countries.CountryName = car_makers.Country AND countries.Continent = 'Europe'\nGROUP BY countries.CountryName\nHAVING COUNT(DISTINCT car_makers.Maker) >= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which States in europe have at least 3 vehicle manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "question": "What are the names of all European States with at least 3 manufacturers?",
        "result": "countries.CountryName \nFROM countries \nINNER JOIN car_makers ON countries.CountryName = car_makers.Country \nWHERE countries.Continent = 'Europe' \nGROUP BY countries.CountryName \nHAVING COUNT(DISTINCT car_makers.Maker) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names of all European States with at least 3 manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the maximum power and the manufacturer of the vehicle models with 3 cylinders?",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \nFROM car_makers \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE cars_data.Cylinders = 3 \nGROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum power and the manufacturer of the vehicle models with 3 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "What is the largest amount of power for the models with 3 cylinders and what manufacturer is it?",
        "result": "car_makers.Maker, MAX(cars_data.Horsepower) \n FROM car_makers \n JOIN model_list ON car_makers.Id = model_list.Id \n JOIN car_names ON model_list.ModelId = car_names.Model \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Cylinders = 3 \n GROUP BY car_makers.Maker",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the largest amount of power for the models with 3 cylinders and what manufacturer is it? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "result": "model_list.Model, cars_data.MPG\n FROM model_list\n JOIN car_names ON model_list.ModelId = car_names.Model\n JOIN cars_data ON car_names.MakeId = cars_data.Id\n ORDER BY cars_data.MPG DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model saves the most gasoline? That is to say, have the maximum miles per gallon. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "question": "What is the automobile model with the highest mpg?",
        "result": "model_list.Model \nFROM model_list \nJOIN car_names ON model_list.ModelId = car_names.Model \nJOIN cars_data ON car_names.MakeId = cars_data.Id \nORDER BY cars_data.MPG DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the automobile model with the highest mpg? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average power of the automobile before 1980?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average power of the automobile before 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "question": "What is the average power for all automobiles produced before 1980?",
        "result": "AVG(Horsepower) FROM cars_data WHERE Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average power for all automobiles produced before 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl of the automobile of model volvo?",
        "result": "AVG(Edispl) FROM cars_data\nWHERE Id IN (\n    SELECT Id FROM car_names\n    WHERE MakeId IN (\n        SELECT Id FROM car_makers\n        WHERE Maker = 'volvo'\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average edispl of the automobile of model volvo? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "question": "What is the average edispl for all volvos?",
        "result": "AVG(Edispl) FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nWHERE car_makers.FullName LIKE '%Volvo%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the average edispl for all volvos? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for different number of cylinders?",
        "result": "Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for different number of cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "question": "What is the maximum accelerate for all the different cylinders?",
        "result": "Cylinders, MAX(Accelerate) \n FROM cars_data \n GROUP BY Cylinders;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum accelerate for all the different cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which model has the most version(make) of automobiles?",
        "result": "Model, COUNT(DISTINCT MakeId) AS NumVersions\n FROM car_names\n GROUP BY Model\n ORDER BY NumVersions DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which model has the most version(make) of automobiles? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "question": "What model has the most different versions?",
        "result": "Model, COUNT(DISTINCT MakeId) AS NumVersions\nFROM car_names\nGROUP BY Model\nORDER BY NumVersions DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What model has the most different versions? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "How many vehicles have more than 4 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many vehicles have more than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "question": "What is the number of vehicles with more than 4 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of vehicles with more than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "how many automobiles were produced in 1980?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### how many automobiles were produced in 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "question": "In 1980, how many automobiles were made?",
        "result": "COUNT(*) FROM cars_data WHERE Year = 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### In 1980, how many automobiles were made? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "How many automobile models were produced by the manufacturer with full name American Motor Company?",
        "result": "COUNT(model_list.ModelId) \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nWHERE car_makers.FullName = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many automobile models were produced by the manufacturer with full name American Motor Company? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "question": "What is the number of automobile models created by the car manufacturer American Motor Company?",
        "result": "COUNT(*) FROM model_list \nWHERE Maker = 'American Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of automobile models created by the car manufacturer American Motor Company? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which manufacturers designed more than 3 vehicle models? List full name and the id.",
        "result": "car_makers.Id, car_makers.FullName \n FROM car_makers \n INNER JOIN model_list ON car_makers.Maker = model_list.Maker \n GROUP BY car_makers.Id \n HAVING COUNT(DISTINCT model_list.ModelId) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which manufacturers designed more than 3 vehicle models? List full name and the id. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the names and ids of all manufacturers with more than 3 models?",
        "result": "car_makers.Id, car_makers.Maker \n FROM car_makers \n INNER JOIN model_list ON car_makers.Id = model_list.Maker \n GROUP BY car_makers.Id \n HAVING COUNT(model_list.ModelId) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names and ids of all manufacturers with more than 3 models? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "Which distinctive types are produced by manufacturer with the full name General Motors or weighing more than 3500?",
        "result": "DISTINCT cars_data.Model\nFROM car_makers \nINNER JOIN model_list ON car_makers.Id = model_list.Maker\nINNER JOIN car_names ON model_list.ModelId = car_names.Model \nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id \nWHERE car_makers.FullName = \"General Motors\" OR cars_data.Weight > 3500;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which distinctive types are produced by manufacturer with the full name General Motors or weighing more than 3500? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "question": "What are the different models created by either the car manufacturer General Motors or weighed more than 3500?",
        "result": "model_list.Model \nFROM model_list \nINNER JOIN car_makers ON model_list.Maker = car_makers.Maker \nINNER JOIN cars_data ON car_makers.Id = cars_data.Id \nWHERE (car_makers.FullName LIKE '%General Motors%') OR (cars_data.Weight > 3500)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models created by either the car manufacturer General Motors or weighed more than 3500? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "In which years automobiles were produced weighing no less than 3000 and no more than 4000?",
        "result": "Year \nFROM cars_data \nWHERE Weight >= 3000 AND Weight <= 4000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### In which years automobiles were produced weighing no less than 3000 and no more than 4000? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;",
        "question": "What are the different years in which there were vehicles produced that weighed less than 4000 and also vehicles that weighted more than 3000?",
        "result": "Year \nFROM cars_data \nWHERE Weight < 4000 \nINTERSECT \nSELECT Year \nFROM cars_data \nWHERE Weight > 3000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different years in which there were vehicles produced that weighed less than 4000 and also vehicles that weighted more than 3000? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the power of the automobile with the largest accelerate?",
        "result": "MAX(Horsepower) FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the power of the automobile with the largest accelerate? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "question": "What is the power of the automobile with the greatest accelerate?",
        "result": "Horsepower \nFROM cars_data \nWHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the power of the automobile with the greatest accelerate? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For model volvo, how many cylinders does the automobile with the least accelerate have?",
        "result": "MIN(Cylinders) FROM cars_data \nWHERE Id IN (\n  SELECT Id FROM car_names \n  WHERE ModelId IN (\n    SELECT ModelId FROM model_list \n    WHERE Maker = 'volvo'\n  )\n) AND Accelerate = (\n  SELECT MIN(Accelerate) FROM cars_data \n  WHERE Id IN (\n    SELECT Id FROM car_names \n    WHERE ModelId IN (\n      SELECT ModelId FROM model_list \n      WHERE Maker = 'volvo'\n    )\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For model volvo, how many cylinders does the automobile with the least accelerate have? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT count(cylinders) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "result": "MIN(Cylinders) FROM cars_data \nWHERE Id IN \n  (SELECT Id FROM car_names \n   WHERE Model IN \n    (SELECT Model FROM model_list \n     WHERE Maker = 'volvo')) \nAND Accelerate = (SELECT MIN(Accelerate) FROM cars_data \n                  WHERE Id IN \n                    (SELECT Id FROM car_names \n                     WHERE Model IN \n                      (SELECT Model FROM model_list \n                       WHERE Maker = 'volvo')));",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For a volvo model, how many cylinders does the version with least accelerate have? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "How many automobiles have a larger accelerate than the automobile with the largest power?",
        "result": "COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many automobiles have a larger accelerate than the automobile with the largest power? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "question": "What is the number of automobiles with a greater accelerate than the one with the most power?",
        "result": "COUNT(*) FROM cars_data \nWHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of automobiles with a greater accelerate than the one with the most power? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "How many States has more than 2 car manufacturers?",
        "result": "COUNT(DISTINCT CountryName) \nFROM countries \nWHERE CountryId IN (\n    SELECT Country \n    FROM car_makers \n    GROUP BY Country \n    HAVING COUNT(DISTINCT Maker) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many States has more than 2 car manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );",
        "question": "What is the number of States with more than 2 car manufacturers?",
        "result": "COUNT(DISTINCT CountryName) FROM countries\nWHERE CountryId IN \n(SELECT Country FROM car_makers\nGROUP BY Country\nHAVING COUNT(DISTINCT Maker) > 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of States with more than 2 car manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "How many automobiles has over 6 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### How many automobiles has over 6 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "question": "What is the number of automobiles with over 6 cylinders?",
        "result": "COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the number of automobiles with over 6 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For the automobiles with 4 cylinders, which model has the largest power?",
        "result": "model_list.Model \nFROM \n    model_list \n    INNER JOIN cars_data ON model_list.ModelId = cars_data.Id \nWHERE \n    cars_data.Cylinders = 4 \nORDER BY \n    cars_data.Horsepower DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For the automobiles with 4 cylinders, which model has the largest power? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "question": "For all of the 4 cylinder automobiles, which model has the most power?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Cylinders = 4\nORDER BY cars_data.Horsepower DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### For all of the 4 cylinder automobiles, which model has the most power? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "question": "Among the automobiles with more than lowest power, which ones do not have more than 3 cylinders? List the vehicle makeid and manufacturer name.",
        "result": "car_names.MakeId, car_makers.Maker \n FROM car_names \n JOIN model_list ON car_names.Model = model_list.Model \n JOIN car_makers ON car_makers.Id = model_list.Maker \n JOIN cars_data ON car_names.MakeId = cars_data.Id \n WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) \n AND cars_data.Cylinders <= 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Among the automobiles with more than lowest power, which ones do not have more than 3 cylinders? List the vehicle makeid and manufacturer name. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <  4;",
        "question": "Among the automobiles that do not have the minimum power, what are the manufacturer ids and names of al those with less than 4 cylinders?",
        "result": "car_makers.Id, car_makers.Maker\n FROM car_makers \n JOIN car_names ON car_makers.Id = car_names.MakeId\n JOIN model_list ON car_names.Model = model_list.Model\n JOIN cars_data ON model_list.ModelId = cars_data.Id\n WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Among the automobiles that do not have the minimum power, what are the manufacturer ids and names of al those with less than 4 cylinders? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum miles per gallon of the automobile with 8 cylinders or produced before 1980?",
        "result": "MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum miles per gallon of the automobile with 8 cylinders or produced before 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;",
        "question": "What is the maximum mpg of the automobiles that had 8 cylinders or that were produced before 1980?",
        "result": "MAX(MPG) FROM cars_data WHERE (Cylinders=8 OR Year<1980);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What is the maximum mpg of the automobiles that had 8 cylinders or that were produced before 1980? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "result": "model_list.Model\nFROM model_list\nINNER JOIN car_names ON model_list.ModelId = car_names.Model\nINNER JOIN car_makers ON car_names.MakeId = car_makers.Id\nINNER JOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which models are lighter than 3500 but not built by the 'Ford Motor Company'? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "result": "model_list.Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Maker\nJOIN car_names ON car_makers.Id = car_names.MakeId\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'Ford Motor Company'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the name of the States where there is not a single automobile maker?",
        "result": "countries.CountryName \nFROM countries \nWHERE countries.CountryId NOT IN \n    (SELECT car_makers.Country \n     FROM car_makers)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the name of the States where there is not a single automobile maker? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "question": "What are the names of the States with no vehicle manufacturers?",
        "result": "countries.CountryName\nFROM countries\nLEFT JOIN car_makers ON countries.CountryName = car_makers.Country\nWHERE car_makers.Id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the names of the States with no vehicle manufacturers? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "Which are the automobile manufacturers which produce at least 2 models and more than 3 automobile manufacturers? List the id and the manufacturer.",
        "result": "car_makers.Id, car_makers.Maker\n FROM car_makers\n INNER JOIN model_list ON car_makers.Maker = model_list.Maker\n GROUP BY car_makers.Id, car_makers.Maker\n HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_makers.Id) > 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### Which are the automobile manufacturers which produce at least 2 models and more than 3 automobile manufacturers? List the id and the manufacturer. \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "question": "What are the ids and manufacturers of all automobile manufacturers that produce at least 2 models and make more than 3 automobiles?",
        "result": "car_makers.Id, car_makers.Maker \n FROM car_makers \n INNER JOIN model_list ON car_makers.Maker = model_list.Maker \n GROUP BY car_makers.Id, car_makers.Maker \n HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(DISTINCT car_names.MakeId) > 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the ids and manufacturers of all automobile manufacturers that produce at least 2 models and make more than 3 automobiles? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the id and names of the nations which have more than 3 vehicle manufacturers or produce the 'fiat' model?",
        "result": "\n\ncountries.CountryId, countries.CountryName \nFROM countries \nINNER JOIN car_makers ON countries.CountryName = car_makers.Country \nINNER JOIN model_list ON car_makers.Maker = model_list.Maker \nWHERE car_makers.Maker = 'fiat' OR countries.CountryId IN (SELECT countries.CountryId FROM countries INNER JOIN car_makers ON countries.CountryName = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(DISTINCT car_makers.Id) > 3)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the id and names of the nations which have more than 3 vehicle manufacturers or produce the 'fiat' model? \n SELECT"
    },
    {
        "db_id": "car_1",
        "query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "question": "What are the ids and names of all States that either have more than 3 automobile manufacturers or produce fiats?",
        "result": "StateId, StateName FROM states \nWHERE StateId IN (\n   SELECT StateId FROM automobile_manufacturers \n   GROUP BY StateId \n   HAVING COUNT(DISTINCT Maker) > 3\n) OR StateName IN (\n   SELECT StateName FROM automobile_production \n   WHERE Make = 'Fiat'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# continents(ContId,Continent)\n;# countries(CountryId,CountryName,Continent)\n;# car_makers(Id,Maker,FullName,Country)\n;# model_list(ModelId,Maker,Model)\n;# car_names(MakeId,Model,Make)\n;# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)\n.# \n ### What are the ids and names of all States that either have more than 3 automobile manufacturers or produce fiats? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which State does Airways \"JetBlue Airways\" belong to?",
        "result": "Country \nFROM airlines \nWHERE Airline = \"JetBlue Airways\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which State does Airways \"JetBlue Airways\" belong to? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What State is Jetblue Airways affiliated with?",
        "result": "airlines.Country \nFROM airlines \nWHERE airlines.Airline = 'Jetblue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What State is Jetblue Airways affiliated with? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "What is the shortened word of Airline \"JetBlue Airways\"?",
        "result": "Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the shortened word of Airline \"JetBlue Airways\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "question": "Which shortened word corresponds to Jetblue Airways?",
        "result": "Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which shortened word corresponds to Jetblue Airways? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "List all airway names and their shortened word in \"USA\".",
        "result": "Airline, Abbreviation \nFROM airlines \nWHERE CountryAbbrev = \"USA\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List all airway names and their shortened word in \"USA\". \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "What are the airway names and shortened words for airways in the USA?",
        "result": "Airline, Abbreviation FROM airlines \nWHERE Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the airway names and shortened words for airways in the USA? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "List the airport code and name in the city of Anthony.",
        "result": "AirportCode, AirportName FROM airports WHERE City='Anthony';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### List the airport code and name in the city of Anthony. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "result": "AirportCode, AirportName \nFROM airports \nWHERE City = 'Anthony'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airport code and airport name corresonding to the city Anthony. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "How many airways do we have?",
        "result": "COUNT(*) FROM airlines;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airways do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES",
        "question": "What is the total amount of airways?",
        "result": "COUNT(*) FROM airlines",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the total amount of airways? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "How many aerodromes do we have?",
        "result": "COUNT(DISTINCT AirportCode) FROM airports;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many aerodromes do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRPORTS",
        "question": "Return the number of  aerodromes.",
        "result": "COUNT(DISTINCT AirportCode) FROM airports;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of  aerodromes. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "How many flights do we have?",
        "result": "COUNT(*) FROM flights;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights do we have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS",
        "question": "Return the number of flights.",
        "result": "COUNT(*) FROM flights;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Which airway can be shortened as word 'UAL'?",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airway can be shortened as word 'UAL'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "question": "Give the airway with abbreviation 'UAL'.",
        "result": "Airline \nFROM airlines \nWHERE Abbreviation = 'UAL';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the airway with abbreviation 'UAL'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "How many airways are from USA?",
        "result": "COUNT(*) \nFROM airlines \nWHERE Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many airways are from USA? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "question": "Return the number of airways in the USA.",
        "result": "COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of airways in the USA. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Which town and State is the Alton airport at?",
        "result": "City, Country FROM airports WHERE AirportCode = 'Alton';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which town and State is the Alton airport at? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "question": "Give the town and State for the Alton airport.",
        "result": "City, Country FROM airports\nWHERE AirportCode = 'Alton';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the town and State for the Alton airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "What is the aerodrome name for airport 'AKO'?",
        "result": "AirportName \nFROM airports \nWHERE AirportCode = 'AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the aerodrome name for airport 'AKO'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "question": "Return the name of the aerodrome with code 'AKO'.",
        "result": "AirportName\nFROM airports\nWHERE AirportCode = 'AKO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the name of the aerodrome with code 'AKO'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are aerodrome names at town 'Aberdeen'?",
        "result": "AirportName FROM airports WHERE City='Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are aerodrome names at town 'Aberdeen'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "question": "What are the names of aerodrome in Aberdeen?",
        "result": "AirportName FROM airports WHERE City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are the names of aerodrome in Aberdeen? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "How many flights depart from 'APG'?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from 'APG'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Count the amount of flights departing from 'APG'.",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the amount of flights departing from 'APG'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "How many flights have terminal ATO?",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO' OR SourceAirport = 'ATO';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights have terminal ATO? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "question": "Count the number of flights into ATO.",
        "result": "COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of flights into ATO. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City Aberdeen?",
        "result": "COUNT(*) FROM flights \nWHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City='Aberdeen')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from City Aberdeen? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights departing from Aberdeen.",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights departing from Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "How many flights arriving in Aberdeen city?",
        "result": "COUNT(*) FROM flights \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights arriving in Aberdeen city? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Return the number of flights arriving in Aberdeen.",
        "result": "COUNT(*) FROM flights \nWHERE DestAirport = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of flights arriving in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "result": "COUNT(*) FROM flights\nWHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "question": "How many flights fly from Aberdeen to Ashley?",
        "result": "COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights fly from Aberdeen to Ashley? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "How many flights does airway 'JetBlue Airways' have?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'JetBlue Airways';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights does airway 'JetBlue Airways' have? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "question": "Give the number of Jetblue Airways flights.",
        "result": "COUNT(*) FROM flights WHERE Airline='Jetblue Airways'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the number of Jetblue Airways flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'United Airlines' AND DestAirport = 'ASY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many 'United Airlines' flights go to Airport 'ASY'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'United Airlines' AND DestAirport = 'ASY';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of United Airlines flights arriving in ASY Airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "How many 'United Airlines' flights leave from Airport 'AHD'?",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many 'United Airlines' flights leave from Airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "result": "COUNT(*) FROM flights \nWHERE Airline = 'United Airlines' AND SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Return the number of United Airlines flights leaving from AHD Airport. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "result": "COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.Abbreviation \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many United Airlines flights go to City 'Aberdeen'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "result": "COUNT(*) \nFROM flights \nWHERE Airline = 'United Airlines' AND DestAirport = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Count the number of United Airlines flights that arrive in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town has most number of arriving flights?",
        "result": "airports.City \nFROM airports \nINNER JOIN flights ON airports.AirportCode = flights.DestAirport \nGROUP BY airports.City \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which town has most number of arriving flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town has the most frequent terminal aerodrome?",
        "result": "airports.City\nFROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport\nGROUP BY airports.City\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which town has the most frequent terminal aerodrome? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town has most number of departing flights?",
        "result": "flights.SourceAirport, COUNT(*) as num_flights\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nGROUP BY flights.SourceAirport\nORDER BY num_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which town has most number of departing flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "question": "Which town is the most frequent source aerodrome?",
        "result": "SourceAirport, COUNT(*) AS num_flights\nFROM flights\nGROUP BY SourceAirport\nORDER BY num_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which town is the most frequent source aerodrome? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the code of aerodrome that has the highest number of flights?",
        "result": "flights.SourceAirport, COUNT(*) AS num_flights\nFROM flights\nGROUP BY flights.SourceAirport\nORDER BY num_flights DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the code of aerodrome that has the highest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the aerodrome code of the aerodrome with the most flights?",
        "result": "DestAirport \nFROM flights \nGROUP BY DestAirport \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the aerodrome code of the aerodrome with the most flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "What is the code of aerodrome that has fewest number of flights?",
        "result": "AirportCode\nFROM airports\nWHERE AirportCode NOT IN (\n    SELECT SourceAirport FROM flights\n    UNION ALL\n    SELECT DestAirport FROM flights\n)\nORDER BY RANDOM()\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the code of aerodrome that has fewest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "question": "Give the code of the aerodrome with the least flights.",
        "result": "AirportCode FROM airports\nWHERE AirportCode NOT IN (\n  SELECT SourceAirport FROM flights\n  UNION ALL\n  SELECT DestAirport FROM flights\n)\nORDER BY AirportCode ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the code of the aerodrome with the least flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "Which airway has most number of flights?",
        "result": "Airline, COUNT(*) AS FlightCount\nFROM flights\nGROUP BY Airline\nORDER BY FlightCount DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airway has most number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "question": "What airway serves the most flights?",
        "result": "Airline, COUNT(*) AS FlightCount \nFROM flights \nGROUP BY Airline \nORDER BY FlightCount DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What airway serves the most flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "Find the shortened word and State of the airway that has fewest number of flights?",
        "result": "Abbreviation, Country FROM airlines \n WHERE uid = (\n  SELECT Airline FROM flights \n  GROUP BY Airline \n  ORDER BY COUNT(*) ASC \n  LIMIT 1\n );",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the shortened word and State of the airway that has fewest number of flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "question": "What is the shortened word of the airway has the fewest flights and what State is it in?",
        "result": "Abbreviation, Country \n FROM airlines \n WHERE uid IN (\n  SELECT Airline \n  FROM flights \n  GROUP BY Airline \n  HAVING COUNT(*) = (\n   SELECT MIN(FlightCount) \n   FROM (\n    SELECT COUNT(*) as FlightCount \n    FROM flights \n    GROUP BY Airline\n   )\n  )\n ) \n ORDER BY Abbreviation ASC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What is the shortened word of the airway has the fewest flights and what State is it in? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "What are airways that have some flight departing from aerodrome 'AHD'?",
        "result": "airlines.Airline \nFROM \nairlines \nINNER JOIN \nflights ON airlines.Abbreviation = flights.Airline \nINNER JOIN \nairports ON flights.SourceAirport = airports.AirportCode \nWHERE \nairports.AirportName = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airways that have some flight departing from aerodrome 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "question": "Which airways have a flight with source airport AHD?",
        "result": "Airline FROM flights WHERE SourceAirport = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airways have a flight with source airport AHD? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "What are airways that have flights arriving at airport 'AHD'?",
        "result": "airlines.Airline\nFROM airlines\nJOIN flights ON airlines.Abbreviation = flights.Airline\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = 'AHD';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are airways that have flights arriving at airport 'AHD'? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "question": "Which airways have a flight with terminal airport AHD?",
        "result": "airlines.Airline\nFROM airlines\nJOIN flights ON airlines.Airline = flights.Airline\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = 'AHD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airways have a flight with terminal airport AHD? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Find all airways that have flights from both aerodromes 'APG' and 'CVO'.",
        "result": "Airline FROM flights WHERE SourceAirport='APG' AND DestAirport='CVO'\nINTERSECT\nSELECT Airline FROM flights WHERE SourceAirport='CVO' AND DestAirport='APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airways that have flights from both aerodromes 'APG' and 'CVO'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
        "question": "Which airways have departing flights from both APG and CVO aerodromes?",
        "result": "Airline FROM flights WHERE SourceAirport = 'APG' AND Airline IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airways have departing flights from both APG and CVO aerodromes? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Find all airways that have flights from airport 'CVO' but not from 'APG'.",
        "result": "airlines.Airline \nFROM airlines \nJOIN flights ON airlines.Airline = flights.Airline \nWHERE flights.SourceAirport = 'CVO' \nAND airlines.Airline NOT IN (SELECT airlines.Airline \n                              FROM airlines \n                              JOIN flights ON airlines.Airline = flights.Airline \n                              WHERE flights.SourceAirport = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airways that have flights from airport 'CVO' but not from 'APG'. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
        "question": "Which airways have departures from CVO but not from APG airports?",
        "result": "Airline \nFROM flights \nWHERE SourceAirport = 'CVO' \nAND Airline NOT IN \n(SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airways have departures from CVO but not from APG airports? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Find all airways that have at least 10 flights.",
        "result": "Airline\nFROM flights\nGROUP BY Airline\nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airways that have at least 10 flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "question": "Which airways have at least 10 flights?",
        "result": "Airline\nFROM flights\nGROUP BY Airline\nHAVING COUNT(*) >= 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airways have at least 10 flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Find all airways that have fewer than 200 flights.",
        "result": "Airline \nFROM flights \nGROUP BY Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find all airways that have fewer than 200 flights. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "question": "Which airways have less than 200 flights?",
        "result": "Airline \nFROM flights \nGROUP BY Airline \nHAVING COUNT(*) < 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which airways have less than 200 flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "What are flight codes of airway \"United Airlines\"?",
        "result": "FlightNo \nFROM \nflights \nWHERE \nAirline = \"United Airlines\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight codes of airway \"United Airlines\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "question": "Which flight codes correspond to United Airlines flights?",
        "result": "FlightNo \nFROM \nflights \nWHERE \nAirline = 'United Airlines'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which flight codes correspond to United Airlines flights? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "What are flight codes of flights departing from Airport \"APG\"?",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight codes of flights departing from Airport \"APG\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "question": "Give the flight codes of flights leaving from APG.",
        "result": "FlightNo \nFROM flights \nWHERE SourceAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight codes of flights leaving from APG. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "What are flight codes of flights arriving at Airport \"APG\"?",
        "result": "flights.FlightNo FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = \"APG\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight codes of flights arriving at Airport \"APG\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "question": "Give the flight codes of flights landing at APG.",
        "result": "FlightNo \nFROM flights \nWHERE DestAirport = 'APG'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight codes of flights landing at APG. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight codes of flights departing from City \"Aberdeen \"?",
        "result": "flights.FlightNo \nFROM flights \nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = \"Aberdeen\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight codes of flights departing from City \"Aberdeen \"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight codes of flights leaving from Aberdeen.",
        "result": "flights.FlightNo\nFROM flights\nINNER JOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight codes of flights leaving from Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "What are flight codes of flights arriving in City \"Aberdeen\"?",
        "result": "flights.FlightNo \nFROM \nflights \nINNER JOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE \nairports.City = 'Aberdeen';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### What are flight codes of flights arriving in City \"Aberdeen\"? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "question": "Give the flight codes of flights arriving in Aberdeen.",
        "result": "flights.FlightNo \nFROM flights \nJOIN airports \nON flights.DestAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Give the flight codes of flights arriving in Aberdeen. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "Find the code of flights landing in the city of Aberdeen or Abilene.",
        "result": "flights.FlightNo, flights.DestAirport \nFROM flights \nINNER JOIN airports \nON flights.DestAirport = airports.AirportCode \nWHERE airports.City IN ('Aberdeen', 'Abilene')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the code of flights landing in the city of Aberdeen or Abilene. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "question": "How many flights land in Aberdeen or Abilene?",
        "result": "COUNT(*) FROM flights\nWHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### How many flights land in Aberdeen or Abilene? \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Find the name of aerodromes which do not have any flight in and out.",
        "result": "Airports.AirportName \nFROM Airports \nLEFT JOIN Flights ON Airports.AirportCode = Flights.SourceAirport OR Airports.AirportCode = Flights.DestAirport \nWHERE Flights.SourceAirport IS NULL AND Flights.DestAirport IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Find the name of aerodromes which do not have any flight in and out. \n SELECT"
    },
    {
        "db_id": "flight_2",
        "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "question": "Which aerodromes do not have leaving or arriving flights?",
        "result": "airports.AirportCode, airports.AirportName \nFROM airports \nLEFT JOIN flights \nON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport \nWHERE flights.Airline IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# airlines(uid,Airline,Abbreviation,Country)\n;# airports(City,AirportCode,AirportName,Country,CountryAbbrev)\n;# flights(Airline,FlightNo,SourceAirport,DestAirport)\n.# \n ### Which aerodromes do not have leaving or arriving flights? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "How many workers are there?",
        "result": "COUNT(*) FROM employee",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### How many workers are there? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) FROM employee",
        "question": "Count the number of staffs",
        "result": "COUNT(Employee_ID) FROM employee",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of staffs \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "Sort worker names by their age in ascending order.",
        "result": "Name \nFROM employee \nORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Sort worker names by their age in ascending order. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee ORDER BY age",
        "question": "List the names of workers and sort in ascending order of age.",
        "result": "Name FROM employee ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### List the names of workers and sort in ascending order of age. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "What is the number of workers from each town?",
        "result": "City, COUNT(*) \nFROM employee \nGROUP BY City",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What is the number of workers from each town? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "question": "Count the number of staffs for each town.",
        "result": "City, COUNT(Employee_ID) \n FROM employee\n GROUP BY City;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of staffs for each town. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Which towns do more than one staff under age 30 come from?",
        "result": "employee.City \nFROM employee \nWHERE employee.Age < 30 \nGROUP BY employee.City \nHAVING COUNT(employee.Employee_ID) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which towns do more than one staff under age 30 come from? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "question": "Find the towns that have more than one worker under age 30.",
        "result": "City \nFROM employee \nWHERE Age < 30 \nGROUP BY City \nHAVING COUNT(*) > 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the towns that have more than one worker under age 30. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "Find the number of shops in each city.",
        "result": "City, COUNT(DISTINCT Shop_ID) \n FROM employee \n JOIN hiring ON employee.Employee_ID = hiring.Employee_ID \n JOIN shop ON shop.Shop_ID = hiring.Shop_ID \n GROUP BY City",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the number of shops in each city. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "question": "How many stores are there in each city?",
        "result": "City, COUNT(DISTINCT Shop_ID) FROM shop GROUP BY City;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### How many stores are there in each city? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "Find the head name and district of the shop whose number of commodities is the largest.",
        "result": "shop.Name, shop.District\nFROM shop\nWHERE shop.Number_products = (\n    SELECT MAX(Number_products) \n    FROM shop\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the head name and district of the shop whose number of commodities is the largest. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "question": "What are the director name and district of the market that sells the largest number of goods?",
        "result": "shop.Manager_name, shop.District \nFROM shop \nWHERE shop.Number_products = (SELECT MAX(Number_products) FROM shop)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What are the director name and district of the market that sells the largest number of goods? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "find the minimum and maximum number of merchandises of all stores.",
        "result": "MIN(Number_products), MAX(Number_products) FROM shop",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the minimum and maximum number of merchandises of all stores. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "question": "What are the minimum and maximum number of goods across all the stores?",
        "result": "MIN(Number_products), MAX(Number_products) FROM shop;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What are the minimum and maximum number of goods across all the stores? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Return the name, city and district of all markets in descending order of number of commodities.",
        "result": "shop.Name, employee.City, shop.District\nFROM shop\nINNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nINNER JOIN employee ON hiring.Employee_ID = employee.Employee_ID\nORDER BY shop.Number_products DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Return the name, city and district of all markets in descending order of number of commodities. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "question": "Sort all the stores by number merchandises in descending order, and return the name, city and district of each store.",
        "result": "shop.Name, shop.Location, shop.District\nFROM shop\nORDER BY shop.Number_products DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Sort all the stores by number merchandises in descending order, and return the name, city and district of each store. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Find the names of stores whose number merchandises is more than the average number of merchandises.",
        "result": "Name\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the names of stores whose number merchandises is more than the average number of merchandises. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
        "question": "Which shops' number goods is above the average? Give me the store names.",
        "result": "shop.Name \nFROM shop \nWHERE shop.Number_products > (SELECT AVG(Number_products) FROM shop);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which shops' number goods is above the average? Give me the store names. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "find the name of staff who was awarded the most times in the assessment.",
        "result": "employee.Name \nFROM \nemployee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID \nGROUP BY \nemployee.Employee_ID \nORDER BY \nCOUNT(evaluation.Employee_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### find the name of staff who was awarded the most times in the assessment. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "Which worker received the most awards in assessments? Give me the worker name.",
        "result": "employee.Name\nFROM employee\nINNER JOIN evaluation\nON employee.Employee_ID = evaluation.Employee_ID\nGROUP BY employee.Employee_ID\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which worker received the most awards in assessments? Give me the worker name. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Find the name of the worker who got the highest one time premium.",
        "result": "Name\nFROM employee\nWHERE Employee_ID = (\n    SELECT Employee_ID\n    FROM evaluation\n    ORDER BY Bonus DESC\n    LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the name of the worker who got the highest one time premium. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "question": "Which worker received the biggest extra prize? Give me the worker name.",
        "result": "Name \nFROM \n    employee \nWHERE \n    Employee_ID = (SELECT \n                        Employee_ID \n                   FROM \n                        evaluation \n                   WHERE \n                        Bonus = (SELECT \n                                    MAX(Bonus) \n                                FROM \n                                    evaluation))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which worker received the biggest extra prize? Give me the worker name. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "Find the names of staffs who never won any award in the assessment.",
        "result": "employee.Name \nFROM employee \nWHERE employee.Employee_ID NOT IN \n    (SELECT evaluation.Employee_ID FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the names of staffs who never won any award in the assessment. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "question": "What are the names of the staffs who never received any assessment?",
        "result": "Employee_ID, Name\nFROM employee\nWHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What are the names of the staffs who never received any assessment? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the store that is hiring the largest number of workers?",
        "result": "shop.Name \nFROM shop \nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID \nGROUP BY shop.Shop_ID \nORDER BY COUNT(hiring.Employee_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What is the name of the store that is hiring the largest number of workers? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which shop has the most workers? Give me the store name.",
        "result": "shop.Name\nFROM shop\nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Shop_ID\nORDER BY COUNT(hiring.Employee_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which shop has the most workers? Give me the store name. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Find the name of the stores that do not hire any people.",
        "result": "Name \nFROM shop \nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the name of the stores that do not hire any people. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
        "question": "Which stores run with no workers? Find the store names",
        "result": "shop.Name \nFROM shop\nLEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nWHERE hiring.Employee_ID IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which stores run with no workers? Find the store names \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "Find the number of staffs hired in each store; show the store name as well.",
        "result": "shop.Name, COUNT(hiring.Employee_ID)\nFROM shop\nINNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the number of staffs hired in each store; show the store name as well. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "question": "For each store, return the number of people working there and the name of the store.",
        "result": "shop.Name, COUNT(hiring.Employee_ID)\nFROM shop\nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Shop_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### For each store, return the number of people working there and the name of the store. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "What is total premium given in all assessments?",
        "result": "SUM(Bonus) FROM evaluation",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What is total premium given in all assessments? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT sum(bonus) FROM evaluation",
        "question": "Find the total amount of extra prize given in all the assessments.",
        "result": "SUM(Bonus) FROM evaluation",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the total amount of extra prize given in all the assessments. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT * FROM hiring",
        "question": "Give me all the information about hiring.",
        "result": "* FROM hiring",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Give me all the information about hiring. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT * FROM hiring",
        "question": "What is all the information about hiring?",
        "result": "Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### What is all the information about hiring? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Which district has both stores with less than 3000 goods and stores with more than 10000 goods?",
        "result": "District FROM shop WHERE Number_products < 3000 AND Shop_ID IN (SELECT Shop_ID FROM shop WHERE Number_products > 10000)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Which district has both stores with less than 3000 goods and stores with more than 10000 goods? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000",
        "question": "Find the districts in which there are both shops selling less than 3000 goods and markets selling more than 10000 goods.",
        "result": "DISTINCT shop.District \nFROM shop \nINNER JOIN hiring ON shop.Shop_ID=hiring.Shop_ID \nINNER JOIN employee ON hiring.Employee_ID=employee.Employee_ID \nWHERE shop.Number_products < 3000 \nAND employee.City = 'Market' \nAND shop.Number_products > 10000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Find the districts in which there are both shops selling less than 3000 goods and markets selling more than 10000 goods. \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "How many different store city are there?",
        "result": "COUNT(DISTINCT City) FROM employee",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### How many different store city are there? \n SELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "SELECT count(DISTINCT LOCATION) FROM shop",
        "question": "Count the number of distinct store city.",
        "result": "COUNT(DISTINCT City) FROM employee;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# employee(Employee_ID,Name,Age,City)\n;# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)\n;# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)\n;# evaluation(Employee_ID,Year_awarded,Bonus)\n.# \n ### Count the number of distinct store city. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "How many papers do we have?",
        "result": "COUNT(*) FROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many papers do we have? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents",
        "question": "Count the number of papers.",
        "result": "COUNT(*) FROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of papers. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "List paper IDs, paper names, and paper descriptions for all papers.",
        "result": "Document_ID, Document_Name, Document_Description \nFROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List paper IDs, paper names, and paper descriptions for all papers. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "question": "What are the ids, names, and descriptions for all papers?",
        "result": "Documents.Document_ID, Documents.Document_Name, Documents.Document_Description\nFROM Documents",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids, names, and descriptions for all papers? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "What is the document name and layout id for document with description with the letter 'w' in it?",
        "result": "Documents.Document_Name, Templates.Template_ID\nFROM Documents\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Description LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the document name and layout id for document with description with the letter 'w' in it? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "question": "Return the names and layout ids for papers that contain the letter w in their describing content.",
        "result": "Templates.Template_ID, Templates.Version_Number\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%w%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the names and layout ids for papers that contain the letter w in their describing content. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "What is the paper id, layout id and describing content for paper named \"Robbin CV\"?",
        "result": "Documents.Document_ID AS paper_id, \nTemplates.Template_ID AS layout_id, \nParagraphs.Paragraph_Text AS describing_content \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Documents.Document_Name = \"Robbin CV\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the paper id, layout id and describing content for paper named \"Robbin CV\"? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "question": "Return the paper id, layout id, and describing details for the paper with the name Robbin CV.",
        "result": "Documents.Document_ID, Templates.Template_ID, Templates.Template_Details \n FROM Documents \n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE Documents.Document_Name = 'Robbin CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the paper id, layout id, and describing details for the paper with the name Robbin CV. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "How many different layout do all document use?",
        "result": "COUNT(DISTINCT Template_Details) AS Layout_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many different layout do all document use? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(DISTINCT template_id) FROM Documents",
        "question": "Count the number of different layout used for text files.",
        "result": "COUNT(DISTINCT Template_Details) \nFROM Templates \nWHERE Template_Type_Code = 'text'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of different layout used for text files. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "How many text files are using the layout with type code 'PPT'?",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'PPT' AND Documents.Other_Details LIKE '%.txt%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many text files are using the layout with type code 'PPT'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "question": "Count the number of text files that use the PPT template type.",
        "result": "COUNT(DISTINCT Documents.Document_ID) \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Description = 'PPT';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of text files that use the PPT template type. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "Show all layout ids and number of text files using each layout.",
        "result": "Templates.Template_ID, COUNT(DISTINCT Documents.Document_ID) AS Num_Text_Files \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nGROUP BY Templates.Template_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all layout ids and number of text files using each layout. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "question": "What are all different layout ids used for papers, and how many times were each of them used?",
        "result": "Template_Details, COUNT(*) AS count FROM Templates WHERE Template_Type_Code = 'papers' GROUP BY Template_Details;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are all different layout ids used for papers, and how many times were each of them used? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id and type for the layout used by the most papers?",
        "result": "Templates.Template_ID, Ref_Template_Types.Template_Type_Code\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nGROUP BY Templates.Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the id and type for the layout used by the most papers? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and type of the layout that is used for the greatest number of papers.",
        "result": "Templates.Template_Type_Code AS Layout_Type_Code, COUNT(*) AS Paper_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_Type_Code\nORDER BY Paper_Count DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and type of the layout that is used for the greatest number of papers. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "Show ids for all layouts that are used by more than one text file.",
        "result": "Templates.Template_ID\nFROM Templates\nINNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID\nHAVING COUNT(DISTINCT Documents.Document_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all layouts that are used by more than one text file. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "question": "What are the template ids of any templates used in more than a single paper?",
        "result": "Template_ID\nFROM Templates\nWHERE Template_ID IN (\n    SELECT Template_ID\n    FROM Documents\n    GROUP BY Template_ID\n    HAVING COUNT(DISTINCT Document_ID) > 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the template ids of any templates used in more than a single paper? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "Show ids for all templates not used by any text file.",
        "result": "Templates.Template_ID \nFROM Templates \nLEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID \nWHERE Documents.Template_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show ids for all templates not used by any text file. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
        "question": "What are the ids for layout that are not used in any papers?",
        "result": "Layouts.Layout_ID \nFROM Layouts \nLEFT JOIN Papers ON Layouts.Layout_ID = Papers.Layout_ID \nWHERE Papers.Layout_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids for layout that are not used in any papers? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "How many layout do we have?",
        "result": "COUNT(DISTINCT Template_Type_Code) AS layout_count \nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many layout do we have? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates",
        "question": "Count the number of layout.",
        "result": "COUNT(*) FROM Ref_Template_Types WHERE Template_Type_Description LIKE '%layout%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of layout. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "Show layout ids, version numbers, and layout type for all layout.",
        "result": "Layout_ID, Version_Number, Layout_Type \n FROM Layouts",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show layout ids, version numbers, and layout type for all layout. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "question": "What are the ids, edition numbers, and type name for each layout?",
        "result": "Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Description\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids, edition numbers, and type name for each layout? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "Show all distinct layout type names for all layout.",
        "result": "DISTINCT Template_Type_Description FROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all distinct layout type names for all layout. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT template_type_code FROM Templates",
        "question": "What are the different layout type names?",
        "result": "Template_Type_Description \nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the different layout type names? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "What are the ids of layout with layout type code PP or PPT?",
        "result": "Layout_ID FROM Layouts WHERE Layout_Type_Code IN ('PP', 'PPT');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of layout with layout type code PP or PPT? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "question": "Return the ids of layout that have the code PP or PPT.",
        "result": "Template_ID \nFROM Templates \nWHERE Template_Type_Code IN ('PP', 'PPT')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids of layout that have the code PP or PPT. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "How many layout have template type code CV?",
        "result": "COUNT(DISTINCT Templates.Template_ID)\nFROM Templates\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Ref_Template_Types.Template_Type_Code = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many layout have template type code CV? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "question": "Count the number of layout of the type CV.",
        "result": "COUNT(*) FROM Ref_Template_Types WHERE Template_Type_Description = 'CV'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of layout of the type CV. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "What is the edition number and layout type for the layout with edition number later than 5?",
        "result": "Templates.Version_Number, Templates.Template_Details\nFROM Templates\nWHERE Templates.Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the edition number and layout type for the layout with edition number later than 5? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "question": "Return the edition numbers and layout type names of layout with a edition number greater than 5.",
        "result": "Templates.Version_Number, Ref_Template_Types.Template_Type_Description\nFROM Templates\nJOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Templates.Version_Number > 5",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the edition numbers and layout type names of layout with a edition number greater than 5. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "Show all layout type codes and number of layout for each.",
        "result": "Template_Type_Code, COUNT(*) as Number_of_Layouts \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nGROUP BY Ref_Template_Types.Template_Type_Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all layout type codes and number of layout for each. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "question": "What are the different layout type, and how many layout correspond to each?",
        "result": "Template_Type_Code, COUNT(*) FROM Ref_Template_Types GROUP BY Template_Type_Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the different layout type, and how many layout correspond to each? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which layout type code has most number of layout?",
        "result": "Templates.Template_Type_Code, COUNT(Templates.Template_ID) as Layout_Count\nFROM Templates\nGROUP BY Templates.Template_Type_Code\nORDER BY Layout_Count DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which layout type code has most number of layout? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the type name of the layout type that the most layout belong to.",
        "result": "Ref_Template_Types.Template_Type_Description \nFROM Ref_Template_Types \nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nJOIN Documents ON Templates.Template_ID = Documents.Template_ID \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Ref_Template_Types.Template_Type_Description \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the type name of the layout type that the most layout belong to. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "Show all layout types with less than three layouts.",
        "result": "Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code IN (\n  SELECT Template_Type_Code\n  FROM Templates\n  GROUP BY Template_Type_Code\n  HAVING COUNT(DISTINCT Template_ID) < 3\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all layout types with less than three layouts. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "question": "What are the names of layout types that have fewer than 3 layouts?",
        "result": "Template_Type_Description \nFROM Ref_Template_Types \nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code \n    FROM Templates \n    GROUP BY Template_Type_Code \n    HAVING COUNT(DISTINCT Version_Number) < 3\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the names of layout types that have fewer than 3 layouts? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "What the smallest edition number and its layout type code?",
        "result": "Template_Type_Code, MIN(Version_Number) \nFROM Templates \nGROUP BY Template_Type_Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What the smallest edition number and its layout type code? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "question": "Return the lowest edition number, along with its corresponding layout type code.",
        "result": "Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates\nWHERE Templates.Version_Number = (SELECT MIN(Version_Number) FROM Templates)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the lowest edition number, along with its corresponding layout type code. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "What is the layout type code of the layout used by layout with the name \"Data base\"?",
        "result": "Ref_Template_Types.Template_Type_Code \n FROM Templates \n JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \n WHERE Templates.Template_Details = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the layout type code of the layout used by layout with the name \"Data base\"? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "question": "Return the layout type code of the layout that is used by a text file named Data base.",
        "result": "Templates.Template_Type_Code \nFROM Documents \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Documents.Document_Name = 'Data base'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the layout type code of the layout that is used by a text file named Data base. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "Show all text file names using layout with layout type code BK.",
        "result": "Documents.Document_Name \nFROM \nDocuments \nJOIN Templates ON Documents.Template_ID = Templates.Template_ID \nWHERE Templates.Template_Type_Code = 'BK';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all text file names using layout with layout type code BK. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "question": "What are the names of papers that use layouts with the code BK?",
        "result": "Documents.Document_Name \nFROM Documents \nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code \nWHERE Ref_Template_Types.Template_Type_Code = 'BK'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the names of papers that use layouts with the code BK? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "Show all layout type names and the number of papers using each type.",
        "result": "Ref_Template_Types.Template_Type_Description, COUNT(Templates.Template_ID)\n FROM Ref_Template_Types\n INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\n GROUP BY Ref_Template_Types.Template_Type_Description",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all layout type names and the number of papers using each type. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "question": "What are the different layout types, and how many papers use each type?",
        "result": "Template_Details, COUNT(*) AS Paper_Count\nFROM Templates\nWHERE Template_Type_Code = 'Layout'\nGROUP BY Template_Details",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the different layout types, and how many papers use each type? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Which layout type is used by most number of text files?",
        "result": "Templates.Template_Type_Code, COUNT(Documents.Document_ID) AS File_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Templates.Template_Type_Code IN (\n    SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Text File'\n)\nGROUP BY Templates.Template_Type_Code\nORDER BY File_Count DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Which layout type is used by most number of text files? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the code of the layout type that is most commonly used in text files.",
        "result": "Template_Type_Code \nFROM Templates \nGROUP BY Template_Type_Code \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the code of the layout type that is most commonly used in text files. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "Show all layout types that are not used by any text file.",
        "result": "Ref_Template_Types.Template_Type_Code \nFROM Ref_Template_Types \nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code \nWHERE Templates.Template_Type_Code IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all layout types that are not used by any text file. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "question": "What are the names of layout types that are not used for any text file?",
        "result": "Ref_Template_Types.Template_Type_Description\nFROM Ref_Template_Types\nLEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nWHERE Templates.Template_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the names of layout types that are not used for any text file? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "Show all layout type names and describing details.",
        "result": "Template_Type_Code, Template_Type_Description \n FROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all layout type names and describing details. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "question": "What are the type names and describing details for all layout types?",
        "result": "Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the type names and describing details for all layout types? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "What is the layout type describing content for layout type code \"AD\".",
        "result": "Layout_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the layout type describing content for layout type code \"AD\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "question": "Return the layout type describing content of the layout type with the code AD.",
        "result": "Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the layout type describing content of the layout type with the code AD. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "What is the layout type name for layout type description \"Book\".",
        "result": "Layout_Type_Name FROM Layout_Types WHERE Layout_Type_Description = \"Book\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the layout type name for layout type description \"Book\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "question": "Return the type of the layout type with the description \"Book\".",
        "result": "Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the type of the layout type with the description \"Book\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "What are the distinct layout type descriptions for the layouts ever used by any text file?",
        "result": "DISTINCT Layout_Type_Description FROM Text_Files;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the distinct layout type descriptions for the layouts ever used by any text file? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "question": "Return the different describing content for layouts that have been used in a text file.",
        "result": "Template_Details \nFROM Templates \nWHERE Template_ID IN \n    (SELECT Template_ID \n     FROM Documents \n     WHERE Document_ID IN \n         (SELECT Document_ID \n          FROM Paragraphs \n          WHERE Paragraph_Text LIKE '%layouts%'))",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the different describing content for layouts that have been used in a text file. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "What are the layout ids with layout type describing content \"Presentation\".",
        "result": "Layout_ID \nFROM Layouts \nWHERE Layout_Type = \"Presentation\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the layout ids with layout type describing content \"Presentation\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "question": "Return the ids corresponding to layouts with the describing content 'Presentation'.",
        "result": "Layout_ID FROM Layouts WHERE Layout_Content = 'Presentation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the ids corresponding to layouts with the describing content 'Presentation'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "How many paragraphs in total?",
        "result": "COUNT(*) FROM Paragraphs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many paragraphs in total? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs",
        "question": "Count the number of paragraphs.",
        "result": "COUNT(*) FROM Paragraphs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "How many paragraphs for the text file with name 'Summer Show'?",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### How many paragraphs for the text file with name 'Summer Show'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "question": "Count the number of paragraphs in the text file named 'Summer Show'.",
        "result": "COUNT(*) \nFROM Paragraphs \nWHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Count the number of paragraphs in the text file named 'Summer Show'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "question": "Show paragraph details for paragraph with text 'Korea'.",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details\nFROM Paragraphs\nWHERE Paragraph_Text = 'Korea'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show paragraph details for paragraph with text 'Korea'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'",
        "question": "What are the details for the paragraph that includes the text 'Korea'?",
        "result": "Paragraph_ID, Document_ID, Paragraph_Text, Other_Details \nFROM Paragraphs \nWHERE Paragraph_Text LIKE '%Korea%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the details for the paragraph that includes the text 'Korea'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "Show all paragraph ids and content for the text file with name 'Welcome to NY'.",
        "result": "Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID = (\n    SELECT Document_ID \n    FROM Documents \n    WHERE Document_Name = 'Welcome to NY'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph ids and content for the text file with name 'Welcome to NY'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "question": "What are the ids and content of paragraphs in the text file titled 'Welcome to NY'?",
        "result": "Paragraph_ID, Paragraph_Text \n FROM \n    Paragraphs \n JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \n JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE \n    Documents.Document_Name = 'Welcome to NY'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and content of paragraphs in the text file titled 'Welcome to NY'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "Show all paragraph content for the text file \"Customer reviews\".",
        "result": "Paragraph_Text\nFROM Paragraphs\nINNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nINNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID\nINNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code\nWHERE Document_Name = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paragraph content for the text file \"Customer reviews\". \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "question": "What are the paragraph content for the text file with the name 'Customer reviews'?",
        "result": "Paragraph_Text \n FROM \n Paragraphs \n INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID \n INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID \n WHERE \n Documents.Document_Name = 'Customer reviews'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the paragraph content for the text file with the name 'Customer reviews'? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Show all paper ids and the number of paragraphs in each text file. Order by paper id.",
        "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all paper ids and the number of paragraphs in each text file. Order by paper id. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "question": "Return the different paper ids along with the number of paragraphs corresponding to each, ordered by id.",
        "result": "Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID)\nFROM Documents\nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nORDER BY Documents.Document_ID ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the different paper ids along with the number of paragraphs corresponding to each, ordered by id. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "Show all text file ids, names and the number of paragraphs in each paper.",
        "result": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Paragraph_Count\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show all text file ids, names and the number of paragraphs in each paper. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "question": "What are the ids and names of each paper, as well as the number of paragraphs in each?",
        "result": "Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS num_paragraphs\nFROM Documents\nLEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID, Documents.Document_Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids and names of each paper, as well as the number of paragraphs in each? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "List all name ids with at least two paragraphs.",
        "result": "Documents.Document_Name, Documents.Document_ID\nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### List all name ids with at least two paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "question": "What are the ids of text files that have 2 or more paragraphs?",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nGROUP BY Documents.Document_ID\nHAVING COUNT(Paragraphs.Paragraph_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of text files that have 2 or more paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the text file id and name with greatest number of paragraphs?",
        "result": "Documents.Document_ID, Documents.Document_Name\nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nORDER BY COUNT(Paragraphs.Paragraph_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the text file id and name with greatest number of paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the id and name of the paper with the most paragraphs.",
        "result": "Documents.Document_ID, Documents.Document_Name\nFROM Documents\nWHERE Documents.Document_ID = (\n   SELECT Document_ID \n   FROM Paragraphs \n   GROUP BY Document_ID \n   ORDER BY COUNT(*) DESC \n   LIMIT 1\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id and name of the paper with the most paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the paper id with least number of paragraphs?",
        "result": "Documents.Document_ID \nFROM Documents \nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nGROUP BY Documents.Document_ID \nORDER BY COUNT(Paragraphs.Paragraph_ID) ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the paper id with least number of paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Return the id of the paper with the fewest paragraphs.",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN (\n    SELECT Document_ID, COUNT(*) AS num_paragraphs\n    FROM Paragraphs\n    GROUP BY Document_ID\n    ORDER BY num_paragraphs ASC\n    LIMIT 1\n) AS min_paragraphs\nON Documents.Document_ID = min_paragraphs.Document_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Return the id of the paper with the fewest paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "What is the paper id with 1 to 2 paragraphs?",
        "result": "Documents.Document_ID\nFROM Documents\nWHERE EXISTS (\n    SELECT NULL \n    FROM Paragraphs \n    WHERE Paragraphs.Document_ID = Documents.Document_ID \n    GROUP BY Paragraphs.Document_ID \n    HAVING COUNT(*) BETWEEN 1 AND 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What is the paper id with 1 to 2 paragraphs? \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "question": "Give the ids of text files that have between one and two paragraphs.",
        "result": "Documents.Document_ID \nFROM Documents \nWHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Give the ids of text files that have between one and two paragraphs. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "Show the paper id with paragraph text 'Brazil' and 'Ireland'.",
        "result": "Documents.Document_ID\nFROM Documents \nINNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID \nWHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### Show the paper id with paragraph text 'Brazil' and 'Ireland'. \n SELECT"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
        "question": "What are the ids of text files that contain the paragraph text 'Brazil' and 'Ireland'?",
        "result": "Documents.Document_ID\nFROM Documents\nJOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID\nWHERE Paragraphs.Paragraph_Text LIKE '%Brazil%'\nAND Paragraphs.Paragraph_Text LIKE '%Ireland%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Template_Types(Template_Type_Code,Template_Type_Description)\n;# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)\n;# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)\n;# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)\n.# \n ### What are the ids of text files that contain the paragraph text 'Brazil' and 'Ireland'? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT count(*) FROM teacher",
        "question": "How many instructors are there?",
        "result": "COUNT(*) FROM teacher;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### How many instructors are there? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT count(*) FROM teacher",
        "question": "What is the total count of faculties?",
        "result": "COUNT(*) FROM teacher;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the total count of faculties? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "List the names of faculties in ascending order of age.",
        "result": "Name FROM teacher ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### List the names of faculties in ascending order of age. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher ORDER BY Age ASC",
        "question": "What are the names of the faculties ordered by ascending age?",
        "result": "teacher.Name \nFROM teacher \nORDER BY teacher.Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the faculties ordered by ascending age? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What are the age and birthplace of instructors?",
        "result": "teacher.Age, teacher.Hometown\nFROM teacher",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the age and birthplace of instructors? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Age ,  Hometown FROM teacher",
        "question": "What is the age and birthplace of every instructor?",
        "result": "teacher.Age, teacher.Hometown\nFROM teacher",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the age and birthplace of every instructor? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
        "question": "List the name of faculties whose birthplace is not \"Little Lever Urban District\".",
        "result": "Name \nFROM teacher \nWHERE Hometown <> \"Little Lever Urban District\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### List the name of faculties whose birthplace is not \"Little Lever Urban District\". \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
        "question": "What are the names of the faculties whose birthplace is not \"Little Lever Urban District\"?",
        "result": "Name FROM teacher WHERE Hometown <> \"Little Lever Urban District\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the faculties whose birthplace is not \"Little Lever Urban District\"? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "Show the name of faculties aged either 32 or 33?",
        "result": "Name FROM teacher WHERE Age IN (32,33)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show the name of faculties aged either 32 or 33? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "question": "What are the names of the instructors who are aged either 32 or 33?",
        "result": "Name FROM teacher WHERE Age = 32 OR Age = 33;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the instructors who are aged either 32 or 33? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "What is the birthplace of the youngest instructor?",
        "result": "Hometown FROM teacher\nWHERE Age = (SELECT MIN(Age) FROM teacher)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the birthplace of the youngest instructor? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "question": "Where is the youngest instructor from?",
        "result": "Hometown \nFROM teacher \nWHERE Age = (SELECT MIN(Age) FROM teacher)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Where is the youngest instructor from? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "Show different birthplace of instructors and the number of instructors from each birthplace.",
        "result": "teacher.Hometown, COUNT(DISTINCT teacher.Teacher_ID)\nFROM teacher\nGROUP BY teacher.Hometown;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show different birthplace of instructors and the number of instructors from each birthplace. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "question": "For each birthplace, how many instructors are there?",
        "result": "Hometown, COUNT(Teacher_ID) \n FROM teacher \n GROUP BY Hometown",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### For each birthplace, how many instructors are there? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the most common birthplace of instructors.",
        "result": "Hometown, COUNT(*) as count \n FROM teacher \n GROUP BY Hometown \n ORDER BY count DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### List the most common birthplace of instructors. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most commmon birthplaces for faculties?",
        "result": "Hometown, COUNT(*) as Count \nFROM teacher \nGROUP BY Hometown \nORDER BY Count DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the most commmon birthplaces for faculties? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "Show the birthplaces shared by at least two faculties.",
        "result": "teacher1.Hometown \nFROM teacher AS teacher1, teacher AS teacher2 \nWHERE teacher1.Teacher_ID <> teacher2.Teacher_ID \nAND teacher1.Hometown = teacher2.Hometown",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show the birthplaces shared by at least two faculties. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "question": "What are the towns from which at least two instructors come from?",
        "result": "Hometown FROM teacher \nGROUP BY Hometown \nHAVING COUNT(*) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the towns from which at least two instructors come from? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "Show names of instructors and the curriculums they are arranged to teach.",
        "result": "teacher.Name, course.Course \nFROM teacher \nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nJOIN course ON course_arrange.Course_ID = course.Course_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show names of instructors and the curriculums they are arranged to teach. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "question": "What is the name of each faculty and what curriculum they teach?",
        "result": "course.Course, teacher.Name\nFROM course_arrange \nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID \nINNER JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What is the name of each faculty and what curriculum they teach? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "Show names of faculties and the curriculums they are arranged to teach in ascending alphabetical order of the faculty's name.",
        "result": "teacher.Name, course.Course\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nJOIN course ON course_arrange.Course_ID = course.Course_ID\nORDER BY teacher.Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show names of faculties and the curriculums they are arranged to teach in ascending alphabetical order of the faculty's name. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "question": "What are the names of the faculties and the curriculums they teach in ascending alphabetical order by the name of the faculty?",
        "result": "course.Course, teacher.Name \nFROM course_arrange \nJOIN course ON course.Course_ID = course_arrange.Course_ID \nJOIN teacher ON teacher.Teacher_ID = course_arrange.Teacher_ID \nORDER BY teacher.Name ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the faculties and the curriculums they teach in ascending alphabetical order by the name of the faculty? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "Show the name of the faculty for the math curriculum.",
        "result": "teacher.Name \nFROM course_arrange \nJOIN course ON course_arrange.Course_ID = course.Course_ID \nJOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID \nWHERE course.Course = 'math'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show the name of the faculty for the math curriculum. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "question": "What are the names of the people who teach math?",
        "result": "teacher.Name\nFROM teacher\nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nINNER JOIN course ON course_arrange.Course_ID = course.Course_ID\nWHERE course.Course = 'math'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the people who teach math? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "Show names of faculties and the number of curriculums they teach.",
        "result": "teacher.Name, COUNT(course_arrange.Course_ID)\nFROM teacher\nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show names of faculties and the number of curriculums they teach. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "question": "What are the names of the instructors and how many curriculums do they teach?",
        "result": "teacher.Name, COUNT(course_arrange.Course_ID) \nFROM teacher \nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID \nGROUP BY teacher.Teacher_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the instructors and how many curriculums do they teach? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "Show names of instructors that teach at least two curriculums.",
        "result": "teacher.Name\nFROM teacher\nINNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Teacher_ID\nHAVING COUNT(DISTINCT course_arrange.Course_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### Show names of instructors that teach at least two curriculums. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "question": "What are the names of the faculties who teach at least two curriculums?",
        "result": "Name \nFROM teacher \nWHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(DISTINCT Course_ID) >= 2)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the faculties who teach at least two curriculums? \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "List the names of instructors who have not been arranged to teach curriculums.",
        "result": "teacher.Name\nFROM teacher\nLEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nWHERE course_arrange.Teacher_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### List the names of instructors who have not been arranged to teach curriculums. \n SELECT"
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
        "question": "What are the names of the instructors whose curriculums have not been arranged?",
        "result": "teacher.Name \nFROM teacher \nLEFT JOIN course_arrange \nON teacher.Teacher_ID = course_arrange.Teacher_ID \nWHERE course_arrange.Grade IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# course(Course_ID,Staring_Date,Course)\n;# teacher(Teacher_ID,Name,Age,Hometown)\n;# course_arrange(Course_ID,Teacher_ID,Grade)\n.# \n ### What are the names of the instructors whose curriculums have not been arranged? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM visitor WHERE age  <  30",
        "question": "How many guests below age 30 are there?",
        "result": "COUNT(*) FROM visitor WHERE Age < 30;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### How many guests below age 30 are there? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "question": "Find the names of the guests whose membership level is higher than 4, and order the results by the level from high to low.",
        "result": "Name FROM visitor\nWHERE Level_of_membership > 4\nORDER BY Level_of_membership DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the names of the guests whose membership level is higher than 4, and order the results by the level from high to low. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "question": "What is the average age of the guests whose membership level is not higher than 4?",
        "result": "AVG(Age) FROM visitor WHERE Level_of_membership <= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What is the average age of the guests whose membership level is not higher than 4? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "question": "Find the name and membership level of the guests whose membership level is higher than 4, and sort by their age from old to young.",
        "result": "visitor.Name, visitor.Level_of_membership\nFROM visitor\nWHERE visitor.Level_of_membership > 4\nORDER BY visitor.Age DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the name and membership level of the guests whose membership level is higher than 4, and sort by their age from old to young. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "question": "Find the id and name of the museum that has the most workers?",
        "result": "Museum_ID, Name \nFROM museum \nWHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the id and name of the museum that has the most workers? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "question": "Find the average number of worker working for the museums that were open before 2009.",
        "result": "AVG(Num_of_Staff) \nFROM museum \nWHERE Open_Year < 2009",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the average number of worker working for the museums that were open before 2009. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "question": "What are the opening year and worker number of the museum named Plaza Museum?",
        "result": "Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the opening year and worker number of the museum named Plaza Museum? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
        "question": "find the names of museums which have more worker than the minimum worker number of all museums opened after 2010.",
        "result": "Name \nFROM museum \nWHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the names of museums which have more worker than the minimum worker number of all museums opened after 2010. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "question": "find the id, name and age for guests who visited some museums more than once.",
        "result": "visitor.ID, visitor.Name, visitor.Age\nFROM visitor\nINNER JOIN visit ON visitor.ID = visit.visitor_ID\nGROUP BY visitor.ID\nHAVING COUNT(DISTINCT visit.Museum_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### find the id, name and age for guests who visited some museums more than once. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "question": "What are the id, name and membership level of guests who have spent the largest amount of money in total in all museum tickets?",
        "result": "visitor.ID, visitor.Name, visitor.Level_of_membership \n FROM visitor \n JOIN visit ON visitor.ID = visit.visitor_ID \n GROUP BY visitor.ID \n ORDER BY SUM(Total_spent) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the id, name and membership level of guests who have spent the largest amount of money in total in all museum tickets? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "question": "What are the id and name of the museum visited most times?",
        "result": "m.Museum_ID, m.Name\nFROM museum m\nINNER JOIN visit v ON m.Museum_ID = v.Museum_ID\nGROUP BY m.Museum_ID\nORDER BY COUNT(v.Num_of_Ticket) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the id and name of the museum visited most times? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
        "question": "What is the name of the museum that had no tourist yet?",
        "result": "Name FROM museum\nWHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What is the name of the museum that had no tourist yet? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "question": "Find the name and age of the tourist who bought the most tickets at once.",
        "result": "visitor.Name, visitor.Age\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nWHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the name and age of the tourist who bought the most tickets at once. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "question": "What are the average and maximum number of tickets bought in all guests?",
        "result": "AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What are the average and maximum number of tickets bought in all guests? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "question": "What is the total ticket expense of the guests whose membership level is 1?",
        "result": "SUM(Total_spent) \nFROM visit \nJOIN visitor ON visit.visitor_ID = visitor.ID \nWHERE visitor.Level_of_membership = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What is the total ticket expense of the guests whose membership level is 1? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
        "question": "What is the name of the tourist who visited both a museum opened before 2009 and a museum opened after 2011?",
        "result": "visitor.Name \nFROM visitor \nINNER JOIN visit ON visitor.ID = visit.visitor_ID \nINNER JOIN museum ON visit.Museum_ID = museum.Museum_ID \nWHERE museum.Open_Year < 2009 \nAND EXISTS (SELECT * FROM museum WHERE museum.Open_Year > 2011 AND museum.Museum_ID = visit.Museum_ID)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### What is the name of the tourist who visited both a museum opened before 2009 and a museum opened after 2011? \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "question": "Find the number of guests who did not visit any museum opened after 2010.",
        "result": "COUNT(DISTINCT visitor_ID) \nFROM visitor \nWHERE visitor_ID NOT IN \n    (SELECT visitor_ID \n     FROM visit \n     JOIN museum \n     ON visit.Museum_ID = museum.Museum_ID \n     WHERE museum.Open_Year > 2010)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### Find the number of guests who did not visit any museum opened after 2010. \n SELECT"
    },
    {
        "db_id": "museum_visit",
        "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "question": "How many museums were opened after 2013 or before 2008?",
        "result": "COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# museum(Museum_ID,Name,Num_of_Staff,Open_Year)\n;# visitor(ID,Name,Level_of_membership,Age)\n;# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)\n.# \n ### How many museums were opened after 2013 or before 2008? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM players",
        "question": "Find the total number of participants.",
        "result": "COUNT(DISTINCT player_id) AS total_participants FROM players",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of participants. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM players",
        "question": "How many participants are there?",
        "result": "COUNT(DISTINCT player_id) FROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many participants are there? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches",
        "question": "Find the total number of competitions.",
        "result": "COUNT(*) FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of competitions. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches",
        "question": "Count the number of competitions.",
        "result": "COUNT(DISTINCT tourney_id) AS competition_count FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Count the number of competitions. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "List the given name and birth date of all participants from the country with code USA.",
        "result": "first_name, birth_date \nFROM players \nWHERE country_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the given name and birth date of all participants from the country with code USA. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "question": "What are the given names and birth dates of participants from the USA?",
        "result": "first_name, birth_date \n FROM players \n WHERE country_code = 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the given names and birth dates of participants from the USA? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "Find the average age of losers and winners of all games.",
        "result": "AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age \n FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average age of losers and winners of all games. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "question": "What are the average ages of losers and winners across games?",
        "result": "AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age \n FROM matches;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the average ages of losers and winners across games? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "Find the average rank of winners in all games.",
        "result": "AVG(winner_rank) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average rank of winners in all games. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(winner_rank) FROM matches",
        "question": "What is the average rank for winners in all competitions?",
        "result": "AVG(winner_rank) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the average rank for winners in all competitions? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "Find the highest rank of losers in all competitions.",
        "result": "MAX(loser_rank) \nFROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the highest rank of losers in all competitions. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT min(loser_rank) FROM matches",
        "question": "What is the best rank of losers across all contest?",
        "result": "MAX(loser_rank) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the best rank of losers across all contest? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "find the number of distinct State codes of all participants.",
        "result": "COUNT(DISTINCT country_code) FROM players",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of distinct State codes of all participants. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT country_code) FROM players",
        "question": "How many distinct States do participants come from?",
        "result": "COUNT(DISTINCT country_code) FROM players;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many distinct States do participants come from? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "Find the number of distinct name of losers.",
        "result": "COUNT(DISTINCT loser_name) FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of distinct name of losers. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT loser_name) FROM matches",
        "question": "How many different loser names are there?",
        "result": "COUNT(DISTINCT loser_name) AS num_of_loser_names \n FROM matches",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many different loser names are there? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "Find the names of tourney that has more than 10 competitions.",
        "result": "tourney_name\nFROM matches\nGROUP BY tourney_name\nHAVING COUNT(*) > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the names of tourney that has more than 10 competitions. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "question": "What are the names of tournaments that have more than 10 competitions?",
        "result": "tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of tournaments that have more than 10 competitions? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "result": "winner_name \nFROM matches \nWHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the names of all winners who played in both 2013 and 2016. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "question": "What are the names of participants who won in both 2013 and 2016?",
        "result": "first_name, last_name \nFROM players \nWHERE player_id IN (\n  SELECT winner_id \n  FROM matches \n  WHERE year = 2013 \n  AND winner_id IN (\n    SELECT winner_id \n    FROM matches \n    WHERE year = 2016\n  )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of participants who won in both 2013 and 2016? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "List the number of all competitions who played in years of 2013 or 2016.",
        "result": "COUNT(DISTINCT tourney_id) \nFROM matches \nWHERE year IN (2013, 2016);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the number of all competitions who played in years of 2013 or 2016. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "question": "How many competitions were played in 2013 or 2016?",
        "result": "COUNT(DISTINCT tourney_id) FROM matches WHERE year=2013 OR year=2016;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many competitions were played in 2013 or 2016? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the nation code and given name of the participants who won in both tourney WTA Championships and Australian Open?",
        "result": "players.country_code, players.first_name \n FROM players \n INNER JOIN matches ON players.player_id = matches.winner_id \n WHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_id LIKE '%Australian Open%' ;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the nation code and given name of the participants who won in both tourney WTA Championships and Australian Open? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "question": "What are the given names and State codes for participants who won both the WTA Championships and the Australian Open?",
        "result": "players.first_name, players.country_code\nFROM players\nJOIN matches ON players.player_id = matches.winner_id\nWHERE matches.tourney_name = 'WTA Championships' AND matches.tourney_id LIKE '%Australian Open%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the given names and State codes for participants who won both the WTA Championships and the Australian Open? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "Find the given name and State abbreviation of the oldest participant.",
        "result": "players.first_name, players.last_name, players.country_code\nFROM players\nWHERE players.birth_date = (SELECT MIN(players.birth_date) FROM players)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the given name and State abbreviation of the oldest participant. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "question": "What is the given name and nation abbreviation of the oldest participant?",
        "result": "first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the given name and nation abbreviation of the oldest participant? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "List the given and family name of all participants in the order of birth date.",
        "result": "players.first_name, players.last_name\nFROM players\nORDER BY players.birth_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the given and family name of all participants in the order of birth date. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "question": "What are the full names of all participants, sorted by birth date?",
        "result": "players.first_name || ' ' || players.last_name AS full_name \nFROM players \nORDER BY players.birth_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the full names of all participants, sorted by birth date? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "List the given and family name of all participants who are left / L hand in the order of birth date.",
        "result": "\n\nplayers.first_name, players.last_name\nFROM players\nWHERE players.hand = 'L'\nORDER BY players.birth_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### List the given and family name of all participants who are left / L hand in the order of birth date. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "question": "What are the full names of all left handed participants, in order of birth date?",
        "result": "players.first_name || ' ' || players.last_name as full_name \nFROM players \nWHERE players.hand = 'L' \nORDER BY players.birth_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the full names of all left handed participants, in order of birth date? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "Find the given name and nation abbreviation of the participant who did the most number of tours.",
        "result": "players.first_name, players.country_code\nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nWHERE rankings.tours = (SELECT MAX(tours) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the given name and nation abbreviation of the participant who did the most number of tours. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "question": "What is the given name and State code of the participant with the most tours?",
        "result": "players.first_name, players.country_code \nFROM players \nWHERE players.player_id = (\n    SELECT rankings.player_id \n    FROM rankings \n    WHERE rankings.tours = (\n        SELECT MAX(rankings.tours) \n        FROM rankings\n    )\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the given name and State code of the participant with the most tours? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the year that has the most number of competitions.",
        "result": "year \nFROM matches \nGROUP BY year \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the year that has the most number of competitions. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "question": "Which year had the most competitions?",
        "result": "year, COUNT(*) as num_competitions\n FROM matches\n GROUP BY year\n ORDER BY num_competitions DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Which year had the most competitions? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the name and rank points of the winner who won the most times.",
        "result": "winner_name, winner_rank_points\nFROM matches\nWHERE winner_name IN (\n    SELECT winner_name\n    FROM matches\n    GROUP BY winner_name\n    HAVING COUNT(*) = (\n        SELECT MAX(win_count)\n        FROM (\n            SELECT COUNT(*) AS win_count\n            FROM matches\n            GROUP BY winner_name\n        )\n    )\n)\nORDER BY winner_rank_points DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and rank points of the winner who won the most times. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "result": "winner_name, MAX(wins.ranking_points) \nFROM \n(SELECT winner_name, SUM(ranking_points) as ranking_points \n FROM matches \n JOIN rankings ON matches.winner_id = rankings.player_id \n GROUP BY winner_name) as wins;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the name of the winner who has won the most matches, and how many rank points does this player have? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "result": "players.first_name || ' ' || players.last_name as winner_name\nFROM players\nJOIN matches ON matches.winner_id = players.player_id\nWHERE matches.tourney_name = 'Australian Open' \nORDER BY players.winner_rank_points DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "result": "winner_name \nFROM \n  matches \nJOIN \n  rankings \nON \n  matches.winner_id = rankings.player_id \nWHERE \n  matches.tourney_name = 'Australian Open' \nORDER BY \n  rankings.ranking_points DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the name of the winner with the most rank points who participated in the Australian Open tournament? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "find the names of loser and winner who played in the competition with greatest number of minutes.",
        "result": "loser_name, winner_name\nFROM matches\nWHERE minutes = (\n    SELECT MAX(minutes)\n    FROM matches\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the names of loser and winner who played in the competition with greatest number of minutes. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "question": "What are the names of the winner and loser who played in the longest competition?",
        "result": "matches.winner_name, matches.loser_name \nFROM matches \nWHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names of the winner and loser who played in the longest competition? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the average ranking for each participant and their given name.",
        "result": "players.first_name, players.last_name, AVG(rankings.ranking) AS avg_ranking \n FROM players \n INNER JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.first_name, players.last_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the average ranking for each participant and their given name. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the given names of all participants, and their average rankings?",
        "result": "players.first_name, AVG(rankings.ranking) \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.player_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the given names of all participants, and their average rankings? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "Find the total ranking points for each participant and their given name.",
        "result": "players.first_name, players.last_name, SUM(ranking_points) AS total_ranking_points\n FROM players\n JOIN rankings ON players.player_id = rankings.player_id\n GROUP BY players.player_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total ranking points for each participant and their given name. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "question": "What are the given names of all participants, and their total ranking points?",
        "result": "players.first_name, SUM(ranking_points) as total_ranking_points \n FROM players \n JOIN rankings ON players.player_id = rankings.player_id \n GROUP BY players.first_name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the given names of all participants, and their total ranking points? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "find the number of participants for each State.",
        "result": "country_code, COUNT(DISTINCT player_id) AS num_participants \n FROM players \n GROUP BY country_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the number of participants for each State. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "question": "How many participants are from each State?",
        "result": "country_code, COUNT(*) \n FROM players \n GROUP BY country_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many participants are from each State? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "find the abbreviation of the State where has the greatest number of participants.",
        "result": "country_code AS state, COUNT(DISTINCT player_id) AS num_players\n FROM players\n GROUP BY country_code\n ORDER BY num_players DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### find the abbreviation of the State where has the greatest number of participants. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the abbreviation of the nation with the most participants?",
        "result": "country_code \nFROM players \nGROUP BY country_code \nORDER BY COUNT(player_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the abbreviation of the nation with the most participants? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "Find the abbreviations of nations that have more than 50 participants.",
        "result": "country_code \nFROM players \nGROUP BY country_code \nHAVING COUNT(*) > 50",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the abbreviations of nations that have more than 50 participants. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "question": "What are the abbreviations of nations with more than 50 participants?",
        "result": "country_code \nFROM players \nGROUP BY country_code \nHAVING COUNT(player_id) > 50;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the abbreviations of nations with more than 50 participants? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "Find the total number of trips for each ranking time.",
        "result": "ranking_date, COUNT(*) AS total_trips \n FROM rankings \n GROUP BY ranking_date",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the total number of trips for each ranking time. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "question": "How many total travels were there for each ranking time?",
        "result": "\n\nranking_date, COUNT(*) AS total_travels FROM rankings GROUP BY ranking_date;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many total travels were there for each ranking time? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "Find the number of games happened in each year.",
        "result": "strftime('%Y', tourney_date) as year, count(*) as games \n FROM matches \n GROUP BY year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of games happened in each year. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "question": "How many games were played in each year?",
        "result": "year, COUNT(*) AS games_played \n FROM matches \n GROUP BY year",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many games were played in each year? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "Find the name and rank of the 3 youngest winners across all competitions.",
        "result": "winner_name, winner_rank\nFROM matches\nWHERE year = (SELECT MAX(year) FROM matches)\nORDER BY winner_age ASC\nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the name and rank of the 3 youngest winners across all competitions. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "question": "What are the names and ranks of the three youngest winners across all games?",
        "result": "winner_name, winner_rank \nFROM matches \nWHERE winner_age = (SELECT MIN(winner_age) FROM matches)\nORDER BY winner_rank LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What are the names and ranks of the three youngest winners across all games? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "result": "COUNT(DISTINCT winner_id) \nFROM matches \nWHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many different winners both participated in the WTA Championships and were left handed? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "result": "COUNT(*) \nFROM players p \nJOIN matches m ON p.player_id = m.winner_id \nWHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of left handed winners who participated in the WTA Championships. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "Find the given name, nation abbreviation and birth date of the winner who has the highest rank points in all games.",
        "result": "players.first_name, players.country_code, players.birth_date \nFROM players \nJOIN matches ON players.player_id = matches.winner_id \nJOIN rankings ON players.player_id = rankings.player_id \nWHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the given name, nation abbreviation and birth date of the winner who has the highest rank points in all games. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "question": "What is the given name, nation abbreviation, and birth date of the participant with the most winner rank points across all competitions?",
        "result": "players.first_name, players.country_code, players.birth_date \n FROM players \n INNER JOIN matches ON players.player_id = matches.winner_id \n INNER JOIN rankings ON players.player_id = rankings.player_id \n WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### What is the given name, nation abbreviation, and birth date of the participant with the most winner rank points across all competitions? \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "Find the number of participants for each hand type.",
        "result": "hand, COUNT(player_id) AS num_participants FROM players GROUP BY hand;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### Find the number of participants for each hand type. \n SELECT"
    },
    {
        "db_id": "wta_1",
        "query": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "question": "How many participants are there for each hand type?",
        "result": "hand, COUNT(*) AS participants_count FROM players GROUP BY hand;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# players(player_id,first_name,last_name,hand,birth_date,country_code)\n;# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)\n;# rankings(ranking_date,ranking,player_id,ranking_points,tours)\n.# \n ### How many participants are there for each hand type? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "question": "How many vessels ended up being 'Captured'?",
        "result": "COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many vessels ended up being 'Captured'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "result": "name, tonnage FROM ship ORDER BY name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name and tonnage ordered by in descending alphaetical order for the names. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  date FROM battle",
        "question": "List the name, date and result of each battle.",
        "result": "name, date, result\nFROM battle",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name, date and result of each battle. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT max(killed) ,  min(killed) FROM death",
        "question": "What is maximum and minimum death toll caused each time?",
        "result": "MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What is maximum and minimum death toll caused each time? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT avg(injured) FROM death",
        "question": "What is the average number of injuries caused each time?",
        "result": "AVG(injured) FROM death",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What is the average number of injuries caused each time? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "question": "What are the death and hurt situations caused by the vessel with tonnage 't'?",
        "result": "death.note, death.killed, death.injured\nFROM death \nINNER JOIN ship ON death.caused_by_ship_id = ship.id \nWHERE ship.tonnage = 't'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the death and hurt situations caused by the vessel with tonnage 't'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "result": "name, result \nFROM battle \nWHERE bulgarian_commander <> 'Boril'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the name and results of the battles when the bulgarian commander is not 'Boril' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "question": "What are the different ids and names of the combat that lost any 'Brig' type vessels?",
        "result": "battle.id, battle.name\nFROM battle\nINNER JOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.ship_type = 'Brig'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the different ids and names of the combat that lost any 'Brig' type vessels? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "question": "What are the ids and names of the combat that led to more than 10 people dead in total.",
        "result": "battle.id, battle.name\nFROM battle\nWHERE (SELECT SUM(killed) FROM death WHERE death.caused_by_ship_id IN \n(SELECT id FROM ship WHERE ship.lost_in_battle = battle.id)) > 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the ids and names of the combat that led to more than 10 people dead in total. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the vessel id and name that caused most total injuries?",
        "result": "death.caused_by_ship_id, ship.name\nFROM death\nJOIN ship ON death.caused_by_ship_id = ship.id\nGROUP BY death.caused_by_ship_id\nORDER BY SUM(death.injured) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What is the vessel id and name that caused most total injuries? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "question": "What are the distinct combat names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "result": "DISTINCT name FROM battle \nWHERE bulgarian_commander='Kaloyan' AND latin_commander='Baldwin I';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the distinct combat names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT count(DISTINCT RESULT) FROM battle",
        "question": "How many different results are there for the combats?",
        "result": "COUNT(DISTINCT result) FROM battle;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many different results are there for the combats? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
        "question": "How many combats did not lose any vessel with tonnage '225'?",
        "result": "COUNT(DISTINCT battle.id) \nFROM battle \nLEFT JOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.tonnage != 225 OR ship.tonnage IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### How many combats did not lose any vessel with tonnage '225'? \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
        "question": "List the name and date the combat that has lost the vessel named 'Lettice' and the vessel named 'HMS Atalanta'",
        "result": "battle.name, battle.date \nFROM battle \nJOIN ship ON battle.id = ship.lost_in_battle \nWHERE ship.name IN ('Lettice', 'HMS Atalanta')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### List the name and date the combat that has lost the vessel named 'Lettice' and the vessel named 'HMS Atalanta' \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "question": "Show names, results and bulgarian commanders of the combats with no vessels lost in the 'English Channel'.",
        "result": "battle.name, battle.result, battle.bulgarian_commander\nFROM battle\nLEFT JOIN ship ON battle.id = ship.lost_in_battle\nWHERE ship.id IS NULL AND ship.location = 'English Channel'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### Show names, results and bulgarian commanders of the combats with no vessels lost in the 'English Channel'. \n SELECT"
    },
    {
        "db_id": "battle_death",
        "query": "SELECT note FROM death WHERE note LIKE '%East%'",
        "question": "What are the remark of the death events which has substring 'East'?",
        "result": "note \nFROM death \nWHERE note LIKE '%East%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# battle(id,name,date,bulgarian_commander,latin_commander,result)\n;# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)\n;# death(caused_by_ship_id,id,note,killed,injured)\n.# \n ### What are the remark of the death events which has substring 'East'? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "what are all the addresses including line 1 and line 2?",
        "result": "line_1, line_2 FROM Addresses;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### what are all the addresses including line 1 and line 2? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 ,  line_2 FROM addresses",
        "question": "What is the first and second line for all addresses?",
        "result": "line_1, line_2\nFROM Addresses;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the first and second line for all addresses? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many curriculums in total are listed?",
        "result": "COUNT(DISTINCT degree_program_id) FROM Student_Enrolment;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many curriculums in total are listed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Courses",
        "question": "How many curriculums are there?",
        "result": "COUNT(DISTINCT degree_program_id) FROM Student_Enrolment",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many curriculums are there? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "How is the math curriculum described?",
        "result": "Degree_Programs.degree_summary_description\nFROM Degree_Programs\nJOIN Departments ON Degree_Programs.department_id = Departments.department_id\nWHERE Departments.department_name = \"Mathematics\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How is the math curriculum described? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "question": "What are the describing content for all the math curriculums?",
        "result": "Degree_Programs.degree_summary_description \nFROM Degree_Programs \nWHERE Degree_Programs.degree_summary_name LIKE '%Math%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the describing content for all the math curriculums? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code of the position in the city Port Chelsea?",
        "result": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the zip code of the position in the city Port Chelsea? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "question": "What is the zip code for Port Chelsea?",
        "result": "zip_postcode \n FROM Addresses \n WHERE city = 'Port Chelsea';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the zip code for Port Chelsea? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which division offers the most number of degrees? List division name and id.",
        "result": "Degree_Programs.department_id, Departments.department_name\nFROM Degree_Programs\nJOIN Departments ON Degree_Programs.department_id = Departments.department_id\nGROUP BY Degree_Programs.department_id\nORDER BY COUNT(Degree_Programs.degree_program_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which division offers the most number of degrees? List division name and id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each division id, what is the name of the division with the most number of degrees?",
        "result": "\n\nDegree_Programs.department_id, Departments.department_name \nFROM Degree_Programs \nINNER JOIN Departments ON Degree_Programs.department_id = Departments.department_id \nGROUP BY Degree_Programs.department_id \nORDER BY COUNT(Degree_Programs.degree_program_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### For each division id, what is the name of the division with the most number of degrees? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many departments offer any degree?",
        "result": "COUNT(DISTINCT department_id) FROM Degree_Programs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many departments offer any degree? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "question": "How many different departments offer degrees?",
        "result": "COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different departments offer degrees? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degree names are offered?",
        "result": "COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different degree names are offered? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "question": "How many different degrees are offered?",
        "result": "COUNT(DISTINCT degree_program_id) AS num_degrees \nFROM Degree_Programs;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different degrees are offered? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering division offer?",
        "result": "COUNT(DISTINCT Degree_Programs.degree_program_id)\nFROM Degree_Programs\nJOIN Departments ON Degree_Programs.department_id = Departments.department_id\nWHERE Departments.department_name = 'Engineering'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many degrees does the engineering division offer? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "question": "How many degrees does the engineering department have?",
        "result": "COUNT(DISTINCT Degree_Programs.degree_program_id) \nFROM Degree_Programs \nJOIN Departments ON Degree_Programs.department_id = Departments.department_id \nWHERE Departments.department_name = 'Engineering';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many degrees does the engineering department have? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and describing contents of all the sections?",
        "result": "Sections.section_name, Sections.section_description FROM Sections;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and describing contents of all the sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name ,  section_description FROM Sections",
        "question": "What are the names and describing details for all the sections?",
        "result": "Sections.section_name, Sections.section_description, Sections.other_details\nFROM Sections",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and describing details for all the sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and id of curriculums having at most 2 sections?",
        "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name\nFROM Degree_Programs\nWHERE Degree_Programs.degree_program_id IN (\n  SELECT Student_Enrolment.degree_program_id\n  FROM Student_Enrolment\n  JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\n  JOIN Sections ON Sections.course_id = Student_Enrolment_Courses.course_id\n  GROUP BY Student_Enrolment.degree_program_id\n  HAVING COUNT(DISTINCT Sections.section_id) <= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and id of curriculums having at most 2 sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "question": "What are the names and ids of every curriculum with less than 2 sections?",
        "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name \n FROM Degree_Programs \n LEFT JOIN Sections \n ON Degree_Programs.degree_program_id = Sections.course_id \n GROUP BY Degree_Programs.degree_program_id \n HAVING COUNT(Sections.section_id) < 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names and ids of every curriculum with less than 2 sections? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "List the section_name in reversed lexicographical order.",
        "result": "section_name FROM Sections ORDER BY section_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### List the section_name in reversed lexicographical order. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "question": "What are the names of the sections in reverse alphabetical order?",
        "result": "section_name \nFROM Sections \nORDER BY section_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names of the sections in reverse alphabetical order? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the academic session which most undergraduate registered in? Show both the name and the id.",
        "result": "Semesters.semester_id, Semesters.semester_name \n FROM \n  Semesters \n  INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \n  INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \n WHERE \n  Degree_Programs.degree_summary_name = 'Undergraduate' \n GROUP BY \n  Semesters.semester_id, Semesters.semester_name \n ORDER BY \n  COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the academic session which most undergraduate registered in? Show both the name and the id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "question": "For each semester, what is the name and id of the one with the most undergraduate registered?",
        "result": "Semesters.semester_id, Semesters.semester_name\nFROM Semesters\nJOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name = 'Undergraduate'\nGROUP BY Semesters.semester_id, Semesters.semester_name\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### For each semester, what is the name and id of the one with the most undergraduate registered? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the describing details of the division whose name has the substring the computer?",
        "result": "Departments.department_description \n FROM Departments \n WHERE department_name LIKE '%computer%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the describing details of the division whose name has the substring the computer? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "question": "What is the division describing details for the one whose name has the word computer?",
        "result": "Departments.department_description \nFROM Departments \nWHERE department_name LIKE '%computer%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the division describing details for the one whose name has the word computer? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "Who are enrolled in 2 degree programs in one term? List the given name, middle name and family name and the id.",
        "result": "s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nINNER JOIN Student_Enrolment se ON s.student_id = se.student_id\nINNER JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id\nINNER JOIN Courses c ON sec.course_id = c.course_id\nINNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nINNER JOIN Semesters sem ON se.semester_id = sem.semester_id\nWHERE se.degree_program_id IN (\n    SELECT se.degree_program_id\n    FROM Student_Enrolment se\n    GROUP BY se.degree_program_id, se.semester_id\n    HAVING COUNT(DISTINCT se.semester_id) = 1\n)\nGROUP BY s.student_id, se.semester_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who are enrolled in 2 degree programs in one term? List the given name, middle name and family name and the id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "question": "What are the given, middle, and family names, along with the ids, of all undergraduates who enrolled in 2 degree programs in one term?",
        "result": "Students.student_id, Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nWHERE Student_Enrolment.degree_program_id IN \n    (SELECT degree_program_id \n     FROM Student_Enrolment \n     WHERE semester_id = (SELECT semester_id FROM Student_Enrolment GROUP BY semester_id HAVING COUNT(*) = 2)) \nGROUP BY Students.student_id \nHAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the given, middle, and family names, along with the ids, of all undergraduates who enrolled in 2 degree programs in one term? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "Who is enrolled in a Bachelor degree program? List the given name, middle name, family name.",
        "result": "Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name = 'Bachelor'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is enrolled in a Bachelor degree program? List the given name, middle name, family name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "question": "What are the given, middle, and family names for everybody enrolled in a Bachelors program?",
        "result": "Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name = 'Bachelors';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the given, middle, and family names for everybody enrolled in a Bachelors program? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the kind of program which most number of students are enrolled in?",
        "result": "Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS enrolment_count\n FROM Student_Enrolment\n INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\n GROUP BY Degree_Programs.degree_program_id\n ORDER BY enrolment_count DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the kind of program which most number of students are enrolled in? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "result": "Degree_Programs.degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_summary_name\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the degree summary name that has the most number of students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name\nFROM Degree_Programs\nINNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_program_id\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the program which most number of students are enrolled in. List both the id and the summary. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "result": "Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name \n FROM Degree_Programs \n INNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \n GROUP BY Degree_Programs.degree_program_id \n ORDER BY COUNT(Student_Enrolment.student_id) DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the program id and the summary of the degree that has the most students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which student has enrolled for the most times in any program? List the id, given name, middle name, family name, the number of enrollments and undergraduate id.",
        "result": "\n\ns.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) as enrollment_count, dp.degree_program_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nGROUP BY s.student_id\nORDER BY enrollment_count DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which student has enrolled for the most times in any program? List the id, given name, middle name, family name, the number of enrollments and undergraduate id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the given, middle, and family name, along with the id and number of enrollments, for the undergraduate who enrolled the most in any program?",
        "result": "Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) as num_enrollments\nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name = \"Undergraduate\"\nGROUP BY Students.student_id\nORDER BY num_enrollments DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the given, middle, and family name, along with the id and number of enrollments, for the undergraduate who enrolled the most in any program? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "Which academic sessions do not have any student enrolled? List the academic session name.",
        "result": "Semesters.semester_name\nFROM Semesters\nLEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nWHERE Student_Enrolment.student_enrolment_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which academic sessions do not have any student enrolled? List the academic session name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
        "question": "What is the name of the academic session with no students enrolled?",
        "result": "Semesters.semester_name \nFROM \nSemesters \nLEFT JOIN \nStudent_Enrolment \nON \nSemesters.semester_id = Student_Enrolment.semester_id \nWHERE \nStudent_Enrolment.semester_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the name of the academic session with no students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are all the course names of the curriculums which ever have students enrolled in?",
        "result": "Courses.course_name\nFROM Courses\nINNER JOIN Sections ON Courses.course_id = Sections.course_id\nINNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id\nINNER JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are all the course names of the curriculums which ever have students enrolled in? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "question": "What are the names of all curriculums that have some students enrolled?",
        "result": "Degree_Programs.degree_summary_name \nFROM Degree_Programs \nINNER JOIN Student_Enrolment \nON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \nGROUP BY Degree_Programs.degree_summary_name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the names of all curriculums that have some students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What's the name of the curriculum with most number of enrollments?",
        "result": "Degree_Programs.degree_summary_name\nFROM Degree_Programs\nJOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id\nGROUP BY Degree_Programs.degree_program_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What's the name of the curriculum with most number of enrollments? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the curriculum with the most students enrolled?",
        "result": "Degree_Programs.degree_summary_name \nFROM Degree_Programs \nINNER JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id \nGROUP BY Degree_Programs.degree_program_id \nORDER BY COUNT(DISTINCT Student_Enrolment.student_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the name of the curriculum with the most students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "Find the family name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "result": "Students.last_name \nFROM Students \nLEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nWHERE Students.state_province_county = 'North Carolina' \nAND Student_Enrolment.degree_program_id IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the family name of the students who currently live in the state of North Carolina but have not registered in any degree program. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "question": "What are the family name of the students who live in North Carolina but have not registered in any degree programs?",
        "result": "Students.last_name \nFROM Students \nWHERE Students.state_province_county = 'North Carolina' \nAND NOT EXISTS (\n  SELECT 1 \n  FROM Student_Enrolment \n  WHERE Student_Enrolment.student_id = Students.student_id\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the family name of the students who live in North Carolina but have not registered in any degree programs? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "Show the date and id of the student record with at least 2 curriculum results.",
        "result": "Students.date_first_registered, Students.student_id\nFROM Students\nINNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nINNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nGROUP BY Students.student_id\nHAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show the date and id of the student record with at least 2 curriculum results. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "question": "What is the date and id of the student record with at least 2 curriculums listed?",
        "result": "Student_Enrolment.student_id, Transcripts.transcript_date\nFROM Student_Enrolment\nINNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nINNER JOIN Transcripts ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\nGROUP BY Student_Enrolment.student_id, Transcripts.transcript_date\nHAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the date and id of the student record with at least 2 curriculums listed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the man with the given name Timmothy and the family name Ward?",
        "result": "cell_mobile_number \n FROM Students \n WHERE first_name = 'Timmothy' \n AND last_name = 'Ward'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the phone number of the man with the given name Timmothy and the family name Ward? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "question": "What is the phone number of the student named Timothy Ward?",
        "result": "Students.cell_mobile_number \nFROM Students \nWHERE Students.first_name = 'Timothy' \nAND Students.last_name = 'Ward'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the phone number of the student named Timothy Ward? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "Who is the first student to register? List the given name, middle name and family name.",
        "result": "Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nWHERE Students.date_first_registered = (SELECT MIN(date_first_registered) FROM Students) LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is the first student to register? List the given name, middle name and family name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "question": "What is the given, middle, and family name of the first student to register?",
        "result": "Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nWHERE Students.date_first_registered = (SELECT MIN(date_first_registered) FROM Students)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the given, middle, and family name of the first student to register? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "Who is the earliest graduate of the school? List the given name, middle name and family name.",
        "result": "Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id \nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nORDER BY Students.date_left ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Who is the earliest graduate of the school? List the given name, middle name and family name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "question": "What is the given, middle, and family name of the earliest school graduate?",
        "result": "Students.first_name, Students.middle_name, Students.last_name \nFROM Students \nWHERE Students.student_id IN (\n    SELECT Student_Enrolment.student_id \n    FROM Student_Enrolment \n    WHERE Student_Enrolment.degree_program_id IN (\n        SELECT Degree_Programs.degree_program_id \n        FROM Degree_Programs \n        WHERE Degree_Programs.department_id IN (\n            SELECT Departments.department_id \n            FROM Departments \n            WHERE Departments.department_name = 'School'\n        )\n    )\n    AND Student_Enrolment.student_id IN (\n        SELECT Transcript_Contents.student_course_id \n        FROM Transcript_Contents \n        WHERE Transcript_Contents.transcript_id IN (\n            SELECT MIN(Transcripts.transcript_id) \n            FROM Transcripts\n        )\n    )\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the given, middle, and family name of the earliest school graduate? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "Whose permanent address is different from his or her current address? List his or her given name.",
        "result": "Students.first_name \nFROM \nStudents \nWHERE \nStudents.current_address_id <> Students.permanent_address_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Whose permanent address is different from his or her current address? List his or her given name. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "question": "What is the given name of the student whose permanent address is different from his or her current one?",
        "result": "Students.first_name FROM Students\nWHERE Students.current_address_id <> Students.permanent_address_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the given name of the student whose permanent address is different from his or her current one? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which place holds the most number of students currently? List the place id and all lines.",
        "result": "Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city \nFROM Addresses \nJOIN Students ON Addresses.address_id = Students.current_address_id \nGROUP BY Addresses.address_id \nORDER BY COUNT(Students.student_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Which place holds the most number of students currently? List the place id and all lines. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "result": "Addresses.address_id, Addresses.line_1, Addresses.line_2\nFROM Addresses\nINNER JOIN Students ON Students.current_address_id = Addresses.address_id\nGROUP BY Addresses.address_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the id, line 1, and line 2 of the address with the most students? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "On average, when were the student record printed?",
        "result": "AVG(strftime('%s', transcript_date)) FROM Transcripts",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### On average, when were the student record printed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT avg(transcript_date) FROM Transcripts",
        "question": "What is the average student record date?",
        "result": "AVG(date_first_registered) FROM Students",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the average student record date? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "When is the first student record released? List the date and details.",
        "result": "MIN(date_first_registered), other_student_details\nFROM Students;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### When is the first student record released? List the date and details. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "question": "What is the earliest date of a transcript release, and what particulars can you tell me?",
        "result": "MIN(transcript_date) FROM Transcripts;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the earliest date of a transcript release, and what particulars can you tell me? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many student record are released?",
        "result": "COUNT(*) FROM Students;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many student record are released? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) FROM Transcripts",
        "question": "How many student records are listed?",
        "result": "COUNT(*) FROM Students;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many student records are listed? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "What is the last student record release date?",
        "result": "MAX(date_left) FROM Students",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the last student record release date? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "question": "When was the last student record released?",
        "result": "MAX(date_left) FROM Students;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### When was the last student record released? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "How many times at most can a curriculum enrollment result show in different student records? Also show the curriculum enrollment id.",
        "result": "Student_Enrolment_Courses.student_enrolment_id, COUNT(*) AS enrollment_count \n FROM Student_Enrolment_Courses\n GROUP BY Student_Enrolment_Courses.course_id, Student_Enrolment_Courses.student_enrolment_id\n HAVING COUNT(*) >= ALL (\n     SELECT COUNT(*) \n     FROM Student_Enrolment_Courses\n     GROUP BY course_id, student_enrolment_id\n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many times at most can a curriculum enrollment result show in different student records? Also show the curriculum enrollment id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the maximum number of times that a curriculum shows up in different student records and what is that curriculum's enrollment id?",
        "result": "Student_Enrolment.degree_program_id AS curriculum_id, COUNT(Student_Enrolment.student_enrolment_id) AS num_students_enrolled\n FROM Student_Enrolment\n GROUP BY Student_Enrolment.degree_program_id\n ORDER BY num_students_enrolled DESC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the maximum number of times that a curriculum shows up in different student records and what is that curriculum's enrollment id? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "Show the date of the student record which shows the least number of results, also list the id.",
        "result": "Students.student_id, MIN(Transcripts.transcript_date) AS min_date\n FROM Students \n INNER JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\n INNER JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\n INNER JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\n INNER JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id\n GROUP BY Students.student_id\n ORDER BY COUNT(*) ASC\n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Show the date of the student record which shows the least number of results, also list the id. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "question": "What is the date and id of the student record with the least number of results?",
        "result": "Transcripts.transcript_date, Students.student_id\nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id\nJOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id\nJOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id\nGROUP BY Students.student_id\nORDER BY COUNT(*) ASC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the date and id of the student record with the least number of results? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "Find the academic session when both Master students and Bachelor students got enrolled in.",
        "result": "Semesters.semester_name \nFROM Semesters \nJOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id \nJOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id \nWHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') \nGROUP BY Semesters.semester_name \nHAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the academic session when both Master students and Bachelor students got enrolled in. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "question": "What is the id of the academic session that had both Masters and Bachelors students enrolled?",
        "result": "Semesters.semester_id\nFROM Semesters\nINNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nINNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id\nWHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors')\nGROUP BY Semesters.semester_id\nHAVING COUNT(DISTINCT Student_Enrolment.student_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the id of the academic session that had both Masters and Bachelors students enrolled? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "How many different places do the students currently live?",
        "result": "COUNT(DISTINCT current_address_id) FROM Students",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### How many different places do the students currently live? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count(DISTINCT current_address_id) FROM Students",
        "question": "What are the different places that have students living there?",
        "result": "Addresses.city, Addresses.state_province_county, Addresses.country FROM Addresses \n INNER JOIN Students ON Addresses.address_id = Students.current_address_id OR Addresses.address_id = Students.permanent_address_id GROUP BY Addresses.city, Addresses.state_province_county, Addresses.country;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the different places that have students living there? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "List all the student particulars in reversed lexicographical order.",
        "result": "student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details \n FROM Students \n ORDER BY last_name DESC, first_name DESC, middle_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### List all the student particulars in reversed lexicographical order. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "question": "What other particulars can you tell me about students in reverse alphabetical order?",
        "result": "student_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, current_address_id, permanent_address_id, other_student_details \n FROM Students \n ORDER BY last_name DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What other particulars can you tell me about students in reverse alphabetical order? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "Describe the section h.",
        "result": "* FROM Sections WHERE section_name = 'h'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Describe the section h. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "question": "What is the description for the section named h?",
        "result": "Sections.section_description\nFROM Sections\nWHERE Sections.section_name = 'h';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What is the description for the section named h? \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "question": "Find the given name of the students who permanently live in the country Haiti or have the phone number 09700166582.",
        "result": "Students.first_name\nFROM Students\nWHERE (Students.permanent_address_id IN \n       (SELECT address_id FROM Addresses WHERE country = 'Haiti'))\n   OR (Students.cell_mobile_number = '09700166582')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### Find the given name of the students who permanently live in the country Haiti or have the phone number 09700166582. \n SELECT"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582'",
        "question": "What are the given names of the students who live in Haiti permanently or have the phone number 09700166582?",
        "result": "Students.first_name \nFROM Students \nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id \nWHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)\n;# Courses(course_id,course_name,course_description,other_details)\n;# Departments(department_id,department_name,department_description,other_details)\n;# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)\n;# Sections(section_id,course_id,section_name,section_description,other_details)\n;# Semesters(semester_id,semester_name,semester_description,other_details)\n;# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)\n;# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)\n;# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)\n;# Transcripts(transcript_id,transcript_date,other_details)\n;# Transcript_Contents(student_course_id,transcript_id)\n.# \n ### What are the given names of the students who live in Haiti permanently or have the phone number 09700166582? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "List the name of all animations in alphabetical order.",
        "result": "Title FROM Cartoon ORDER BY Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the name of all animations in alphabetical order. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon ORDER BY title",
        "question": "What are the names of the animations sorted alphabetically?",
        "result": "Title FROM Cartoon ORDER BY Title ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of the animations sorted alphabetically? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "List all animation directed by \"Ben Jones\".",
        "result": "Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = \"Ben Jones\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List all animation directed by \"Ben Jones\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "question": "What are the names of all animations directed by Ben Jones?",
        "result": "Title \nFROM Cartoon \nWHERE Directed_by = 'Ben Jones';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all animations directed by Ben Jones? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "How many animations were written by \"Joseph Kuhr\"?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many animations were written by \"Joseph Kuhr\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "question": "What is the number of animations written by Joseph Kuhr?",
        "result": "COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the number of animations written by Joseph Kuhr? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "list all animation and their directors ordered by their airdate",
        "result": "Cartoon.Title, Cartoon.Directed_by FROM Cartoon \nWHERE Cartoon.Title LIKE '%animation%' \nORDER BY Cartoon.Original_air_date ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### list all animation and their directors ordered by their airdate \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "question": "What is the name and directors of all the animation that are ordered by released date?",
        "result": "Cartoon.Title, Cartoon.Directed_by \n FROM Cartoon\n ORDER BY Cartoon.Original_air_date ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name and directors of all the animation that are ordered by released date? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "List the name of all animation directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "result": "Cartoon.Title \nFROM Cartoon \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the name of all animation directed by \"Ben Jones\" or \"Brandon Vietti\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "question": "What are the names of all animation directed by Ben Jones or Brandon Vietti?",
        "result": "Title \nFROM Cartoon \nWHERE Directed_by='Ben Jones' OR Directed_by='Brandon Vietti'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the names of all animation directed by Ben Jones or Brandon Vietti? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "Which country has the most of TV Channels? List the country name and number of TV Channels it has.",
        "result": "Country, COUNT(*) as Number_of_TV_Channels \n FROM TV_Channel \n GROUP BY Country \n ORDER BY Number_of_TV_Channels DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Which country has the most of TV Channels? List the country name and number of TV Channels it has. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "question": "What is the State with the most number of TV Channels and how many does it have?",
        "result": "Country, COUNT(*) AS Channel_Count \nFROM TV_Channel \nGROUP BY Country \nORDER BY Channel_Count DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the State with the most number of TV Channels and how many does it have? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "List the number of different serial names and contents in the TV Channel table.",
        "result": "COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the number of different serial names and contents in the TV Channel table. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "question": "How many different serial and contents are listed in the TV Channel table?",
        "result": "COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many different serial and contents are listed in the TV Channel table? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "result": "Content \nFROM \nTV_Channel \nWHERE \nseries_name = \"Sky Radio\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the content of TV Channel with serial name \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the content of the series Sky Radio?",
        "result": "Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the content of the series Sky Radio? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "result": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the Package Option of TV Channel with serial name \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "result": "Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the Package Options of the TV Channels whose series names are Sky Radio? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channel using language English?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language='English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channel using language English? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "question": "How many TV Channels use the English language?",
        "result": "COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many TV Channels use the English language? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "result": "Language, COUNT(*) as num_channels \n FROM TV_Channel \n GROUP BY Language \n ORDER BY num_channels ASC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the language used least number of TV Channel. List language and number of TV Channel. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "result": "Language, COUNT(*) as Number_of_Channels \n FROM TV_Channel \n GROUP BY Language \n ORDER BY Number_of_Channels ASC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the languages used by the least number of TV Channels and how many channels use it? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "List each language and the number of TV Channels using it.",
        "result": "Language, COUNT(*) AS Num_Channels \n FROM TV_Channel \n GROUP BY Language",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List each language and the number of TV Channels using it. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "question": "For each language, list the number of TV Channels that use it.",
        "result": "Language, COUNT(*) as Num_of_Channels\n FROM TV_Channel\n GROUP BY Language;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### For each language, list the number of TV Channels that use it. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "result": "TV_Channel.series_name \nFROM \nTV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE \nCartoon.Title = \"The Rise of the Blue Beetle!\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "question": "What is the serial name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "result": "TV_Channel.series_name \nFROM \nTV_Channel \nINNER JOIN \nCartoon \nON \nTV_Channel.id = Cartoon.Channel \nWHERE \nCartoon.Title = \"The Rise of the Blue Beetle\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the serial name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the name of all  animations showed on TV Channel with series name \"Sky Radio\".",
        "result": "Cartoon.Title FROM Cartoon \nINNER JOIN TV_series ON Cartoon.Channel = TV_series.Channel\nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = 'Sky Radio'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the name of all  animations showed on TV Channel with series name \"Sky Radio\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the name of all the animations that are on the TV Channel with the series name \"Sky Radio\"?",
        "result": "Cartoon.Title \nFROM Cartoon \nINNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = \"Sky Radio\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the name of all the animations that are on the TV Channel with the series name \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "List the Episode of all TV series sorted by rating.",
        "result": "TV_series.Episode \nFROM TV_series \nORDER BY TV_series.Rating DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the Episode of all TV series sorted by rating. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode FROM TV_series ORDER BY rating",
        "question": "What are all of the episodes ordered by ratings?",
        "result": "TV_series.Episode \nFROM TV_series \nORDER BY TV_series.Rating DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are all of the episodes ordered by ratings? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "List top 3 highest score  TV series. List the TV series's Episode and score.",
        "result": "TV_series.Episode, TV_series.Rating\n FROM TV_series\n ORDER BY TV_series.Rating DESC\n LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List top 3 highest score  TV series. List the TV series's Episode and score. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "question": "What are 3 most highly rated episodes in the TV series table and what were those scores?",
        "result": "TV_series.Episode, TV_series.Rating \n FROM TV_series \n ORDER BY Rating DESC \n LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are 3 most highly rated episodes in the TV series table and what were those scores? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is minimum and maximum share of TV series?",
        "result": "MIN(Share), MAX(Share) FROM TV_series;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is minimum and maximum share of TV series? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "question": "What is the maximum and minimum share for the TV series?",
        "result": "MAX(Share), MIN(Share) FROM TV_series;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the maximum and minimum share for the TV series? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the airdate of TV series with Episode \"A Love of a Lifetime\"?",
        "result": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the airdate of TV series with Episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "When did the episode \"A Love of a Lifetime\" released?",
        "result": "Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### When did the episode \"A Love of a Lifetime\" released? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "result": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "question": "What is the score per week for the episode \"A Love of a Lifetime\"?",
        "result": "TV_series.Weekly_Rank, TV_series.Rating \n FROM TV_series\n WHERE TV_series.Episode = 'A Love of a Lifetime'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the score per week for the episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the TV Channel of TV serial with Episode \"A Love of a Lifetime\"? List the TV Channel's serial name.",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = \"A Love of a Lifetime\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the TV Channel of TV serial with Episode \"A Love of a Lifetime\"? List the TV Channel's serial name. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "question": "What is the serial name that has the episode \"A Love of a Lifetime\"?",
        "result": "TV_Channel.series_name \nFROM TV_Channel \nINNER JOIN TV_series ON TV_Channel.id = TV_series.Channel \nWHERE TV_series.Episode = \"A Love of a Lifetime\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the serial name that has the episode \"A Love of a Lifetime\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "result": "TV_series.Episode \nFROM \nTV_series \nINNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE \nTV_Channel.series_name = \"Sky Radio\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "result": "Episode FROM TV_series WHERE Channel = \"Sky Radio\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the episode for the TV series named \"Sky Radio\"? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "Find the number of animations directed by each of the listed directors.",
        "result": "Cartoon.Directed_by, COUNT(Cartoon.id) \n FROM Cartoon\n GROUP BY Cartoon.Directed_by",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the number of animations directed by each of the listed directors. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "question": "How many animations did each director create?",
        "result": "Cartoon.Directed_by, COUNT(Cartoon.id) AS Total_Animations \nFROM Cartoon \nGROUP BY Cartoon.Directed_by",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### How many animations did each director create? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "question": "Find the production number and channel of the most recently released cartoon.",
        "result": "Cartoon.Production_code, Cartoon.Channel\nFROM Cartoon\nWHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the production number and channel of the most recently released cartoon. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1",
        "question": "What is the produdction number and channel of the most recent cartoon?",
        "result": "Cartoon.Production_code, Cartoon.Channel \nFROM Cartoon \nWHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the produdction number and channel of the most recent cartoon? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "Find the package choice and serial name of the TV channel that has HD TV.",
        "result": "TV_Channel.Package_Option, TV_Channel.series_name \n FROM TV_Channel \n WHERE TV_Channel.Hight_definition_TV = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the package choice and serial name of the TV channel that has HD TV. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "question": "What are the package options and the name of the serial for the TV Channel that supports HD TV?",
        "result": "Package_Option, series_name \n FROM TV_Channel \n WHERE Hight_definition_TV = 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options and the name of the serial for the TV Channel that supports HD TV? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are playing some animation written by Todd Casey?",
        "result": "TV_Channel.Country\nFROM TV_Channel\nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey'\nAND TV_Channel.Content = 'animation'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries' tv channels are playing some animation written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the State that have animations on TV that were written by Todd Casey?",
        "result": "TV_Channel.Country\nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the State that have animations on TV that were written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "which countries' tv channels are not playing any animation written by Todd Casey?",
        "result": "TV_Channel.Country\nFROM TV_Channel\nWHERE TV_Channel.id NOT IN (\n  SELECT Cartoon.Channel\n  FROM Cartoon\n  WHERE Cartoon.Written_by = 'Todd Casey'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### which countries' tv channels are not playing any animation written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "question": "What are the States that are not playing animations written by Todd Casey?",
        "result": "State FROM States\nWHERE State NOT IN (\n  SELECT Country FROM Cartoon\n  WHERE Written_by = 'Todd Casey'\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the States that are not playing animations written by Todd Casey? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "Find the serial name and State of the tv channel that is playing some animation directed by Ben Jones and Michael Chang?",
        "result": "TV_Channel.series_name, TV_Channel.Country\nFROM TV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### Find the serial name and State of the tv channel that is playing some animation directed by Ben Jones and Michael Chang? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "question": "What is the serial name and nation of all TV channels that are playing animations directed by Ben Jones and animations directed by Michael Chang?",
        "result": "TV_Channel.series_name, TV_Channel.Country \nFROM \nTV_Channel \nINNER JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang') \nAND TV_Channel.Content = 'Animation';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the serial name and nation of all TV channels that are playing animations directed by Ben Jones and animations directed by Michael Chang? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "result": "Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the pixel aspect ratio and nation of the tv channels that do not use English. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "question": "What is the pixel aspect ratio and nation of origin for all TV channels that do not use English?",
        "result": "TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\nFROM TV_Channel\nWHERE TV_Channel.Language != 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What is the pixel aspect ratio and nation of origin for all TV channels that do not use English? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM tv_channel where country in(select country from tv_channel GROUP BY country HAVING count(*)  >  2)",
        "question": "find id of the tv channels that from the States where have more than two tv channels.",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.Country = \"States\" \nGROUP BY TV_Channel.Country \nHAVING COUNT(TV_Channel.id) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find id of the tv channels that from the States where have more than two tv channels. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM tv_channel where country in(select country from tv_channel GROUP BY country HAVING count(*)  >  2)",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "result": "id FROM TV_Channel\nGROUP BY id\nHAVING COUNT(*) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of all tv channels that have more than 2 TV channels? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "find the id of tv channels that do not play any animation directed by Ben Jones.",
        "result": "TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.id NOT IN (\n    SELECT Cartoon.Channel \n    FROM Cartoon\n    WHERE Cartoon.Directed_by = 'Ben Jones'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the id of tv channels that do not play any animation directed by Ben Jones. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
        "question": "What are the ids of the TV channels that do not have any animations directed by Ben Jones?",
        "result": "TV_Channel.id \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n    (SELECT Cartoon.Channel \n     FROM Cartoon \n     WHERE Cartoon.Directed_by = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the ids of the TV channels that do not have any animations directed by Ben Jones? \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "find the package option of the tv channel that do not have any animation directed by Ben Jones.",
        "result": "TV_Channel.Package_Option \nFROM TV_Channel \nWHERE TV_Channel.id NOT IN \n(SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### find the package option of the tv channel that do not have any animation directed by Ben Jones. \n SELECT"
    },
    {
        "db_id": "tvshow",
        "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "question": "What are the package options of all tv channels that are not playing any animations directed by Ben Jones?",
        "result": "TV_Channel.Package_Option \nFROM TV_Channel \nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel \nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)\n;# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)\n;# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)\n.# \n ### What are the package options of all tv channels that are not playing any animations directed by Ben Jones? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "How many car gamers are there?",
        "result": "COUNT(*) FROM poker_player;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### How many car gamers are there? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(*) FROM poker_player",
        "question": "Count the number of car gamers.",
        "result": "COUNT(*) FROM poker_player",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of car gamers. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "List the earnings of poker players in descending order.",
        "result": "Earnings \nFROM poker_player \nORDER BY Earnings DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the earnings of poker players in descending order. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "question": "What are the earnings of poker players, ordered descending by value?",
        "result": "Earnings \nFROM \npoker_player \nORDER BY \nEarnings DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the earnings of poker players, ordered descending by value? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "List the final tables made and the best finishes of car gamers.",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Nationality = 'car gamers'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the final tables made and the best finishes of car gamers. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "question": "What are the final tables made and best finishes for all car gamers?",
        "result": "poker_player.Final_Table_Made, poker_player.Best_Finish \n FROM poker_player \n JOIN people ON poker_player.People_ID = people.People_ID \n WHERE people.Nationality = 'car gamer'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the final tables made and best finishes for all car gamers? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "What is the average revenues of car gamers?",
        "result": "AVG(Earnings) FROM poker_player\nINNER JOIN people ON poker_player.People_ID = people.People_ID\nWHERE people.Occupation = 'car gamer'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average revenues of car gamers? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(Earnings) FROM poker_player",
        "question": "Return the average incomes across all car gamers.",
        "result": "AVG(Earnings) \nFROM poker_player",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the average incomes across all car gamers. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "What is the money rank of the car gamer with the highest incomes?",
        "result": "MAX(Money_Rank) FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the money rank of the car gamer with the highest incomes? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "question": "Return the money rank of the gamer with the greatest revenues.",
        "result": "Money_Rank FROM poker_player \nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the money rank of the gamer with the greatest revenues. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "What is the maximum number of last tables made among car gamers with revenues less than 200000?",
        "result": "MAX(Final_Table_Made) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE Earnings < 200000",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the maximum number of last tables made among car gamers with revenues less than 200000? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "question": "Return the maximum final tables made across all car gamers who have revenues below 200000.",
        "result": "MAX(Final_Table_Made) \nFROM poker_player \nINNER JOIN people \nON poker_player.People_ID = people.People_ID \nWHERE Earnings < 200000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the maximum final tables made across all car gamers who have revenues below 200000. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "What are the names of car gamers?",
        "result": "Name \nFROM people \nWHERE Name LIKE '%car%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of car gamers? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "question": "Return the names of all the car gamers.",
        "result": "people.Name \nFROM people \nWHERE people.People_ID IN (\n    SELECT Poker_Player_ID \n    FROM poker_player \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the names of all the car gamers. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "What are the names of car gamers whose incomes is higher than 300000?",
        "result": "Name \nFROM people \nINNER JOIN car_gamers ON people.People_ID = car_gamers.People_ID \nWHERE Income > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of car gamers whose incomes is higher than 300000? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "question": "Give the names of car gamers who have revenues above 300000.",
        "result": "people.Name FROM people\nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID\nWHERE poker_player.Earnings > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give the names of car gamers who have revenues above 300000. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "List the names of car gamers ordered by the final tables made in ascending order.",
        "result": "people.Name\nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID\nORDER BY poker_player.Final_Table_Made ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the names of car gamers ordered by the final tables made in ascending order. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "question": "What are the names of car gamers, ordered ascending by the number of final tables they have made?",
        "result": "people.Name\nFROM people\nINNER JOIN poker_player\nON people.People_ID = poker_player.People_ID\nWHERE people.Name LIKE '%car gamers%'\nORDER BY poker_player.Final_Table_Made ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of car gamers, ordered ascending by the number of final tables they have made? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "What is the birth date of the car gamers with the lowest revenues?",
        "result": "people.Birth_Date \nFROM \n  people \n  INNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nWHERE \n  people.Nationality = 'car gamers' \nORDER BY \n  poker_player.Earnings \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the birth date of the car gamers with the lowest revenues? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "question": "Return the birth date of the car gamers with the lowest revenues.",
        "result": "people.Birth_Date \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE poker_player.Earnings = (\n   SELECT MIN(Earnings) FROM poker_player\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the birth date of the car gamers with the lowest revenues. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "What is the money rank of the tallest car gamer?",
        "result": "p.Money_Rank \nFROM poker_player p \nJOIN people pe ON p.People_ID = pe.People_ID \nWHERE pe.Height = (SELECT MAX(Height) FROM people)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the money rank of the tallest car gamer? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "question": "Return the money rank of the car gamer with the greatest height.",
        "result": "p1.Money_Rank \nFROM poker_player p1 \nJOIN people p2 ON p1.People_ID = p2.People_ID \nWHERE p2.Height = (SELECT MAX(Height) FROM people)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the money rank of the car gamer with the greatest height. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "What is the average revenues of car gamers with height higher than 200?",
        "result": "AVG(Earnings) FROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the average revenues of car gamers with height higher than 200? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "question": "Give average revenues of car gamers who are taller than 200.",
        "result": "AVG(Earnings) \nFROM poker_player \nINNER JOIN people ON poker_player.People_ID = people.People_ID \nWHERE people.Height > 200",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give average revenues of car gamers who are taller than 200. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "What are the names of car gamers in descending order of revenues?",
        "result": "Name \nFROM people \nINNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nORDER BY Earnings DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of car gamers in descending order of revenues? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "question": "Return the names of car gamers sorted by their revenues descending.",
        "result": "people.Name \nFROM \npeople INNER JOIN poker_player ON people.People_ID = poker_player.People_ID \nORDER BY \npoker_player.Earnings DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the names of car gamers sorted by their revenues descending. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "What are different country of people and the corresponding number of people from each country?",
        "result": "Nationality, COUNT(*) as count FROM people GROUP BY Nationality;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are different country of people and the corresponding number of people from each country? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "question": "How many people are there of each country?",
        "result": "Nationality, COUNT(*) \nFROM people \nGROUP BY Nationality",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### How many people are there of each country? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the most common country of people?",
        "result": "Nationality FROM people\nGROUP BY Nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What is the most common country of people? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the country that is most common across all people.",
        "result": "Nationality FROM people \nGROUP BY Nationality \nORDER BY COUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Give the country that is most common across all people. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "What are the countries that are shared by at least two people?",
        "result": "Nationality \nFROM people \nGROUP BY Nationality \nHAVING COUNT(DISTINCT People_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the countries that are shared by at least two people? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "question": "Return the countries for which there are two or more people.",
        "result": "Nationality FROM people\nGROUP BY Nationality\nHAVING COUNT(People_ID) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Return the countries for which there are two or more people. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "result": "people.Name, people.Birth_Date \nFROM people \nORDER BY people.Name ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the names and birth dates of people in ascending alphabetical order of name. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "result": "Name, Birth_Date\nFROM people\nORDER BY Name ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names and birth dates of people, ordered by their names in alphabetical order? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "Show names of people whose nationality is not \"Russia\".",
        "result": "Name FROM people WHERE Nationality != \"Russia\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Show names of people whose nationality is not \"Russia\". \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "question": "What are the names of people who are not from Russia?",
        "result": "Name FROM people WHERE Nationality != 'Russia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who are not from Russia? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "List the names of people that are not car gamers.",
        "result": "Name FROM people WHERE NOT EXISTS \n    (SELECT People_ID FROM poker_player WHERE poker_player.People_ID = people.People_ID)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### List the names of people that are not car gamers. \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "question": "What are the names of people who do not car gamer?",
        "result": "people.Name \nFROM \npeople LEFT JOIN poker_player \nON people.People_ID = poker_player.People_ID \nWHERE \npoker_player.People_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### What are the names of people who do not car gamer? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "How many distinct countries are there?",
        "result": "COUNT(DISTINCT Nationality) FROM people;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### How many distinct countries are there? \n SELECT"
    },
    {
        "db_id": "poker_player",
        "query": "SELECT count(DISTINCT Nationality) FROM people",
        "question": "Count the number of different countries.",
        "result": "COUNT(DISTINCT Nationality) FROM people;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)\n;# people(People_ID,Nationality,Name,Birth_Date,Height)\n.# \n ### Count the number of different countries. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM area_code_state",
        "question": "How many states are there?",
        "result": "COUNT(DISTINCT state) \nFROM AREA_CODE_STATE;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### How many states are there? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "question": "List the competitor numbers and names, ordered by competitor name descending.",
        "result": "contestant_number, contestant_name \nFROM \n  CONTESTANTS \nORDER BY \n  contestant_name DESC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### List the competitor numbers and names, ordered by competitor name descending. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "question": "List the vote ids, telephone numbers and states of all votes.",
        "result": "vote_id, phone_number, state \nFROM VOTES",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### List the vote ids, telephone numbers and states of all votes. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "question": "What are the maximum and minimum values of area codes?",
        "result": "MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the maximum and minimum values of area codes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "question": "What is last date created of votes from the state 'CA'?",
        "result": "MAX(created) FROM VOTES WHERE state='CA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What is last date created of votes from the state 'CA'? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "question": "What are the names of the participants whose names are not 'Jessie Alloway'",
        "result": "contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the names of the participants whose names are not 'Jessie Alloway' \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT DISTINCT state ,  created FROM votes",
        "question": "What are the distinct states and set up time of all votes?",
        "result": "DISTINCT state, created \nFROM VOTES",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the distinct states and set up time of all votes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "question": "What are the participant numbers and names of the participants who had at least two votes?",
        "result": "contestant_number, contestant_name \nFROM \nCONTESTANTS \nWHERE \ncontestant_number IN (\n    SELECT \n        contestant_number \n    FROM \n        VOTES \n    GROUP BY \n        contestant_number \n    HAVING \n        COUNT(*) >= 2 \n    )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the participant numbers and names of the participants who had at least two votes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "question": "Of all the competitors who got voted, what is the competitor number and name of the competitor who got least votes?",
        "result": "contestant_number, contestant_name\nFROM CONTESTANTS\nWHERE contestant_number = (\n    SELECT contestant_number\n    FROM VOTES\n    GROUP BY contestant_number\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Of all the competitors who got voted, what is the competitor number and name of the competitor who got least votes? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "question": "What are the number of votes from nation 'NY' or 'CA'?",
        "result": "COUNT(*) FROM VOTES WHERE state='NY' OR state='CA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the number of votes from nation 'NY' or 'CA'? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
        "question": "How many competitors did not get voted?",
        "result": "COUNT(contestant_number) FROM CONTESTANTS\nWHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### How many competitors did not get voted? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the area number in which the most voters voted?",
        "result": "state, COUNT(*) AS total_votes\nFROM VOTES\nGROUP BY state\nORDER BY total_votes DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What is the area number in which the most voters voted? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "question": "What are the set up dates, states, and telephone numbers of the votes that were for the competitor named 'Tabatha Gehling'?",
        "result": "VOTES.created, VOTES.state, VOTES.phone_number \n FROM VOTES \n JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number \n WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### What are the set up dates, states, and telephone numbers of the votes that were for the competitor named 'Tabatha Gehling'? \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "question": "List the area codes in which voters voted both for the participant 'Tabatha Gehling' and the participant 'Kelly Clauss'.",
        "result": "AREA_CODE_STATE.area_code\nFROM AREA_CODE_STATE\nINNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state\nINNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\nWHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'\nAND AREA_CODE_STATE.area_code IN (\n    SELECT AREA_CODE_STATE.area_code\n    FROM AREA_CODE_STATE\n    INNER JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state\n    INNER JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\n    WHERE CONTESTANTS.contestant_name = 'Kelly Clauss'\n)\nGROUP BY AREA_CODE_STATE.area_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### List the area codes in which voters voted both for the participant 'Tabatha Gehling' and the participant 'Kelly Clauss'. \n SELECT"
    },
    {
        "db_id": "voter_1",
        "query": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE \"%Al%\"",
        "question": "Return the names the competitors whose names contain the substring 'Al'.",
        "result": "contestant_name \nFROM \nCONTESTANTS \nWHERE \ncontestant_name LIKE '%Al%';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# AREA_CODE_STATE(area_code,state)\n;# CONTESTANTS(contestant_number,contestant_name)\n;# VOTES(vote_id,phone_number,state,contestant_number,created)\n.# \n ### Return the names the competitors whose names contain the substring 'Al'. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "What are the names of all the States that became sovereign after 1950?",
        "result": "Name FROM country WHERE IndepYear > 1950",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of all the States that became sovereign after 1950? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "question": "Give the names of the nations that were founded after 1950.",
        "result": "Name FROM country WHERE IndepYear > 1950;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of the nations that were founded after 1950. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many nations have a republic as their form of government?",
        "result": "COUNT(*) \nFROM country \nWHERE GovernmentForm = 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many nations have a republic as their form of government? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "question": "How many nations have governments that are republics?",
        "result": "COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many nations have governments that are republics? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "What is the total territory of the State in the Caribbean region?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Region='Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total territory of the State in the Caribbean region? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "question": "How much territory do the countires in the Caribbean cover together?",
        "result": "SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'North America' AND Region = 'Caribbean'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How much territory do the countires in the Caribbean cover together? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "Which continent is Anguilla in?",
        "result": "Continent FROM country WHERE Code2='AI';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent is Anguilla in? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "question": "What is the continent name which Anguilla belongs to?",
        "result": "Continent FROM country WHERE Code = 'AIA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the continent name which Anguilla belongs to? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "Which region is the city Kabul located in?",
        "result": "country.Region\nFROM city\nJOIN country ON city.CountryCode = country.Code\nWHERE city.Name = 'Kabul';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which region is the city Kabul located in? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "question": "What region is Kabul in?",
        "result": "country.Region \nFROM \ncity \nJOIN country ON city.CountryCode = country.Code \nWHERE \ncity.Name = 'Kabul'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What region is Kabul in? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "Which language is the most popular in Aruba?",
        "result": "Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW'\nORDER BY Percentage DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "question": "What language is predominantly spoken in Aruba?",
        "result": "Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW'\nAND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What language is predominantly spoken in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "What are the population and lifespan in Brazil?",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the population and lifespan in Brazil? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "question": "Give me Brazil's population and lifespan.",
        "result": "Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give me Brazil's population and lifespan. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What are the region and number of people of Angola?",
        "result": "Region, Population FROM country WHERE Name='Angola';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the region and number of people of Angola? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "question": "What region does Angola belong to and what is its number of residents?",
        "result": "Region, Population \nFROM \n    country \nWHERE \n    Name = 'Angola'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What region does Angola belong to and what is its number of residents? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "What is the average lifespan for countries in the region of Central Africa?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average lifespan for countries in the region of Central Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "question": "How long is the people’s average lifespan in Central Africa?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND Region='Central Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How long is the people’s average lifespan in Central Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "What is the name of nation that has the shortest lifespan in Asia?",
        "result": "country.Name \nFROM \ncountry \nWHERE \ncountry.Continent = 'Asia' \nORDER BY \ncountry.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the name of nation that has the shortest lifespan in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "question": "Give the name of the State in Asia with the lowest lifespan.",
        "result": "country.Name \nFROM country \nWHERE country.Continent = 'Asia' \nORDER BY country.LifeExpectancy ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the State in Asia with the lowest lifespan. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "What is the total number of people and maximum GNP in Asia?",
        "result": "SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of people and maximum GNP in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "result": "SUM(city.Population), MAX(country.GNP) \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Asia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Asia, and what is the largest GNP among them? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "What is the average lifespan in African nations that are republics?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average lifespan in African nations that are republics? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "question": "Give the average lifespan for nations in Africa which are republics?",
        "result": "AVG(LifeExpectancy) FROM country WHERE Continent='Africa' AND GovernmentForm LIKE '%Republic%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the average lifespan for nations in Africa which are republics? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "What is the total territory of the continents Asia and Europe?",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total territory of the continents Asia and Europe? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "question": "Give the total territory covered by countries in Asia or Europe.",
        "result": "SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the total territory covered by countries in Asia or Europe. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "How many people live in Gelderland district?",
        "result": "SUM(Population) FROM city WHERE District = 'Gelderland'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in Gelderland district? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "question": "What is the total number of residents of Gelderland district?",
        "result": "SUM(Population) FROM city WHERE District = 'Gelderland'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of residents of Gelderland district? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "What is the average GNP and total number of people in all States whose government is US territory?",
        "result": "AVG(country.GNP), SUM(city.Population) \nFROM country \nJOIN city ON country.Capital = city.ID \nWHERE country.GovernmentForm LIKE '%US territory%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the average GNP and total number of people in all States whose government is US territory? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "question": "Give the mean GNP and total number of people of nations which are considered US territory.",
        "result": "AVG(GNP), SUM(Population) \n FROM country \n WHERE Continent = 'North America' AND Region = 'Caribbean' AND IndepYear IS NULL",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the mean GNP and total number of people of nations which are considered US territory. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "How many unique languages are spoken in the world?",
        "result": "COUNT(DISTINCT Language) AS UniqueLanguages \nFROM countrylanguage",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many unique languages are spoken in the world? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "question": "What is the number of distinct languages used around the world?",
        "result": "COUNT(DISTINCT Language) FROM countrylanguage",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the number of distinct languages used around the world? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many type of governments are in Africa?",
        "result": "COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent='Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many type of governments are in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "question": "How many different types of governments are there in Africa?",
        "result": "COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent='Africa'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many different types of governments are there in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "What is the total number of languages used in Aruba?",
        "result": "COUNT(Language) \nFROM countrylanguage \nWHERE CountryCode = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of languages used in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "question": "How many languages are spoken in Aruba?",
        "result": "COUNT(Language)\nFROM countrylanguage\nWHERE CountryCode = 'ABW'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many languages are spoken in Aruba? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages does Afghanistan have?",
        "result": "COUNT(*) FROM countrylanguage WHERE CountryCode='AFG' AND IsOfficial='T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many official languages does Afghanistan have? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "question": "How many official languages are spoken in Afghanistan?",
        "result": "COUNT(*) \nFROM countrylanguage \nWHERE CountryCode = 'AFG' AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many official languages are spoken in Afghanistan? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is name of the nation that speaks the largest number of languages?",
        "result": "country.Name \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nGROUP BY countrylanguage.CountryCode \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is name of the nation that speaks the largest number of languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Give the name of the State that uses the greatest amount of languages.",
        "result": "country.Name \nFROM country \nINNER JOIN (\n    SELECT CountryCode, COUNT(*) AS num_languages\n    FROM countrylanguage\n    GROUP BY CountryCode\n    ORDER BY num_languages DESC\n    LIMIT 1\n) AS lang_count \nON country.Code = lang_count.CountryCode",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name of the State that uses the greatest amount of languages. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent has the most diverse languages?",
        "result": "country.Continent \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nGROUP BY country.Continent \nORDER BY COUNT(DISTINCT countrylanguage.Language) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent has the most diverse languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Which continent speaks the most languages?",
        "result": "Continent, COUNT(DISTINCT Language) AS LanguageCount\nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code\nGROUP BY Continent \nORDER BY LanguageCount DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which continent speaks the most languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "How many States speak both English and Dutch?",
        "result": "COUNT(*) \nFROM \n    (SELECT \n         CountryCode, \n         COUNT(DISTINCT Language) AS num_languages \n     FROM \n         countrylanguage \n     WHERE \n         Language IN ('English', 'Dutch') \n         AND IsOfficial = 'T' \n     GROUP BY \n         CountryCode \n     HAVING \n         num_languages = 2) AS subquery;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many States speak both English and Dutch? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "question": "What is the number of countries that use English and Dutch?",
        "result": "COUNT(DISTINCT CountryCode) \nFROM countrylanguage \nWHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the number of countries that use English and Dutch? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "What are the names of States speak both English and French?",
        "result": "State.Name \nFROM State \nINNER JOIN Language ON State.Code = Language.CountryCode \nWHERE Language.Language = 'English' AND State.Code IN \n    (SELECT State.Code \n     FROM State \n     INNER JOIN Language ON State.Code = Language.CountryCode \n     WHERE Language.Language = 'French')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of States speak both English and French? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"",
        "question": "Give the names of countries that speak both English and French.",
        "result": "DISTINCT c.Name \nFROM country c \nJOIN countrylanguage cl ON c.Code = cl.CountryCode \nWHERE cl.Language = 'English' AND cl.IsOfficial = 1 \nAND EXISTS (SELECT 1 FROM countrylanguage cl2 WHERE cl2.CountryCode = c.Code AND cl2.Language = 'French' AND cl2.IsOfficial = 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of countries that speak both English and French. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "What are the names of States where both English and French are official languages?",
        "result": "DISTINCT city.District \nFROM city \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nINNER JOIN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AS EnglishCountries ON city.CountryCode = EnglishCountries.CountryCode \nINNER JOIN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French' AND IsOfficial = 'T') AS FrenchCountries ON city.CountryCode = FrenchCountries.CountryCode \nWHERE city.CountryCode = EnglishCountries.CountryCode AND city.CountryCode = FrenchCountries.CountryCode;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of States where both English and French are official languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "question": "Give the names of nations with English and French as official languages.",
        "result": "country.Name \nFROM country \nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language IN ('English', 'French') AND countrylanguage.IsOfficial = 'T' \nGROUP BY country.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of nations with English and French as official languages. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "result": "COUNT(DISTINCT c.Continent) \nFROM countrylanguage cl \nJOIN country c ON cl.CountryCode = c.Code \nWHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the number of distinct continents where Chinese is spoken? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "question": "How many continents speak Chinese?",
        "result": "COUNT(DISTINCT country.Continent) \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many continents speak Chinese? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "What are the regions that use English or Dutch?",
        "result": "country.Region \nFROM \ncountrylanguage \nJOIN country ON country.Code=countrylanguage.CountryCode \nWHERE \n(countrylanguage.Language='English' OR countrylanguage.Language='Dutch')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the regions that use English or Dutch? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "question": "Which regions speak Dutch or English?",
        "result": "country.Region \nFROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE countrylanguage.Language IN ('Dutch', 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which regions speak Dutch or English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "What are the nations where either English or Dutch is the official language?",
        "result": "CountryCode \nFROM countrylanguage \nWHERE Language='English' OR Language='Dutch' AND IsOfficial='T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the nations where either English or Dutch is the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "question": "Which nations have either English or Dutch as an official language?",
        "result": "CountryCode, Name \nFROM \n    countrylanguage \nJOIN \n    country \nON \n    country.Code = countrylanguage.CountryCode \nWHERE \n    (Language = 'English' OR Language = 'Dutch') AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which nations have either English or Dutch as an official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "Which language is the most popular on the Asian continent?",
        "result": "Language FROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code FROM country\n    WHERE Continent = 'Asia'\n    ORDER BY Population DESC\n    LIMIT 1\n)\nORDER BY Percentage DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is the most popular on the Asian continent? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "question": "What is the language that is used by the largest number of Asian nations?",
        "result": "countrylanguage.Language\nFROM countrylanguage\nJOIN country ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Asia'\nGROUP BY countrylanguage.Language\nORDER BY COUNT(countrylanguage.CountryCode) DESC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language that is used by the largest number of Asian nations? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "Which languages are spoken by only one country in republic governments?",
        "result": "language \nFROM \n  countrylanguage cl \n  INNER JOIN country c ON cl.CountryCode = c.Code \nWHERE \n  c.GovernmentForm LIKE '%Republic%' \nGROUP BY \n  cl.Language \nHAVING \n  COUNT(DISTINCT cl.CountryCode) = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which languages are spoken by only one country in republic governments? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "question": "What languages are only used by a single country with a republic government?",
        "result": "countrylanguage.Language \nFROM \ncountrylanguage \nJOIN \ncountry ON countrylanguage.CountryCode = country.Code \nWHERE \ncountry.GovernmentForm LIKE '%Republic%' AND \n(countrylanguage.Percentage = 100 \nOR \n(SELECT COUNT(*) \nFROM countrylanguage \nWHERE countrylanguage.CountryCode = country.Code) = 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What languages are only used by a single country with a republic government? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "Find the town with the largest number of people that uses English.",
        "result": "city.Name FROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE countrylanguage.Language = 'English' \nORDER BY city.Population DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the town with the largest number of people that uses English. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "question": "What is the most populace city that speaks English?",
        "result": "city.Name \nFROM \ncity \nINNER JOIN \ncountrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE \ncountrylanguage.Language = 'English' \nORDER BY \ncity.Population DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the most populace city that speaks English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Find the name, populace and expected life length of asian country with the largest area?",
        "result": "country.Name, country.Population, country.LifeExpectancy\nFROM country\nWHERE continent = 'Asia'\nORDER BY SurfaceArea DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the name, populace and expected life length of asian country with the largest area? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the name, number of residents, and lifespan of the largest Asian country by land?",
        "result": "country.Name, country.Population, country.LifeExpectancy \nFROM country \nWHERE continent = 'Asia' \nORDER BY SurfaceArea DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name, number of residents, and lifespan of the largest Asian country by land? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "What is average lifespan in the nations where English is not the official language?",
        "result": "AVG(LifeExpectancy) \nFROM country \nWHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE IsOfficial = 'T' AND Language = 'English')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is average lifespan in the nations where English is not the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "question": "Give the mean lifespan of nations in which English is not the official language.",
        "result": "AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the mean lifespan of nations in which English is not the official language. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "What is the total number of people living in the nations that do not use English?",
        "result": "SUM(Population) FROM country WHERE Code NOT IN \n(SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of people living in the nations that do not use English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "question": "How many people live in nations that do not speak English?",
        "result": "SUM(Population)\nFROM country\nWHERE Code NOT IN (\n  SELECT CountryCode\n  FROM countrylanguage\n  WHERE Language = 'English'\n  AND IsOfficial = 'T'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many people live in nations that do not speak English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "result": "countrylanguage.Language \nFROM \ncountrylanguage \nJOIN \ncountry \nON countrylanguage.CountryCode = country.Code \nWHERE \ncountry.HeadOfState = 'Beatrix' \nAND \ncountrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the official language spoken in the country whose head of state is Beatrix? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "question": "What is the official language used in the country the name of whose leader of country is Beatrix.",
        "result": "countrylanguage.Language \nFROM countrylanguage \nINNER JOIN country ON countrylanguage.CountryCode = country.Code \nWHERE country.HeadOfState = 'Beatrix' \nAND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the official language used in the country the name of whose leader of country is Beatrix. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "What is the total number of unique official languages spoken in the nations that are founded before 1930?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode IN \n(SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = \"T\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of unique official languages spoken in the nations that are founded before 1930? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "question": "For the nations founded before 1930, what is the total number of distinct official languages?",
        "result": "COUNT(DISTINCT Language) \nFROM countrylanguage \nWHERE CountryCode IN \n  (SELECT Code FROM country WHERE IndepYear < 1930) \n  AND IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### For the nations founded before 1930, what is the total number of distinct official languages? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "What are the nations that have greater territory than any country in Europe?",
        "result": "Code, Name\nFROM country\nWHERE SurfaceArea > (\n    SELECT MAX(SurfaceArea)\n    FROM country\n    WHERE Continent = 'Europe'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the nations that have greater territory than any country in Europe? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "question": "Which countries have greater territory than that of any country in Europe?",
        "result": "Code, Name\nFROM country\nWHERE SurfaceArea > (\n  SELECT MAX(SurfaceArea)\n  FROM country\n  WHERE Continent = 'Europe'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which countries have greater territory than that of any country in Europe? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "What are the African nations that have a  number of residents less than any country in Asia?",
        "result": "Country.Name \nFROM Country \nWHERE Continent = 'Africa' \nAND Population < (SELECT MIN(Population) FROM Country WHERE Continent = 'Asia')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the African nations that have a  number of residents less than any country in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "question": "Which African nations have a smaller number of residents than that of any country in Asia?",
        "result": "Code, Name \nFROM country \nWHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which African nations have a smaller number of residents than that of any country in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "Which Asian nations have a number of residents that is larger than any country in Africa?",
        "result": "Code, Name \nFROM country \nWHERE Continent = 'Asia' AND Population > ALL \n(SELECT Population FROM country WHERE Continent = 'Africa');",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which Asian nations have a number of residents that is larger than any country in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "question": "What are the Asian States which have a number of residents larger than that of any country in Africa?",
        "result": "Country.Name \nFROM \nCountry \nJOIN City ON Country.Code = City.CountryCode \nWHERE \nCountry.Continent = 'Asia' AND \nCity.Population > (SELECT MAX(Population) FROM Country WHERE Continent = 'Africa')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the Asian States which have a number of residents larger than that of any country in Africa? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the nation abbreviations for nations that do not speak English?",
        "result": "country.Code FROM country \nLEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language <> 'English' \nGROUP BY country.Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the nation abbreviations for nations that do not speak English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the State abbreviations for States that do not speak English.",
        "result": "city.ID, city.Name, city.CountryCode, city.District, city.Population \nFROM city \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE countrylanguage.Language != 'English' \nGROUP BY country.Code2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the State abbreviations for States that do not speak English. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "What are the nation abbreviations of nations where people use languages other than English?",
        "result": "country.Code \nFROM country \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE countrylanguage.Language <> 'English' \nGROUP BY country.Code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the nation abbreviations of nations where people use languages other than English? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "question": "Give the nation abbreviations for nations in which people speak langauges that are not English.",
        "result": "country.Code2\nFROM country\nINNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language <> 'English'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the nation abbreviations for nations in which people speak langauges that are not English. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "What are the abbreviations of the nations that do not speak English and whose government types are not Republic?",
        "result": "Code FROM country WHERE Code NOT IN \n (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') AND GovernmentForm <> 'Republic'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the abbreviations of the nations that do not speak English and whose government types are not Republic? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "question": "Return the abbreviations of States that do not speak English and do not have Republics for governments.",
        "result": "city.ID FROM city\nJOIN country ON city.CountryCode = country.Code\nLEFT JOIN countrylanguage ON countrylanguage.CountryCode = country.Code\nWHERE countrylanguage.Language != 'English' \nAND country.GovernmentForm != 'Republic' \nAND countrylanguage.IsOfficial = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the abbreviations of States that do not speak English and do not have Republics for governments. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "Which towns are in European countries where English is not the official language?",
        "result": "city.Name \nFROM city \nINNER JOIN country ON city.CountryCode = country.Code \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nWHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which towns are in European countries where English is not the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "question": "What are the names of towns in Europe for which English is not the official language?",
        "result": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Europe' \nAND countrylanguage.Language != 'English' \nAND countrylanguage.IsOfficial = 'False';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of towns in Europe for which English is not the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Whic`h unique towns are in  Asian States where Chinese is the official language?",
        "result": "city.Name \nFROM city \nINNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nINNER JOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Whic`h unique towns are in  Asian States where Chinese is the official language? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "question": "Return the different names of towns that are in Asia and for which Chinese is the official language.",
        "result": "city.Name \nFROM city \nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the different names of towns that are in Asia and for which Chinese is the official language. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "What are the name, founded year, and territory of the country with the smallest number of residents?",
        "result": "Name, IndepYear, Continent \n FROM country \n WHERE Population = (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the name, founded year, and territory of the country with the smallest number of residents? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "question": "Give the name, year of founded, and territory of the country that has the lowest number of people.",
        "result": "Name, IndepYear, Continent\nFROM country\nWHERE Population = (SELECT MIN(Population) FROM country)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name, year of founded, and territory of the country that has the lowest number of people. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "What are the number of residents, name and leader of the country with the largest area?",
        "result": "country.Name, country.HeadOfState, MAX(country.SurfaceArea * country.Population) AS \"Number of Residents\" \n FROM country \n GROUP BY country.Name \n ORDER BY \"Number of Residents\" DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the number of residents, name and leader of the country with the largest area? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "question": "Give the name, number of residents, and leader of country for the country that has the largest territory.",
        "result": "Name, Population, HeadOfState \nFROM country \nWHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the name, number of residents, and leader of country for the country that has the largest territory. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "Return the nation name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "result": "Country.Name, COUNT(DISTINCT CountryLanguage.Language) AS NumLanguages \n FROM Country \n JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode \n GROUP BY Country.Name \n HAVING COUNT(DISTINCT CountryLanguage.Language) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the nation name and the numbers of languages spoken for each country that speaks at least 3 languages. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "question": "What are the names of nations that speak more than 2 languages, as well as how many languages they speak?",
        "result": "country.Name, COUNT(countrylanguage.Language) AS NumLanguages\nFROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nGROUP BY country.Name\nHAVING COUNT(countrylanguage.Language) > 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of nations that speak more than 2 languages, as well as how many languages they speak? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "Find the number of towns in each district whose number of residents is greater than the average population of towns?",
        "result": "District, COUNT(*) \nFROM city \nWHERE Population > (SELECT AVG(Population) FROM city) \nGROUP BY District;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the number of towns in each district whose number of residents is greater than the average population of towns? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",
        "question": "How many towns in each district have a population that is above the average number of residents across all towns?",
        "result": "city.District, COUNT(city.Name)\nFROM city\nWHERE city.Population > (SELECT AVG(city.Population) FROM city)\nGROUP BY city.District;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### How many towns in each district have a population that is above the average number of residents across all towns? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "Find the government type name and total number of residents for each government type whose average lifespan is longer than 72.",
        "result": "GovernmentForm, SUM(Population) as TotalResidents \nFROM country \nWHERE LifeExpectancy > 72 \nGROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the government type name and total number of residents for each government type whose average lifespan is longer than 72. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "question": "What are the different government types and what is the total number of residents of each for government types that have an average lifespan greater than 72?",
        "result": "GovernmentForm, SUM(Population) \nFROM country \nWHERE LifeExpectancy > 72 \nGROUP BY GovernmentForm",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different government types and what is the total number of residents of each for government types that have an average lifespan greater than 72? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "Find the average lifespan and total number of people for each continent where the average lifespan is shorter than 72?",
        "result": "Continent, AVG(LifeExpectancy), SUM(Population) \n FROM country \n WHERE LifeExpectancy < 72 \n GROUP BY Continent;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Find the average lifespan and total number of people for each continent where the average lifespan is shorter than 72? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "question": "What are the different continents and the total number of people and average lifespan corresponding to each, for continents that have an average lifespan less than 72?",
        "result": "Continent, SUM(Population), AVG(LifeExpectancy)\n FROM country\n WHERE LifeExpectancy < 72\n GROUP BY Continent",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the different continents and the total number of people and average lifespan corresponding to each, for continents that have an average lifespan less than 72? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "What are the names and areas of States with the top 5 largest territory?",
        "result": "Name, SurfaceArea \n FROM country \n ORDER BY SurfaceArea DESC \n LIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names and areas of States with the top 5 largest territory? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "question": "Return the names and territory of the 5 largest countries.",
        "result": "Name, Continent \nFROM country \nORDER BY Population DESC \nLIMIT 5;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names and territory of the 5 largest countries. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "What are names of nations with the top 3 largest number of people?",
        "result": "Name FROM country \nORDER BY Population DESC \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are names of nations with the top 3 largest number of people? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "question": "Return the names of the 3 most populated countries.",
        "result": "Name \nFROM \ncountry \nORDER BY \nPopulation DESC \nLIMIT 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 most populated countries. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "What are the names of the countries with the 3 lowest number of peoples?",
        "result": "Name FROM country ORDER BY Population ASC LIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the countries with the 3 lowest number of peoples? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "question": "Return the names of the 3 nations with the fewest people.",
        "result": "Name \nFROM country \nORDER BY Population \nLIMIT 3;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of the 3 nations with the fewest people. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "how many nations are in Asia?",
        "result": "COUNT(*) FROM country WHERE Continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### how many nations are in Asia? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "question": "Count the number of nations in Asia.",
        "result": "COUNT(*) FROM country WHERE continent = 'Asia';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of nations in Asia. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "What are the names of the States that are in the continent of Europe and have a number of people of 80000?",
        "result": "Name FROM city\nWHERE CountryCode IN (SELECT Code FROM country WHERE Continent='Europe')\nAND Population=80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the names of the States that are in the continent of Europe and have a number of people of 80000? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "question": "Give the names of nations that are in Europe and have a number of people equal to 80000.",
        "result": "Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the names of nations that are in Europe and have a number of people equal to 80000. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "question": "What is the total number of people and average territory of countries in the continent of North America whose territory is bigger than 3000？",
        "result": "AVG(SurfaceArea), SUM(Population) \nFROM country \nWHERE Continent='North America' AND SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of people and average territory of countries in the continent of North America whose territory is bigger than 3000？ \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
        "question": "Give the total number of people and average territory corresponding to countries in North America that have a territory greater than 3000.",
        "result": "SUM(country.Population), AVG(country.SurfaceArea)\nFROM country \nWHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the total number of people and average territory corresponding to countries in North America that have a territory greater than 3000. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "What are the towns whose number of residents is between 160000 and 900000?",
        "result": "Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the towns whose number of residents is between 160000 and 900000? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "question": "Return the names of towns that have a number of people between 160000 and 900000.",
        "result": "Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the names of towns that have a number of people between 160000 and 900000. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Which language is spoken by the largest number of nations?",
        "result": "Language\nFROM\ncountrylanguage\nGROUP BY\nLanguage\nHAVING\nCOUNT(DISTINCT CountryCode) = (\nSELECT\nCOUNT(DISTINCT CountryCode)\nFROM\ncountrylanguage\nGROUP BY\nLanguage\nORDER BY\nCOUNT(DISTINCT CountryCode) DESC\nLIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Which language is spoken by the largest number of nations? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the language that is spoken in the most nations.",
        "result": "Language \nFROM countrylanguage \nGROUP BY Language \nORDER BY COUNT(DISTINCT CountryCode) DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Give the language that is spoken in the most nations. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What is the language spoken by most people in each State?",
        "result": "city.District, countrylanguage.Language\nFROM city\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nGROUP BY city.District\nHAVING MAX(countrylanguage.Percentage * city.Population)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the language spoken by most people in each State? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "question": "What are the nation abbreviations of the different nations, and what are the languages spoken by the most people for each?",
        "result": "country.Code AS NationAbbreviation, \ncountrylanguage.Language AS MostSpokenLanguage \nFROM countrylanguage \nJOIN country ON countrylanguage.CountryCode = country.Code \nWHERE Percentage = (\n  SELECT MAX(Percentage) \n  FROM countrylanguage \n  WHERE CountryCode = country.Code\n) \nGROUP BY country.Code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the nation abbreviations of the different nations, and what are the languages spoken by the most people for each? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What is the total number of nations where Spanish is spoken by most people?",
        "result": "COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What is the total number of nations where Spanish is spoken by most people? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Count the number of nations for which Spanish is the predominantly spoken language.",
        "result": "COUNT(*) FROM countrylanguage WHERE Language='Spanish' AND IsOfficial='T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Count the number of nations for which Spanish is the predominantly spoken language. \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "What are the codes of nations where Spanish is spoken by most people?",
        "result": "CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### What are the codes of nations where Spanish is spoken by most people? \n SELECT"
    },
    {
        "db_id": "world_1",
        "query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "question": "Return the codes of States for which Spanish is the predominantly spoken language.",
        "result": "country.Code \nFROM countrylanguage \nJOIN country \nON countrylanguage.CountryCode = country.Code \nWHERE countrylanguage.Language = 'Spanish' \nAND countrylanguage.IsOfficial = 'T';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# city(ID,Name,CountryCode,District,Population)\n;# sqlite_sequence(name,seq)\n;# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)\n;# countrylanguage(CountryCode,Language,IsOfficial,Percentage)\n.# \n ### Return the codes of States for which Spanish is the predominantly spoken language. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(*) FROM conductor",
        "question": "How many directors are there?",
        "result": "COUNT(*) FROM conductor;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### How many directors are there? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(*) FROM conductor",
        "question": "Count the number of directors.",
        "result": "COUNT(*) FROM conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of directors. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "List the names of directors in ascending order of age.",
        "result": "Name FROM conductor ORDER BY Age ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of directors in ascending order of age. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "question": "What are the names of directors, ordered by age?",
        "result": "Name FROM conductor ORDER BY Age ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of directors, ordered by age? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "What are the names of directors whose countries are not \"USA\"?",
        "result": "Name FROM conductor WHERE Nationality != \"USA\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of directors whose countries are not \"USA\"? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "question": "Return the names of directors that do not have the country \"USA\".",
        "result": "Name FROM conductor \n WHERE Nationality <> 'USA'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the names of directors that do not have the country \"USA\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "What are the record enterprise of ensembles in descending order of years in which they were set up?",
        "result": "Record_Company, Year_of_Founded \nFROM orchestra \nORDER BY Year_of_Founded DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the record enterprise of ensembles in descending order of years in which they were set up? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "question": "Return the record enterprise of ensembles, sorted descending by the years in which they were set up.",
        "result": "Record_Company\nFROM orchestra\nORDER BY Year_of_Founded DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the record enterprise of ensembles, sorted descending by the years in which they were set up. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "What is the average guest of shows?",
        "result": "AVG(Attendance) FROM show",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the average guest of shows? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT avg(Attendance) FROM SHOW",
        "question": "Return the average guest across all shows.",
        "result": "AVG(Attendance) FROM show",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the average guest across all shows. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "result": "MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\";",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the maximum and minimum share of performances whose type is not \"Live final\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "question": "Return the maximum and minimum shares for performance that do not have the type \"Live final\".",
        "result": "MAX(Share), MIN(Share)\nFROM performance\nWHERE Type != 'Live final'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Return the maximum and minimum shares for performance that do not have the type \"Live final\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "How many different countries do directors have?",
        "result": "COUNT(DISTINCT Nationality) FROM conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### How many different countries do directors have? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT count(DISTINCT Nationality) FROM conductor",
        "question": "Count the number of different countries of directors.",
        "result": "COUNT(DISTINCT Nationality) FROM conductor",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of different countries of directors. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "List names of directors in descending order of time of as a director.",
        "result": "Name FROM conductor ORDER BY Year_of_Work DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List names of directors in descending order of time of as a director. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "question": "What are the names of directors, sorted descending by the time they became a director?",
        "result": "Name FROM conductor ORDER BY Year_of_Work DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of directors, sorted descending by the time they became a director? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "List the name of the director with the most years of as a director.",
        "result": "Name \nFROM conductor \nWHERE Year_of_Work = (\n  SELECT MAX(Year_of_Work)\n  FROM conductor\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the name of the director with the most years of as a director. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "question": "What is the name of the director who has worked the greatest number of years?",
        "result": "Name FROM conductor \nORDER BY Year_of_Work DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the name of the director who has worked the greatest number of years? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "Show the names of directors and the ensembles they have directed.",
        "result": "conductor.Name, orchestra.Orchestra\nFROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of directors and the ensembles they have directed. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "question": "What are the names of directors as well as the corresonding ensembles that they have directed?",
        "result": "conductor.Name, orchestra.Orchestra\nFROM conductor\nINNER JOIN orchestra\nON conductor.Conductor_ID = orchestra.Conductor_ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of directors as well as the corresonding ensembles that they have directed? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "Show the names of directors that have conducted more than one ensembles.",
        "result": "conductor.Name\nFROM conductor\nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nGROUP BY conductor.Name\nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the names of directors that have conducted more than one ensembles. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "question": "What are the names of directors who have directed at more than one ensemble?",
        "result": "conductor.Name FROM conductor \nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Conductor_ID \nHAVING COUNT(DISTINCT orchestra.Orchestra_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of directors who have directed at more than one ensemble? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Show the name of the director that has directed the most number of ensembles.",
        "result": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nJOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID \nJOIN show ON performance.Performance_ID = show.Performance_ID \nWHERE show.If_first_show = 1 \nGROUP BY conductor.Name \nORDER BY COUNT(DISTINCT orchestra.Orchestra_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the name of the director that has directed the most number of ensembles. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the name of the director who has directed the most ensembles?",
        "result": "conductor.Name \nFROM conductor \nJOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nGROUP BY conductor.Name \nORDER BY COUNT(Orchestra_ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the name of the director who has directed the most ensembles? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "Please show the name of the director that has directed ensembles set up after 2008.",
        "result": "conductor.Name\nFROM conductor\nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID\nWHERE orchestra.Year_of_Founded > 2008;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the name of the director that has directed ensembles set up after 2008. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "question": "What are the names of directors who have conducted ensembles set up after the year 2008?",
        "result": "Name FROM conductor \nINNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID \nWHERE orchestra.Year_of_Founded > 2008",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the names of directors who have conducted ensembles set up after the year 2008? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "Please show the different record enterprise and the corresponding number of ensembles.",
        "result": "Record_Company, COUNT(DISTINCT Orchestra_ID) \n FROM orchestra \n GROUP BY Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the different record enterprise and the corresponding number of ensembles. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "question": "How many ensembles does each enterprise manage?",
        "result": "Orchestra.Record_Company, COUNT(DISTINCT Orchestra.Orchestra_ID) \nFROM Orchestra \nGROUP BY Orchestra.Record_Company",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### How many ensembles does each enterprise manage? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "Please show the record type of ensembles in ascending order of count.",
        "result": "Orchestra, COUNT(*) as count FROM orchestra\nGROUP BY Orchestra\nORDER BY count ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Please show the record type of ensembles in ascending order of count. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "question": "What are the major record formats of ensembles, sorted by their frequency?",
        "result": "Major_Record_Format, COUNT(*) AS Frequency \n FROM orchestra \n GROUP BY Major_Record_Format \n ORDER BY Frequency DESC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the major record formats of ensembles, sorted by their frequency? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "List the record enterprise shared by the most number of ensembles.",
        "result": "Record_Company\nFROM orchestra\nGROUP BY Record_Company\nORDER BY COUNT(DISTINCT Orchestra_ID) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the record enterprise shared by the most number of ensembles. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the record enterprise used by the greatest number of ensembles?",
        "result": "Record_Company, COUNT(Orchestra_ID) AS num_ensembles \n FROM orchestra \n GROUP BY Record_Company \n ORDER BY num_ensembles DESC \n LIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What is the record enterprise used by the greatest number of ensembles? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "List the names of ensembles that have no performance.",
        "result": "Orchestra \nFROM orchestra \nLEFT JOIN performance \nON orchestra.Orchestra_ID = performance.Orchestra_ID \nWHERE performance.Performance_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### List the names of ensembles that have no performance. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "question": "What are the ensembles that do not have any performance?",
        "result": "Orchestra \nFROM orchestra \nWHERE Orchestra_ID NOT IN \n    (SELECT Orchestra_ID \n     FROM performance)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the ensembles that do not have any performance? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "Show the record enterprises shared by ensembles founded before 2003 and after 2003.",
        "result": "Record_Company \nFROM orchestra \nWHERE Year_of_Founded < 2003 \nINTERSECT \nSELECT Record_Company \nFROM orchestra \nWHERE Year_of_Founded >= 2003;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the record enterprises shared by ensembles founded before 2003 and after 2003. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
        "question": "What are the record enterprises that are used by both ensembles founded before 2003 and those founded after 2003?",
        "result": "Record_Company FROM orchestra\nWHERE Year_of_Founded < 2003\nAND Record_Company IN (\n    SELECT Record_Company FROM orchestra\n    WHERE Year_of_Founded > 2003\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are the record enterprises that are used by both ensembles founded before 2003 and those founded after 2003? \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Find the number of ensembles whose record type is \"CD\" or \"DVD\".",
        "result": "COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Find the number of ensembles whose record type is \"CD\" or \"DVD\". \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "question": "Count the number of ensembles that have CD or DVD as their record type.",
        "result": "COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD','DVD')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Count the number of ensembles that have CD or DVD as their record type. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "Show the years in which ensembles that have given more than one performance are set up.",
        "result": "\n\nYear_of_Founded FROM orchestra \nWHERE Orchestra_ID IN \n(SELECT Orchestra_ID FROM performance \nGROUP BY Orchestra_ID HAVING COUNT(DISTINCT Performance_ID) > 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### Show the years in which ensembles that have given more than one performance are set up. \n SELECT"
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "question": "What are years of seting up for ensembles that have had more than a single performance?",
        "result": "orchestra.Year_of_Founded\nFROM orchestra \nINNER JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID\nGROUP BY orchestra.Orchestra_ID\nHAVING COUNT(DISTINCT performance.Performance_ID) > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)\n;# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)\n;# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)\n;# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)\n.# \n ### What are years of seting up for ensembles that have had more than a single performance? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "How many students are there?",
        "result": "COUNT(*) FROM Highschooler;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many students are there? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler",
        "question": "Count the number of students.",
        "result": "COUNT(*) FROM Highschooler;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of students. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "Show the names and grades of each student.",
        "result": "name, grade\nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names and grades of each student. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name ,  grade FROM Highschooler",
        "question": "What are the names and grades for each student?",
        "result": "name, grade FROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names and grades for each student? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler",
        "question": "Show all the grades of the students.",
        "result": "grade\nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show all the grades of the students. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler",
        "question": "What is the grade of each student?",
        "result": "Highschooler.grade, Highschooler.ID\nFROM Highschooler",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the grade of each student? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What grade is Kyle in?",
        "result": "grade \nFROM Highschooler \nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What grade is Kyle in? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Return the grade for the student named Kyle.",
        "result": "grade FROM Highschooler WHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade for the student named Kyle. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "Show the names of all students in grade 10.",
        "result": "name FROM Highschooler WHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all students in grade 10. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade  =  10",
        "question": "What are the names of all students in grade 10?",
        "result": "name \nFROM Highschooler \nWHERE grade = 10;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of all students in grade 10? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "Show the ID of the student named Kyle.",
        "result": "ID \nFROM Highschooler \nWHERE name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ID of the student named Kyle. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "question": "What is Kyle's id?",
        "result": "ID\nFROM Highschooler\nWHERE name = 'Kyle';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is Kyle's id? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "How many students are there in grade 9 or 10?",
        "result": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many students are there in grade 9 or 10? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "question": "Count the number of students in grades 9 or 10.",
        "result": "COUNT(*) FROM Highschooler WHERE grade IN (9,10);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of students in grades 9 or 10. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "Show the number of students for each grade.",
        "result": "grade, COUNT(*) AS num_students \n FROM Highschooler \n GROUP BY grade;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the number of students for each grade. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "question": "How many students are in each grade?",
        "result": "grade, count(*) \nFROM Highschooler \nGROUP BY grade",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many students are in each grade? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Which grade has the most students?",
        "result": "grade \nFROM \nHighschooler \nGROUP BY \ngrade \nORDER BY \nCOUNT(*) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grade has the most students? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the grade that has the greatest number of students.",
        "result": "grade \nFROM Highschooler \nGROUP BY grade \nORDER BY COUNT(ID) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the grade that has the greatest number of students. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Show me all grades that have at least 4 students.",
        "result": "grade \nFROM Highschooler \nGROUP BY grade \nHAVING COUNT(ID) >= 4",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show me all grades that have at least 4 students. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "question": "Which grades have 4 or more students?",
        "result": "grade FROM Highschooler \nGROUP BY grade \nHAVING COUNT(*) >= 4;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Which grades have 4 or more students? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "result": "Highschooler.ID, COUNT(Friend.friend_id) AS num_of_friends\nFROM Highschooler\nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the student IDs and numbers of friends corresponding to each. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "question": "How many friends does each student have?",
        "result": "Highschooler.ID, COUNT(Friend.friend_id) AS num_friends\nFROM Highschooler \nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many friends does each student have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of students and their corresponding number of friends.",
        "result": "Highschooler.name, COUNT(Friend.student_id) \nFROM Highschooler \nLEFT JOIN Friend \nON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students and their corresponding number of friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of the students and how many friends does each have?",
        "result": "Highschooler.name, COUNT(Friend.friend_id)\nFROM Highschooler\nLEFT JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of the students and how many friends does each have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the student who has the greatest number of friends?",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the student who has the greatest number of friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the name of the student with the most friends.",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Friend.friend_id) DESC\nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the name of the student with the most friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "Show the names of students who have at least 3 friends.",
        "result": "Highschooler.name \nFROM Highschooler \nINNER JOIN Friend ON Highschooler.ID = Friend.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(Friend.friend_id) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 3 friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "question": "What are the names of students who have 3 or more friends?",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Friend ON Highschooler.ID = Friend.student_id\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 3",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 3 or more friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Show the names of all of the student Kyle's friends.",
        "result": "Highschooler.name \nFROM \nHighschooler \nJOIN \nFriend ON Highschooler.ID = Friend.friend_id \nJOIN \nHighschooler AS Kyle ON Kyle.ID = Friend.student_id \nWHERE \nKyle.name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of all of the student Kyle's friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the names of friends of the student Kyle.",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.friend_id\nJOIN Highschooler AS Kyle ON Friend.student_id = Kyle.ID\nWHERE Kyle.name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the names of friends of the student Kyle. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many friends does the student Kyle have?",
        "result": "COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many friends does the student Kyle have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Count the number of friends Kyle has.",
        "result": "COUNT(*) \nFROM Highschooler h \nJOIN Friend f ON h.ID = f.student_id \nWHERE h.name = 'Kyle'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of friends Kyle has. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "Show ids of all students who do not have any friends.",
        "result": "Highschooler.ID \nFROM Highschooler \nWHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend UNION SELECT Friend.friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show ids of all students who do not have any friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
        "question": "What are the ids of students who do not have friends?",
        "result": "Highschooler.ID\nFROM Highschooler\nWHERE Highschooler.ID NOT IN \n    (SELECT DISTINCT friend.student_id FROM Friend\n     UNION\n     SELECT DISTINCT friend.friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the ids of students who do not have friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "Show names of all students who do not have any friends.",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (\n  SELECT Friend.student_id \n  FROM Friend\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show names of all students who do not have any friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "question": "What are the names of students who have no friends?",
        "result": "Highschooler.name\nFROM Highschooler\nWHERE Highschooler.ID NOT IN (\n    SELECT friend.student_id FROM Friend\n    UNION\n    SELECT friend.friend_id FROM Friend\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have no friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "Show the ids of students who have friends and are also liked by someone else.",
        "result": "Highschooler.ID\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nJOIN Likes ON Friend.friend_id = Likes.liked_id AND Highschooler.ID = Likes.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the ids of students who have friends and are also liked by someone else. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "question": "What are the ids of students who both have friends and are liked?",
        "result": "Highschooler.ID \nFROM Highschooler \nWHERE Highschooler.ID IN (\n    SELECT f.student_id \n    FROM Friend f \n    JOIN Likes l ON f.friend_id = l.liked_id AND f.student_id = l.student_id \n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the ids of students who both have friends and are liked? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Friend ON Highschooler.ID = Friend.student_id\nJOIN Likes ON Friend.friend_id = Likes.student_id AND Likes.liked_id = Highschooler.ID",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show name of all students who have some friends and also are liked by someone else. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
        "question": "What are the names of students who both have friends and are liked?",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Friend ON Highschooler.ID = Friend.student_id \nJOIN Likes ON Highschooler.ID = Likes.student_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who both have friends and are liked? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "Count the number of likes for each student id.",
        "result": "student_id, COUNT(*) \nFROM Likes \nGROUP BY student_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Count the number of likes for each student id. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "question": "How many likes correspond to each student id?",
        "result": "student_id, COUNT(*) FROM Likes GROUP BY student_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many likes correspond to each student id? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "Show the names of students who have likes, and numbers of likes for each.",
        "result": "Highschooler.name, COUNT(Likes.liked_id) AS num_likes\nFROM Highschooler \nINNER JOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have likes, and numbers of likes for each. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "question": "What are the names of students who have likes, and how many likes does each have?",
        "result": "Highschooler.name, COUNT(Likes.liked_id) \nFROM Highschooler \nJOIN Likes ON Highschooler.ID = Likes.student_id \nGROUP BY Highschooler.ID \nHAVING COUNT(Likes.liked_id) > 0;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have likes, and how many likes does each have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the student who has the greatest number of likes?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Likes.liked_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the name of the student who has the greatest number of likes? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Give the name of the student with the most likes.",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.ID\nORDER BY COUNT(Likes.liked_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Give the name of the student with the most likes. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have at least 2 likes.",
        "result": "Highschooler.name \nFROM \nHighschooler \nINNER JOIN \nLikes \nON Highschooler.ID = Likes.student_id \nGROUP BY Likes.student_id \nHAVING COUNT(*) >= 2",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have at least 2 likes. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have 2 or more interests?",
        "result": "Highschooler.name\nFROM Highschooler\nJOIN Likes ON Highschooler.ID = Likes.student_id\nGROUP BY Highschooler.ID\nHAVING COUNT(DISTINCT Likes.liked_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have 2 or more interests? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "result": "Highschooler.name \nFROM Highschooler \nJOIN Friend ON Highschooler.ID = Friend.student_id \nWHERE Highschooler.grade > 5 \nGROUP BY Highschooler.ID \nHAVING COUNT(DISTINCT Friend.friend_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Show the names of students who have a grade higher than 5 and have at least 2 friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "question": "What are the names of students who have a grade of over 5 and have 2 or more friends?",
        "result": "Highschooler.name\nFROM Highschooler\nINNER JOIN Friend ON Highschooler.ID = Friend.student_id\nWHERE Highschooler.grade > 5\nGROUP BY Highschooler.ID\nHAVING COUNT(Friend.friend_id) >= 2;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What are the names of students who have a grade of over 5 and have 2 or more friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "How many interests does Kyle have?",
        "result": "COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### How many interests does Kyle have? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "question": "Return the number of interests that the student named Kyle has.",
        "result": "COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Return the number of interests that the student named Kyle has. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the average grade of all students who have some friends.",
        "result": "AVG(grade) \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Find the average grade of all students who have some friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the average grade of students who have friends?",
        "result": "AVG(Highschooler.grade) \nFROM Highschooler \nWHERE Highschooler.ID IN \n(SELECT DISTINCT friend_id FROM Friend UNION SELECT DISTINCT student_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the average grade of students who have friends? \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "Find the minimum grade of students who have no friends.",
        "result": "MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### Find the minimum grade of students who have no friends. \n SELECT"
    },
    {
        "db_id": "network_1",
        "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "question": "What is the lowest grade of students who do not have any friends?",
        "result": "Highschooler.grade \nFROM Highschooler \nWHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Highschooler(ID,name,grade)\n;# Friend(student_id,friend_id)\n;# Likes(student_id,liked_id)\n.# \n ### What is the lowest grade of students who do not have any friends? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Which states have both guardians and veterinarians living there?",
        "result": "state \nFROM Owners \nWHERE state IN \n    (SELECT state \n     FROM Professionals \n     WHERE role_code = 'Guardian') \nAND state IN \n    (SELECT state \n     FROM Professionals \n     WHERE role_code = 'Veterinarian') \nGROUP BY state",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which states have both guardians and veterinarians living there? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "question": "Find the states where both guardians and veterinarians live.",
        "result": "state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the states where both guardians and veterinarians live. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "What is the average age of the dogs who have gone through any medical care?",
        "result": "AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of the dogs who have gone through any medical care? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Find the average age of the dogs who went through health care.",
        "result": "AVG(age) FROM Dogs\nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nWHERE Treatments.treatment_type_code = \"HC\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the average age of the dogs who went through health care. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Which veterinarians live in the state of Indiana or have done more than 2 medical cares? List his or her id, family name and cell phone.",
        "result": "professional_id, last_name, cell_number \nFROM Professionals \nWHERE state = 'Indiana' OR professional_id IN (SELECT professional_id \n                                               FROM Treatments \n                                               GROUP BY professional_id \n                                               HAVING COUNT(*) > 2);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which veterinarians live in the state of Indiana or have done more than 2 medical cares? List his or her id, family name and cell phone. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "question": "Find the id, last name and cell phone of the veterinarians who live in the state of Indiana or have performed more than two health-cares.",
        "result": "professional_id, last_name, cell_number \nFROM Professionals \nWHERE state = 'Indiana' OR professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    WHERE treatment_type_code = 'HC' \n    GROUP BY professional_id \n    HAVING COUNT(*) > 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id, last name and cell phone of the veterinarians who live in the state of Indiana or have performed more than two health-cares. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "Which dogs have not cost their guardian more than 1000 for health-care? List the dog names.",
        "result": "Dogs.name \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.cost_of_treatment <= 1000 \nGROUP BY Dogs.name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs have not cost their guardian more than 1000 for health-care? List the dog names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
        "question": "What are the names of the dogs for which the guardian spent more than 1000 for health-care?",
        "result": "Dogs.name FROM Dogs \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.cost_of_treatment > 1000 \nGROUP BY Dogs.name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the names of the dogs for which the guardian spent more than 1000 for health-care? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Which first names are used for veterinarians or guardians but are not used as dog names?",
        "result": "first_name \nFROM Owners \nWHERE first_name NOT IN (SELECT name FROM Dogs) \nOR owner_id IN (SELECT professional_id FROM Professionals WHERE role_code = 'VETERINARIAN')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which first names are used for veterinarians or guardians but are not used as dog names? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "question": "Find the first names that are used for veterinarians or guardians but are not used as dog names.",
        "result": "first_name\nFROM Owners\nWHERE first_name NOT IN (\n  SELECT name \n  FROM Dogs\n) \nAND owner_id IN (\n  SELECT professional_id \n  FROM Professionals \n  WHERE role_code = 'veterinarian' \n  OR role_code = 'guardian'\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the first names that are used for veterinarians or guardians but are not used as dog names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Which veterinarian did not operate any medical care on dogs? List the veterinarian's id, role and email.",
        "result": "Professionals.professional_id, Professionals.role_code, Professionals.email_address \n FROM Professionals \n WHERE Professionals.professional_id NOT IN \n    (SELECT DISTINCT professional_id FROM Treatments) \n   AND Professionals.role_code = 'veterinarian';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which veterinarian did not operate any medical care on dogs? List the veterinarian's id, role and email. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "Give me the id, role and email of the veterinarians who did not perform any health-care on dogs.",
        "result": "professionals.professional_id, professionals.role_code, professionals.email_address\nFROM professionals\nWHERE professionals.professional_id NOT IN (\n    SELECT professional_id\n    FROM treatments\n    WHERE treatment_type_code = 'HC'\n) AND professionals.role_code = 'VET';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Give me the id, role and email of the veterinarians who did not perform any health-care on dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which people owns the most dogs? List the people id, given name and family name.",
        "result": "Owners.owner_id, Owners.first_name, Owners.last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nGROUP BY Owners.owner_id \nORDER BY COUNT(Dogs.dog_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which people owns the most dogs? List the people id, given name and family name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Return the people id, given name and family name of the guardian who has the most dogs.",
        "result": "Owners.owner_id, Owners.first_name, Owners.last_name\nFROM Owners\nWHERE Owners.owner_id = (\n    SELECT Dogs.owner_id \n    FROM Dogs\n    GROUP BY Dogs.owner_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Return the people id, given name and family name of the guardian who has the most dogs. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which veterinarians have done at least two medical cares? List the veterinarian's id, role, and given name.",
        "result": "professional_id, role_code, first_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments\n    WHERE treatment_type_code = 'medical care'\n    GROUP BY professional_id\n    HAVING COUNT(*) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which veterinarians have done at least two medical cares? List the veterinarian's id, role, and given name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "What are the id, role, and given name of the veterinarians who have performed two or more health-cares?",
        "result": "professional_id, role_code, first_name \nFROM Professionals \nWHERE professional_id IN (SELECT professional_id \n                          FROM Treatments \n                          WHERE treatment_type_code = 'HC' \n                          GROUP BY professional_id \n                          HAVING COUNT(*) >= 2);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the id, role, and given name of the veterinarians who have performed two or more health-cares? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "What is the name of the breed with the most puppies?",
        "result": "Breeds.breed_name \nFROM Breeds \nJOIN Dogs ON Breeds.breed_code = Dogs.breed_code \nWHERE Dogs.date_departed IS NULL \nGROUP BY Breeds.breed_name \nORDER BY COUNT(Dogs.dog_id) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the name of the breed with the most puppies? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "question": "Which breed do the most puppies have? Give me the breed name.",
        "result": "Breeds.breed_name\nFROM Breeds\nINNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code\nWHERE Dogs.abandoned_yn = 'N'\nGROUP BY Breeds.breed_name\nORDER BY COUNT(Dogs.dog_id) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which breed do the most puppies have? Give me the breed name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Which guardian has paid for the most health cares on his or her dogs? List the guardian id and family name.",
        "result": "Owners.owner_id, Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id\nGROUP BY Owners.owner_id\nORDER BY SUM(Treatments.cost_of_treatment) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which guardian has paid for the most health cares on his or her dogs? List the guardian id and family name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "question": "Tell me the guardian id and family name of the guardian who spent the most on treatments of his or her puppies.",
        "result": "Owners.owner_id, Owners.last_name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nGROUP BY Owners.owner_id \nORDER BY SUM(Treatments.cost_of_treatment) DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the guardian id and family name of the guardian who spent the most on treatments of his or her puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "What is the describing details of the health-care type that costs the least money in total?",
        "result": "Treatment_Types.treatment_type_description, \nSUM(Treatments.cost_of_treatment) AS total_cost \nFROM Treatments \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code \nGROUP BY Treatment_Types.treatment_type_code \nORDER BY total_cost ASC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the describing details of the health-care type that costs the least money in total? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "question": "Give me the describing details of the health-care whose total cost is the lowest.",
        "result": "Treatment_Types.treatment_type_description, \nSUM(Treatments.cost_of_treatment) AS total_cost \nFROM Treatments \nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code \nGROUP BY Treatments.treatment_type_code \nHAVING total_cost = (SELECT MIN(total_cost) FROM \n(SELECT Treatments.treatment_type_code, SUM(Treatments.cost_of_treatment) AS total_cost \nFROM Treatments \nGROUP BY Treatments.treatment_type_code) \nAS total_costs_by_type)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Give me the describing details of the health-care whose total cost is the lowest. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Which guardian has paid the largest amount of money in total for their puppies? Show the guardian id and zip code.",
        "result": "Owners.owner_id, Owners.zip_code\nFROM Owners\nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id\nINNER JOIN Charges ON Dogs.size_code = Charges.charge_id\nGROUP BY Owners.owner_id\nORDER BY SUM(Charges.charge_amount) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which guardian has paid the largest amount of money in total for their puppies? Show the guardian id and zip code. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "question": "Find the guardian id and zip code of the guardian who spent the most money in total for his or her puppies.",
        "result": "Owners.owner_id, Owners.zip_code\nFROM Owners\nWHERE Owners.owner_id IN \n    (SELECT Dogs.owner_id \n     FROM Dogs \n     WHERE Dogs.age <= 1 AND Dogs.date_adopted IS NOT NULL)\nGROUP BY Owners.owner_id\nORDER BY SUM(\n    SELECT Treatments.cost_of_treatment\n    FROM Treatments \n    INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id\n    WHERE Dogs.owner_id = Owners.owner_id\n    ) DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the guardian id and zip code of the guardian who spent the most money in total for his or her puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Which veterinarians have done at least two types of health-care? List the veterinarian id and cell phone.",
        "result": "professional_id, cell_number\nFROM Professionals\nWHERE professional_id IN (\n  SELECT professional_id \n  FROM Treatments \n  GROUP BY professional_id \n  HAVING COUNT(DISTINCT treatment_type_code) >= 2\n)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which veterinarians have done at least two types of health-care? List the veterinarian id and cell phone. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "question": "Find the id and cell phone of the veterinarians who operate two or more types of health-care.",
        "result": "professional_id, cell_number\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id \n    FROM Treatments \n    WHERE treatment_type_code IN (\n        SELECT treatment_type_code \n        FROM Treatment_Types \n        WHERE treatment_type_description = 'health-care'\n        GROUP BY treatment_type_code \n        HAVING COUNT(*) >= 2\n    )\n    GROUP BY professional_id \n    HAVING COUNT(DISTINCT treatment_type_code) >= 2\n) AND role_code = 'veterinarian';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the id and cell phone of the veterinarians who operate two or more types of health-care. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN  Treatments AS T2 on T2.professional_id = T1.professional_id WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "What are the first name and family name of the veterinarians who have done medical care with cost below average?",
        "result": "Professionals.first_name, Professionals.last_name \nFROM Professionals \nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.treatment_type_code = \"medical care\" AND Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the first name and family name of the veterinarians who have done medical care with cost below average? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 on T2.professional_id = T1.professional_id WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "question": "Which veterinarians have operated a medical care that costs less than the average? Give me theor given names and family names.",
        "result": "Professionals.first_name, Professionals.last_name \nFROM Professionals \nINNER JOIN Treatments ON Professionals.professional_id = Treatments.professional_id \nWHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments) AND Treatments.treatment_type_code = 'MED'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which veterinarians have operated a medical care that costs less than the average? Give me theor given names and family names. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "List the date of each medical care, together with the given name of the veterinarian who operated it.",
        "result": "Treatments.date_of_treatment, Professionals.first_name || ' ' || Professionals.last_name AS vet_name\n FROM Treatments\n JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the date of each medical care, together with the given name of the veterinarian who operated it. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "question": "What are the date and the operating veterinarian's given name of each medical care?",
        "result": "Treatments.date_of_treatment, Professionals.first_name\nFROM Treatments \nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the date and the operating veterinarian's given name of each medical care? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "List the cost of each health-care and the corresponding health-care type describing details.",
        "result": "Treatment_Types.treatment_type_description, Treatments.cost_of_treatment\n FROM Treatments\n JOIN Treatment_Types\n ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the cost of each health-care and the corresponding health-care type describing details. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "question": "What are the cost and health-care type describing content of each health-care?",
        "result": "Treatment_Types.treatment_type_description, Treatments.cost_of_treatment\nFROM Treatment_Types\nJOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the cost and health-care type describing content of each health-care? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List each guardian's first name, last name, and the size of his for her dog.",
        "result": "Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Sizes ON Dogs.size_code = Sizes.size_code;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List each guardian's first name, last name, and the size of his for her dog. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each guardians's first name, last name, and the size of their dog?",
        "result": "Owners.first_name, Owners.last_name, Sizes.size_description \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nJOIN Sizes ON Dogs.size_code = Sizes.size_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are each guardians's first name, last name, and the size of their dog? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "List pairs of the guardians's given name and the puppies's name.",
        "result": "Owners.first_name, Dogs.name \n FROM Owners\n JOIN Dogs\n ON Owners.owner_id = Dogs.owner_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List pairs of the guardians's given name and the puppies's name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "question": "What are each guardians's given name and their puppies's name?",
        "result": "Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are each guardians's given name and their puppies's name? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "List the names of the puppies of the rarest breed and the health care dates of them.",
        "result": "Dogs.name, Treatments.date_of_treatment \nFROM Dogs \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nJOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Breeds.breed_name = (SELECT breed_name FROM Breeds ORDER BY COUNT(*) LIMIT 1)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the names of the puppies of the rarest breed and the health care dates of them. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "question": "Which dogs are of the rarest breed? Show their names and medical care dates.",
        "result": "Dogs.name, Treatments.date_of_treatment \n FROM Dogs \n JOIN Breeds ON Dogs.breed_code = Breeds.breed_code \n JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \n WHERE Breeds.breed_name = (\n    SELECT breed_name \n    FROM Breeds \n    GROUP BY breed_name \n    ORDER BY COUNT(*) ASC \n    LIMIT 1 \n )",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs are of the rarest breed? Show their names and medical care dates. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Which dogs are owned by someone who lives in Virginia? List the guardian's first name and the dog's name.",
        "result": "Owners.first_name, Dogs.name \nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'Virginia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which dogs are owned by someone who lives in Virginia? List the guardian's first name and the dog's name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "question": "Find the given names of guardians living in Virginia and the names of dogs they own.",
        "result": "Owners.first_name, Owners.last_name, Dogs.name\nFROM Owners \nINNER JOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Owners.state = 'Virginia'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the given names of guardians living in Virginia and the names of dogs they own. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "What are the arriving and leaving date of the puppies who have gone through a medical care?",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Treatments.treatment_type_code IN (SELECT treatment_type_code FROM Treatment_Types WHERE treatment_type_description = 'medical care')",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving and leaving date of the puppies who have gone through a medical care? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "question": "Find the arriving and leaving date of the puppies that received a health care.",
        "result": "Dogs.date_arrived, Dogs.date_departed \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Dogs.age < 1 AND Treatments.treatment_type_code = \"health care\"",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the arriving and leaving date of the puppies that received a health care. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "List the family name of the guardian owning the youngest puppy.",
        "result": "Owners.last_name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nWHERE Dogs.age = (\n  SELECT MIN(age)\n  FROM Dogs\n);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the family name of the guardian owning the youngest puppy. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "question": "Who owns the youngest puppy? Give me his or her last name.",
        "result": "Owners.last_name\nFROM Owners \nJOIN Dogs ON Owners.owner_id = Dogs.owner_id \nWHERE Dogs.age = (SELECT MIN(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Who owns the youngest puppy? Give me his or her last name. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "List the emails of the veterinarians who live in the state of Hawaii or the state of Wisconsin.",
        "result": "email_address \nFROM Professionals \nWHERE (state = 'Hawaii' OR state = 'Wisconsin') AND role_code = 'veterinarian';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the emails of the veterinarians who live in the state of Hawaii or the state of Wisconsin. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "question": "What are the emails of the veterinarians living in either the state of Hawaii or the state of Wisconsin?",
        "result": "email_address \nFROM Professionals \nWHERE state='Hawaii' OR state='Wisconsin' AND role_code='veterinarian'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the emails of the veterinarians living in either the state of Hawaii or the state of Wisconsin? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "What are the arriving and leaving date of all the puppies?",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs\nWHERE Dogs.age < 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the arriving and leaving date of all the puppies? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived ,  date_departed FROM Dogs",
        "question": "List the arriving and leaving date for all the puppies.",
        "result": "Dogs.date_arrived, Dogs.date_departed\nFROM Dogs",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the arriving and leaving date for all the puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "How many puppies went through any health cares?",
        "result": "COUNT(DISTINCT dog_id) FROM Dogs\nWHERE age < 1; \n\n# This query selects the count of distinct dog_id values from the Dogs table, where the age is less than 1 (i.e. puppies), indicating the number of puppies that went through any health care.",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many puppies went through any health cares? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "question": "Count the number of puppies that went through a health care.",
        "result": "COUNT(DISTINCT Dogs.dog_id) \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id \nWHERE Dogs.age < 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Count the number of puppies that went through a health care. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "How many veterinarians have performed any health care to puppies?",
        "result": "COUNT(DISTINCT professional_id) FROM Treatments \n JOIN Dogs ON Treatments.dog_id = Dogs.dog_id \n JOIN Breeds ON Dogs.breed_code = Breeds.breed_code \n WHERE Breeds.breed_name LIKE '%puppy%' AND Treatments.treatment_type_code = 'health care'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many veterinarians have performed any health care to puppies? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "question": "Find the number of veterinarians who have ever treated puppies.",
        "result": "COUNT(DISTINCT professional_id) \nFROM Treatments \nJOIN Dogs ON Treatments.dog_id = Dogs.dog_id \nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code \nWHERE Breeds.breed_name LIKE '%puppy%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the number of veterinarians who have ever treated puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Which veterinarians live in a city containing the substring 'West'? List his or her role, street, town and state.",
        "result": "professionals.role_code, professionals.street, professionals.city, professionals.state\nFROM professionals\nWHERE professionals.city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which veterinarians live in a city containing the substring 'West'? List his or her role, street, town and state. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "question": "Find the role, street, town and state of the veterinarians living in a town that contains the substring 'West'.",
        "result": "Professionals.role_code, Professionals.street, Professionals.city, Professionals.state \n FROM Professionals \n WHERE Professionals.city LIKE '%West%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the role, street, town and state of the veterinarians living in a town that contains the substring 'West'. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Which guardians live in the state whose name contains the substring 'North'? List his given name, family name and email.",
        "result": "first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Which guardians live in the state whose name contains the substring 'North'? List his given name, family name and email. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "question": "Return the given name, family name and email of the guardians living in a state whose name contains the substring 'North'.",
        "result": "Owners.first_name, Owners.last_name, Owners.email_address\nFROM Owners\nWHERE Owners.state LIKE '%North%'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Return the given name, family name and email of the guardians living in a state whose name contains the substring 'North'. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "How many puppies have an age below the average?",
        "result": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many puppies have an age below the average? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
        "question": "Count the number of puppies of an age below the average.",
        "result": "COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs) AND size_code = 'P'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Count the number of puppies of an age below the average. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "How much does the most recent health-care cost?",
        "result": "cost_of_treatment \nFROM Treatments \nWHERE treatment_type_code = 'healthcare' \nORDER BY date_of_treatment DESC \nLIMIT 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How much does the most recent health-care cost? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "question": "Show me the cost of the most recently performed medical care.",
        "result": "MAX(date_of_treatment), cost_of_treatment \n FROM Treatments \n WHERE treatment_type_code = 'MEDICAL'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Show me the cost of the most recently performed medical care. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "question": "How many puppies have not gone through any medical care?",
        "result": "COUNT(*) FROM Dogs \nWHERE age < 1 AND dog_id NOT IN \n(SELECT dog_id FROM Treatments) AND abandoned_yn = 'N';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many puppies have not gone through any medical care? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "question": "Tell me the number of puppies that have received any health-care.",
        "result": "COUNT(DISTINCT Dogs.dog_id) \nFROM Dogs \nINNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the number of puppies that have received any health-care. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "How many guardians temporarily do not have any puppies?",
        "result": "COUNT(*) FROM Owners \nWHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL) AND owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_arrived IS NOT NULL AND date_adopted IS NULL);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many guardians temporarily do not have any puppies? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "question": "Find the number of guardians who do not own any puppies at this moment.",
        "result": "COUNT(*) FROM Owners\nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the number of guardians who do not own any puppies at this moment. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "How many veterinarians did not operate any treatment on puppies?",
        "result": "COUNT(DISTINCT professional_id)\nFROM Professionals\nLEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id\nLEFT JOIN Dogs ON Treatments.dog_id = Dogs.dog_id\nWHERE Dogs.age < 1 OR Dogs.age IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How many veterinarians did not operate any treatment on puppies? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "question": "Find the number of veterinarians who have not treated any puppies.",
        "result": "COUNT(*) \nFROM Professionals \nWHERE professional_id NOT IN \n    (SELECT DISTINCT professional_id FROM Treatments \n     INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id \n     WHERE Dogs.age < 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the number of veterinarians who have not treated any puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "List the puppy name, age and weight of the puppies who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "result": "Dogs.name, Dogs.age, Dogs.weight \n FROM Dogs \n WHERE Dogs.abandoned_yn = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the puppy name, age and weight of the puppies who have been abandoned? 1 stands for yes, and 0 stands for no. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "question": "What are the puppy name, age and weight of the puppies that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "result": "Dogs.name, Dogs.age, Dogs.weight \nFROM Dogs \nWHERE Dogs.abandoned_yn = 1",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the puppy name, age and weight of the puppies that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "What is the average age of all the puppies?",
        "result": "AVG(age) FROM Dogs WHERE age <= 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the average age of all the puppies? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg(age) FROM Dogs",
        "question": "Compute the average age of all the puppies.",
        "result": "AVG(age) FROM Dogs WHERE age < 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Compute the average age of all the puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "What is the age of the oldest puppy?",
        "result": "MAX(age) FROM Dogs WHERE age <= 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the age of the oldest puppy? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(age) FROM Dogs",
        "question": "Tell me the age of the oldest puppy.",
        "result": "MAX(age) FROM Dogs WHERE age < 1 AND abandoned_yn = 'N';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Tell me the age of the oldest puppy. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "How much does each charge type costs? List both charge type and amount.",
        "result": "charge_type, charge_amount\nFROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How much does each charge type costs? List both charge type and amount. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type ,  charge_amount FROM Charges",
        "question": "List each charge type and its amount.",
        "result": "charge_type, charge_amount\nFROM Charges;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List each charge type and its amount. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "How much does the most expensive charge type costs?",
        "result": "MAX(charge_amount) \nFROM Charges",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### How much does the most expensive charge type costs? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max(charge_amount) FROM Charges",
        "question": "What is the charge amount of the most expensive charge type?",
        "result": "MAX(charge_amount) FROM Charges;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What is the charge amount of the most expensive charge type? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "List the email, cell phone and home phone of all the veterinarians.",
        "result": "Professionals.email_address, Professionals.home_phone, Professionals.cell_number \nFROM Professionals \nWHERE Professionals.role_code = 'veterinarian'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the email, cell phone and home phone of all the veterinarians. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "question": "What are the email, cell phone and home phone of each veterinarian?",
        "result": "Professionals.email_address, Professionals.cell_number, Professionals.home_phone\nFROM Professionals\nWHERE Professionals.role_code = 'vet';",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are the email, cell phone and home phone of each veterinarian? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "What are all the possible breed type and size type combinations?",
        "result": "Breeds.breed_name, Sizes.size_description\n FROM Breeds CROSS JOIN Sizes",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are all the possible breed type and size type combinations? \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "question": "Find the distinct breed type and size type combinations for puppies.",
        "result": "DISTINCT Breeds.breed_name, Sizes.size_description\nFROM Dogs\nJOIN Breeds ON Dogs.breed_code = Breeds.breed_code\nJOIN Sizes ON Dogs.size_code = Sizes.size_code\nWHERE Dogs.age < 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### Find the distinct breed type and size type combinations for puppies. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "List the given name of all the veterinarians along with the description of the medical care they have done.",
        "result": "Professionals.first_name, Professionals.last_name, Treatments.treatment_type_description\nFROM Professionals\nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### List the given name of all the veterinarians along with the description of the medical care they have done. \n SELECT"
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "question": "What are each veterinarian's first name and describing details of the health-care they have performed?",
        "result": "Professionals.first_name, Treatments.treatment_type_description\nFROM Professionals\nJOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Breeds(breed_code,breed_name)\n;# Charges(charge_id,charge_type,charge_amount)\n;# Sizes(size_code,size_description)\n;# Treatment_Types(treatment_type_code,treatment_type_description)\n;# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)\n;# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)\n;# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)\n;# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)\n.# \n ### What are each veterinarian's first name and describing details of the health-care they have performed? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "How many vocalists are there?",
        "result": "COUNT(*) FROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### How many vocalists are there? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT count(*) FROM singer",
        "question": "What is the count of  musicians?",
        "result": "COUNT(*) FROM singer;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the count of  musicians? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "List the name of vocalists in ascending order of net worth.",
        "result": "Name FROM singer ORDER BY Net_Worth_Millions ASC;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of vocalists in ascending order of net worth. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "question": "What are the names of  musicians ordered by ascending net worth?",
        "result": "Name \nFROM \nsinger \nORDER BY \nNet_Worth_Millions ASC",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of  musicians ordered by ascending net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth year and country of vocalists?",
        "result": "Birth_Year, Citizenship \nFROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth year and country of vocalists? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year ,  Citizenship FROM singer",
        "question": "What are the birth years and country of the musicians?",
        "result": "Birth_Year, Citizenship\nFROM singer",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the birth years and country of the musicians? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "List the name of vocalists whose citizenship is not \"France\".",
        "result": "Name \nFROM \nsinger \nWHERE \nCitizenship != 'France'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of vocalists whose citizenship is not \"France\". \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "question": "What are the names of the musicians who are not French citizens?",
        "result": "Name FROM singer WHERE Citizenship <> 'French'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the musicians who are not French citizens? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "Show the name of vocalists whose birth year is either 1948 or 1949?",
        "result": "Name FROM singer\nWHERE Birth_Year IN (1948, 1949);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the name of vocalists whose birth year is either 1948 or 1949? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "question": "What are the names of the musicians whose birth years are either 1948 or 1949?",
        "result": "Name FROM singer WHERE Birth_Year IN (1948,1949);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the musicians whose birth years are either 1948 or 1949? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the vocalist with the largest net worth?",
        "result": "Name FROM singer\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the vocalist with the largest net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "question": "What is the name of the vocalist who is worth the most?",
        "result": "singer.Name\nFROM singer\nORDER BY singer.Net_Worth_Millions DESC\nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of the vocalist who is worth the most? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "Show different citizenship of vocalists and the number of vocalists of each country.",
        "result": "Citizenship, COUNT(DISTINCT Singer_ID) FROM singer GROUP BY Citizenship",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show different citizenship of vocalists and the number of vocalists of each country. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "question": "For each country, how many musicians are from that country?",
        "result": "Citizenship, COUNT(*) \nFROM singer \nGROUP BY Citizenship;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### For each country, how many musicians are from that country? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "Please show the most common country of vocalists.",
        "result": "Citizenship, COUNT(*) AS count \nFROM singer \nGROUP BY Citizenship \nORDER BY count DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Please show the most common country of vocalists. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "question": "What is the msot common vocalist country?",
        "result": "Citizenship, COUNT(*) as count \nFROM singer \nGROUP BY Citizenship \nORDER BY count DESC \nLIMIT 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the msot common vocalist country? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "Show different country and the maximum net worth of musicians of each country.",
        "result": "Citizenship, MAX(Net_Worth_Millions)\nFROM singer\nGROUP BY Citizenship",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show different country and the maximum net worth of musicians of each country. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "question": "For each country, what is the maximum net worth?",
        "result": "Citizenship, MAX(Net_Worth_Millions)\nFROM singer\nGROUP BY Citizenship;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### For each country, what is the maximum net worth? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "Show names of songs and names of musicians.",
        "result": "song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show names of songs and names of musicians. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "question": "What are the song names and vocalist names?",
        "result": "song.Title, singer.Name \nFROM song \nJOIN singer \nON song.Singer_ID = singer.Singer_ID;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the song names and vocalist names? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "Show distinct names of musicians that have songs with sales more than 300000.",
        "result": "DISTINCT singer.Name \nFROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nWHERE song.Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show distinct names of musicians that have songs with sales more than 300000. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "question": "what are the different names of the vocalists that have sales more than 300000?",
        "result": "Name FROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE Sales > 300000;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### what are the different names of the vocalists that have sales more than 300000? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "Show the names of musicians that have more than one song.",
        "result": "Name FROM singer \n WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of musicians that have more than one song. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "question": "What are the names of the vocalists that have more than one songs?",
        "result": "Name \nFROM singer \nWHERE Singer_ID IN (SELECT Singer_ID \n                    FROM song \n                    GROUP BY Singer_ID \n                    HAVING COUNT(*) > 1);",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the names of the vocalists that have more than one songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "Show the names of musicians and the total sales of their songs.",
        "result": "singer.Name, SUM(song.Sales)\n FROM singer\n INNER JOIN song ON singer.Singer_ID = song.Singer_ID\n GROUP BY singer.Name",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the names of musicians and the total sales of their songs. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "question": "For each vocalist name, what is the total sales for their songs?",
        "result": "singer.Name, SUM(song.Sales) \nFROM singer \nINNER JOIN song ON singer.Singer_ID = song.Singer_ID \nGROUP BY singer.Name;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### For each vocalist name, what is the total sales for their songs? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "List the name of musicians that do not have any song.",
        "result": "Name \nFROM singer \nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### List the name of musicians that do not have any song. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "question": "What is the name of every vocalist that does not have any song?",
        "result": "singer.Name FROM singer\nLEFT JOIN song ON singer.Singer_ID = song.Singer_ID\nWHERE song.Song_ID IS NULL;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What is the name of every vocalist that does not have any song? \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "Show the citizenship shared by musicians with birth year before 1945 and after 1955.",
        "result": "Citizenship FROM singer \nWHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### Show the citizenship shared by musicians with birth year before 1945 and after 1955. \n SELECT"
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
        "question": "What are the country that are shared by musicians with a birth year before 1945 and after 1955?",
        "result": "DISTINCT Citizenship\nFROM singer\nWHERE Birth_Year < 1945 AND Birth_Year > 1955;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)\n;# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)\n.# \n ### What are the country that are shared by musicians with a birth year before 1945 and after 1955? \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT count(*) FROM Other_Available_Features",
        "question": "How many available characteristic are there in total?",
        "result": "COUNT(DISTINCT feature_id) AS total_characteristics \n FROM Other_Available_Features \n UNION ALL \n SELECT COUNT(DISTINCT feature_type_code) \n FROM Ref_Feature_Types",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### How many available characteristic are there in total? \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "question": "What is the characteristic type of feature AirCon?",
        "result": "Ref_Feature_Types.feature_type_name \nFROM Other_Available_Features \nINNER JOIN Ref_Feature_Types \nON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code \nWHERE Other_Available_Features.feature_name = 'AirCon'",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### What is the characteristic type of feature AirCon? \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "question": "Show the property type descriptions of properties belonging to that code.",
        "result": "Properties.property_type_code, Ref_Property_Types.property_type_description\n FROM Properties \n INNER JOIN Ref_Property_Types \n ON Properties.property_type_code = Ref_Property_Types.property_type_code",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### Show the property type descriptions of properties belonging to that code. \n SELECT"
    },
    {
        "db_id": "real_estate_properties",
        "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "result": "Properties.property_name \nFROM Properties \nINNER JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code \nWHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment') AND Properties.room_count > 1;",
        "prompt": "### Complete sqlite SQL query only and with no explanation \n ### Sqlite SQL tables, with their properties: \n# \n# Ref_Feature_Types(feature_type_code,feature_type_name)\n;# Ref_Property_Types(property_type_code,property_type_description)\n;# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)\n;# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)\n;# Other_Property_Features(property_id,feature_id,property_feature_description)\n.# \n ### What are the names of properties that are either houses or apartments with more than 1 room? \n SELECT"
    }
]